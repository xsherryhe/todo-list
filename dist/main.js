(()=>{var t={798:function(t,e,n){t=n.nmd(t),function(n,o){"use strict";var i={};n.PubSub?(i=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=i,function(t){var e={},n=-1;function o(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function i(t,e,n){t(e,n)}function r(t,n,r,c){var s,u=e[n],d=c?i:o;if(Object.prototype.hasOwnProperty.call(e,n))for(s in u)Object.prototype.hasOwnProperty.call(u,s)&&d(u[s],t,r)}function c(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,o){var i=function(t,e,n){return function(){var o=String(t),i=o.lastIndexOf(".");for(r(t,t,e,n);-1!==i;)i=(o=o.substr(0,i)).lastIndexOf("."),r(t,o,e,n);r(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,o);return!!function(t){for(var e=String(t),n=c(e)||c("*"),o=e.lastIndexOf(".");!n&&-1!==o;)o=(e=e.substr(0,o)).lastIndexOf("."),n=c(e);return n}(t)&&(!0===n?i():setTimeout(i,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,o){if("function"!=typeof o)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=o,i},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var o=t.subscribe(e,(function(){t.unsubscribe(o),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,o,i=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(o in e[n])i++;break}return i},t.getSubscriptions=function(t){var n,o=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&o.push(n);return o},t.unsubscribe=function(n){var o,i,r,c="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!c&&"string"==typeof n,u="function"==typeof n,d=!1;if(!c){for(o in e)if(Object.prototype.hasOwnProperty.call(e,o)){if(i=e[o],s&&i[n]){delete i[n],d=n;break}if(u)for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&i[r]===n&&(delete i[r],d=!0)}return d}t.clearSubscriptions(n)}}(i)),void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i}("object"==typeof window&&window||this)}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,loaded:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var o={};(()=>{"use strict";n.d(o,{O:()=>$});var t={};n.r(t),n.d(t,{O:()=>$});var e=n(798),i=n.n(e);const r="initialize",c="dataInitialized",s="back",u=t=>`new.${t}`,d=t=>`create.${t}`,a=t=>`show.${t}`,l=t=>`destroy.${t}`,p="updated",b=t=>`updated.${t}`,f=t=>`updated.${t}.list`,m="rendered.page",y=t=>`rendered.index.${t}`;function h(){}function O(t){}function j(){!function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("add-todo"),n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("add-project"),n.textContent="+",t.append(e,n),document.body.append(t)}(),$.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("button"),i=document.createElement("ul");n.classList.add("show"),n.dataset.id=t.id,n.textContent=t.title,o.classList.add("delete"),o.dataset.id=t.id,o.textContent="-",t.todoItems.slice(0,2).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,i.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(o),e.append(i),document.body.appendChild(e)})),i().publish(m,j),i().publish(y("project"),"project")}i().subscribe(r,function(t=h){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos"}],todoItemsList:[],checklistItemsList:[]};i().publish(c,e)}}(h)),i().subscribe(p,function(e=O){return function(){e(t.default)}}(O)),i().subscribe("index.project",j),i().subscribe(u("project"),(function(){const t=document.querySelector(".add-project"),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.classList.add("new-form"),n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.parentNode.append(e,n),t.remove(),i().publish("rendered.new.project","project")})),i().subscribe(u("todoItem"),(function(){console.log("newTodoItemView")})),i().subscribe(a("project"),(function(){console.log("showProjectView")}));let g=j;function v(){document.body.innerHTML="",g()}function w(t){i().subscribe(`update.${t.type}`,(function(e,n){if(n.type==t.type&&n.id==t.id){for(key in n)t[attribute]=n[attribute];i().publish(b(t.type))}}))}function x(t){const e=["incomplete","complete"];i().subscribe(`update.${t.type}.status`,(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],i().publish(b(t.type))}))}function S(t){const e=["low","medium","high"];i().subscribe(`update.${t.type}.priority`,(function(n,o){t.priority=e[Math.max(Math.min(e.indexOf(t.priority)+o,0),e.length-1)],i().publish(b(t.type))}))}function E(t,e){const n=e+"s";t[n]||=[],i().subscribe(f(e),(function(e,o){const i=o?.[t.type]?.[t.id];i&&(t[n]=newChecklistItems)}))}function I(t,e){t.belongs||={},t.belongs[e]=t[e+"Id"],delete t[e+"Id"]}function P(t,e=[]){let n=1;const o=t.itemType+"s";function r(e){const n=Object.entries(e.belongs||{}).reduce(((e,[n,i])=>Object.assign(e,{[n]:{[i]:t[o].filter((t=>t.belongs[n]==i))}})),{});i().publish(f(t.itemType),n)}t[o]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),i().subscribe(`updated.${t.itemType}.belong`,(function(e,n){const r=n.belongType,c=n.oldBelongId,s=n.newBelongId;t[o].find((t=>t.id==n.id)).belongs[r]=s,i().publish(f(t.itemType),{[r]:{[c]:t[o].filter((t=>t.belongs[r]==c)),[s]:t[o].filter((t=>t.belongs[r]==s))}})})),i().subscribe(d(t.itemType),(function(e,i){const c=t.itemFactory(Object.assign({id:n++},i));t[o].unshift(c),r(c)})),i().subscribe(l(t.itemType),(function(e,n){if(0==n.id)return;const i=t[o].find((t=>t.id==n.id));t[o].splice(t[o].indexOf(i),1),r(i)}))}function L(t){const e=Object.assign({type:"project"},t);return w(e),E(e,"todoItem"),e}function T(t){const e=Object.assign({type:"todoItem"},t);return[w,x,S].forEach((t=>t(e))),I(e,"project"),E(e,"checklistItem"),e}function k(t){const e=Object.assign({type:"checklistItem"},t);return[w,x].forEach((t=>t(e))),I(e,"todoItem"),e}i().subscribe(m,(function(t,e){g=e})),i().subscribe(p,v),i().subscribe(s,v),i().subscribe("rendered.index",(function(t,e){(t=>document.querySelector(`.add-${t}`))(e).addEventListener("click",(()=>i().publish(u(e)))),document.querySelectorAll(".show").forEach((t=>t.addEventListener("click",(t=>i().publish(a(e),{id:t.target.dataset.id}))))),document.querySelectorAll(".delete").forEach((t=>t.addEventListener("click",(t=>i().publish(l(e),{id:t.target.dataset.id})))))})),i().subscribe("rendered.new",(function(t,e){document.querySelector(".back").addEventListener("click",(()=>i().publish(s))),document.querySelector(".submit").addEventListener("click",(t=>{t.preventDefault(),i().publish(d(e),Object.fromEntries(new FormData(document.querySelector(".new-form"))))}))})),i().subscribe(y("project"),(function(){document.querySelector(".add-todo").addEventListener("click",(()=>i().publish(u("todoItem"))))}));const C={ProjectsList:function(t){const e={itemFactory:L,itemType:"project"};return P(e,t),e},TodoItemsList:function(t){const e={itemFactory:T,itemType:"todoItem"};return P(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:k,itemType:"checklistItem"};return P(e,t),e}};let $={};i().subscribe(c,(function(t,e){for(const t in e)$[t]=C[t[0].toUpperCase()+t.slice(1)](e[t]);i().publish(p)})),i().publish(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,