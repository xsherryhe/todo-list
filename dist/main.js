(()=>{var t={689:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3 {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  color: blue;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.destroy, button.back {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n/* Move to more appropriate location*/\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,6BAA6B;EAC7B,WAAW;EACX,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,aAAa;AACf;;AAEA,qCAAqC;AACrC;EACE,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:["html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3 {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  color: blue;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.destroy, button.back {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n/* Move to more appropriate location*/\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n"],sourceRoot:""}]);const s=i},713:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,'input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n',"",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB",sourcesContent:['input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n'],sourceRoot:""}]);const s=i},240:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,'.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n',"",{version:3,sources:["webpack://./src/styles/index-projects.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,aAAa;EACb,+CAA+C;EAC/C,oBAAoB;EACpB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb",sourcesContent:['.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n'],sourceRoot:""}]);const s=i},599:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,'.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  max-width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-todoItem.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;AACtB",sourcesContent:['.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  max-width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n}\n'],sourceRoot:""}]);const s=i},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},798:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var o={};n.PubSub?(o=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=o,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,a,i){var s,d=e[n],c=i?o:r;if(Object.prototype.hasOwnProperty.call(e,n))for(s in d)Object.prototype.hasOwnProperty.call(d,s)&&c(d[s],t,a)}function i(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,r){var o=function(t,e,n){return function(){var r=String(t),o=r.lastIndexOf(".");for(a(t,t,e,n);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),a(t,r,e,n);a(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=i(e)||i("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=i(e);return n}(t)&&(!0===n?o():setTimeout(o,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var o="uid_"+String(++n);return e[t][o]=r,o},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,o=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])o++;break}return o},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,o,a,i="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!i&&"string"==typeof n,d="function"==typeof n,c=!1;if(!i){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],s&&o[n]){delete o[n],c=n;break}if(d)for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===n&&(delete o[a],c=!0)}return c}t.clearSubscriptions(n)}}(o)),void 0!==t&&t.exports&&(e=t.exports=o),e.PubSub=o,t.exports=e=o}("object"==typeof window&&window||this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var d=t[s],c=r.base?d[0]+r.base:d[0],u=a[c]||0,l="".concat(c," ").concat(u);a[c]=u+1;var m=n(l),f={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)e[m].references++,e[m].updater(f);else{var p=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var d=r(t,o),c=0;c<a.length;c++){var u=n(a[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}a=d}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.nc=void 0;var r={};(()=>{"use strict";n.d(r,{O:()=>Fe,w:()=>t});var t={};n.r(t),n.d(t,{fn:()=>ve,oF:()=>Ae,yo:()=>be,tA:()=>ye,Sn:()=>we,Do:()=>ge});var e=n(379),o=n.n(e),a=n(795),i=n.n(a),s=n(569),d=n.n(s),c=n(565),u=n.n(c),l=n(216),m=n.n(l),f=n(589),p=n.n(f),h=n(689),b={};b.styleTagTransform=p(),b.setAttributes=u(),b.insert=d().bind(null,"head"),b.domAPI=i(),b.insertStyleElement=m(),o()(h.Z,b),h.Z&&h.Z.locals&&h.Z.locals;var y=n(713),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=d().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=m(),o()(y.Z,g),y.Z&&y.Z.locals&&y.Z.locals;var v=n(240),w={};w.styleTagTransform=p(),w.setAttributes=u(),w.insert=d().bind(null,"head"),w.domAPI=i(),w.insertStyleElement=m(),o()(v.Z,w),v.Z&&v.Z.locals&&v.Z.locals;var A=n(599),E={};E.styleTagTransform=p(),E.setAttributes=u(),E.insert=d().bind(null,"head"),E.domAPI=i(),E.insertStyleElement=m(),o()(A.Z,E),A.Z&&A.Z.locals&&A.Z.locals;var C=n(798),x=n.n(C);const T="initialize",S="dataInitialized",k="back",I=t=>`index.${t}`,j=t=>`new.${t}`,M=t=>`create.${t}`,B=(t,e,n)=>`create.collection.${n}.${t}.${e}`,O=t=>`show.${t}`,$=t=>`hide.${t}`,D=t=>`edit.attribute.${t}`,P=t=>`edit.belong.${t}`,L=t=>`destroy.${t}`,q=t=>`created.collection.${t}`,W="error.validation",U=(t,e)=>`update.${t}.${e}`,N=(t,e)=>`update.${t}.status.${e}`,Y=(t,e)=>`update.${t}.priority.${e}`,F=(t,e,n)=>`update.${t}.belong.${n}.${e}`,H="updated.data",z=(t,e)=>`updated.data.item.${t}.${e}`,R=t=>`updated.data.list.${t}`,Z=t=>`updated.${t}.belong`,Q=t=>`updated.${t}.collection`,G="rendered.page",X=t=>`rendered.view.new.${t}`,J=t=>`rendered.view.show.${t}`;function V(){const t=JSON.parse(localStorage.data),e={};for(const n in t)e[n]=JSON.parse(t[n]);return e}function _(t){const e={};for(const n in t)e[n]=JSON.stringify(t[n]);localStorage.data=JSON.stringify(e)}function K(){document.body.innerHTML="",function(){const t=document.createElement("div");t.classList.add("intro"),t.innerHTML='<div class="intro-heading">\n      <h1>Actionality</h1>\n      <h2>Your one-stop to-do app</h2>\n     </div>\n     <button class="new" data-type="todoItem" data-project-id="0">\n      Add a New To-Do\n     </button>',document.body.append(t)}(),function(){const t=document.createElement("div");t.classList.add("projects-heading"),t.innerHTML='<h2>My Projects</h2>\n     <button class="new symbol" data-type="project">+</button>',document.body.append(t)}(),Fe.projectsList.projects.forEach((t=>{const e=document.createElement("button"),n=document.createElement("ul");e.classList.add("project","show"),e.dataset.type=t.type,e.dataset.id=t.id,e.dataset.todoItemsFull="",e.innerHTML=`<h3>${t.title}</h3>`,t.id&&(e.innerHTML+=`<button class="destroy" \n               data-type="${t.type}" data-id="${t.id}">\n        Remove\n       </button>`),n.classList.add("project-preview"),Fe.todoItemsList.withIds(t.todoItems).slice(0,be).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,n.append(e)})),e.append(n),document.body.append(e)})),x().publish(G,K),x().publish("rendered.view.index.project")}function tt(t,e,n,r={}){const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("button"),s=we[t.type].includes(e),d=r.attributeText||t[e]||"None";o.classList.add("attribute"),a.textContent=r.elementText||"",s&&(a.textContent+=d),[o,i].forEach((n=>{n.dataset.type=t.type,n.dataset.id=t.id,n.dataset.attribute=e})),i.classList.add("edit-attribute"),i.dataset.attributeType=n,i.dataset.attributeValue=t[e]||"",i.textContent=s?"Edit":d,o.append(a,i),(r.parentElement||document.body).append(o)}function et(t=document,e=!0){t.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=e))}function nt(t){return t.split(" ").filter((t=>t)).map(Number)}function rt(t,e){const n=Fe.todoItemsList.withId(e.id).belongs.project,r=document.querySelector(".todo-items").dataset.todoItemsFull,o=t.includes("show")?r+` ${e.id}`:nt(r).filter((t=>t!==+e.id)).join(" ");x().publish(O("project"),{id:n,todoItemsFull:o})}x().subscribe(T,function(t=V){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete"}],checklistItemsList:[]};x().publish(S,e)}}(V)),x().subscribe("updated",function(t=_){return function(){const e={};for(const t in Fe)e[t]=Fe[t].toStorage();t(e)}}(_)),x().subscribe(I("project"),K),x().subscribe(j("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("form");e.dataset.type="project",e.innerHTML='<button class="back">Back</button>\n     <label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.replaceWith(e),x().publish(X("project"))})),x().subscribe(j("todoItem"),(function(t,e){et();const n=document.querySelector('.new[data-type="todoItem"]'),r=document.createElement("form");r.classList.add("new-form"),r.dataset.type="todoItem",r.innerHTML=`<button class="back">Back</button>\n     <div class="field">\n      <label for="title">New To-Do</label>\n      <input type="text" name="title" id="title">\n     </div>\n     <div class="field">\n      <label for="dueDate">Due Date</label>\n      <input type="datetime-local" name="dueDate" id="dueDate">\n     </div>\n     <div class="field">\n      <label for="description" class="textarea-label">Description</label>\n      <textarea name="description" id="description"></textarea>\n     </div>\n     <div class="field">\n      <label for="notes" class="textarea-label">Notes</label>\n      <textarea name="notes" id="notes"></textarea>\n     </div>\n     <div class="field">\n      <label for="belongs[project]">Project</label>\n      <select name="belongs[project]" id="belongs[project]">\n        ${Fe.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==e.projectId?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n      </select>\n     </div>\n     <div class="field">\n      <label for="priority">Priority</label>\n      <select name="priority" id="priority">\n        ${ye.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n      </select>\n     </div>\n     <input type="hidden" name="status" id="status" value="${ge[0]}">\n     <button class="new link" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n     <button class="submit">Submit</button>`,n.replaceWith(r),x().publish(X("todoItem"))})),x().subscribe(j("checklistItem"),(function(t,e){e.todoItem&&et();const n=(e.todoItem?`.todo-item[data-id="${e.todoItem}"] `:"")+'.new[data-type="checklistItem"]',r=document.querySelector(n),o=r.closest("form"),a=o.querySelector(".back"),i=o.querySelector(".submit"),s=document.createElement("div"),d=1+document.querySelectorAll(".checklist-item.field").length+(e.todoItem?Fe.todoItemsList.withId(e.todoItem).checklistItems.length:0),c=t=>`checklistItemsCollectionData[${d}][${t}]`;s.classList.add("field","checklist-item"),s.dataset.type="checklistItem",s.dataset.index=`${d}`,s.innerHTML=`<input type="hidden" name="${c("todoItemIndex")}" id="${c("todoItemIndex")}" value="${d}">\n     <label for="${c("title")}">${d}.</label>\n     <input type="text" name="${c("title")}" id="${c("title")}">\n     <input type="hidden" name="${c("status")}" id="${c("status")}" value="${ge[0]}">\n     <button class="hide" data-type="new-checklistItem" data-index="${d}" ${e.todoItem?`data-todo-item=${e.todoItem}`:""}>-</button>`,[a,i].forEach((t=>t?.classList?.remove("hidden"))),r.insertAdjacentElement("beforebegin",s),et(o,!1),x().publish(e.todoItem?("todoItem","rendered.view.collection.new.todoItem"):X("checklistItem"))})),x().subscribe($("new-checklistItem"),(function(t,e){const n=e.todoItem?`.todo-item[data-id="${e.todoItem}"] form[data-collection-type="checklistItem"]`:'form[data-type="todoItem"]',r=document.querySelector(n);r.querySelector(`.checklist-item.field[data-index="${e.index}"]`).remove();const o=r.querySelectorAll(".checklist-item.field");if(e.todoItem&&0==o.length){et(document,!1);[r.querySelector(".back"),r.querySelector(".submit")].forEach((t=>t?.classList?.add("hidden")))}const a=1+(e.todoItem?Fe.todoItemsList.withId(e.todoItem).checklistItems.length:0);o.forEach(((t,e)=>{const n=e+a,r=t.querySelectorAll("input"),o=t.querySelector('input[name*="todoItemIndex"]'),i=t.querySelector('label[for*="title"]'),s=t.querySelector(".hide");r.forEach((t=>{["name","id"].forEach((e=>t[e]=t[e].replace(/\d+/,n)))})),t.dataset.index=n,o.value=n,i.textContent=`${n}.`,s.dataset.index=n}))})),x().subscribe(O("project"),(function t(e,n){document.body.innerHTML="";const r=Fe.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),r=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",tt(t,"title","text",{parentElement:n}),r.classList.add("new"),r.dataset.type="todoItem",r.dataset.projectId=t.id,r.textContent="+",n.append(r),document.body.append(e,n)})(r),function(t,e){const n=nt(e),r=document.createElement("div");r.classList.add("todo-items"),r.dataset.todoItemsFull=e,Fe.todoItemsList.withIds(t.todoItems).forEach((t=>x().publish(O("todoItem"),{id:t.id,full:n.includes(t.id),parentElement:r}))),document.body.append(r)}(r,n.todoItemsFull),x().publish(G,t.bind(null,e,n)),x().publish(J("project"))})),x().subscribe(O("todoItemFull"),rt),x().subscribe($("todoItemFull"),rt);var ot={};function at(){return ot}function it(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function st(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function dt(t){return dt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dt(t)}function ct(t){st(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===dt(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function ut(t){st(1,arguments);var e=ct(t);return e.setHours(0,0,0,0),e}var lt=864e5;function mt(t,e){st(2,arguments);var n=ut(t),r=ut(e),o=n.getTime()-it(n),a=r.getTime()-it(r);return Math.round((o-a)/lt)}function ft(t){return ft="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ft(t)}function pt(t){return st(1,arguments),t instanceof Date||"object"===ft(t)&&"[object Date]"===Object.prototype.toString.call(t)}function ht(t){if(st(1,arguments),!pt(t)&&"number"!=typeof t)return!1;var e=ct(t);return!isNaN(Number(e))}function bt(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function yt(t,e){st(2,arguments);var n=ct(t).getTime(),r=bt(e);return new Date(n+r)}function gt(t,e){st(2,arguments);var n=bt(e);return yt(t,-n)}var vt=864e5;function wt(t){st(1,arguments);var e=1,n=ct(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function At(t){st(1,arguments);var e=ct(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=wt(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=wt(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function Et(t){st(1,arguments);var e=At(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=wt(n);return r}var Ct=6048e5;function xt(t,e){var n,r,o,a,i,s,d,c;st(1,arguments);var u=at(),l=bt(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=ct(t),f=m.getUTCDay(),p=(f<l?7:0)+f-l;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function Tt(t,e){var n,r,o,a,i,s,d,c;st(1,arguments);var u=ct(t),l=u.getUTCFullYear(),m=at(),f=bt(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==r?r:null===(d=m.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(l+1,0,f),p.setUTCHours(0,0,0,0);var h=xt(p,e),b=new Date(0);b.setUTCFullYear(l,0,f),b.setUTCHours(0,0,0,0);var y=xt(b,e);return u.getTime()>=h.getTime()?l+1:u.getTime()>=y.getTime()?l:l-1}function St(t,e){var n,r,o,a,i,s,d,c;st(1,arguments);var u=at(),l=bt(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=Tt(t,e),f=new Date(0);f.setUTCFullYear(m,0,l),f.setUTCHours(0,0,0,0);var p=xt(f,e);return p}var kt=6048e5;function It(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const jt=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return It("yy"===e?r%100:r,e.length)},Mt=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):It(n+1,2)},Bt=function(t,e){return It(t.getUTCDate(),e.length)},Ot=function(t,e){return It(t.getUTCHours()%12||12,e.length)},$t=function(t,e){return It(t.getUTCHours(),e.length)},Dt=function(t,e){return It(t.getUTCMinutes(),e.length)},Pt=function(t,e){return It(t.getUTCSeconds(),e.length)},Lt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return It(Math.floor(r*Math.pow(10,n-3)),e.length)};var qt={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return jt(t,e)},Y:function(t,e,n,r){var o=Tt(t,r),a=o>0?o:1-o;return"YY"===e?It(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):It(a,e.length)},R:function(t,e){return It(At(t),e.length)},u:function(t,e){return It(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return It(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return It(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Mt(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return It(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){st(1,arguments);var n=ct(t),r=xt(n,e).getTime()-St(n,e).getTime();return Math.round(r/kt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):It(o,e.length)},I:function(t,e,n){var r=function(t){st(1,arguments);var e=ct(t),n=wt(e).getTime()-Et(e).getTime();return Math.round(n/Ct)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):It(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Bt(t,e)},D:function(t,e,n){var r=function(t){st(1,arguments);var e=ct(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/vt)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):It(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return It(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return It(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return It(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Ot(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):$t(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):It(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):It(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Dt(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Pt(t,e)},S:function(t,e){return Lt(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Ut(o);case"XXXX":case"XX":return Nt(o);default:return Nt(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Ut(o);case"xxxx":case"xx":return Nt(o);default:return Nt(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Wt(o,":");default:return"GMT"+Nt(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Wt(o,":");default:return"GMT"+Nt(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return It(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return It((r._originalDate||t).getTime(),e.length)}};function Wt(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+It(a,2)}function Ut(t,e){return t%60==0?(t>0?"-":"+")+It(Math.abs(t)/60,2):Nt(t,e)}function Nt(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+It(Math.floor(o/60),2)+n+It(o%60,2)}const Yt=qt;var Ft=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Ht=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const zt={p:Ht,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return Ft(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",Ft(o,e)).replace("{{time}}",Ht(a,e))}};var Rt=["D","DD"],Zt=["YY","YYYY"];function Qt(t){return-1!==Rt.indexOf(t)}function Gt(t){return-1!==Zt.indexOf(t)}function Xt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Jt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Vt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const _t={date:Vt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Vt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Vt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Kt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function te(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const ee={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:te({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:te({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:te({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:te({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:te({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ne(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?oe(d,(function(t){return t.test(s)})):re(d,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var u=e.slice(s.length);return{value:i,rest:u}}}function re(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function oe(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var ae,ie={ordinalNumber:(ae={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(ae.matchPattern);if(!n)return null;var r=n[0],o=t.match(ae.parsePattern);if(!o)return null;var a=ae.valueCallback?ae.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(r.length);return{value:a,rest:i}}),era:ne({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ne({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:ne({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ne({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ne({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const se={code:"en-US",formatDistance:function(t,e,n){var r,o=Jt[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:_t,formatRelative:function(t,e,n,r){return Kt[t]},localize:ee,match:ie,options:{weekStartsOn:0,firstWeekContainsDate:1}};var de=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ce=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ue=/^'([^]*?)'?$/,le=/''/g,me=/[a-zA-Z]/;function fe(t,e,n){var r,o,a,i,s,d,c,u,l,m,f,p,h,b,y,g,v,w;st(2,arguments);var A=String(e),E=at(),C=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:E.locale)&&void 0!==r?r:se,x=bt(null!==(a=null!==(i=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==i?i:null===(l=E.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=bt(null!==(f=null!==(p=null!==(h=null!==(b=null==n?void 0:n.weekStartsOn)&&void 0!==b?b:null==n||null===(y=n.locale)||void 0===y||null===(g=y.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==h?h:E.weekStartsOn)&&void 0!==p?p:null===(v=E.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!C.localize)throw new RangeError("locale must contain localize property");if(!C.formatLong)throw new RangeError("locale must contain formatLong property");var S=ct(t);if(!ht(S))throw new RangeError("Invalid time value");var k=it(S),I=gt(S,k),j={firstWeekContainsDate:x,weekStartsOn:T,locale:C,_originalDate:S},M=A.match(ce).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,zt[e])(t,C.formatLong):t})).join("").match(de).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return pe(r);var a=Yt[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!Gt(r)||Xt(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!Qt(r)||Xt(r,e,String(t)),a(I,r,C.localize,j);if(o.match(me))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return M}function pe(t){var e=t.match(ue);return e?e[1].replace(le,"'"):t}function he(t,e,n){var r,o,a,i,s,d,c,u,l,m;st(2,arguments);var f=ct(t),p=ct(e),h=at(),b=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:h.locale)&&void 0!==r?r:se,y=bt(null!==(a=null!==(i=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:h.weekStartsOn)&&void 0!==i?i:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!b.localize)throw new RangeError("locale must contain localize property");if(!b.formatLong)throw new RangeError("locale must contain formatLong property");if(!b.formatRelative)throw new RangeError("locale must contain formatRelative property");var g,v=mt(f,p);if(isNaN(v))throw new RangeError("Invalid time value");g=v<-6?"other":v<-1?"lastWeek":v<0?"yesterday":v<1?"today":v<2?"tomorrow":v<7?"nextWeek":"other";var w=gt(f,it(f)),A=gt(p,it(p)),E=b.formatRelative(g,w,A,{locale:b,weekStartsOn:y});return fe(f,E,{locale:b,weekStartsOn:y})}x().subscribe(O("todoItem"),(function(t,e){const n=Fe.todoItemsList.withId(e.id);(function(t,e){const n=document.querySelector(`.todo-item[data-id="${t.id}"`),r=document.createElement("div"),o=document.createElement("button"),a=document.createElement("button"),i=document.createElement("button"),s=document.createElement("button");n?.remove(),r.classList.add(t.priority,t.status,"todo-item"),r.dataset.id=t.id,tt(t,"title","text",{parentElement:r}),o.classList.add("update-status"),o.dataset.type=t.type,o.dataset.id=t.id,o.textContent=ge.indexOf(t.status)?"✓":"",r.append(o),tt(t,"dueDate","datetime-local",{parentElement:r,elementText:"Due: ",attributeText:t.dueDate?he(new Date(t.dueDate),new Date):"None"}),[a,i].forEach((e=>{e.dataset.type=t.type+"Full",e.dataset.id=t.id})),a.classList.add("show"),a.textContent="Expand",i.classList.add("hide","hidden"),i.textContent="Shrink",s.dataset.type=t.type,s.dataset.id=t.id,s.classList.add("destroy"),s.textContent="-",r.append(a,i,s),(e||document.body).append(r)})(n,e.parentElement),e.full&&function(t,e){const n=e.querySelector(`.todo-item[data-id="${t.id}"]`),r=n.querySelector(`.show[data-type="${t.type+"Full"}"]`),o=n.querySelector(`.hide[data-type="${t.type+"Full"}"]`),a=document.createElement("button"),i=document.createElement("div"),s=document.createElement("button"),d=document.createElement("button");tt(t,"description","textarea",{parentElement:n,elementText:"Description: "}),tt(t,"notes","textarea",{parentElement:n,elementText:"Notes: "}),[a,s,d].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),a.classList.add("edit-belong"),a.dataset.belongType="project",a.dataset.belongId=t.belongs.project,a.textContent="Change Project",i.textContent=`Priority: ${t.priority||"None"}`,[s,d].forEach((t=>t.classList.add("update-priority"))),s.dataset.direction=-1,s.textContent="v",d.dataset.direction=1,d.textContent="^",i.append(s,d),r.classList.add("hidden"),o.classList.remove("hidden"),n.append(a,i),function(t,e){const n=document.createElement("form");n.dataset.type=t.type,n.dataset.id=t.id,n.dataset.collectionType="checklistItem",n.innerHTML=`<button class="back hidden">←</button>\n     <button class="new" data-type="checklistItem" data-todo-item="${t.id}">\n      Add a Checklist Item\n     </button>\n     <button class="submit hidden">✓</button>`;const r=Fe.checklistItemsList.withIds(t.checklistItems).sort(((t,e)=>+t.todoItemIndex-+e.todoItemIndex));if(!r.length)return e.append(n);const o=document.createElement("h3"),a=document.createElement("ol");o.textContent="Checklist",r.forEach((t=>{const e=document.createElement("li"),n=document.createElement("button"),r=document.createElement("button");e.classList.add(t.status,"checklist-item"),e.dataset.id=t.id,tt(t,"title","text",{parentElement:e}),[n,r].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("update-status"),n.textContent=ge.indexOf(t.status)?"✓":"",r.classList.add("destroy"),r.textContent="-",e.append(n,r),a.append(e)})),e.append(o,a,n)}(t,n)}(n,e.parentElement),x().publish(J("todoItem"))})),x().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:r,attributeType:o,attributeValue:a}){et();const i=`.attribute[data-type="${e}"][data-id="${n}"][data-attribute="${r}"]`,s=document.querySelector(i),d=document.createElement("form");d.classList.add("edit-form"),d.dataset.type=e,d.dataset.id=n,d.dataset.attribute=r;const c="textarea"==o;d.innerHTML=`${ve.includes(o)?"":'<button class="back">←</button>'}\n     <${c?"textarea":"input"} \n      type="${o}" name="${r}" id="${r}" \n      value="${a}">${c?`${a}</textarea>`:""}\n     <button class="submit">✓</button>`,s.replaceWith(d),x().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:r})})),x().subscribe("edit.belong",(function(t,{type:e,id:n,belongType:r,belongId:o}){et();const a=`.edit-belong[data-belong-type="${r}"][data-type="${e}"][data-id="${n}"]`,i=document.querySelector(a),s=document.createElement("form");s.classList.add("edit-form"),s.dataset.type=e,s.dataset.id=n,s.dataset.belongType=r,s.innerHTML=`<button class="back">←</button>\n     <label for="belongId">Project</label>\n     <select name="belongId" id="belongId">\n      ${Fe[r+"sList"][r+"s"].map((t=>`<option value="${t.id}" ${t.id==o?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n     </select>\n     <button class="submit">Change</button>`,i.replaceWith(s),x().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:n,belongType:r})}));const be=2,ye=["Low","Medium","High"],ge=["Incomplete","Complete"],ve=["text"],we={project:[],todoItem:["description","notes"],checklistItem:[]},Ae={title:"name",todoItem:"to-do item",checklistItem:"checklist item"};x().subscribe(W,(function(t,e){const n=`[data-type="${e.type}"]${e.id?`[data-id="${e.id}"]`:""}${e.index?`[data-index="${e.index}"]`:""}`,r=document.querySelector(`form${n},.field${n}`);if(r){r.querySelectorAll(".error").forEach((t=>t.remove()));for(const t of e.errors){const e=r.querySelector(`input[name*="${t.attribute}"],textarea[name*="${t.attribute}"]`);if(!e)continue;const n=document.createElement("p"),a=(o=Ae[t.objType]||t.objType)[0].toUpperCase()+o.slice(1).toLowerCase(),i=Ae[t.objAttribute]||t.objAttribute;n.classList.add("error"),n.textContent=`${a} ${i} ${t.message}`,e.insertAdjacentElement("afterend",n)}var o}}));let Ee=K;function Ce(){document.body.innerHTML="",Ee()}function xe(t,e,n={}){t.forEach((t=>{(t=Se(t)).addEventListener("click",(t=>{t.preventDefault();const r=[t.target.dataset.type].concat((n.extraArgs||[]).map((e=>t.target.dataset[e])));x().publish("function"==typeof e?e(...r):e,t.target.dataset)}))}))}function Te(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=Se(n)).addEventListener("click",(n=>{n.preventDefault();const r=n.target.closest("form"),o=e.map((t=>r.dataset[t]));x().publish(t(...o),Object.fromEntries(new FormData(r)))}))}))}function Se(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function ke(t){t.tempKeys=[...t.tempKeys||[],"tempKeys"],t.toStorage=function(){const e={};for(const n in t)"function"==typeof t[n]||t.tempKeys.includes(n)||(e[n]=t[n]);return e}}function Ie(t){function e(e,n,r=[]){return t.validations?.[e]?.forEach((o=>{o.fn(n)||r.push({objAttribute:e,objType:t.type,attribute:e,message:o.message})})),r}function n(t,e=[]){return t.forEach((t=>{t.obj.valid()||e.push(...t.obj.errors.map((e=>Object.assign({},e,{attribute:t.attrWrapper?t.attrWrapper(e.attribute):e.attribute}))))})),e}t.validations||={},t.associatedValidations||=[],t.errors||=[],t.tempKeys=[...t.tempKeys||[],"validations","associatedValidations","errors"],t.validate=function(r=t){t.errors=[];for(const n in r)t.errors.push(...e(n,t[n]));r.associatedValidations&&t.errors.push(...n(r.associatedValidations))},t.validateAssociated=function(e){t.errors=[],t.errors.push(...n(e))},t.valid=function(){return t.validate(),0==t.errors.length}}function je(t,e){e.forEach((e=>{t.validations[e]||=[],t.validations[e].push({fn:t=>t,message:"cannot be blank"})}))}function Me(t){x().subscribe(U(t.type,t.id),(function(e,n){if(t.validate(n),t.errors.length)return x().publish(W,{type:t.type,id:t.id,errors:t.errors});for(const e in n)t[e]=n[e];x().publish(z(t.type,t.id))}))}function Be(t){const e=ge;x().subscribe(N(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],x().publish(z(t.type,t.id))}))}function Oe(t){const e=ye;x().subscribe(Y(t.type,t.id),(function(n,r){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +r.direction,0),e.length-1)],x().publish(z(t.type,t.id))}))}function $e(t,e,n){const r=e+"s";function o(r,o=!1){const a=Object.values(r[e+"sCollectionData"]||{}).map((e=>n(Object.assign(e,{belongs:{[t.type]:t.id}})))),i=a.map((n=>({obj:n,attrWrapper:r=>`${e+"sCollectionData"}[${n[t.type+"Index"]}][${r}]`})));if(o){if(!t.valid())return;t.associatedValidations=i}if(t.validateAssociated(i),t.errors.length)return x().publish(W,{type:t.type,errors:t.errors});x().publish(q(e),{collectionItems:a})}t[r]||=[],x().subscribe(Q(e),(function(e,n){const o=n?.[t.type]?.[t.id];if(o){t[r]=o.map((t=>t.id));const e=t.type+"Index";o.sort(((t,n)=>+t[e]-+n[e])).forEach(((t,n)=>t[e]=n+1))}x().publish(z(t.type,t.id))})),o(t,!0),delete t[e+"sCollectionData"],x().subscribe(B(t.type,t.id,e),(function(t,e){qe(e),o(e)}))}function De(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function Pe(t,e){x().subscribe(F(t.type,t.id,e),(function(n,r){const o=t.belongs[e],a=r.belongId;t.belongs[e]=a,x().publish(Z(t.type),{id:t.id,belongType:e,oldBelongId:o,newBelongId:a}),x().publish(z(t.type,t.id))}))}function Le(t,e=[]){let n=1;const r=t.itemType+"s";function o(e){const n={};e.forEach((e=>{Object.entries(e.belongs||{}).forEach((([e,o])=>{n[e]||={},n[e][o]||=t[r].filter((t=>t.belongs[e]==o))}))})),x().publish(Q(t.itemType),n)}t[r]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[r].find((t=>e==t.id))},t.withIds=function(e){return t[r].filter((t=>e.includes(t.id)))},t.toStorage=function(){return t[r].map((t=>t.toStorage()))},x().subscribe(Z(t.itemType),(function(e,n){const o=n.belongType,a=n.oldBelongId,i=n.newBelongId;t[r].find((t=>t.id==n.id)).belongs[o]=i,x().publish(Q(t.itemType),{[o]:{[a]:t[r].filter((t=>t.belongs[o]==a)),[i]:t[r].filter((t=>t.belongs[o]==i))}})})),x().subscribe(M(t.itemType),(function(e,a){qe(a);const i=t.itemFactory(Object.assign({id:n++},a));if(!i.valid())return x().publish(W,{type:t.itemType,errors:i.errors});t[r].unshift(i),o([i]),x().publish(R(t.itemType))})),x().subscribe(q(t.itemType),(function(e,a){o(a.collectionItems.map((e=>{const o=Object.assign({id:n++},e);return t[r].unshift(o),o}))),x().publish(R(t.itemType))})),x().subscribe(L(t.itemType),(function(e,n){if(0==n.id)return;const a=t[r].find((t=>t.id==n.id));t[r].splice(t[r].indexOf(a),1),o([a]),x().publish(R(t.itemType))}))}function qe(t){const e=/(.+)\[(.+)\]/;let n;for(;(n=Object.keys(t).filter((t=>e.test(t)))).length>0;)n.forEach((n=>{const[r,o]=n.match(e).slice(1);t[r]||={},t[r][o]=t[n],delete t[n]}))}function We(t){const e=Object.assign({type:"project"},t);return[ke,Ie,Me].forEach((t=>t(e))),je(e,["title"]),$e(e,"todoItem"),e}function Ue(t){const e=Object.assign({type:"checklistItem"},t);return[ke,Ie,Me,Be].forEach((t=>t(e))),je(e,["title"]),De(e,"todoItem"),e}function Ne(t){const e=Object.assign({type:"todoItem"},t);return[ke,Ie,Me,Be,Oe].forEach((t=>t(e))),[De,Pe].forEach((t=>t(e,"project"))),je(e,["title"]),$e(e,"checklistItem",Ue),e}x().subscribe(G,(function(t,e){Ee=e})),x().subscribe(H,Ce),x().subscribe(k,Ce),x().subscribe("rendered.view",(function(){xe(document.querySelectorAll(".index"),I),xe(document.querySelectorAll(".new"),j),xe(document.querySelectorAll(".show"),O),xe(document.querySelectorAll(".hide"),$),xe(document.querySelectorAll(".edit-attribute"),D),xe(document.querySelectorAll(".edit-belong"),P),xe(document.querySelectorAll(".update-status"),N,{extraArgs:["id"]}),xe(document.querySelectorAll(".update-priority"),Y,{extraArgs:["id"]}),xe(document.querySelectorAll(".destroy"),L),xe(document.querySelectorAll(".back"),k)})),x().subscribe("rendered.view.new",(function(){Te(M,["type"])})),x().subscribe("rendered.view.collection.new",(function(){Te(B,["type","id","collectionType"])})),x().subscribe("rendered.view.edit.attribute",(function(t,e){document.querySelectorAll('input:not([type="checkbox"],[type="radio"]),textarea').forEach((t=>{const n=(t=Se(t)).closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),t.selectionStart&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),t.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==t&&x().publish(U(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))})),ve.includes(t.type)&&t.addEventListener("focusout",(()=>x().publish(U(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))))})),Te(U,["type","id"])})),x().subscribe("rendered.view.edit.belong",(function(){Te(F,["type","id","belongType"])}));const Ye={ProjectsList:function(t){const e={itemFactory:We,itemType:"project"};return Le(e,t),e},TodoItemsList:function(t){const e={itemFactory:Ne,itemType:"todoItem"};return Le(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:Ue,itemType:"checklistItem"};return Le(e,t),e}};let Fe={};x().subscribe(S,(function(t,e){for(const t in e)Fe[t]=Ye[t[0].toUpperCase()+t.slice(1)](e[t]);x().publish(H)})),x().publish(T)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,