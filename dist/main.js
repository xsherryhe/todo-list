(()=>{var t={798:function(t,e,n){t=n.nmd(t),function(n,o){"use strict";var i={};n.PubSub?(i=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=i,function(t){var e={},n=-1;function o(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function i(t,e,n){t(e,n)}function r(t,n,r,c){var s,d=e[n],u=c?i:o;if(Object.prototype.hasOwnProperty.call(e,n))for(s in d)Object.prototype.hasOwnProperty.call(d,s)&&u(d[s],t,r)}function c(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,o){var i=function(t,e,n){return function(){var o=String(t),i=o.lastIndexOf(".");for(r(t,t,e,n);-1!==i;)i=(o=o.substr(0,i)).lastIndexOf("."),r(t,o,e,n);r(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,o);return!!function(t){for(var e=String(t),n=c(e)||c("*"),o=e.lastIndexOf(".");!n&&-1!==o;)o=(e=e.substr(0,o)).lastIndexOf("."),n=c(e);return n}(t)&&(!0===n?i():setTimeout(i,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,o){if("function"!=typeof o)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=o,i},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var o=t.subscribe(e,(function(){t.unsubscribe(o),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,o,i=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(o in e[n])i++;break}return i},t.getSubscriptions=function(t){var n,o=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&o.push(n);return o},t.unsubscribe=function(n){var o,i,r,c="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!c&&"string"==typeof n,d="function"==typeof n,u=!1;if(!c){for(o in e)if(Object.prototype.hasOwnProperty.call(e,o)){if(i=e[o],s&&i[n]){delete i[n],u=n;break}if(d)for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&i[r]===n&&(delete i[r],u=!0)}return u}t.clearSubscriptions(n)}}(i)),void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i}("object"==typeof window&&window||this)}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,loaded:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var o={};(()=>{"use strict";n.d(o,{O:()=>B});var t={};n.r(t),n.d(t,{O:()=>B});var e=n(798),i=n.n(e);const r="initialize",c="dataInitialized",s="back",d=t=>`index.${t}`,u=t=>`new.${t}`,a=t=>`create.${t}`,l=t=>`show.${t}`,p=t=>`edit.attribute.${t}`,b=t=>`destroy.${t}`,f=(t,e)=>`update.${t}.${e}`,m="updated",y=(t,e)=>`updated.${t}.${e}`,h=t=>`updated.${t}.belong`,w=t=>`updated.${t}.list`,O="rendered.page";function g(){}function j(t){}function x(){document.body.innerHTML="",function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("new"),n.dataset.type="todoItem",n.dataset.projectId=0,n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("new"),n.dataset.type="project",n.textContent="+",t.append(e,n),document.body.append(t)}(),B.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("button"),i=document.createElement("ul");[n,o].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("show"),n.textContent=t.title,o.classList.add("destroy"),o.textContent="-",B.todoItemsList.withIds(t.todoItemIds).slice(0,2).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,i.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(o),e.append(i),document.body.appendChild(e)})),i().publish(O,x),i().publish("rendered.view.index.project")}i().subscribe(r,function(t=g){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItemIds:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"low",status:"incomplete",dueDate:Date()}],checklistItemsList:[]};i().publish(c,e)}}(g)),i().subscribe(m,function(e=j){return function(){e(t.default)}}(j)),i().subscribe(d("project"),x),i().subscribe(u("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.classList.add("new-form"),n.dataset.type="project",n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.replaceWith(e,n),i().publish(("project","rendered.view.new.project"))})),i().subscribe(u("todoItem"),(function(){console.log("newTodoItemView")})),i().subscribe(l("project"),(function t(e,n){document.body.innerHTML="";const o=B.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),o=document.createElement("button"),i=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",o.classList.add("edit-attribute"),o.dataset.type=t.type,o.dataset.id=t.id,o.dataset.attribute="title",o.dataset.attributeType="text",o.textContent=t.title,i.classList.add("new"),i.dataset.type="todoItem",i.dataset.projectId=t.id,i.textContent="+",n.append(o,i),document.body.append(e,n)})(o),function(t){B.todoItemsList.withIds(t.todoItemIds).forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("div"),i=document.createElement("button"),r=document.createElement("button"),c=document.createElement("button");e.classList.add(t.priority),o.textContent="Due Date: ",[r,n,i,c].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),r.classList.add("show"),r.textContent="Expand",[n,i].forEach((t=>t.classList.add("edit-attribute"))),n.dataset.attribute="title",n.dataset.attributeType="text",n.textContent=t.title,i.dataset.attribute="dueDate",i.dataset.attributeType="date",i.textContent=t.dueDate,c.classList.add("destroy"),c.textContent="-",o.append(i),e.append(n,o,r,c),document.body.append(e)}))}(o),i().publish(O,t.bind(null,e,n)),i().publish(("project","rendered.view.show.project"))})),i().subscribe(l("todoItem"),(function(t,e){console.log("showTodoItemView")})),i().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:o,attributeType:r,textContent:c}){document.querySelectorAll("button").forEach((t=>t.classList.add("unclickable")));const s=`.edit-attribute[data-type="${e}"][data-id="${n}"][data-attribute="${o}"]`,d=document.querySelector(s),u=document.createElement("button"),a=document.createElement("form");u.classList.add("back"),u.textContent="←",a.classList.add("edit-form"),a.dataset.type=e,a.dataset.id=n,a.innerHTML=`<input type="${r}" name="${o}" id="${o}" value="${c}">\n     <button class="submit">✓</button>`,d.replaceWith(u,a),i().publish((t=>`rendered.view.edit.attribute.${t}`)(e))}));let E=x;function v(){document.body.innerHTML="",E()}function I(t,e,n=[]){t.forEach((t=>{const o=t.cloneNode(!0);t.replaceWith(o);const r=n.reduce(((e,n)=>Object.assign(e,{[n]:t[n]})),{});o.addEventListener("click",(t=>i().publish("function"==typeof e?e(t.target.dataset.type):e,Object.assign(t.target.dataset,r))))}))}function S(t,e){document.querySelectorAll(".submit").forEach((n=>{const o=n.cloneNode(!0);n.replaceWith(o),o.addEventListener("click",(n=>{n.preventDefault();const o=n.target.closest("form"),r=e.map((t=>o.dataset[t]));i().publish(t(...r),Object.fromEntries(new FormData(o)))}))}))}function L(t){i().subscribe(f(t.type,t.id),(function(e,n){for(const e in n)t[e]=n[e];i().publish(y(t.type,t.id))}))}function T(t){const e=["incomplete","complete"];i().subscribe(`update.${t.type}.status.${t.id}`,(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],i().publish(y(t.type,t.id))}))}function $(t){const e=["low","medium","high"];i().subscribe(`update.${t.type}.priority.${t.id}`,(function(n,o){t.priority=e[Math.max(Math.min(e.indexOf(t.priority)+o,0),e.length-1)],i().publish(y(t.type,t.id))}))}function C(t,e){const n=e+"Ids";t[n]||=[],i().subscribe(w(e),(function(e,o){const i=o?.[t.type]?.[t.id];i&&(t[n]=i)}))}function P(t,e){t.belongs||={[e]:0}}function k(t,e){i().subscribe(((t,e,n)=>`update.${t}.belong.${n}.${e}`)(t.type,t.id,e),(function(n,o){const r=t.belongs[e],c=o.belongId;t.belongs[e]=c,i().publish(h(t.type),{id:t.id,belongType:e,oldBelongId:r,newBelongId:c})}))}function A(t,e=[]){let n=1;const o=t.itemType+"s";function r(e){const n=Object.entries(e.belongs||{}).reduce(((e,[n,i])=>Object.assign(e,{[n]:{[i]:t[o].filter((t=>t.belongs[n]==i))}})),{});i().publish(w(t.itemType),n)}t[o]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[o].find((t=>e==t.id))},t.withIds=function(e){return t[o].filter((t=>e.includes(t.id)))},i().subscribe(h(t.itemType),(function(e,n){const r=n.belongType,c=n.oldBelongId,s=n.newBelongId;t[o].find((t=>t.id==n.id)).belongs[r]=s,i().publish(w(t.itemType),{[r]:{[c]:t[o].filter((t=>t.belongs[r]==c)).map((t=>t.id)),[s]:t[o].filter((t=>t.belongs[r]==s)).map((t=>t.id))}})})),i().subscribe(a(t.itemType),(function(e,i){const c=t.itemFactory(Object.assign({id:n++},i));t[o].unshift(c),r(c)})),i().subscribe(b(t.itemType),(function(e,n){if(0==n.id)return;const i=t[o].find((t=>t.id==n.id));t[o].splice(t[o].indexOf(i),1),r(i)}))}function D(t){const e=Object.assign({type:"project"},t);return L(e),C(e,"todoItem"),e}function M(t){const e=Object.assign({type:"todoItem"},t);return[L,T,$].forEach((t=>t(e))),[P,k].forEach((t=>t(e,"project"))),C(e,"checklistItem"),e}function q(t){const e=Object.assign({type:"checklistItem"},t);return[L,T].forEach((t=>t(e))),P(e,"todoItem"),e}i().subscribe(O,(function(t,e){E=e})),i().subscribe(m,v),i().subscribe(s,v),i().subscribe("rendered.view",(function(){I(document.querySelectorAll(".index"),d),I(document.querySelectorAll(".new"),u),I(document.querySelectorAll(".show"),l),I(document.querySelectorAll(".edit-attribute"),p,["textContent"]),I(document.querySelectorAll(".destroy"),b),I(document.querySelectorAll(".back"),s)})),i().subscribe("rendered.view.new",(function(){S(a,["type"])})),i().subscribe("rendered.view.edit",(function(){S(f,["type","id"])})),i().subscribe("rendered.view.edit.attribute",(function(){document.querySelectorAll("input").forEach((t=>{const e=t.cloneNode(!0);t.replaceWith(e),function(t){t.focus(),"text"==t.type&&(t.selectionStart=t.selectionEnd=t.value.length)}(e),e.addEventListener("keydown",(e=>{if("Enter"!=e.key||document.activeElement!=t)return;const n=e.target.closest("form");i().publish(f(n.type,n.id),Object.fromEntries(new FormData(n)))})),e.addEventListener("focusout",(()=>i().publish(s)))}))}));const F={ProjectsList:function(t){const e={itemFactory:D,itemType:"project"};return A(e,t),e},TodoItemsList:function(t){const e={itemFactory:M,itemType:"todoItem"};return A(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:q,itemType:"checklistItem"};return A(e,t),e}};let B={};i().subscribe(c,(function(t,e){for(const t in e)B[t]=F[t[0].toUpperCase()+t.slice(1)](e[t]);i().publish(m)})),i().publish(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBS3pILElBQUt2RCxPQUFPb0wsWUFBWSxJQUFJQyxTQUFTTCxJQUFPLElBR3BGcUQsRUFBYTNELGlCQUFpQixZQUFZLElBQU0sWUFBZTdGLElBQU0sR0FFekUsSUs3REEsTUFBTThKLEVBQXVCLENBQUVDLGFIRnhCLFNBQXNCaEMsR0FDM0IsTUFBTXBNLEVBQU0sQ0FBRTZNLFlBQWFTLEVBQVNoQixTQUFVLFdBRTlDLE9BREFILEVBQVNuTSxFQUFLb00sR0FDUHBNLENBQ1QsRUdGMkMsY0ZGcEMsU0FBdUJvTSxHQUM1QixNQUFNcE0sRUFBTSxDQUFFNk0sWUFBYVcsRUFBVWxCLFNBQVUsWUFFL0MsT0FEQUgsRUFBU25NLEVBQUtvTSxHQUNQcE0sQ0FDVCxFRUYwRCxtQkRIbkQsU0FBNEJvTSxHQUNqQyxNQUFNcE0sRUFBTSxDQUFFNk0sWUFBYWEsRUFBZXBCLFNBQVUsaUJBRXBELE9BREFILEVBQVNuTSxFQUFLb00sR0FDUHBNLENBQ1QsR0NDTyxJQUFJcU8sRUFBa0IsQ0FBQyxFQU05QixjQUFpQmpLLEdBQ2pCLFNBQXNCbUUsRUFBRzNKLEdBQ3ZCLElBQUksTUFBTXFCLEtBQU9yQixFQUNmeVAsRUFBZ0JwTyxHQUFPa08sRUFBcUJsTyxFQUFJLEdBQUdxTyxjQUFnQnJPLEVBQUlnSCxNQUFNLElBQUlySSxFQUFLcUIsSUFDeEYsWUFBZTZFLEVBQ2pCLElBUkUsWUFBZVgsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wdWJzdWItanMvc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvcHVic3ViLWV2ZW50LXR5cGVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3N0b3JhZ2UtcHJvdmlkZXJzL2xvY2FsLXN0b3JhZ2UtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvaW5kZXgtcHJvamVjdHMtdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3ZpZXdzL25ldy1wcm9qZWN0LXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvbmV3LXRvZG9JdGVtLXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3Mvc2hvdy1wcm9qZWN0LXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3Mvc2hvdy10b2RvSXRlbS12aWV3LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3ZpZXdzL2VkaXQtdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy92aWV3cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy9kb20tZXZlbnRzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL2NvbXBvc2l0aW9uLXVuaXRzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3Byb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3RvZG8taXRlbXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvY2hlY2tsaXN0LWl0ZW1zLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL2FwcGxpY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLDIwMTEsMjAxMiwyMDEzLDIwMTQgTW9yZ2FuIFJvZGVyaWNrIGh0dHA6Ly9yb2Rlcmljay5ka1xuICogTGljZW5zZTogTUlUIC0gaHR0cDovL21yZ25yZHJjay5taXQtbGljZW5zZS5vcmdcbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJvZGVyaWNrL1B1YlN1YkpTXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgUHViU3ViID0ge307XG5cbiAgICBpZiAocm9vdC5QdWJTdWIpIHtcbiAgICAgICAgUHViU3ViID0gcm9vdC5QdWJTdWI7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlB1YlN1YiBhbHJlYWR5IGxvYWRlZCwgdXNpbmcgZXhpc3RpbmcgdmVyc2lvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LlB1YlN1YiA9IFB1YlN1YjtcbiAgICAgICAgZmFjdG9yeShQdWJTdWIpO1xuICAgIH1cbiAgICAvLyBDb21tb25KUyBhbmQgTm9kZS5qcyBtb2R1bGUgc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpe1xuICAgICAgICBpZiAobW9kdWxlICE9PSB1bmRlZmluZWQgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFB1YlN1YjsgLy8gTm9kZS5qcyBzcGVjaWZpYyBgbW9kdWxlLmV4cG9ydHNgXG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0cy5QdWJTdWIgPSBQdWJTdWI7IC8vIENvbW1vbkpTIG1vZHVsZSAxLjEuMSBzcGVjXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFB1YlN1YjsgLy8gQ29tbW9uSlNcbiAgICB9XG4gICAgLy8gQU1EIHN1cHBvcnRcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCl7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIFB1YlN1YjsgfSk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cbiAgICB9XG5cbn0oKCB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgKSB8fCB0aGlzLCBmdW5jdGlvbiAoUHViU3ViKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgbWVzc2FnZXMgPSB7fSxcbiAgICAgICAgbGFzdFVpZCA9IC0xLFxuICAgICAgICBBTExfU1VCU0NSSUJJTkdfTVNHID0gJyonO1xuXG4gICAgZnVuY3Rpb24gaGFzS2V5cyhvYmope1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIG9iail7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgdGhyb3dzIHRoZSBwYXNzZWQgZXhjZXB0aW9uLCBmb3IgdXNlIGFzIGFyZ3VtZW50IGZvciBzZXRUaW1lb3V0XG4gICAgICogQGFsaWFzIHRocm93RXhjZXB0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsgT2JqZWN0IH0gZXggQW4gRXJyb3Igb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oIGV4ICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZVRocm93RXhjZXB0aW9uKCl7XG4gICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgICAgICB9IGNhdGNoKCBleCApe1xuICAgICAgICAgICAgc2V0VGltZW91dCggdGhyb3dFeGNlcHRpb24oIGV4ICksIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsaXZlck1lc3NhZ2UoIG9yaWdpbmFsTWVzc2FnZSwgbWF0Y2hlZE1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgdmFyIHN1YnNjcmliZXJzID0gbWVzc2FnZXNbbWF0Y2hlZE1lc3NhZ2VdLFxuICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIgPSBpbW1lZGlhdGVFeGNlcHRpb25zID8gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyA6IGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zLFxuICAgICAgICAgICAgcztcblxuICAgICAgICBpZiAoICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG1lc3NhZ2VzLCBtYXRjaGVkTWVzc2FnZSApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChzIGluIHN1YnNjcmliZXJzKXtcbiAgICAgICAgICAgIGlmICggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHN1YnNjcmliZXJzLCBzKSl7XG4gICAgICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIoIHN1YnNjcmliZXJzW3NdLCBvcmlnaW5hbE1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGl2ZXJOYW1lc3BhY2VkKCl7XG4gICAgICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICAgICAgLy8gZGVsaXZlciB0aGUgbWVzc2FnZSBhcyBpdCBpcyBub3dcbiAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB0cmltIHRoZSBoaWVyYXJjaHkgYW5kIGRlbGl2ZXIgbWVzc2FnZSB0byBlYWNoIGxldmVsXG4gICAgICAgICAgICB3aGlsZSggcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKCBtZXNzYWdlLCB0b3BpYywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBBTExfU1VCU0NSSUJJTkdfTVNHLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYXNEaXJlY3RTdWJzY3JpYmVyc0ZvciggbWVzc2FnZSApIHtcbiAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4oT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBtZXNzYWdlcywgdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpO1xuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKXtcbiAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICBmb3VuZCA9IGhhc0RpcmVjdFN1YnNjcmliZXJzRm9yKHRvcGljKSB8fCBoYXNEaXJlY3RTdWJzY3JpYmVyc0ZvcihBTExfU1VCU0NSSUJJTkdfTVNHKSxcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgIHdoaWxlICggIWZvdW5kICYmIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcbiAgICAgICAgICAgIGZvdW5kID0gaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IodG9waWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHN5bmMsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICB2YXIgZGVsaXZlciA9IGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKSxcbiAgICAgICAgICAgIGhhc1N1YnNjcmliZXJzID0gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICk7XG5cbiAgICAgICAgaWYgKCAhaGFzU3Vic2NyaWJlcnMgKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc3luYyA9PT0gdHJ1ZSApe1xuICAgICAgICAgICAgZGVsaXZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZGVsaXZlciwgMCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgbWVzc2FnZSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIGZhbHNlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2Ugc3luY2hyb25vdXNseSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hTeW5jXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaFN5bmMgPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgdHJ1ZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZS4gRXZlcnkgcmV0dXJuZWQgdG9rZW4gaXMgdW5pcXVlIGFuZCBzaG91bGQgYmUgc3RvcmVkIGlmIHlvdSBuZWVkIHRvIHVuc3Vic2NyaWJlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgaWYgKCB0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIC8vIG1lc3NhZ2UgaXMgbm90IHJlZ2lzdGVyZWQgeWV0XG4gICAgICAgIGlmICggIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIG1lc3NhZ2UgKSApe1xuICAgICAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvcmNpbmcgdG9rZW4gYXMgU3RyaW5nLCB0byBhbGxvdyBmb3IgZnV0dXJlIGV4cGFuc2lvbnMgd2l0aG91dCBicmVha2luZyB1c2FnZVxuICAgICAgICAvLyBhbmQgYWxsb3cgZm9yIGVhc3kgdXNlIGFzIGtleSBuYW1lcyBmb3IgdGhlICdtZXNzYWdlcycgb2JqZWN0XG4gICAgICAgIHZhciB0b2tlbiA9ICd1aWRfJyArIFN0cmluZygrK2xhc3RVaWQpO1xuICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXVt0b2tlbl0gPSBmdW5jO1xuXG4gICAgICAgIC8vIHJldHVybiB0b2tlbiBmb3IgdW5zdWJzY3JpYmluZ1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcblxuICAgIFB1YlN1Yi5zdWJzY3JpYmVBbGwgPSBmdW5jdGlvbiggZnVuYyApe1xuICAgICAgICByZXR1cm4gUHViU3ViLnN1YnNjcmliZShBTExfU1VCU0NSSUJJTkdfTVNHLCBmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZSBvbmNlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFB1YlN1YiB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZU9uY2UgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCBtZXNzYWdlLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gYmVmb3JlIGZ1bmMgYXBwbHksIHVuc3Vic2NyaWJlIG1lc3NhZ2VcbiAgICAgICAgICAgIFB1YlN1Yi51bnN1YnNjcmliZSggdG9rZW4gKTtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFB1YlN1YjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBzdWJzY3JpcHRpb25zXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJBbGxTdWJzY3JpcHRpb25zKCl7XG4gICAgICAgIG1lc3NhZ2VzID0ge307XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsgaW50IH1cbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJTdWJzY3JpcHRpb25zKHRvcGljKXtcbiAgICAgICAgdmFyIG07XG4gICAgICAgIGZvciAobSBpbiBtZXNzYWdlcyl7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2VzLCBtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICAgQ291bnQgc3Vic2NyaXB0aW9ucyBieSB0aGUgdG9waWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNvdW50U3Vic2NyaXB0aW9uc1xuICAgICAqIEByZXR1cm4geyBBcnJheSB9XG4gICAgKi9cbiAgICBQdWJTdWIuY291bnRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY291bnRTdWJzY3JpcHRpb25zKHRvcGljKXtcbiAgICAgICAgdmFyIG07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvciAobSBpbiBtZXNzYWdlcykge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGZvciAodG9rZW4gaW4gbWVzc2FnZXNbbV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAgIEdldHMgc3Vic2NyaXB0aW9ucyBieSB0aGUgdG9waWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGdldFN1YnNjcmlwdGlvbnNcbiAgICAqL1xuICAgIFB1YlN1Yi5nZXRTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gZ2V0U3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHN1YnNjcmlwdGlvbnNcbiAgICAgKlxuICAgICAqIC0gV2hlbiBwYXNzZWQgYSB0b2tlbiwgcmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgZnVuY3Rpb24sIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgZnVuY3Rpb25cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgdG9waWMsIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgdG9waWMgKGhpZXJhcmNoeSlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfCBGdW5jdGlvbiB9IHZhbHVlIEEgdG9rZW4sIGZ1bmN0aW9uIG9yIHRvcGljIHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSB0b2tlblxuICAgICAqIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoJ215dG9waWMnLCBteUZ1bmMpO1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSh0b2tlbik7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgZnVuY3Rpb25cbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUobXlGdW5jKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIGZyb20gYSB0b3BpY1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSgnbXl0b3BpYycpO1xuICAgICAqL1xuICAgIFB1YlN1Yi51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgdmFyIGRlc2NlbmRhbnRUb3BpY0V4aXN0cyA9IGZ1bmN0aW9uKHRvcGljKSB7XG4gICAgICAgICAgICAgICAgdmFyIG07XG4gICAgICAgICAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBkZXNjZW5kYW50IG9mIHRoZSB0b3BpYyBleGlzdHM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1RvcGljICAgID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgdmFsdWUpIHx8IGRlc2NlbmRhbnRUb3BpY0V4aXN0cyh2YWx1ZSkgKSxcbiAgICAgICAgICAgIGlzVG9rZW4gICAgPSAhaXNUb3BpYyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgICAgICAgICAgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlLFxuICAgICAgICAgICAgbSwgbWVzc2FnZSwgdDtcblxuICAgICAgICBpZiAoaXNUb3BpYyl7XG4gICAgICAgICAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgIGlmICggT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBtZXNzYWdlcywgbSApICl7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21dO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBpc1Rva2VuICYmIG1lc3NhZ2VbdmFsdWVdICl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRva2VucyBhcmUgdW5pcXVlLCBzbyB3ZSBjYW4ganVzdCBzdG9wIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdCBpbiBtZXNzYWdlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIHQpICYmIG1lc3NhZ2VbdF0gPT09IHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsImV4cG9ydCBjb25zdCBJTklUSUFMSVpFID0gJ2luaXRpYWxpemUnO1xuZXhwb3J0IGNvbnN0IERBVEFfSU5JVElBTElaRUQgPSAnZGF0YUluaXRpYWxpemVkJztcblxuZXhwb3J0IGNvbnN0IEJBQ0sgPSAnYmFjayc7XG5leHBvcnQgY29uc3QgSU5ERVggPSB0eXBlID0+IGBpbmRleC4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBORVcgPSB0eXBlID0+IGBuZXcuJHt0eXBlfWA7XG5leHBvcnQgY29uc3QgQ1JFQVRFID0gdHlwZSA9PiBgY3JlYXRlLiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IFNIT1cgPSB0eXBlID0+IGBzaG93LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9FRElUX0FUVFJJQlVURSA9ICdlZGl0LmF0dHJpYnV0ZSc7XG5leHBvcnQgY29uc3QgRURJVF9BVFRSSUJVVEUgPSB0eXBlID0+IGBlZGl0LmF0dHJpYnV0ZS4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBERVNUUk9ZID0gdHlwZSA9PiBgZGVzdHJveS4ke3R5cGV9YDtcblxuZXhwb3J0IGNvbnN0IFVQREFURSA9ICh0eXBlLCBpZCkgPT4gYHVwZGF0ZS4ke3R5cGV9LiR7aWR9YDtcbmV4cG9ydCBjb25zdCBVUERBVEVfU1RBVFVTID0gKHR5cGUsIGlkKSA9PiBgdXBkYXRlLiR7dHlwZX0uc3RhdHVzLiR7aWR9YDtcbmV4cG9ydCBjb25zdCBVUERBVEVfUFJJT1JJVFkgPSAodHlwZSwgaWQpID0+IGB1cGRhdGUuJHt0eXBlfS5wcmlvcml0eS4ke2lkfWA7XG5leHBvcnQgY29uc3QgVVBEQVRFX0JFTE9ORyA9ICh0eXBlLCBpZCwgYmVsb25nVHlwZSkgPT4gYHVwZGF0ZS4ke3R5cGV9LmJlbG9uZy4ke2JlbG9uZ1R5cGV9LiR7aWR9YDtcblxuZXhwb3J0IGNvbnN0IEFOWV9VUERBVEVEID0gJ3VwZGF0ZWQnO1xuZXhwb3J0IGNvbnN0IFVQREFURUQgPSAodHlwZSwgaWQpID0+IGB1cGRhdGVkLiR7dHlwZX0uJHtpZH1gO1xuZXhwb3J0IGNvbnN0IEJFTE9OR19VUERBVEVEID0gdHlwZSA9PiBgdXBkYXRlZC4ke3R5cGV9LmJlbG9uZ2A7XG5leHBvcnQgY29uc3QgTElTVF9VUERBVEVEID0gdHlwZSA9PiBgdXBkYXRlZC4ke3R5cGV9Lmxpc3RgO1xuXG5leHBvcnQgY29uc3QgUEFHRV9SRU5ERVJFRCA9ICdyZW5kZXJlZC5wYWdlJztcbmV4cG9ydCBjb25zdCBWSUVXX1JFTkRFUkVEID0gJ3JlbmRlcmVkLnZpZXcnO1xuZXhwb3J0IGNvbnN0IEFOWV9JTkRFWF9SRU5ERVJFRCA9ICdyZW5kZXJlZC52aWV3LmluZGV4JztcbmV4cG9ydCBjb25zdCBJTkRFWF9SRU5ERVJFRCA9IHR5cGUgPT4gYHJlbmRlcmVkLnZpZXcuaW5kZXguJHt0eXBlfWA7XG5leHBvcnQgY29uc3QgQU5ZX05FV19SRU5ERVJFRCA9ICdyZW5kZXJlZC52aWV3Lm5ldyc7XG5leHBvcnQgY29uc3QgTkVXX1JFTkRFUkVEID0gdHlwZSA9PiBgcmVuZGVyZWQudmlldy5uZXcuJHt0eXBlfWA7XG5leHBvcnQgY29uc3QgQU5ZX1NIT1dfUkVOREVSRUQgPSAncmVuZGVyZWQudmlldy5zaG93JztcbmV4cG9ydCBjb25zdCBTSE9XX1JFTkRFUkVEID0gdHlwZSA9PiBgcmVuZGVyZWQudmlldy5zaG93LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9FRElUX1JFTkRFUkVEID0gJ3JlbmRlcmVkLnZpZXcuZWRpdCc7XG5leHBvcnQgY29uc3QgRURJVF9SRU5ERVJFRCA9IHR5cGUgPT4gYHJlbmRlcmVkLnZpZXcuZWRpdC4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBBTllfRURJVF9BVFRSSUJVVEVfUkVOREVSRUQgPSAncmVuZGVyZWQudmlldy5lZGl0LmF0dHJpYnV0ZSc7XG5leHBvcnQgY29uc3QgRURJVF9BVFRSSUJVVEVfUkVOREVSRUQgPSB0eXBlID0+IGByZW5kZXJlZC52aWV3LmVkaXQuYXR0cmlidXRlLiR7dHlwZX1gXG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlRGF0YShkYXRhKSB7XG4gIFxufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgSU5ERVgsIElOREVYX1JFTkRFUkVELCBQQUdFX1JFTkRFUkVEIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCB7IGFwcGxpY2F0aW9uRGF0YSBhcyByZW5kZXJEYXRhIH0gZnJvbSAnLi4vYXBwbGljYXRpb24nO1xuaW1wb3J0ICogYXMgc2V0dGluZ3MgZnJvbSAnLi4vc2V0dGluZ3MnO1xuXG5QdWJTdWIuc3Vic2NyaWJlKElOREVYKCdwcm9qZWN0JyksIGluZGV4UHJvamVjdHNWaWV3KVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5kZXhQcm9qZWN0c1ZpZXcoKSB7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gIF9yZW5kZXJJbnRybygpO1xuICBfcmVuZGVyUHJvamVjdHMoKTtcbiAgUHViU3ViLnB1Ymxpc2goUEFHRV9SRU5ERVJFRCwgaW5kZXhQcm9qZWN0c1ZpZXcpO1xuICBQdWJTdWIucHVibGlzaChJTkRFWF9SRU5ERVJFRCgncHJvamVjdCcpKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlckludHJvKCkge1xuICBjb25zdCBoZWFkaW5nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyksXG4gICAgICAgIGJ5bGluZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpLFxuICAgICAgICBuZXdUb2RvSXRlbUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBoZWFkaW5nRWxlbWVudC50ZXh0Q29udGVudCA9ICdBY3Rpb25hbGl0eSc7XG4gIGJ5bGluZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnWW91ciBvbmUtc3RvcCB0by1kbyBhcHAnO1xuICBuZXdUb2RvSXRlbUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCduZXcnKTtcbiAgbmV3VG9kb0l0ZW1CdXR0b24uZGF0YXNldC50eXBlID0gJ3RvZG9JdGVtJztcbiAgbmV3VG9kb0l0ZW1CdXR0b24uZGF0YXNldC5wcm9qZWN0SWQgPSAwO1xuICBuZXdUb2RvSXRlbUJ1dHRvbi50ZXh0Q29udGVudCA9ICdBZGQgYSBOZXcgVG8tRG8nO1xuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKGhlYWRpbmdFbGVtZW50LCBieWxpbmVFbGVtZW50LCBuZXdUb2RvSXRlbUJ1dHRvbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJQcm9qZWN0cygpIHtcbiAgX3JlbmRlclByb2plY3RzSGVhZGluZygpO1xuICBfcmVuZGVyUHJvamVjdHNMaXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJQcm9qZWN0c0hlYWRpbmcoKSB7XG4gIGNvbnN0IHByb2plY3RzSGVhZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgcHJvamVjdHNIZWFkaW5nVGV4dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpLFxuICAgICAgICBuZXdQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG5cbiAgcHJvamVjdHNIZWFkaW5nVGV4dEVsZW1lbnQudGV4dENvbnRlbnQgPSAnTXkgUHJvamVjdHMnO1xuICBuZXdQcm9qZWN0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ25ldycpO1xuICBuZXdQcm9qZWN0QnV0dG9uLmRhdGFzZXQudHlwZSA9ICdwcm9qZWN0JztcbiAgbmV3UHJvamVjdEJ1dHRvbi50ZXh0Q29udGVudCA9ICcrJztcblxuICBwcm9qZWN0c0hlYWRpbmdFbGVtZW50LmFwcGVuZChwcm9qZWN0c0hlYWRpbmdUZXh0RWxlbWVudCwgbmV3UHJvamVjdEJ1dHRvbik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKHByb2plY3RzSGVhZGluZ0VsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyUHJvamVjdHNMaXN0KCkge1xuICByZW5kZXJEYXRhLnByb2plY3RzTGlzdC5wcm9qZWN0cy5mb3JFYWNoKHByb2plY3QgPT4ge1xuICAgIGNvbnN0IHByb2plY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgICAgc2hvd0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLFxuICAgICAgICAgIGRlc3Ryb3lCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKSxcbiAgICAgICAgICBwcmV2aWV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG5cbiAgICBbc2hvd0J1dHRvbiwgZGVzdHJveUJ1dHRvbl0uZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLmRhdGFzZXQudHlwZSA9IHByb2plY3QudHlwZTtcbiAgICAgIGJ1dHRvbi5kYXRhc2V0LmlkID0gcHJvamVjdC5pZDtcbiAgICB9KVxuICAgIHNob3dCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgIHNob3dCdXR0b24udGV4dENvbnRlbnQgPSBwcm9qZWN0LnRpdGxlO1xuICAgIGRlc3Ryb3lCdXR0b24uY2xhc3NMaXN0LmFkZCgnZGVzdHJveScpO1xuICAgIGRlc3Ryb3lCdXR0b24udGV4dENvbnRlbnQgPSAnLSc7XG5cbiAgICByZW5kZXJEYXRhLnRvZG9JdGVtc0xpc3Qud2l0aElkcyhwcm9qZWN0LnRvZG9JdGVtSWRzKVxuICAgICAgICAgICAgICAuc2xpY2UoMCwgc2V0dGluZ3MucHJldmlld051bSkuZm9yRWFjaCh0b2RvSXRlbSA9PiB7XG4gICAgICBjb25zdCB0b2RvSXRlbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgICAgdG9kb0l0ZW1FbGVtZW50LnRleHRDb250ZW50ID0gdG9kb0l0ZW0udGl0bGU7XG4gICAgICBwcmV2aWV3RWxlbWVudC5hcHBlbmRDaGlsZCh0b2RvSXRlbUVsZW1lbnQpO1xuICAgIH0pO1xuXG4gICAgcHJvamVjdEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2hvd0J1dHRvbik7XG4gICAgaWYgKHByb2plY3QuaWQpIHByb2plY3RFbGVtZW50LmFwcGVuZENoaWxkKGRlc3Ryb3lCdXR0b24pO1xuICAgIHByb2plY3RFbGVtZW50LmFwcGVuZChwcmV2aWV3RWxlbWVudCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwcm9qZWN0RWxlbWVudCk7XG4gIH0pXG59XG4iLCJleHBvcnQgY29uc3QgcHJldmlld051bSA9IDI7XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBJTklUSUFMSVpFLCBEQVRBX0lOSVRJQUxJWkVELCBBTllfVVBEQVRFRCB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCBhcHBsaWNhdGlvbkRhdGEgZnJvbSAnLi9hcHBsaWNhdGlvbic7XG4vL21heSBjaGFuZ2UgdGhpcyBkZXBlbmRpbmcgb24gc3RvcmFnZVByb3ZpZGVyIGltcGxlbWVudGF0aW9uXG5pbXBvcnQgKiBhcyBsb2NhbFN0b3JhZ2UgZnJvbSAnLi9zdG9yYWdlLXByb3ZpZGVycy9sb2NhbC1zdG9yYWdlLXByb3ZpZGVyJztcblxuUHViU3ViLnN1YnNjcmliZShJTklUSUFMSVpFLCBpbml0aWFsaXplRGF0YUZuKGxvY2FsU3RvcmFnZS5nZXREYXRhKSk7XG5mdW5jdGlvbiBpbml0aWFsaXplRGF0YUZuKGdldERhdGFGbiA9IGxvY2FsU3RvcmFnZS5nZXREYXRhKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzdG9yYWdlRGF0YSA9IGdldERhdGFGbigpIHx8IFxuICAgIHsgcHJvamVjdHNMaXN0OiBbeyBpZDogMCwgdGl0bGU6ICdNeSBUby1Eb3MnLCB0b2RvSXRlbUlkczogWzFdIH1dLCBcbiAgICAgIHRvZG9JdGVtc0xpc3Q6IFt7IGlkOiAxLCB0aXRsZTogJ1NhbXBsZSBUby1EbycsIHByaW9yaXR5OiAnbG93Jywgc3RhdHVzOiAnaW5jb21wbGV0ZScsIGR1ZURhdGU6IERhdGUoKSB9XSwgXG4gICAgICBjaGVja2xpc3RJdGVtc0xpc3Q6IFtdIH07XG4gICAgUHViU3ViLnB1Ymxpc2goREFUQV9JTklUSUFMSVpFRCwgc3RvcmFnZURhdGEpO1xuICB9XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoQU5ZX1VQREFURUQsIHNhdmVEYXRhRm4obG9jYWxTdG9yYWdlLnNhdmVEYXRhKSk7XG5mdW5jdGlvbiBzYXZlRGF0YUZuKHNhdmVEYXRhRm4gPSBsb2NhbFN0b3JhZ2Uuc2F2ZURhdGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNhdmVEYXRhRm4oYXBwbGljYXRpb25EYXRhKTtcbiAgfVxufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgTkVXLCBORVdfUkVOREVSRUQgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuXG5QdWJTdWIuc3Vic2NyaWJlKE5FVygncHJvamVjdCcpLCBuZXdQcm9qZWN0Vmlldyk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdQcm9qZWN0VmlldygpIHtcbiAgY29uc3QgYWRkUHJvamVjdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdbZGF0YS10eXBlPVwicHJvamVjdFwiXScpLFxuICAgICAgICBiYWNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyksXG4gICAgICAgIHByb2plY3RGb3JtRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgYmFja0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdiYWNrJyk7XG4gIGJhY2tCdXR0b24udGV4dENvbnRlbnQgPSAnQmFjayc7XG4gIHByb2plY3RGb3JtRWxlbWVudC5jbGFzc0xpc3QuYWRkKCduZXctZm9ybScpO1xuICBwcm9qZWN0Rm9ybUVsZW1lbnQuZGF0YXNldC50eXBlID0gJ3Byb2plY3QnO1xuICBwcm9qZWN0Rm9ybUVsZW1lbnQuaW5uZXJIVE1MID1cbiAgICBgPGxhYmVsIGZvcj1cInRpdGxlXCI+TmV3IFByb2plY3Q8L2xhYmVsPlxuICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGl0bGVcIiBpZD1cInRpdGxlXCI+XG4gICAgIDxidXR0b24gY2xhc3M9XCJzdWJtaXRcIj5TdWJtaXQ8L2J1dHRvbj5gO1xuXG4gIGFkZFByb2plY3RCdXR0b24ucmVwbGFjZVdpdGgoYmFja0J1dHRvbiwgcHJvamVjdEZvcm1FbGVtZW50KTtcbiAgLy9hZGRQcm9qZWN0QnV0dG9uLnJlbW92ZSgpO1xuICBQdWJTdWIucHVibGlzaChORVdfUkVOREVSRUQoJ3Byb2plY3QnKSk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBORVcsIE5FV19SRU5ERVJFRCB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5cblB1YlN1Yi5zdWJzY3JpYmUoTkVXKCd0b2RvSXRlbScpLCBuZXdUb2RvSXRlbVZpZXcpO1xuXG5cbmZ1bmN0aW9uIG5ld1RvZG9JdGVtVmlldygpIHtcbiAgY29uc29sZS5sb2coJ25ld1RvZG9JdGVtVmlldycpO1xufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgU0hPVywgU0hPV19SRU5ERVJFRCwgUEFHRV9SRU5ERVJFRCB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcblxuUHViU3ViLnN1YnNjcmliZShTSE9XKCdwcm9qZWN0JyksIHNob3dQcm9qZWN0Vmlldyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNob3dQcm9qZWN0VmlldyhfLCBkYXRhKSB7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gIGNvbnN0IHByb2plY3QgPSByZW5kZXJEYXRhLnByb2plY3RzTGlzdC53aXRoSWQoZGF0YS5pZCk7XG4gIF9yZW5kZXJJbnRybyhwcm9qZWN0KTtcbiAgX3JlbmRlclRvZG9JdGVtcyhwcm9qZWN0KTtcbiAgUHViU3ViLnB1Ymxpc2goUEFHRV9SRU5ERVJFRCwgc2hvd1Byb2plY3RWaWV3LmJpbmQobnVsbCwgXywgZGF0YSkpO1xuICBQdWJTdWIucHVibGlzaChTSE9XX1JFTkRFUkVEKCdwcm9qZWN0JykpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVySW50cm8ocHJvamVjdCkge1xuICBjb25zdCBpbmRleEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLFxuICAgICAgICBoZWFkaW5nRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICBlZGl0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyksXG4gICAgICAgIG5ld1RvZG9JdGVtQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGluZGV4QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2luZGV4Jyk7XG4gIGluZGV4QnV0dG9uLmRhdGFzZXQudHlwZSA9IHByb2plY3QudHlwZTtcbiAgaW5kZXhCdXR0b24udGV4dENvbnRlbnQgPSAnQWxsIFByb2plY3RzJztcblxuICBlZGl0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2VkaXQtYXR0cmlidXRlJyk7XG4gIGVkaXRCdXR0b24uZGF0YXNldC50eXBlID0gcHJvamVjdC50eXBlO1xuICBlZGl0QnV0dG9uLmRhdGFzZXQuaWQgPSBwcm9qZWN0LmlkO1xuICBlZGl0QnV0dG9uLmRhdGFzZXQuYXR0cmlidXRlID0gJ3RpdGxlJztcbiAgZWRpdEJ1dHRvbi5kYXRhc2V0LmF0dHJpYnV0ZVR5cGUgPSAndGV4dCc7XG4gIGVkaXRCdXR0b24udGV4dENvbnRlbnQgPSBwcm9qZWN0LnRpdGxlO1xuXG4gIG5ld1RvZG9JdGVtQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ25ldycpO1xuICBuZXdUb2RvSXRlbUJ1dHRvbi5kYXRhc2V0LnR5cGUgPSAndG9kb0l0ZW0nO1xuICBuZXdUb2RvSXRlbUJ1dHRvbi5kYXRhc2V0LnByb2plY3RJZCA9IHByb2plY3QuaWQ7XG4gIG5ld1RvZG9JdGVtQnV0dG9uLnRleHRDb250ZW50ID0gJysnO1xuXG4gIGhlYWRpbmdFbGVtZW50LmFwcGVuZChlZGl0QnV0dG9uLCBuZXdUb2RvSXRlbUJ1dHRvbik7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kKGluZGV4QnV0dG9uLCBoZWFkaW5nRWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJUb2RvSXRlbXMocHJvamVjdCkge1xuICByZW5kZXJEYXRhLnRvZG9JdGVtc0xpc3Qud2l0aElkcyhwcm9qZWN0LnRvZG9JdGVtSWRzKS5mb3JFYWNoKHRvZG9JdGVtID0+IHtcbiAgICBjb25zdCB0b2RvSXRlbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICBlZGl0VGl0bGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKSxcbiAgICAgICAgICBkdWVEYXRlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxuICAgICAgICAgIGVkaXREdWVEYXRlQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyksXG4gICAgICAgICAgc2hvd0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLFxuICAgICAgICAgIGRlc3Ryb3lCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcblxuICAgIHRvZG9JdGVtRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRvZG9JdGVtLnByaW9yaXR5KTtcbiAgICBkdWVEYXRlRWxlbWVudC50ZXh0Q29udGVudCA9ICdEdWUgRGF0ZTogJztcblxuICAgIFtzaG93QnV0dG9uLCBlZGl0VGl0bGVCdXR0b24sIGVkaXREdWVEYXRlQnV0dG9uLCBkZXN0cm95QnV0dG9uXS5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICBidXR0b24uZGF0YXNldC50eXBlID0gdG9kb0l0ZW0udHlwZTtcbiAgICAgIGJ1dHRvbi5kYXRhc2V0LmlkID0gdG9kb0l0ZW0uaWQ7XG4gICAgfSlcbiAgICBzaG93QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICBzaG93QnV0dG9uLnRleHRDb250ZW50ID0gJ0V4cGFuZCc7XG5cbiAgICBbZWRpdFRpdGxlQnV0dG9uLCBlZGl0RHVlRGF0ZUJ1dHRvbl0uZm9yRWFjaChidXR0b24gPT4gYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2VkaXQtYXR0cmlidXRlJykpO1xuICAgIGVkaXRUaXRsZUJ1dHRvbi5kYXRhc2V0LmF0dHJpYnV0ZSA9ICd0aXRsZSc7XG4gICAgZWRpdFRpdGxlQnV0dG9uLmRhdGFzZXQuYXR0cmlidXRlVHlwZSA9ICd0ZXh0JztcbiAgICBlZGl0VGl0bGVCdXR0b24udGV4dENvbnRlbnQgPSB0b2RvSXRlbS50aXRsZTtcblxuICAgIGVkaXREdWVEYXRlQnV0dG9uLmRhdGFzZXQuYXR0cmlidXRlID0gJ2R1ZURhdGUnO1xuICAgIGVkaXREdWVEYXRlQnV0dG9uLmRhdGFzZXQuYXR0cmlidXRlVHlwZSA9ICdkYXRlJztcbiAgICBlZGl0RHVlRGF0ZUJ1dHRvbi50ZXh0Q29udGVudCA9IHRvZG9JdGVtLmR1ZURhdGU7XG5cbiAgICBkZXN0cm95QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Rlc3Ryb3knKTtcbiAgICBkZXN0cm95QnV0dG9uLnRleHRDb250ZW50ID0gJy0nO1xuICAgIFxuICAgIGR1ZURhdGVFbGVtZW50LmFwcGVuZChlZGl0RHVlRGF0ZUJ1dHRvbik7XG4gICAgdG9kb0l0ZW1FbGVtZW50LmFwcGVuZChlZGl0VGl0bGVCdXR0b24sIGR1ZURhdGVFbGVtZW50LCBzaG93QnV0dG9uLCBkZXN0cm95QnV0dG9uKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0b2RvSXRlbUVsZW1lbnQpO1xuICB9KVxufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgU0hPVywgU0hPV19SRU5ERVJFRCB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcblxuUHViU3ViLnN1YnNjcmliZShTSE9XKCd0b2RvSXRlbScpLCBzaG93VG9kb0l0ZW1WaWV3KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvd1RvZG9JdGVtVmlldyhfLCBkYXRhKSB7XG4gIGNvbnNvbGUubG9nKCdzaG93VG9kb0l0ZW1WaWV3Jyk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBBTllfRURJVF9BVFRSSUJVVEUsIEVESVRfQVRUUklCVVRFX1JFTkRFUkVEIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJztcblxuUHViU3ViLnN1YnNjcmliZShBTllfRURJVF9BVFRSSUJVVEUsIGVkaXRBdHRyaWJ1dGVWaWV3KVxuZnVuY3Rpb24gZWRpdEF0dHJpYnV0ZVZpZXcoXywgeyB0eXBlLCBpZCwgYXR0cmlidXRlLCBhdHRyaWJ1dGVUeXBlLCB0ZXh0Q29udGVudCB9KSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpLmZvckVhY2goYnV0dG9uID0+IFxuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd1bmNsaWNrYWJsZScpKTtcblxuICBjb25zdCBlZGl0QXR0cmlidXRlQnV0dG9uU2VsZWN0b3IgPSBgLmVkaXQtYXR0cmlidXRlW2RhdGEtdHlwZT1cIiR7dHlwZX1cIl1bZGF0YS1pZD1cIiR7aWR9XCJdW2RhdGEtYXR0cmlidXRlPVwiJHthdHRyaWJ1dGV9XCJdYCxcbiAgICAgICAgZWRpdEF0dHJpYnV0ZUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWRpdEF0dHJpYnV0ZUJ1dHRvblNlbGVjdG9yKSxcbiAgICAgICAgYmFja0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpLCBcbiAgICAgICAgZm9ybUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG5cbiAgYmFja0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdiYWNrJyk7XG4gIGJhY2tCdXR0b24udGV4dENvbnRlbnQgPSAn4oaQJztcbiAgZm9ybUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZWRpdC1mb3JtJyk7XG4gIGZvcm1FbGVtZW50LmRhdGFzZXQudHlwZSA9IHR5cGU7XG4gIGZvcm1FbGVtZW50LmRhdGFzZXQuaWQgPSBpZDtcbiAgZm9ybUVsZW1lbnQuaW5uZXJIVE1MID1cbiAgICBgPGlucHV0IHR5cGU9XCIke2F0dHJpYnV0ZVR5cGV9XCIgbmFtZT1cIiR7YXR0cmlidXRlfVwiIGlkPVwiJHthdHRyaWJ1dGV9XCIgdmFsdWU9XCIke3RleHRDb250ZW50fVwiPlxuICAgICA8YnV0dG9uIGNsYXNzPVwic3VibWl0XCI+4pyTPC9idXR0b24+YDtcblxuICBlZGl0QXR0cmlidXRlQnV0dG9uLnJlcGxhY2VXaXRoKGJhY2tCdXR0b24sIGZvcm1FbGVtZW50KTtcbiAgLy9lZGl0QXR0cmlidXRlQnV0dG9uLnJlbW92ZSgpO1xuICBQdWJTdWIucHVibGlzaChFRElUX0FUVFJJQlVURV9SRU5ERVJFRCh0eXBlKSk7XG59XG4iLCJpbXBvcnQgJy4vaW5kZXgtcHJvamVjdHMtdmlldydcbmltcG9ydCAnLi9uZXctcHJvamVjdC12aWV3J1xuaW1wb3J0ICcuL25ldy10b2RvSXRlbS12aWV3J1xuaW1wb3J0ICcuL3Nob3ctcHJvamVjdC12aWV3J1xuaW1wb3J0ICcuL3Nob3ctdG9kb0l0ZW0tdmlldydcbmltcG9ydCAnLi9lZGl0LXZpZXcnXG5cbmltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IFBBR0VfUkVOREVSRUQsIEFOWV9VUERBVEVELCBCQUNLIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCBkZWZhdWx0VmlldyBmcm9tICcuL2luZGV4LXByb2plY3RzLXZpZXcnO1xuXG5sZXQgY3VyclBhZ2VWaWV3ID0gZGVmYXVsdFZpZXc7XG5cblB1YlN1Yi5zdWJzY3JpYmUoUEFHRV9SRU5ERVJFRCwgc2V0Q3VyclBhZ2VWaWV3KVxuZnVuY3Rpb24gc2V0Q3VyclBhZ2VWaWV3KF8sIHZpZXcpIHtcbiAgY3VyclBhZ2VWaWV3ID0gdmlldztcbn1cblxuUHViU3ViLnN1YnNjcmliZShBTllfVVBEQVRFRCwgdXBkYXRlVmlldylcblB1YlN1Yi5zdWJzY3JpYmUoQkFDSywgdXBkYXRlVmlldylcbmZ1bmN0aW9uIHVwZGF0ZVZpZXcoKSB7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gIGN1cnJQYWdlVmlldygpO1xufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgQkFDSywgVklFV19SRU5ERVJFRCwgSU5ERVgsIE5FVywgQU5ZX05FV19SRU5ERVJFRCwgQ1JFQVRFLCBcbiAgICAgICAgIFNIT1csIEFOWV9FRElUX1JFTkRFUkVELCBFRElUX0FUVFJJQlVURSwgQU5ZX0VESVRfQVRUUklCVVRFX1JFTkRFUkVELCBcbiAgICAgICAgIFVQREFURSwgREVTVFJPWSB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcblxuY29uc3QgaW5kZXhCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmluZGV4JyksXG4gICAgICBuZXdCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5ldycpLFxuICAgICAgc2hvd0J1dHRvbnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2hvdycpLFxuICAgICAgZWRpdEF0dHJpYnV0ZUJ1dHRvbnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZWRpdC1hdHRyaWJ1dGUnKSxcbiAgICAgIGRlc3Ryb3lCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlc3Ryb3knKSxcbiAgICAgIGJhY2tCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhY2snKSxcbiAgICAgIGlucHV0RWxlbWVudHMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpLFxuICAgICAgc3VibWl0QnV0dG9ucyA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdWJtaXQnKTtcblxuZnVuY3Rpb24gX2JpbmRCdXR0b25zKGJ1dHRvbnMsIHB1YlN1YkV2ZW50LCBleHRyYURhdGFBdHRycyA9IFtdKSB7XG4gIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgIGNvbnN0IGNsZWFyZWRCdXR0b24gPSBidXR0b24uY2xvbmVOb2RlKHRydWUpO1xuICAgIGJ1dHRvbi5yZXBsYWNlV2l0aChjbGVhcmVkQnV0dG9uKTtcbiAgICBjb25zdCBleHRyYURhdGEgPSBleHRyYURhdGFBdHRycy5yZWR1Y2UoKGRhdGEsIGF0dHIpID0+IFxuICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCB7IFthdHRyXTogYnV0dG9uW2F0dHJdIH0pLCB7fSk7XG4gICAgY2xlYXJlZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIFxuICAgICAgZSA9PiBQdWJTdWIucHVibGlzaCh0eXBlb2YgcHViU3ViRXZlbnQgPT0gJ2Z1bmN0aW9uJyA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1YlN1YkV2ZW50KGUudGFyZ2V0LmRhdGFzZXQudHlwZSkgOiBwdWJTdWJFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlLnRhcmdldC5kYXRhc2V0LCBleHRyYURhdGEpKSk7XG4gIH0pO1xufVxuXG5QdWJTdWIuc3Vic2NyaWJlKFZJRVdfUkVOREVSRUQsIGJpbmRBY3Rpb25CdXR0b25zKTtcbmZ1bmN0aW9uIGJpbmRBY3Rpb25CdXR0b25zKCkge1xuICBfYmluZEJ1dHRvbnMoaW5kZXhCdXR0b25zKCksIElOREVYKTtcbiAgX2JpbmRCdXR0b25zKG5ld0J1dHRvbnMoKSwgTkVXKTtcbiAgX2JpbmRCdXR0b25zKHNob3dCdXR0b25zKCksIFNIT1cpO1xuICBfYmluZEJ1dHRvbnMoZWRpdEF0dHJpYnV0ZUJ1dHRvbnMoKSwgRURJVF9BVFRSSUJVVEUsIFsndGV4dENvbnRlbnQnXSk7XG4gIF9iaW5kQnV0dG9ucyhkZXN0cm95QnV0dG9ucygpLCBERVNUUk9ZKTtcbiAgX2JpbmRCdXR0b25zKGJhY2tCdXR0b25zKCksIEJBQ0spO1xufVxuXG5mdW5jdGlvbiBfYmluZEZvcm1TdWJtaXRCdXR0b25zKHB1YlN1YkV2ZW50LCBkYXRhQXR0cnMpIHtcbiAgc3VibWl0QnV0dG9ucygpLmZvckVhY2goYnV0dG9uID0+IHsgXG4gICAgY29uc3QgY2xlYXJlZEJ1dHRvbiA9IGJ1dHRvbi5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgYnV0dG9uLnJlcGxhY2VXaXRoKGNsZWFyZWRCdXR0b24pO1xuICAgIGNsZWFyZWRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGZvcm0gPSBlLnRhcmdldC5jbG9zZXN0KCdmb3JtJyksXG4gICAgICAgICAgICBhcmdzID0gZGF0YUF0dHJzLm1hcChhdHRyID0+IGZvcm0uZGF0YXNldFthdHRyXSk7XG4gICAgICBQdWJTdWIucHVibGlzaChwdWJTdWJFdmVudCguLi5hcmdzKSwgT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBGb3JtRGF0YShmb3JtKSkpO1xuICAgIH0pXG4gIH0pO1xufVxuXG5QdWJTdWIuc3Vic2NyaWJlKEFOWV9ORVdfUkVOREVSRUQsIGJpbmRDcmVhdGVCdXR0b25zKTtcbmZ1bmN0aW9uIGJpbmRDcmVhdGVCdXR0b25zKCkge1xuICBfYmluZEZvcm1TdWJtaXRCdXR0b25zKENSRUFURSwgWyd0eXBlJ10pO1xufVxuXG5QdWJTdWIuc3Vic2NyaWJlKEFOWV9FRElUX1JFTkRFUkVELCBiaW5kVXBkYXRlQnV0dG9ucyk7XG5mdW5jdGlvbiBiaW5kVXBkYXRlQnV0dG9ucygpIHtcbiAgX2JpbmRGb3JtU3VibWl0QnV0dG9ucyhVUERBVEUsIFsndHlwZScsICdpZCddKTtcbn1cblxuUHViU3ViLnN1YnNjcmliZShBTllfRURJVF9BVFRSSUJVVEVfUkVOREVSRUQsIGJpbmRFZGl0QXR0cmlidXRlRXZlbnRzKTtcbmZ1bmN0aW9uIGJpbmRFZGl0QXR0cmlidXRlRXZlbnRzKCkge1xuICBpbnB1dEVsZW1lbnRzKCkuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgY29uc3QgY2xlYXJlZElucHV0ID0gaW5wdXQuY2xvbmVOb2RlKHRydWUpO1xuICAgIGlucHV0LnJlcGxhY2VXaXRoKGNsZWFyZWRJbnB1dCk7XG4gICAgX2ZvY3VzSW5wdXQoY2xlYXJlZElucHV0KTtcbiAgICBjbGVhcmVkSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgaWYoIShlLmtleSA9PSAnRW50ZXInICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT0gaW5wdXQpKSByZXR1cm47XG4gICAgICBjb25zdCBmb3JtID0gZS50YXJnZXQuY2xvc2VzdCgnZm9ybScpO1xuICAgICAgUHViU3ViLnB1Ymxpc2goVVBEQVRFKGZvcm0udHlwZSwgZm9ybS5pZCksIE9iamVjdC5mcm9tRW50cmllcyhuZXcgRm9ybURhdGEoZm9ybSkpKTtcbiAgICB9KVxuXG4gICAgY2xlYXJlZElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgKCkgPT4gUHViU3ViLnB1Ymxpc2goQkFDSykpO1xuICB9KVxufVxuXG5mdW5jdGlvbiBfZm9jdXNJbnB1dChpbnB1dCkge1xuICBpbnB1dC5mb2N1cygpO1xuICBpZihpbnB1dC50eXBlID09ICd0ZXh0JylcbiAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IGlucHV0LnNlbGVjdGlvbkVuZCA9IGlucHV0LnZhbHVlLmxlbmd0aDtcbn1cbiIsImltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IENSRUFURSwgREVTVFJPWSwgVVBEQVRFLCBVUERBVEVfU1RBVFVTLCBVUERBVEVfUFJJT1JJVFksIFVQREFURV9CRUxPTkcsIFxuICAgICAgICAgVVBEQVRFRCwgQkVMT05HX1VQREFURUQsIExJU1RfVVBEQVRFRCB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIFVwZGF0YWJsZShvYmopIHtcbiAgUHViU3ViLnN1YnNjcmliZShVUERBVEUob2JqLnR5cGUsIG9iai5pZCksIHVwZGF0ZSk7XG4gIGZ1bmN0aW9uIHVwZGF0ZShfLCBkYXRhKSB7XG4gICAgZm9yKGNvbnN0IGF0dHJpYnV0ZSBpbiBkYXRhKSBvYmpbYXR0cmlidXRlXSA9IGRhdGFbYXR0cmlidXRlXTtcbiAgICBQdWJTdWIucHVibGlzaChVUERBVEVEKG9iai50eXBlLCBvYmouaWQpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gU3RhdHVzYWJsZShvYmopIHtcbiAgY29uc3Qgc3RhdHVzZXMgPSBbJ2luY29tcGxldGUnLCAnY29tcGxldGUnXTtcbiAgUHViU3ViLnN1YnNjcmliZShVUERBVEVfU1RBVFVTKG9iai50eXBlLCBvYmouaWQpLCBpbmNyZW1lbnRTdGF0dXMpXG4gIGZ1bmN0aW9uIGluY3JlbWVudFN0YXR1cygpIHtcbiAgICBvYmouc3RhdHVzID0gc3RhdHVzZXNbKHN0YXR1c2VzLmluZGV4T2Yob2JqLnN0YXR1cyApKyAxKSAlIHN0YXR1c2VzLmxlbmd0aF07XG4gICAgUHViU3ViLnB1Ymxpc2goVVBEQVRFRChvYmoudHlwZSwgb2JqLmlkKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByaW9yaXRpemFibGUob2JqKSB7XG4gIGNvbnN0IHByaW9yaXRpZXMgPSBbJ2xvdycsICdtZWRpdW0nLCAnaGlnaCddO1xuICBQdWJTdWIuc3Vic2NyaWJlKFVQREFURV9QUklPUklUWShvYmoudHlwZSwgb2JqLmlkKSwgdXBkYXRlUHJpb3JpdHkpXG4gIGZ1bmN0aW9uIHVwZGF0ZVByaW9yaXR5KF8sIGRhdGEpIHtcbiAgICBvYmoucHJpb3JpdHkgPSBwcmlvcml0aWVzW01hdGgubWF4KE1hdGgubWluKHByaW9yaXRpZXMuaW5kZXhPZihvYmoucHJpb3JpdHkpICsgZGF0YSwgMCksIHByaW9yaXRpZXMubGVuZ3RoIC0gMSldO1xuICAgIFB1YlN1Yi5wdWJsaXNoKFVQREFURUQob2JqLnR5cGUsIG9iai5pZCkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xsZWN0aW9uYWJsZShvYmosIGNvbGxlY3Rpb25UeXBlKSB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uVHlwZSArICdJZHMnO1xuICBvYmpbY29sbGVjdGlvbl0gfHw9IFtdO1xuXG4gIFB1YlN1Yi5zdWJzY3JpYmUoTElTVF9VUERBVEVEKGNvbGxlY3Rpb25UeXBlKSwgdXBkYXRlQ29sbGVjdGlvbkl0ZW1zKTtcbiAgZnVuY3Rpb24gdXBkYXRlQ29sbGVjdGlvbkl0ZW1zKF8sIGRhdGEpIHtcbiAgICBjb25zdCBuZXdDb2xsZWN0aW9uSXRlbXMgPSBkYXRhPy5bb2JqLnR5cGVdPy5bb2JqLmlkXTtcbiAgICBpZihuZXdDb2xsZWN0aW9uSXRlbXMpIG9ialtjb2xsZWN0aW9uXSA9IG5ld0NvbGxlY3Rpb25JdGVtcztcbiAgfVxufVxuXG4vL21heSBjaGFuZ2UgZGVwZW5kaW5nIG9uIHN0b3JhZ2VcbmV4cG9ydCBmdW5jdGlvbiBCZWxvbmdhYmxlKG9iaiwgYmVsb25nVHlwZSkge1xuICBvYmouYmVsb25ncyB8fD0geyBbYmVsb25nVHlwZV06IDAgfTtcbiAgLy9vYmouYmVsb25nc1tiZWxvbmdUeXBlXSA9IG9ialtiZWxvbmdUeXBlICsgJ0lkJ107XG4gIC8vZGVsZXRlIG9ialtiZWxvbmdUeXBlICsgJ0lkJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCZWxvbmdVcGRhdGFibGUob2JqLCBiZWxvbmdUeXBlKSB7XG4gIFB1YlN1Yi5zdWJzY3JpYmUoVVBEQVRFX0JFTE9ORyhvYmoudHlwZSwgb2JqLmlkLCBiZWxvbmdUeXBlKSwgdXBkYXRlQmVsb25nKTtcbiAgZnVuY3Rpb24gdXBkYXRlQmVsb25nKF8sIGRhdGEpIHtcbiAgICBjb25zdCBvbGRCZWxvbmdJZCA9IG9iai5iZWxvbmdzW2JlbG9uZ1R5cGVdLCBcbiAgICAgICAgICBuZXdCZWxvbmdJZCA9IGRhdGEuYmVsb25nSWQ7XG4gICAgb2JqLmJlbG9uZ3NbYmVsb25nVHlwZV0gPSBuZXdCZWxvbmdJZDtcbiAgICBQdWJTdWIucHVibGlzaChCRUxPTkdfVVBEQVRFRChvYmoudHlwZSksIHsgaWQ6IG9iai5pZCwgYmVsb25nVHlwZSwgb2xkQmVsb25nSWQsIG5ld0JlbG9uZ0lkIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMaXN0YWJsZShvYmosIHJhd0l0ZW1MaXN0ID0gW10pIHtcbiAgbGV0IG5leHRJZCA9IDE7XG4gIGNvbnN0IGxpc3QgPSBvYmouaXRlbVR5cGUgKyAncyc7XG4gIG9ialtsaXN0XSB8fD0gcmF3SXRlbUxpc3QubWFwKHJhd0l0ZW0gPT4gb2JqLml0ZW1GYWN0b3J5KE9iamVjdC5hc3NpZ24oeyBpZDogbmV4dElkKysgfSwgcmF3SXRlbSkpKTtcblxuICBvYmoud2l0aElkID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gb2JqW2xpc3RdLmZpbmQoaXRlbSA9PiBpZCA9PSBpdGVtLmlkKTtcbiAgfVxuXG4gIG9iai53aXRoSWRzID0gZnVuY3Rpb24oaWRzKSB7XG4gICAgcmV0dXJuIG9ialtsaXN0XS5maWx0ZXIoaXRlbSA9PiBpZHMuaW5jbHVkZXMoaXRlbS5pZCkpO1xuICB9XG5cbiAgUHViU3ViLnN1YnNjcmliZShCRUxPTkdfVVBEQVRFRChvYmouaXRlbVR5cGUpLCB1cGRhdGVMaXN0QmVsb25ncyk7XG4gIGZ1bmN0aW9uIHVwZGF0ZUxpc3RCZWxvbmdzKF8sIGRhdGEpIHtcbiAgICBjb25zdCBiZWxvbmdUeXBlID0gZGF0YS5iZWxvbmdUeXBlLCBvbGRCZWxvbmdJZCA9IGRhdGEub2xkQmVsb25nSWQsIG5ld0JlbG9uZ0lkID0gZGF0YS5uZXdCZWxvbmdJZDtcbiAgICBjb25zdCBpdGVtID0gb2JqW2xpc3RdLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09IGRhdGEuaWQpO1xuICAgIGl0ZW0uYmVsb25nc1tiZWxvbmdUeXBlXSA9IG5ld0JlbG9uZ0lkO1xuICAgIFB1YlN1Yi5wdWJsaXNoKExJU1RfVVBEQVRFRChvYmouaXRlbVR5cGUpLCBcbiAgICAgICAgICAgICAgICAgIHsgW2JlbG9uZ1R5cGVdOiB7IFxuICAgICAgICAgICAgICAgICAgICAgIFtvbGRCZWxvbmdJZF06IG9ialtsaXN0XS5maWx0ZXIoaXRlbSA9PiBpdGVtLmJlbG9uZ3NbYmVsb25nVHlwZV0gPT0gb2xkQmVsb25nSWQpLm1hcChpdGVtID0+IGl0ZW0uaWQpLFxuICAgICAgICAgICAgICAgICAgICAgIFtuZXdCZWxvbmdJZF06IG9ialtsaXN0XS5maWx0ZXIoaXRlbSA9PiBpdGVtLmJlbG9uZ3NbYmVsb25nVHlwZV0gPT0gbmV3QmVsb25nSWQpLm1hcChpdGVtID0+IGl0ZW0uaWQpXG4gICAgICAgICAgICAgICAgICB9IH0pXG4gIH1cblxuICBQdWJTdWIuc3Vic2NyaWJlKENSRUFURShvYmouaXRlbVR5cGUpLCBjcmVhdGVMaXN0SXRlbSk7XG4gIGZ1bmN0aW9uIGNyZWF0ZUxpc3RJdGVtKF8sIGRhdGEpIHtcbiAgICBjb25zdCBuZXdMaXN0SXRlbSA9IG9iai5pdGVtRmFjdG9yeShPYmplY3QuYXNzaWduKHsgaWQ6IG5leHRJZCsrIH0sIGRhdGEpKTtcbiAgICBvYmpbbGlzdF0udW5zaGlmdChuZXdMaXN0SXRlbSk7XG4gICAgcHVibGlzaExpc3RVcGRhdGVkV2l0aEJlbG9uZ0RhdGEobmV3TGlzdEl0ZW0pO1xuICB9XG5cbiAgUHViU3ViLnN1YnNjcmliZShERVNUUk9ZKG9iai5pdGVtVHlwZSksIGRlc3Ryb3lMaXN0SXRlbSk7XG4gIGZ1bmN0aW9uIGRlc3Ryb3lMaXN0SXRlbShfLCBkYXRhKSB7XG4gICAgaWYoZGF0YS5pZCA9PSAwKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgaXRlbSA9IG9ialtsaXN0XS5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PSBkYXRhLmlkKTtcbiAgICBvYmpbbGlzdF0uc3BsaWNlKG9ialtsaXN0XS5pbmRleE9mKGl0ZW0pLCAxKTtcbiAgICBwdWJsaXNoTGlzdFVwZGF0ZWRXaXRoQmVsb25nRGF0YShpdGVtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1Ymxpc2hMaXN0VXBkYXRlZFdpdGhCZWxvbmdEYXRhKGl0ZW0pIHtcbiAgICBjb25zdCBiZWxvbmdEYXRhID0gT2JqZWN0LmVudHJpZXMoaXRlbS5iZWxvbmdzIHx8IHt9KS5yZWR1Y2UoKGRhdGEsIFtiZWxvbmdUeXBlLCBiZWxvbmdJZF0pID0+XG4gICAgICBPYmplY3QuYXNzaWduKGRhdGEsXG4gICAgICAgIHtcbiAgICAgICAgICBbYmVsb25nVHlwZV06IHtcbiAgICAgICAgICAgIFtiZWxvbmdJZF06IG9ialtsaXN0XS5maWx0ZXIoaXRlbSA9PiBpdGVtLmJlbG9uZ3NbYmVsb25nVHlwZV0gPT0gYmVsb25nSWQpXG4gICAgICAgICAgfVxuICAgICAgICB9KSwge30pO1xuICAgIFB1YlN1Yi5wdWJsaXNoKExJU1RfVVBEQVRFRChvYmouaXRlbVR5cGUpLCBiZWxvbmdEYXRhKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXBkYXRhYmxlLCBDb2xsZWN0aW9uYWJsZSwgTGlzdGFibGUgfSBmcm9tICcuL2NvbXBvc2l0aW9uLXVuaXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3QoYXR0cmlidXRlcykge1xuICBjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgdHlwZTogJ3Byb2plY3QnIH0sIGF0dHJpYnV0ZXMpO1xuICBVcGRhdGFibGUob2JqKTtcbiAgQ29sbGVjdGlvbmFibGUob2JqLCAndG9kb0l0ZW0nKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG4vL21heSBjaGFuZ2UgZGVwZW5kaW5nIG9uIHN0b3JhZ2UgZGF0YSBmb3JtYXRcbmV4cG9ydCBmdW5jdGlvbiBQcm9qZWN0c0xpc3QocmF3SXRlbUxpc3QpIHtcbiAgY29uc3Qgb2JqID0geyBpdGVtRmFjdG9yeTogUHJvamVjdCwgaXRlbVR5cGU6ICdwcm9qZWN0JyB9XG4gIExpc3RhYmxlKG9iaiwgcmF3SXRlbUxpc3QpO1xuICByZXR1cm4gb2JqO1xufVxuIiwiaW1wb3J0IHsgVXBkYXRhYmxlLCBTdGF0dXNhYmxlLCBQcmlvcml0aXphYmxlLCBDb2xsZWN0aW9uYWJsZSwgQmVsb25nYWJsZSwgTGlzdGFibGUsIEJlbG9uZ1VwZGF0YWJsZSB9IGZyb20gJy4vY29tcG9zaXRpb24tdW5pdHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gVG9kb0l0ZW0oYXR0cmlidXRlcykge1xuICBjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgdHlwZTogJ3RvZG9JdGVtJyB9LCBhdHRyaWJ1dGVzKTtcbiAgW1VwZGF0YWJsZSwgU3RhdHVzYWJsZSwgUHJpb3JpdGl6YWJsZV0uZm9yRWFjaChjb21wRm4gPT4gY29tcEZuKG9iaikpO1xuICBbQmVsb25nYWJsZSwgQmVsb25nVXBkYXRhYmxlXS5mb3JFYWNoKGNvbXBGbiA9PiBjb21wRm4ob2JqLCAncHJvamVjdCcpKTtcbiAgQ29sbGVjdGlvbmFibGUob2JqLCAnY2hlY2tsaXN0SXRlbScpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUb2RvSXRlbXNMaXN0KHJhd0l0ZW1MaXN0KSB7XG4gIGNvbnN0IG9iaiA9IHsgaXRlbUZhY3Rvcnk6IFRvZG9JdGVtLCBpdGVtVHlwZTogJ3RvZG9JdGVtJyB9O1xuICBMaXN0YWJsZShvYmosIHJhd0l0ZW1MaXN0KTtcbiAgcmV0dXJuIG9iajtcbn1cbiIsImltcG9ydCB7IFVwZGF0YWJsZSwgU3RhdHVzYWJsZSwgQmVsb25nYWJsZSwgTGlzdGFibGUgfSBmcm9tICcuL2NvbXBvc2l0aW9uLXVuaXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrbGlzdEl0ZW0oYXR0cmlidXRlcykge1xuICBjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgdHlwZTogJ2NoZWNrbGlzdEl0ZW0nIH0sIGF0dHJpYnV0ZXMpO1xuICBbVXBkYXRhYmxlLCBTdGF0dXNhYmxlXS5mb3JFYWNoKGNvbXBGbiA9PiBjb21wRm4ob2JqKSk7XG4gIEJlbG9uZ2FibGUob2JqLCAndG9kb0l0ZW0nKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ2hlY2tsaXN0SXRlbXNMaXN0KHJhd0l0ZW1MaXN0KSB7XG4gIGNvbnN0IG9iaiA9IHsgaXRlbUZhY3Rvcnk6IENoZWNrbGlzdEl0ZW0sIGl0ZW1UeXBlOiAnY2hlY2tsaXN0SXRlbScgfTtcbiAgTGlzdGFibGUob2JqLCByYXdJdGVtTGlzdCk7XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgJy4vc3RvcmFnZSc7XG5pbXBvcnQgJy4vdmlld3Mvdmlld3MnO1xuaW1wb3J0ICcuL2RvbS1ldmVudHMnO1xuaW1wb3J0ICcuL3Byb2plY3RzJztcbmltcG9ydCAnLi90b2RvLWl0ZW1zJztcbmltcG9ydCAnLi9jaGVja2xpc3QtaXRlbXMnO1xuXG5pbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBJTklUSUFMSVpFLCBEQVRBX0lOSVRJQUxJWkVELCBBTllfVVBEQVRFRCB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcblxuaW1wb3J0IHsgUHJvamVjdHNMaXN0IH0gZnJvbSAnLi9wcm9qZWN0cyc7XG5pbXBvcnQgeyBUb2RvSXRlbXNMaXN0IH0gZnJvbSAnLi90b2RvLWl0ZW1zJztcbmltcG9ydCB7IENoZWNrbGlzdEl0ZW1zTGlzdCB9IGZyb20gJy4vY2hlY2tsaXN0LWl0ZW1zJztcbmNvbnN0IGFwcGxpY2F0aW9uRGF0YUxpc3RzID0geyBQcm9qZWN0c0xpc3QsIFRvZG9JdGVtc0xpc3QsIENoZWNrbGlzdEl0ZW1zTGlzdCB9O1xuXG5leHBvcnQgbGV0IGFwcGxpY2F0aW9uRGF0YSA9IHt9O1xuXG5mdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICBQdWJTdWIucHVibGlzaChJTklUSUFMSVpFKTtcbn1cblxuUHViU3ViLnN1YnNjcmliZShEQVRBX0lOSVRJQUxJWkVELCBwb3B1bGF0ZURhdGEpO1xuZnVuY3Rpb24gcG9wdWxhdGVEYXRhKF8sIGRhdGEpIHtcbiAgZm9yKGNvbnN0IGtleSBpbiBkYXRhKVxuICAgIGFwcGxpY2F0aW9uRGF0YVtrZXldID0gYXBwbGljYXRpb25EYXRhTGlzdHNba2V5WzBdLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSldKGRhdGFba2V5XSk7XG4gIFB1YlN1Yi5wdWJsaXNoKEFOWV9VUERBVEVEKTtcbn1cblxuaW5pdGlhbGl6ZSgpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiUHViU3ViIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlcyIsImxhc3RVaWQiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJtZXNzYWdlIiwiZGF0YSIsImV4Iiwic2V0VGltZW91dCIsInRocm93RXhjZXB0aW9uIiwiY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyIsImRlbGl2ZXJNZXNzYWdlIiwib3JpZ2luYWxNZXNzYWdlIiwibWF0Y2hlZE1lc3NhZ2UiLCJpbW1lZGlhdGVFeGNlcHRpb25zIiwicyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJoYXNEaXJlY3RTdWJzY3JpYmVyc0ZvciIsInRvcGljIiwiU3RyaW5nIiwiQm9vbGVhbiIsIm9iaiIsImtleSIsImhhc0tleXMiLCJwdWJsaXNoIiwic3luYyIsImRlbGl2ZXIiLCJwb3NpdGlvbiIsImxhc3RJbmRleE9mIiwic3Vic3RyIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsInRvU3RyaW5nIiwiZm91bmQiLCJtZXNzYWdlSGFzU3Vic2NyaWJlcnMiLCJwdWJsaXNoU3luYyIsInN1YnNjcmliZSIsImZ1bmMiLCJ0b2tlbiIsInN1YnNjcmliZUFsbCIsInN1YnNjcmliZU9uY2UiLCJ1bnN1YnNjcmliZSIsImFwcGx5IiwidGhpcyIsImFyZ3VtZW50cyIsImNsZWFyQWxsU3Vic2NyaXB0aW9ucyIsImNsZWFyU3Vic2NyaXB0aW9ucyIsIm0iLCJpbmRleE9mIiwiY291bnRTdWJzY3JpcHRpb25zIiwiY291bnQiLCJnZXRTdWJzY3JpcHRpb25zIiwibGlzdCIsInB1c2giLCJ2YWx1ZSIsInQiLCJpc1RvcGljIiwiZGVzY2VuZGFudFRvcGljRXhpc3RzIiwiaXNUb2tlbiIsImlzRnVuY3Rpb24iLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwid2luZG93IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiaWQiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJJTklUSUFMSVpFIiwiREFUQV9JTklUSUFMSVpFRCIsIkJBQ0siLCJJTkRFWCIsInR5cGUiLCJORVciLCJDUkVBVEUiLCJTSE9XIiwiRURJVF9BVFRSSUJVVEUiLCJERVNUUk9ZIiwiVVBEQVRFIiwiQU5ZX1VQREFURUQiLCJVUERBVEVEIiwiQkVMT05HX1VQREFURUQiLCJMSVNUX1VQREFURUQiLCJQQUdFX1JFTkRFUkVEIiwiZ2V0RGF0YSIsInNhdmVEYXRhIiwiaW5kZXhQcm9qZWN0c1ZpZXciLCJkb2N1bWVudCIsImJvZHkiLCJpbm5lckhUTUwiLCJoZWFkaW5nRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJieWxpbmVFbGVtZW50IiwibmV3VG9kb0l0ZW1CdXR0b24iLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJwcm9qZWN0SWQiLCJhcHBlbmQiLCJfcmVuZGVySW50cm8iLCJwcm9qZWN0c0hlYWRpbmdFbGVtZW50IiwicHJvamVjdHNIZWFkaW5nVGV4dEVsZW1lbnQiLCJuZXdQcm9qZWN0QnV0dG9uIiwiX3JlbmRlclByb2plY3RzSGVhZGluZyIsInByb2plY3QiLCJwcm9qZWN0RWxlbWVudCIsInNob3dCdXR0b24iLCJkZXN0cm95QnV0dG9uIiwicHJldmlld0VsZW1lbnQiLCJmb3JFYWNoIiwiYnV0dG9uIiwidGl0bGUiLCJ0b2RvSXRlbUlkcyIsInNsaWNlIiwidG9kb0l0ZW0iLCJ0b2RvSXRlbUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImdldERhdGFGbiIsInN0b3JhZ2VEYXRhIiwicHJvamVjdHNMaXN0IiwidG9kb0l0ZW1zTGlzdCIsInByaW9yaXR5Iiwic3RhdHVzIiwiZHVlRGF0ZSIsIkRhdGUiLCJjaGVja2xpc3RJdGVtc0xpc3QiLCJpbml0aWFsaXplRGF0YUZuIiwic2F2ZURhdGFGbiIsImFkZFByb2plY3RCdXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiYmFja0J1dHRvbiIsInByb2plY3RGb3JtRWxlbWVudCIsInJlcGxhY2VXaXRoIiwibG9nIiwic2hvd1Byb2plY3RWaWV3IiwiXyIsImluZGV4QnV0dG9uIiwiZWRpdEJ1dHRvbiIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZVR5cGUiLCJlZGl0VGl0bGVCdXR0b24iLCJkdWVEYXRlRWxlbWVudCIsImVkaXREdWVEYXRlQnV0dG9uIiwiX3JlbmRlclRvZG9JdGVtcyIsImJpbmQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWRpdEF0dHJpYnV0ZUJ1dHRvblNlbGVjdG9yIiwiZWRpdEF0dHJpYnV0ZUJ1dHRvbiIsImZvcm1FbGVtZW50IiwiRURJVF9BVFRSSUJVVEVfUkVOREVSRUQiLCJjdXJyUGFnZVZpZXciLCJ1cGRhdGVWaWV3IiwiX2JpbmRCdXR0b25zIiwiYnV0dG9ucyIsInB1YlN1YkV2ZW50IiwiZXh0cmFEYXRhQXR0cnMiLCJjbGVhcmVkQnV0dG9uIiwiY2xvbmVOb2RlIiwiZXh0cmFEYXRhIiwicmVkdWNlIiwiYXR0ciIsImFzc2lnbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwidGFyZ2V0IiwiX2JpbmRGb3JtU3VibWl0QnV0dG9ucyIsImRhdGFBdHRycyIsInByZXZlbnREZWZhdWx0IiwiZm9ybSIsImNsb3Nlc3QiLCJhcmdzIiwibWFwIiwiZnJvbUVudHJpZXMiLCJGb3JtRGF0YSIsIlVwZGF0YWJsZSIsIlN0YXR1c2FibGUiLCJzdGF0dXNlcyIsImxlbmd0aCIsIlByaW9yaXRpemFibGUiLCJwcmlvcml0aWVzIiwiTWF0aCIsIm1heCIsIm1pbiIsIkNvbGxlY3Rpb25hYmxlIiwiY29sbGVjdGlvblR5cGUiLCJjb2xsZWN0aW9uIiwibmV3Q29sbGVjdGlvbkl0ZW1zIiwiQmVsb25nYWJsZSIsImJlbG9uZ1R5cGUiLCJiZWxvbmdzIiwiQmVsb25nVXBkYXRhYmxlIiwiVVBEQVRFX0JFTE9ORyIsIm9sZEJlbG9uZ0lkIiwibmV3QmVsb25nSWQiLCJiZWxvbmdJZCIsIkxpc3RhYmxlIiwicmF3SXRlbUxpc3QiLCJuZXh0SWQiLCJpdGVtVHlwZSIsInB1Ymxpc2hMaXN0VXBkYXRlZFdpdGhCZWxvbmdEYXRhIiwiaXRlbSIsImJlbG9uZ0RhdGEiLCJlbnRyaWVzIiwiZmlsdGVyIiwicmF3SXRlbSIsIml0ZW1GYWN0b3J5Iiwid2l0aElkIiwiZmluZCIsIndpdGhJZHMiLCJpZHMiLCJpbmNsdWRlcyIsIm5ld0xpc3RJdGVtIiwidW5zaGlmdCIsInNwbGljZSIsIlByb2plY3QiLCJhdHRyaWJ1dGVzIiwiVG9kb0l0ZW0iLCJjb21wRm4iLCJDaGVja2xpc3RJdGVtIiwidmlldyIsImlucHV0IiwiY2xlYXJlZElucHV0IiwiZm9jdXMiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIl9mb2N1c0lucHV0IiwiYWN0aXZlRWxlbWVudCIsImFwcGxpY2F0aW9uRGF0YUxpc3RzIiwiUHJvamVjdHNMaXN0IiwiYXBwbGljYXRpb25EYXRhIiwidG9VcHBlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9