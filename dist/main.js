(()=>{var t={798:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var o={};n.PubSub?(o=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=o,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,a,i){var u,s=e[n],c=i?o:r;if(Object.prototype.hasOwnProperty.call(e,n))for(u in s)Object.prototype.hasOwnProperty.call(s,u)&&c(s[u],t,a)}function i(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function u(t,e,n,r){var o=function(t,e,n){return function(){var r=String(t),o=r.lastIndexOf(".");for(a(t,t,e,n);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),a(t,r,e,n);a(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=i(e)||i("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=i(e);return n}(t)&&(!0===n?o():setTimeout(o,0),!0)}t.publish=function(e,n){return u(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return u(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var o="uid_"+String(++n);return e[t][o]=r,o},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,o=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])o++;break}return o},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,o,a,i="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),u=!i&&"string"==typeof n,s="function"==typeof n,c=!1;if(!i){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],u&&o[n]){delete o[n],c=n;break}if(s)for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===n&&(delete o[a],c=!0)}return c}t.clearSubscriptions(n)}}(o)),void 0!==t&&t.exports&&(e=t.exports=o),e.PubSub=o,t.exports=e=o}("object"==typeof window&&window||this)}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var r={};(()=>{"use strict";n.d(r,{O:()=>_t});var t={};n.r(t),n.d(t,{O:()=>_t});var e=n(798),o=n.n(e);const a="initialize",i="dataInitialized",u="back",s=t=>`index.${t}`,c=t=>`new.${t}`,d=t=>`create.${t}`,l=t=>`show.${t}`,f=t=>`edit.attribute.${t}`,m=t=>`destroy.${t}`,h=(t,e)=>`update.${t}.${e}`,b="updated",p=(t,e)=>`updated.${t}.${e}`,g=t=>`updated.${t}.belong`,y=t=>`updated.${t}.list`,v="rendered.page";function w(){}function T(t){}function C(){document.body.innerHTML="",function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("new"),n.dataset.type="todoItem",n.dataset.projectId=0,n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("new"),n.dataset.type="project",n.textContent="+",t.append(e,n),document.body.append(t)}(),_t.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),r=document.createElement("button"),o=document.createElement("ul");[n,r].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("show"),n.textContent=t.title,r.classList.add("destroy"),r.textContent="-",_t.todoItemsList.withIds(t.todoItemIds).slice(0,2).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,o.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(r),e.append(o),document.body.appendChild(e)})),o().publish(v,C),o().publish("rendered.view.index.project")}o().subscribe(a,function(t=w){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItemIds:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"low",status:"incomplete",dueDate:new Date("November 10, 2022")}],checklistItemsList:[]};o().publish(i,e)}}(w)),o().subscribe(b,function(e=T){return function(){e(t.default)}}(T)),o().subscribe(s("project"),C),o().subscribe(c("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.classList.add("new-form"),n.dataset.type="project",n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.replaceWith(e,n),o().publish(("project","rendered.view.new.project"))})),o().subscribe(c("todoItem"),(function(){console.log("newTodoItemView")}));var x={};function S(){return x}function M(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function O(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function k(t){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},k(t)}function E(t){O(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===k(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function D(t){O(1,arguments);var e=E(t);return e.setHours(0,0,0,0),e}var P=864e5;function j(t,e){O(2,arguments);var n=D(t),r=D(e),o=n.getTime()-M(n),a=r.getTime()-M(r);return Math.round((o-a)/P)}function U(t){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},U(t)}function W(t){return O(1,arguments),t instanceof Date||"object"===U(t)&&"[object Date]"===Object.prototype.toString.call(t)}function L(t){if(O(1,arguments),!W(t)&&"number"!=typeof t)return!1;var e=E(t);return!isNaN(Number(e))}function I(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Y(t,e){O(2,arguments);var n=E(t).getTime(),r=I(e);return new Date(n+r)}function q(t,e){O(2,arguments);var n=I(e);return Y(t,-n)}var N=864e5;function F(t){O(1,arguments);var e=1,n=E(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function A(t){O(1,arguments);var e=E(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=F(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=F(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function H(t){O(1,arguments);var e=A(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=F(n);return r}var $=6048e5;function z(t,e){var n,r,o,a,i,u,s,c;O(1,arguments);var d=S(),l=I(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=E(t),m=f.getUTCDay(),h=(m<l?7:0)+m-l;return f.setUTCDate(f.getUTCDate()-h),f.setUTCHours(0,0,0,0),f}function B(t,e){var n,r,o,a,i,u,s,c;O(1,arguments);var d=E(t),l=d.getUTCFullYear(),f=S(),m=I(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==r?r:null===(s=f.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(l+1,0,m),h.setUTCHours(0,0,0,0);var b=z(h,e),p=new Date(0);p.setUTCFullYear(l,0,m),p.setUTCHours(0,0,0,0);var g=z(p,e);return d.getTime()>=b.getTime()?l+1:d.getTime()>=g.getTime()?l:l-1}function R(t,e){var n,r,o,a,i,u,s,c;O(1,arguments);var d=S(),l=I(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=B(t,e),m=new Date(0);m.setUTCFullYear(f,0,l),m.setUTCHours(0,0,0,0);var h=z(m,e);return h}var Q=6048e5;function G(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const X=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return G("yy"===e?r%100:r,e.length)},_=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):G(n+1,2)},V=function(t,e){return G(t.getUTCDate(),e.length)},J=function(t,e){return G(t.getUTCHours()%12||12,e.length)},K=function(t,e){return G(t.getUTCHours(),e.length)},Z=function(t,e){return G(t.getUTCMinutes(),e.length)},tt=function(t,e){return G(t.getUTCSeconds(),e.length)},et=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return G(Math.floor(r*Math.pow(10,n-3)),e.length)};function nt(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+G(a,2)}function rt(t,e){return t%60==0?(t>0?"-":"+")+G(Math.abs(t)/60,2):ot(t,e)}function ot(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+G(Math.floor(o/60),2)+n+G(o%60,2)}const at={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return X(t,e)},Y:function(t,e,n,r){var o=B(t,r),a=o>0?o:1-o;return"YY"===e?G(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):G(a,e.length)},R:function(t,e){return G(A(t),e.length)},u:function(t,e){return G(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return G(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return G(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return _(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return G(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){O(1,arguments);var n=E(t),r=z(n,e).getTime()-R(n,e).getTime();return Math.round(r/Q)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):G(o,e.length)},I:function(t,e,n){var r=function(t){O(1,arguments);var e=E(t),n=F(e).getTime()-H(e).getTime();return Math.round(n/$)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):G(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):V(t,e)},D:function(t,e,n){var r=function(t){O(1,arguments);var e=E(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/N)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):G(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return G(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return G(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return G(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return J(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):K(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):G(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Z(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):tt(t,e)},S:function(t,e){return et(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return rt(o);case"XXXX":case"XX":return ot(o);default:return ot(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return rt(o);case"xxxx":case"xx":return ot(o);default:return ot(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+nt(o,":");default:return"GMT"+ot(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return G(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return G((r._originalDate||t).getTime(),e.length)}};var it=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},ut=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},st={p:ut,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return it(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",it(o,e)).replace("{{time}}",ut(a,e))}};const ct=st;var dt=["D","DD"],lt=["YY","YYYY"];function ft(t){return-1!==dt.indexOf(t)}function mt(t){return-1!==lt.indexOf(t)}function ht(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var bt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function pt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}var gt,yt={date:pt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:pt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:pt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},vt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function wt(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function Tt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,u=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?xt(s,(function(t){return t.test(u)})):Ct(s,(function(t){return t.test(u)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=e.slice(u.length);return{value:i,rest:d}}}function Ct(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function xt(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const St={code:"en-US",formatDistance:function(t,e,n){var r,o=bt[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:yt,formatRelative:function(t,e,n,r){return vt[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:wt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:wt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:wt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:wt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:wt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(gt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(gt.matchPattern);if(!n)return null;var r=n[0],o=t.match(gt.parsePattern);if(!o)return null;var a=gt.valueCallback?gt.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(r.length);return{value:a,rest:i}}),era:Tt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Tt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:Tt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Tt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Tt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var Mt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ot=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,kt=/^'([^]*?)'?$/,Et=/''/g,Dt=/[a-zA-Z]/;function Pt(t,e,n){var r,o,a,i,u,s,c,d,l,f,m,h,b,p,g,y,v,w;O(2,arguments);var T=String(e),C=S(),x=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:C.locale)&&void 0!==r?r:St,k=I(null!==(a=null!==(i=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==u?u:C.firstWeekContainsDate)&&void 0!==i?i:null===(l=C.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=I(null!==(m=null!==(h=null!==(b=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(g=n.locale)||void 0===g||null===(y=g.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==b?b:C.weekStartsOn)&&void 0!==h?h:null===(v=C.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==m?m:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!x.localize)throw new RangeError("locale must contain localize property");if(!x.formatLong)throw new RangeError("locale must contain formatLong property");var P=E(t);if(!L(P))throw new RangeError("Invalid time value");var j=M(P),U=q(P,j),W={firstWeekContainsDate:k,weekStartsOn:D,locale:x,_originalDate:P},Y=T.match(Ot).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ct[e])(t,x.formatLong):t})).join("").match(Mt).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return jt(r);var a=at[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!mt(r)||ht(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!ft(r)||ht(r,e,String(t)),a(U,r,x.localize,W);if(o.match(Dt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return Y}function jt(t){var e=t.match(kt);return e?e[1].replace(Et,"'"):t}o().subscribe(l("project"),(function t(e,n){document.body.innerHTML="";const r=_t.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),r=document.createElement("button"),o=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",r.classList.add("edit-attribute"),r.dataset.type=t.type,r.dataset.id=t.id,r.dataset.attribute="title",r.dataset.attributeType="text",r.dataset.attributeValue=t.title,r.textContent=t.title,o.classList.add("new"),o.dataset.type="todoItem",o.dataset.projectId=t.id,o.textContent="+",n.append(r,o),document.body.append(e,n)})(r),function(t){_t.todoItemsList.withIds(t.todoItemIds).forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),r=document.createElement("div"),o=document.createElement("button"),a=document.createElement("button"),i=document.createElement("button");e.classList.add(t.priority),r.textContent="Due: ",[a,n,o,i].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),a.classList.add("show"),a.textContent="Expand",[n,o].forEach((t=>t.classList.add("edit-attribute"))),n.dataset.attribute="title",n.dataset.attributeType="text",n.dataset.attributeValue=t.title,n.textContent=t.title,o.dataset.attribute="dueDate",o.dataset.attributeType="datetime-local",o.dataset.attributeValue=t.dueDate,o.textContent=function(t,e,n){var r,o,a,i,u,s,c,d,l,f;O(2,arguments);var m=E(t),h=E(e),b=S(),p=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:b.locale)&&void 0!==r?r:St,g=I(null!==(a=null!==(i=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==u?u:b.weekStartsOn)&&void 0!==i?i:null===(l=b.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==a?a:0);if(!p.localize)throw new RangeError("locale must contain localize property");if(!p.formatLong)throw new RangeError("locale must contain formatLong property");if(!p.formatRelative)throw new RangeError("locale must contain formatRelative property");var y,v=j(m,h);if(isNaN(v))throw new RangeError("Invalid time value");y=v<-6?"other":v<-1?"lastWeek":v<0?"yesterday":v<1?"today":v<2?"tomorrow":v<7?"nextWeek":"other";var w=q(m,M(m)),T=q(h,M(h)),C=p.formatRelative(y,w,T,{locale:p,weekStartsOn:g});return Pt(m,C,{locale:p,weekStartsOn:g})}(new Date(t.dueDate),new Date),i.classList.add("destroy"),i.textContent="-",r.append(o),e.append(n,r,a,i),document.body.append(e)}))}(r),o().publish(v,t.bind(null,e,n)),o().publish(("project","rendered.view.show.project"))})),o().subscribe(l("todoItem"),(function(t,e){console.log("showTodoItemView")})),o().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:r,attributeType:a,attributeValue:i}){document.querySelectorAll("button").forEach((t=>t.disabled=!0));const u=`.edit-attribute[data-type="${e}"][data-id="${n}"][data-attribute="${r}"]`,s=document.querySelector(u),c=document.createElement("button"),d=document.createElement("form");c.classList.add("back"),c.textContent="←",d.classList.add("edit-form"),d.dataset.type=e,d.dataset.id=n,d.dataset.attribute=r,d.innerHTML=`<input type="${a}" name="${r}" id="${r}" value="${i}">\n     <button class="submit">✓</button>`,s.replaceWith(c,d),o().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:r})}));let Ut=C;function Wt(){document.body.innerHTML="",Ut()}function Lt(t,e){t.forEach((t=>{(t=qt(t)).addEventListener("click",(t=>o().publish("function"==typeof e?e(t.target.dataset.type):e,t.target.dataset)))}))}function It(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=qt(n)).addEventListener("click",(n=>{n.preventDefault();const r=n.target.closest("form"),a=e.map((t=>r.dataset[t]));o().publish(t(...a),Object.fromEntries(new FormData(r)))}))}))}o().subscribe(v,(function(t,e){Ut=e})),o().subscribe(b,Wt),o().subscribe(u,Wt),o().subscribe("rendered.view",(function(){Lt(document.querySelectorAll(".index"),s),Lt(document.querySelectorAll(".new"),c),Lt(document.querySelectorAll(".show"),l),Lt(document.querySelectorAll(".edit-attribute"),f),Lt(document.querySelectorAll(".destroy"),m),Lt(document.querySelectorAll(".back"),u)})),o().subscribe("rendered.view.new",(function(){It(d,["type"])})),o().subscribe("rendered.view.edit",(function(){It(h,["type","id"])}));const Yt=["text"];function qt(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function Nt(t){o().subscribe(h(t.type,t.id),(function(e,n){for(const e in n)t[e]=n[e];o().publish(p(t.type,t.id))}))}function Ft(t){const e=["incomplete","complete"];o().subscribe(`update.${t.type}.status.${t.id}`,(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],o().publish(p(t.type,t.id))}))}function At(t){const e=["low","medium","high"];o().subscribe(`update.${t.type}.priority.${t.id}`,(function(n,r){t.priority=e[Math.max(Math.min(e.indexOf(t.priority)+r,0),e.length-1)],o().publish(p(t.type,t.id))}))}function Ht(t,e){const n=e+"Ids";t[n]||=[],o().subscribe(y(e),(function(e,r){const o=r?.[t.type]?.[t.id];o&&(t[n]=o)}))}function $t(t,e){t.belongs||={[e]:0}}function zt(t,e){o().subscribe(((t,e,n)=>`update.${t}.belong.${n}.${e}`)(t.type,t.id,e),(function(n,r){const a=t.belongs[e],i=r.belongId;t.belongs[e]=i,o().publish(g(t.type),{id:t.id,belongType:e,oldBelongId:a,newBelongId:i})}))}function Bt(t,e=[]){let n=1;const r=t.itemType+"s";function a(e){const n=Object.entries(e.belongs||{}).reduce(((e,[n,o])=>Object.assign(e,{[n]:{[o]:t[r].filter((t=>t.belongs[n]==o))}})),{});o().publish(y(t.itemType),n)}t[r]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[r].find((t=>e==t.id))},t.withIds=function(e){return t[r].filter((t=>e.includes(t.id)))},o().subscribe(g(t.itemType),(function(e,n){const a=n.belongType,i=n.oldBelongId,u=n.newBelongId;t[r].find((t=>t.id==n.id)).belongs[a]=u,o().publish(y(t.itemType),{[a]:{[i]:t[r].filter((t=>t.belongs[a]==i)).map((t=>t.id)),[u]:t[r].filter((t=>t.belongs[a]==u)).map((t=>t.id))}})})),o().subscribe(d(t.itemType),(function(e,o){const i=t.itemFactory(Object.assign({id:n++},o));t[r].unshift(i),a(i)})),o().subscribe(m(t.itemType),(function(e,n){if(0==n.id)return;const o=t[r].find((t=>t.id==n.id));t[r].splice(t[r].indexOf(o),1),a(o)}))}function Rt(t){const e=Object.assign({type:"project"},t);return Nt(e),Ht(e,"todoItem"),e}function Qt(t){const e=Object.assign({type:"todoItem"},t);return[Nt,Ft,At].forEach((t=>t(e))),[$t,zt].forEach((t=>t(e,"project"))),Ht(e,"checklistItem"),e}function Gt(t){const e=Object.assign({type:"checklistItem"},t);return[Nt,Ft].forEach((t=>t(e))),$t(e,"todoItem"),e}o().subscribe("rendered.view.edit.attribute",(function(t,e){document.querySelectorAll("input").forEach((t=>{const n=(t=qt(t)).closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),Yt.includes(t.type)&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),t.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==t&&o().publish(h(n.type,n.id),Object.fromEntries(new FormData(n)))})),Yt.includes(t.type)&&t.addEventListener("focusout",(()=>o().publish(u)))}))}));const Xt={ProjectsList:function(t){const e={itemFactory:Rt,itemType:"project"};return Bt(e,t),e},TodoItemsList:function(t){const e={itemFactory:Qt,itemType:"todoItem"};return Bt(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:Gt,itemType:"checklistItem"};return Bt(e,t),e}};let _t={};o().subscribe(i,(function(t,e){for(const t in e)_t[t]=Xt[t[0].toUpperCase()+t.slice(1)](e[t]);o().publish(b)})),o().publish(a)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,