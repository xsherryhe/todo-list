(()=>{var t={316:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,".hidden {\n  display: none;\n}\n\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n","",{version:3,sources:["webpack://./src/styles/application.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:[".hidden {\n  display: none;\n}\n\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n"],sourceRoot:""}]);const u=i},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(i[s]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},798:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var o={};n.PubSub?(o=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=o,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,a,i){var u,s=e[n],c=i?o:r;if(Object.prototype.hasOwnProperty.call(e,n))for(u in s)Object.prototype.hasOwnProperty.call(s,u)&&c(s[u],t,a)}function i(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function u(t,e,n,r){var o=function(t,e,n){return function(){var r=String(t),o=r.lastIndexOf(".");for(a(t,t,e,n);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),a(t,r,e,n);a(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=i(e)||i("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=i(e);return n}(t)&&(!0===n?o():setTimeout(o,0),!0)}t.publish=function(e,n){return u(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return u(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var o="uid_"+String(++n);return e[t][o]=r,o},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,o=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])o++;break}return o},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,o,a,i="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),u=!i&&"string"==typeof n,s="function"==typeof n,c=!1;if(!i){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],u&&o[n]){delete o[n],c=n;break}if(s)for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&o[a]===n&&(delete o[a],c=!0)}return c}t.clearSubscriptions(n)}}(o)),void 0!==t&&t.exports&&(e=t.exports=o),e.PubSub=o,t.exports=e=o}("object"==typeof window&&window||this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],u=0;u<t.length;u++){var s=t[u],c=r.base?s[0]+r.base:s[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var m=n(l),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==m)e[m].references++,e[m].updater(f);else{var p=o(f,r);r.byIndex=u,e.splice(u,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var u=n(a[i]);e[u].references--}for(var s=r(t,o),c=0;c<a.length;c++){var d=n(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.nc=void 0;var r={};(()=>{"use strict";n.d(r,{O:()=>Me,w:()=>t});var t={};n.r(t),n.d(t,{fn:()=>Se,yo:()=>xe,tA:()=>Te,Sn:()=>Ee,Do:()=>Ce});var e={};n.r(e),n.d(e,{O:()=>Me,w:()=>t});var o=n(379),a=n.n(o),i=n(795),u=n.n(i),s=n(569),c=n.n(s),d=n(565),l=n.n(d),m=n(216),f=n.n(m),p=n(589),h=n.n(p),b=n(316),y={};y.styleTagTransform=h(),y.setAttributes=l(),y.insert=c().bind(null,"head"),y.domAPI=u(),y.insertStyleElement=f(),a()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var g=n(798),v=n.n(g);const w="initialize",x="dataInitialized",T="back",C=t=>`index.${t}`,S=t=>`new.${t}`,E=t=>`create.${t}`,k=t=>`show.${t}`,M=t=>`hide.${t}`,O=t=>`edit.attribute.${t}`,D=t=>`edit.belong.${t}`,j=t=>`destroy.${t}`,P=(t,e)=>`update.${t}.${e}`,I=(t,e)=>`update.${t}.status.${e}`,L=(t,e)=>`update.${t}.priority.${e}`,$=(t,e,n)=>`update.${t}.belong.${n}.${e}`,A="updated.data",U=(t,e)=>`updated.data.item.${t}.${e}`,W=t=>`updated.data.list.${t}`,q=t=>`updated.${t}.belong`,N=t=>`updated.${t}.collection`,Y="rendered.page",H=t=>`rendered.view.new.${t}`,F=t=>`rendered.view.show.${t}`;function R(){}function B(t){}function z(){document.body.innerHTML="",function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("new"),n.dataset.type="todoItem",n.dataset.projectId=0,n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("new"),n.dataset.type="project",n.textContent="+",t.append(e,n),document.body.append(t)}(),Me.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),r=document.createElement("button"),o=document.createElement("ul");[n,r].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("show"),n.dataset.todoItemsShow="",n.textContent=t.title,r.classList.add("destroy"),r.textContent="-",Me.todoItemsList.withIds(t.todoItems).slice(0,xe).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,o.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(r),e.append(o),document.body.appendChild(e)})),v().publish(Y,z),v().publish("rendered.view.index.project")}function Q(t,e,n,r={}){const o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("button"),u=Ee[t.type].includes(e),s=r.attributeText||t[e]||"None";o.classList.add("attribute"),a.textContent=r.elementText||"",u&&(a.textContent+=s),[o,i].forEach((n=>{n.dataset.type=t.type,n.dataset.id=t.id,n.dataset.attribute=e})),i.classList.add("edit-attribute"),i.dataset.attributeType=n,i.dataset.attributeValue=t[e]||"",i.textContent=u?"Edit":s,o.append(a,i),(r.parentElement||document.body).append(o)}function G(){document.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=!0))}v().subscribe(w,function(t=R){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete",dueDate:new Date("November 10, 2022")}],checklistItemsList:[]};v().publish(x,e)}}(R)),v().subscribe("updated",function(t=B){return function(){t(e.default)}}(B)),v().subscribe(C("project"),z),v().subscribe(S("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.dataset.type="project",n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.replaceWith(e,n),v().publish(H("project"))})),v().subscribe(S("todoItem"),(function(t,e){G();const n=document.querySelector('.new[data-type="todoItem"]'),r=document.createElement("button"),o=document.createElement("form");r.classList.add("back"),r.textContent="Back",o.dataset.type="todoItem",o.innerHTML=`<div class="field">\n      <label for="title">New To-Do</label>\n      <input type="text" name="title" id="title">\n     </div>\n     <div class="field">\n      <label for="dueDate">Due Date</label>\n      <input type="datetime-local" name="dueDate" id="dueDate">\n     </div>\n     <div class="field">\n      <label for="description">Description</label>\n      <textarea name="description" id="description"></textarea>\n     </div>\n     <div class="field">\n      <label for="notes">Notes</label>\n      <textarea name="notes" id="notes"></textarea>\n     </div>\n     <div class="field">\n      <label for="belongs[project]">Project</label>\n      <select name="belongs[project]" id="belongs[project]">\n        ${Me.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==e.projectId?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n      </select>\n     </div>\n     <div class="field">\n      <label for="priority">Priority</label>\n      <select name="priority" id="priority">\n        ${Te.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n      </select>\n     </div>\n     <input type="hidden" name="status" id="status" value="${Ce[0]}">\n     <button class="new" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n     <button class="submit">Submit</button>`,n.replaceWith(r,o),v().publish(H("todoItem"))}));var X={};function _(){return X}function J(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function Z(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function V(t){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},V(t)}function K(t){Z(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===V(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function tt(t){Z(1,arguments);var e=K(t);return e.setHours(0,0,0,0),e}var et=864e5;function nt(t,e){Z(2,arguments);var n=tt(t),r=tt(e),o=n.getTime()-J(n),a=r.getTime()-J(r);return Math.round((o-a)/et)}function rt(t){return rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},rt(t)}function ot(t){return Z(1,arguments),t instanceof Date||"object"===rt(t)&&"[object Date]"===Object.prototype.toString.call(t)}function at(t){if(Z(1,arguments),!ot(t)&&"number"!=typeof t)return!1;var e=K(t);return!isNaN(Number(e))}function it(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function ut(t,e){Z(2,arguments);var n=K(t).getTime(),r=it(e);return new Date(n+r)}function st(t,e){Z(2,arguments);var n=it(e);return ut(t,-n)}var ct=864e5;function dt(t){Z(1,arguments);var e=1,n=K(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function lt(t){Z(1,arguments);var e=K(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=dt(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=dt(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function mt(t){Z(1,arguments);var e=lt(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=dt(n);return r}var ft=6048e5;function pt(t,e){var n,r,o,a,i,u,s,c;Z(1,arguments);var d=_(),l=it(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=K(t),f=m.getUTCDay(),p=(f<l?7:0)+f-l;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function ht(t,e){var n,r,o,a,i,u,s,c;Z(1,arguments);var d=K(t),l=d.getUTCFullYear(),m=_(),f=it(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==r?r:null===(s=m.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(l+1,0,f),p.setUTCHours(0,0,0,0);var h=pt(p,e),b=new Date(0);b.setUTCFullYear(l,0,f),b.setUTCHours(0,0,0,0);var y=pt(b,e);return d.getTime()>=h.getTime()?l+1:d.getTime()>=y.getTime()?l:l-1}function bt(t,e){var n,r,o,a,i,u,s,c;Z(1,arguments);var d=_(),l=it(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=ht(t,e),f=new Date(0);f.setUTCFullYear(m,0,l),f.setUTCHours(0,0,0,0);var p=pt(f,e);return p}var yt=6048e5;function gt(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const vt=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return gt("yy"===e?r%100:r,e.length)},wt=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):gt(n+1,2)},xt=function(t,e){return gt(t.getUTCDate(),e.length)},Tt=function(t,e){return gt(t.getUTCHours()%12||12,e.length)},Ct=function(t,e){return gt(t.getUTCHours(),e.length)},St=function(t,e){return gt(t.getUTCMinutes(),e.length)},Et=function(t,e){return gt(t.getUTCSeconds(),e.length)},kt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return gt(Math.floor(r*Math.pow(10,n-3)),e.length)};var Mt={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return vt(t,e)},Y:function(t,e,n,r){var o=ht(t,r),a=o>0?o:1-o;return"YY"===e?gt(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):gt(a,e.length)},R:function(t,e){return gt(lt(t),e.length)},u:function(t,e){return gt(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return gt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return gt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return wt(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return gt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){Z(1,arguments);var n=K(t),r=pt(n,e).getTime()-bt(n,e).getTime();return Math.round(r/yt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):gt(o,e.length)},I:function(t,e,n){var r=function(t){Z(1,arguments);var e=K(t),n=dt(e).getTime()-mt(e).getTime();return Math.round(n/ft)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):gt(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):xt(t,e)},D:function(t,e,n){var r=function(t){Z(1,arguments);var e=K(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/ct)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):gt(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return gt(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return gt(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return gt(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Tt(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Ct(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):gt(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):gt(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):St(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Et(t,e)},S:function(t,e){return kt(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Dt(o);case"XXXX":case"XX":return jt(o);default:return jt(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Dt(o);case"xxxx":case"xx":return jt(o);default:return jt(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Ot(o,":");default:return"GMT"+jt(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Ot(o,":");default:return"GMT"+jt(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return gt(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return gt((r._originalDate||t).getTime(),e.length)}};function Ot(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+gt(a,2)}function Dt(t,e){return t%60==0?(t>0?"-":"+")+gt(Math.abs(t)/60,2):jt(t,e)}function jt(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+gt(Math.floor(o/60),2)+n+gt(o%60,2)}const Pt=Mt;var It=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Lt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const $t={p:Lt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return It(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",It(o,e)).replace("{{time}}",Lt(a,e))}};var At=["D","DD"],Ut=["YY","YYYY"];function Wt(t){return-1!==At.indexOf(t)}function qt(t){return-1!==Ut.indexOf(t)}function Nt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Yt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Ht(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const Ft={date:Ht({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Ht({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Ht({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Rt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Bt(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const zt={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Bt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Bt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:Bt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Bt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Bt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Qt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,u=a[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?Xt(s,(function(t){return t.test(u)})):Gt(s,(function(t){return t.test(u)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=e.slice(u.length);return{value:i,rest:d}}}function Gt(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function Xt(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var _t,Jt={ordinalNumber:(_t={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(_t.matchPattern);if(!n)return null;var r=n[0],o=t.match(_t.parsePattern);if(!o)return null;var a=_t.valueCallback?_t.valueCallback(o[0]):o[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(r.length);return{value:a,rest:i}}),era:Qt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Qt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:Qt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Qt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Qt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Zt={code:"en-US",formatDistance:function(t,e,n){var r,o=Yt[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:Ft,formatRelative:function(t,e,n,r){return Rt[t]},localize:zt,match:Jt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Vt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Kt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,te=/^'([^]*?)'?$/,ee=/''/g,ne=/[a-zA-Z]/;function re(t,e,n){var r,o,a,i,u,s,c,d,l,m,f,p,h,b,y,g,v,w;Z(2,arguments);var x=String(e),T=_(),C=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:T.locale)&&void 0!==r?r:Zt,S=it(null!==(a=null!==(i=null!==(u=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==u?u:T.firstWeekContainsDate)&&void 0!==i?i:null===(l=T.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=it(null!==(f=null!==(p=null!==(h=null!==(b=null==n?void 0:n.weekStartsOn)&&void 0!==b?b:null==n||null===(y=n.locale)||void 0===y||null===(g=y.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==h?h:T.weekStartsOn)&&void 0!==p?p:null===(v=T.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!C.localize)throw new RangeError("locale must contain localize property");if(!C.formatLong)throw new RangeError("locale must contain formatLong property");var k=K(t);if(!at(k))throw new RangeError("Invalid time value");var M=J(k),O=st(k,M),D={firstWeekContainsDate:S,weekStartsOn:E,locale:C,_originalDate:k},j=x.match(Kt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,$t[e])(t,C.formatLong):t})).join("").match(Vt).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return oe(r);var a=Pt[o];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!qt(r)||Nt(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!Wt(r)||Nt(r,e,String(t)),a(O,r,C.localize,D);if(o.match(ne))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return j}function oe(t){var e=t.match(te);return e?e[1].replace(ee,"'"):t}function ae(t,e,n){var r,o,a,i,u,s,c,d,l,m;Z(2,arguments);var f=K(t),p=K(e),h=_(),b=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:h.locale)&&void 0!==r?r:Zt,y=it(null!==(a=null!==(i=null!==(u=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==u?u:h.weekStartsOn)&&void 0!==i?i:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!b.localize)throw new RangeError("locale must contain localize property");if(!b.formatLong)throw new RangeError("locale must contain formatLong property");if(!b.formatRelative)throw new RangeError("locale must contain formatRelative property");var g,v=nt(f,p);if(isNaN(v))throw new RangeError("Invalid time value");g=v<-6?"other":v<-1?"lastWeek":v<0?"yesterday":v<1?"today":v<2?"tomorrow":v<7?"nextWeek":"other";var w=st(f,J(f)),x=st(p,J(p)),T=b.formatRelative(g,w,x,{locale:b,weekStartsOn:y});return re(f,T,{locale:b,weekStartsOn:y})}v().subscribe(k("project"),(function t(e,n){document.body.innerHTML="";const r=Me.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),r=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",Q(t,"title","text",{parentElement:n}),r.classList.add("new"),r.dataset.type="todoItem",r.dataset.projectId=t.id,r.textContent="+",n.append(r),document.body.append(e,n)})(r),function(t,e){const n=e.split(" ").filter((t=>t)).map(Number);Me.todoItemsList.withIds(t.todoItems).forEach((r=>{const o=document.createElement("div"),a=document.createElement("button"),i=document.createElement("button"),u=document.createElement("button"),s=document.createElement("button");o.classList.add(r.priority,r.status,"todo-item"),o.dataset.id=r.id,Q(r,"title","text",{parentElement:o}),a.classList.add("update-status"),a.dataset.type=r.type,a.dataset.id=r.id,a.textContent=Ce.indexOf(r.status)?"✓":"",o.append(a),Q(r,"dueDate","datetime-local",{parentElement:o,elementText:"Due: ",attributeText:r.dueDate?ae(new Date(r.dueDate),new Date):"None"}),[i,u].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id,e.dataset.todoItemId=r.id,e.classList.add("show")})),i.classList.add("show-todoItem"),i.dataset.todoItemsShow=e+` ${r.id}`,i.textContent="Expand",u.classList.add("hide-todoItem","hidden"),u.dataset.todoItemsShow=n.filter((t=>t!==+r.id)).join(" "),u.textContent="Shrink",s.dataset.type=r.type,s.dataset.id=r.id,s.classList.add("destroy"),s.textContent="-",n.includes(r.id)&&v().publish(k("todoItem"),{id:r.id}),o.append(i,u,s),document.body.append(o)}))}(r,n.todoItemsShow),v().publish(Y,t.bind(null,e,n)),v().publish(F("project"))})),v().subscribe(k("todoItem"),(function(t,e){const n=Me.todoItemsList.withId(e.id),r=document.querySelector(`.show-todoItem[data-todo-item-id="${e.id}"]`),o=document.querySelector(`.hide-todoItem[data-todo-item-id="${e.id}"]`),a=document.querySelector(`.todo-item[data-id="${e.id}"]`),i=document.createElement("button"),u=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button");Q(n,"description","textarea",{parentElement:a,elementText:"Description: "}),Q(n,"notes","textarea",{parentElement:a,elementText:"Notes: "}),[i,s,c].forEach((t=>{t.dataset.type=n.type,t.dataset.id=n.id})),i.classList.add("edit-belong"),i.dataset.belongType="project",i.dataset.belongId=n.belongs.project,i.textContent="Change Project",u.textContent=`Priority: ${n.priority}`,[s,c].forEach((t=>t.classList.add("update-priority"))),s.dataset.direction=-1,s.textContent="v",c.dataset.direction=1,c.textContent="^",u.append(s,c),r.classList.add("hidden"),o.classList.remove("hidden"),a.append(i,u),v().publish(F("todoItem"))})),v().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:r,attributeType:o,attributeValue:a}){G();const i=`.attribute[data-type="${e}"][data-id="${n}"][data-attribute="${r}"]`,u=document.querySelector(i),s=document.createElement("button"),c=document.createElement("form");s.classList.add("back"),s.textContent="←",c.classList.add("edit-form"),c.dataset.type=e,c.dataset.id=n,c.dataset.attribute=r;const d="textarea"==o;c.innerHTML=`<${d?"textarea":"input"} \n      type="${o}" name="${r}" id="${r}" \n      value="${a}">${d?`${a}</textarea>`:""}\n     <button class="submit">✓</button>`,u.replaceWith(s,c),v().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:r})})),v().subscribe("edit.belong",(function(t,{type:e,id:n,belongType:r,belongId:o}){G();const a=`.edit-belong[data-belong-type="${r}"][data-type="${e}"][data-id="${n}"]`,i=document.querySelector(a),u=document.createElement("button"),s=document.createElement("form");u.classList.add("back"),u.textContent="←",s.classList.add("edit-form"),s.dataset.type=e,s.dataset.id=n,s.dataset.belongType=r,s.innerHTML=`<label for="belongId">Project</label>\n     <select name="belongId" id="belongId">\n      ${Me[r+"sList"][r+"s"].map((t=>`<option value="${t.id}" ${t.id==o?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n     </select>\n     <button class="submit">Change</button>`,i.replaceWith(u,s),v().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:n,belongType:r})})),v().subscribe(S("checklistItem"),(function(t,e){const n=document.querySelector('.new[data-type="checklistItem"]'),r=document.createElement("div"),o=document.createElement("button"),a=document.querySelectorAll(".checklist-item").length+1,i=+e.index,u=`checklistItemsCollectionData[${i}]`;r.classList.add("field","checklist-item"),r.dataset.index=`${i}`,r.innerHTML=`<label for="${u}[title]">${a}.</label>\n     <input type="text" name="${u}[title]" id="${u}[title]">\n     <input type="hidden" name="${u}[status]" id="${u}[status]" value="${Ce[0]}">\n     <button class="hide" data-type="new-checklistItem" data-index=${i}>-</button>`,o.classList.add("new"),o.dataset.type="checklistItem",o.dataset.index=i+1,o.textContent="Add a Checklist Item",n.replaceWith(r,o),v().publish(H("checklistItem"))})),v().subscribe(M("new-checklistItem"),(function(t,e){document.querySelector(`.checklist-item[data-index="${e.index}"]`).remove();let n=1;document.querySelectorAll('.checklist-item > label[for$="[title]"]').forEach((t=>t.textContent=n+++"."))}));let ie=z;function ue(){document.body.innerHTML="",ie()}function se(t,e,n={}){t.forEach((t=>{(t=de(t)).addEventListener("click",(t=>{t.preventDefault();const r=[t.target.dataset.type].concat((n.extraArgs||[]).map((e=>t.target.dataset[e])));v().publish("function"==typeof e?e(...r):e,t.target.dataset)}))}))}function ce(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=de(n)).addEventListener("click",(n=>{n.preventDefault();const r=n.target.closest("form"),o=e.map((t=>r.dataset[t]));v().publish(t(...o),Object.fromEntries(new FormData(r)))}))}))}function de(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function le(t){v().subscribe(P(t.type,t.id),(function(e,n){for(const e in n)t[e]=n[e];v().publish(U(t.type,t.id))}))}function me(t){const e=Ce;v().subscribe(I(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],v().publish(U(t.type,t.id))}))}function fe(t){const e=Te;v().subscribe(L(t.type,t.id),(function(n,r){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +r.direction,0),e.length-1)],v().publish(U(t.type,t.id))}))}function pe(t,e){const n=e+"s";t[n]||=[],v().subscribe(N(e),(function(e,r){const o=r?.[t.type]?.[t.id];o&&(t[n]=o),v().publish(U(t.type,t.id))})),Object.values(t[e+"sCollectionData"]||{}).forEach((n=>{v().publish(E(e),Object.assign(n,{[`belongs[${t.type}]`]:t.id}))})),delete t[e+"sData"]}function he(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function be(t,e){v().subscribe($(t.type,t.id,e),(function(n,r){const o=t.belongs[e],a=r.belongId;t.belongs[e]=a,v().publish(q(t.type),{id:t.id,belongType:e,oldBelongId:o,newBelongId:a}),v().publish(U(t.type,t.id))}))}function ye(t,e=[]){let n=1;const r=t.itemType+"s";function o(e){const n=Object.entries(e.belongs||{}).reduce(((e,[n,o])=>Object.assign(e,{[n]:{[o]:t[r].filter((t=>t.belongs[n]==o)).map((t=>t.id))}})),{});v().publish(N(t.itemType),n)}t[r]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[r].find((t=>e==t.id))},t.withIds=function(e){return t[r].filter((t=>e.includes(t.id)))},v().subscribe(q(t.itemType),(function(e,n){const o=n.belongType,a=n.oldBelongId,i=n.newBelongId;t[r].find((t=>t.id==n.id)).belongs[o]=i,v().publish(N(t.itemType),{[o]:{[a]:t[r].filter((t=>t.belongs[o]==a)).map((t=>t.id)),[i]:t[r].filter((t=>t.belongs[o]==i)).map((t=>t.id))}})})),v().subscribe(E(t.itemType),(function(e,a){console.log(a),function(t){const e=/(.+)\[(.+)\]/;let n;for(;(n=Object.keys(t).filter((t=>e.test(t)))).length>0;)n.forEach((n=>{const[r,o]=n.match(e).slice(1);t[r]||={},t[r][o]=t[n],delete t[n]}))}(a);const i=t.itemFactory(Object.assign({id:n++},a));t[r].unshift(i),o(i),v().publish(W(t.itemType))})),v().subscribe(j(t.itemType),(function(e,n){if(0==n.id)return;const a=t[r].find((t=>t.id==n.id));t[r].splice(t[r].indexOf(a),1),o(a),v().publish(W(t.itemType))}))}function ge(t){const e=Object.assign({type:"project"},t);return le(e),pe(e,"todoItem"),e}function ve(t){const e=Object.assign({type:"todoItem"},t);return[le,me,fe].forEach((t=>t(e))),[he,be].forEach((t=>t(e,"project"))),pe(e,"checklistItem"),e}function we(t){const e=Object.assign({type:"checklistItem"},t);return[le,me].forEach((t=>t(e))),he(e,"todoItem"),e}v().subscribe(Y,(function(t,e){ie=e})),v().subscribe(A,ue),v().subscribe(T,ue),v().subscribe("rendered.view",(function(){se(document.querySelectorAll(".index"),C),se(document.querySelectorAll(".new"),S),se(document.querySelectorAll(".show"),k),se(document.querySelectorAll(".hide"),M),se(document.querySelectorAll(".edit-attribute"),O),se(document.querySelectorAll(".edit-belong"),D),se(document.querySelectorAll(".update-status"),I,{extraArgs:["id"]}),se(document.querySelectorAll(".update-priority"),L,{extraArgs:["id"]}),se(document.querySelectorAll(".destroy"),j),se(document.querySelectorAll(".back"),T)})),v().subscribe("rendered.view.new",(function(){ce(E,["type"])})),v().subscribe("rendered.view.edit.attribute",(function(t,e){document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]),textarea').forEach((t=>{const n=(t=de(t)).closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),t.selectionStart&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),t.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==t&&v().publish(P(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))})),Se.includes(t.type)&&t.addEventListener("focusout",(()=>v().publish(P(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))))})),ce(P,["type","id"])})),v().subscribe("rendered.view.edit.belong",(function(){ce($,["type","id","belongType"])}));const xe=2,Te=["Low","Medium","High"],Ce=["Incomplete","Complete"],Se=["text"],Ee={project:[],todoItem:["description","notes"],checklistItem:[]},ke={ProjectsList:function(t){const e={itemFactory:ge,itemType:"project"};return ye(e,t),e},TodoItemsList:function(t){const e={itemFactory:ve,itemType:"todoItem"};return ye(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:we,itemType:"checklistItem"};return ye(e,t),e}};let Me={};v().subscribe(x,(function(t,e){for(const t in e)Me[t]=ke[t[0].toUpperCase()+t.slice(1)](e[t]);v().publish(A)})),v().publish(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,