(()=>{var t={689:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.submit.symbol {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 1.75rem;\n  min-height: 1.75rem;\n}\n\nbutton.submit.symbol img {\n  max-height: 1.25rem;\n}\n\nbutton.destroy:not(.symbol), button.back:not(.symbol) {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.update-status.update-status {\n  min-height: 2rem;\n  min-width: 2rem;\n  border: 1px solid black;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.update-status.update-status:disabled {\n  border: 1px solid gray;\n}\n\n.update-status img {\n  max-height: 1.5rem;\n}\n\n.status-1, .status-1 button {\n  color: gray;\n}\n\n.disabled {\n  color: gray;\n}\n\n.enabled.enabled, .enabled.enabled button {\n  color: black;\n}\n\n.hidden {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,uBAAuB;EACvB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf",sourcesContent:["html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.submit.symbol {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 1.75rem;\n  min-height: 1.75rem;\n}\n\nbutton.submit.symbol img {\n  max-height: 1.25rem;\n}\n\nbutton.destroy:not(.symbol), button.back:not(.symbol) {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.update-status.update-status {\n  min-height: 2rem;\n  min-width: 2rem;\n  border: 1px solid black;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.update-status.update-status:disabled {\n  border: 1px solid gray;\n}\n\n.update-status img {\n  max-height: 1.5rem;\n}\n\n.status-1, .status-1 button {\n  color: gray;\n}\n\n.disabled {\n  color: gray;\n}\n\n.enabled.enabled, .enabled.enabled button {\n  color: black;\n}\n\n.hidden {\n  display: none;\n}\n"],sourceRoot:""}]);const s=a},542:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".edit-attribute-form {\n  display: grid;\n  grid-template-rows: repeat(2, max-content);\n  column-gap: 0.5rem;\n}\n\n.edit-attribute-form.click-out {\n  align-items: flex-end;\n}\n\n.edit-attribute-form:not(.click-out) {\n  align-items: center;\n}\n\n.edit-attribute-form.click-out:not(.with-label) {\n  grid-template-columns: repeat(2, max-content);\n}\n\n.edit-attribute-form.click-out.with-label,\n.edit-attribute-form:not(.click-out,.with-label) {\n  grid-template-columns: repeat(3, max-content);\n}\n\n.edit-attribute-form:not(.click-out).with-label {\n  grid-template-columns: repeat(4, max-content);\n}\n\n.edit-attribute-form input {\n  background-color: transparent;\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0;\n  height: max-content;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n\n.edit-attribute-form .error {\n  grid-row: 2;\n  font-size: 1rem;\n}\n\n.edit-attribute-form.click-out:not(.with-label) .error {\n  grid-column: 1 / span 2;\n}\n\n.edit-attribute-form.click-out.with-label .error,\n.edit-attribute-form:not(.click-out,.with-label) .error {\n  grid-column: 2 / span 2;\n}\n\n.edit-attribute-form:not(.click-out).with-label .error {\n  grid-column: 3 / span 2;\n}\n","",{version:3,sources:["webpack://./src/styles/edit.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,0CAA0C;EAC1C,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;;EAEE,6CAA6C;AAC/C;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,+BAA+B;EAC/B,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:[".edit-attribute-form {\n  display: grid;\n  grid-template-rows: repeat(2, max-content);\n  column-gap: 0.5rem;\n}\n\n.edit-attribute-form.click-out {\n  align-items: flex-end;\n}\n\n.edit-attribute-form:not(.click-out) {\n  align-items: center;\n}\n\n.edit-attribute-form.click-out:not(.with-label) {\n  grid-template-columns: repeat(2, max-content);\n}\n\n.edit-attribute-form.click-out.with-label,\n.edit-attribute-form:not(.click-out,.with-label) {\n  grid-template-columns: repeat(3, max-content);\n}\n\n.edit-attribute-form:not(.click-out).with-label {\n  grid-template-columns: repeat(4, max-content);\n}\n\n.edit-attribute-form input {\n  background-color: transparent;\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0;\n  height: max-content;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n\n.edit-attribute-form .error {\n  grid-row: 2;\n  font-size: 1rem;\n}\n\n.edit-attribute-form.click-out:not(.with-label) .error {\n  grid-column: 1 / span 2;\n}\n\n.edit-attribute-form.click-out.with-label .error,\n.edit-attribute-form:not(.click-out,.with-label) .error {\n  grid-column: 2 / span 2;\n}\n\n.edit-attribute-form:not(.click-out).with-label .error {\n  grid-column: 3 / span 2;\n}\n"],sourceRoot:""}]);const s=a},713:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n',"",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,SAAS;AACX",sourcesContent:['input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n'],sourceRoot:""}]);const s=a},240:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n',"",{version:3,sources:["webpack://./src/styles/index-projects.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,aAAa;EACb,+CAA+C;EAC/C,oBAAoB;EACpB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb",sourcesContent:['.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n'],sourceRoot:""}]);const s=a},415:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-checklistItem.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['.new.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n'],sourceRoot:""}]);const s=a},156:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n',"",{version:3,sources:["webpack://./src/styles/new-project.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;EACpB,8DAA8D;EAC9D,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB",sourcesContent:['.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n'],sourceRoot:""}]);const s=a},599:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-todoItem.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;AACrB",sourcesContent:['.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n'],sourceRoot:""}]);const s=a},416:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit.submit {\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.project-heading .submit.submit img {\n  max-height: 1.5rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n","",{version:3,sources:["webpack://./src/styles/show-project.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,+BAA+B;AACjC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;AACtB",sourcesContent:[".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit.submit {\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.project-heading .submit.submit img {\n  max-height: 1.5rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n"],sourceRoot:""}]);const s=a},587:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".todo-item {\n  background-color: lightgray;\n  border-radius: 0.2rem;\n  padding: 1.5rem;\n  margin: 1rem auto;\n  width: 65vw;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n}\n\n.todo-item-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.todo-item-heading *,\n.todo-item-heading input {\n  font-size: 1.25rem;\n}\n","",{version:3,sources:["webpack://./src/styles/show-todoItem.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,qBAAqB;EACrB,eAAe;EACf,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;;EAEE,kBAAkB;AACpB",sourcesContent:[".todo-item {\n  background-color: lightgray;\n  border-radius: 0.2rem;\n  padding: 1.5rem;\n  margin: 1rem auto;\n  width: 65vw;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 1rem;\n}\n\n.todo-item-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.todo-item-heading *,\n.todo-item-heading input {\n  font-size: 1.25rem;\n}\n"],sourceRoot:""}]);const s=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},798:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var o={};n.PubSub?(o=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=o,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function i(t,n,i,a){var s,c=e[n],l=a?o:r;if(Object.prototype.hasOwnProperty.call(e,n))for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&l(c[s],t,i)}function a(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,r){var o=function(t,e,n){return function(){var r=String(t),o=r.lastIndexOf(".");for(i(t,t,e,n);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),i(t,r,e,n);i(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=a(e)||a("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=a(e);return n}(t)&&(!0===n?o():setTimeout(o,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var o="uid_"+String(++n);return e[t][o]=r,o},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,o=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])o++;break}return o},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,o,i,a="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!a&&"string"==typeof n,c="function"==typeof n,l=!1;if(!a){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],s&&o[n]){delete o[n],l=n;break}if(c)for(i in o)Object.prototype.hasOwnProperty.call(o,i)&&o[i]===n&&(delete o[i],l=!0)}return l}t.clearSubscriptions(n)}}(o)),void 0!==t&&t.exports&&(e=t.exports=o),e.PubSub=o,t.exports=e=o}("object"==typeof window&&window||this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var m=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var f=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),l=0;l<i.length;l++){var d=n(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0;var r={};(()=>{"use strict";n.d(r,{O:()=>an,w:()=>t});var t={};n.r(t),n.d(t,{fn:()=>De,oF:()=>We,yo:()=>Ie,tA:()=>Me,Sn:()=>Pe,Do:()=>Oe});var e=n(379),o=n.n(e),i=n(795),a=n.n(i),s=n(569),c=n.n(s),l=n(565),d=n.n(l),u=n(216),m=n.n(u),p=n(589),f=n.n(p),b=n(689),A={};A.styleTagTransform=f(),A.setAttributes=d(),A.insert=c().bind(null,"head"),A.domAPI=a(),A.insertStyleElement=m(),o()(b.Z,A),b.Z&&b.Z.locals&&b.Z.locals;var h=n(713),g={};g.styleTagTransform=f(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=m(),o()(h.Z,g),h.Z&&h.Z.locals&&h.Z.locals;var y=n(240),v={};v.styleTagTransform=f(),v.setAttributes=d(),v.insert=c().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=m(),o()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals;var w=n(156),E={};E.styleTagTransform=f(),E.setAttributes=d(),E.insert=c().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=m(),o()(w.Z,E),w.Z&&w.Z.locals&&w.Z.locals;var C=n(599),B={};B.styleTagTransform=f(),B.setAttributes=d(),B.insert=c().bind(null,"head"),B.domAPI=a(),B.insertStyleElement=m(),o()(C.Z,B),C.Z&&C.Z.locals&&C.Z.locals;var x=n(415),k={};k.styleTagTransform=f(),k.setAttributes=d(),k.insert=c().bind(null,"head"),k.domAPI=a(),k.insertStyleElement=m(),o()(x.Z,k),x.Z&&x.Z.locals&&x.Z.locals;var T=n(416),S={};S.styleTagTransform=f(),S.setAttributes=d(),S.insert=c().bind(null,"head"),S.domAPI=a(),S.insertStyleElement=m(),o()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals;var $=n(587),j={};j.styleTagTransform=f(),j.setAttributes=d(),j.insert=c().bind(null,"head"),j.domAPI=a(),j.insertStyleElement=m(),o()($.Z,j),$.Z&&$.Z.locals&&$.Z.locals;var I=n(542),M={};M.styleTagTransform=f(),M.setAttributes=d(),M.insert=c().bind(null,"head"),M.domAPI=a(),M.insertStyleElement=m(),o()(I.Z,M),I.Z&&I.Z.locals&&I.Z.locals;var O=n(798),D=n.n(O);const P="initialize",W="dataInitialized",q="back",L=t=>`index.${t}`,U=t=>`new.${t}`,N=t=>`create.${t}`,Y=(t,e,n)=>`create.collection.${n}.${t}.${e}`,z=t=>`show.${t}`,Z=t=>`hide.${t}`,F=t=>`edit.attribute.${t}`,H=t=>`edit.belong.${t}`,R=t=>`destroy.${t}`,X=t=>`created.collection.${t}`,Q="error.validation",G=(t,e)=>`update.${t}.${e}`,J=(t,e)=>`update.${t}.status.${e}`,V=(t,e)=>`update.${t}.priority.${e}`,_=(t,e,n)=>`update.${t}.belong.${n}.${e}`,K="updated.data",tt=(t,e)=>`updated.data.item.${t}.${e}`,et=t=>`updated.data.list.${t}`,nt=t=>`updated.${t}.belong`,rt=t=>`updated.${t}.collection`,ot="rendered.page",it=t=>`rendered.view.index.${t}`,at=t=>`rendered.view.new.${t}`,st=t=>`rendered.view.show.${t}`;function ct(){const t=JSON.parse(localStorage.data),e={};for(const n in t)e[n]=JSON.parse(t[n]);return e}function lt(t){const e={};for(const n in t)e[n]=JSON.stringify(t[n]);localStorage.data=JSON.stringify(e)}function dt(){document.body.innerHTML='<div class="intro">\n      <div class="intro-heading">\n        <h1>Actionality</h1>\n        <h2>Your one-stop to-do app</h2>\n      </div>\n      <button class="new" data-type="todoItem" data-project-id="0">\n        Add a New To-Do\n      </button>\n   </div>\n   <div class="projects-heading">\n      <h2>My Projects</h2>\n      <button class="new symbol" data-type="project">+</button>\n   </div>',an.projectsList.projects.forEach((t=>{const e=document.createElement("button"),n=document.createElement("ul");e.classList.add("project","show"),e.dataset.type=t.type,e.dataset.id=t.id,e.dataset.todoItemsFull="",e.innerHTML=`<h3>${t.title}</h3>`,t.id&&(e.innerHTML+=`<button class="destroy" \n             data-type="${t.type}" data-id="${t.id}">\n        Remove\n     </button>`),n.classList.add("project-preview"),an.todoItemsList.withIds(t.todoItems).slice(0,Ie).forEach((t=>{n.innerHTML+=`<li>${t.title}</li>`})),e.append(n),document.body.append(e)})),D().publish(ot,dt),D().publish(it("project"))}D().subscribe(P,function(t=ct){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete"}],checklistItemsList:[]};D().publish(W,e)}}(ct)),D().subscribe("updated",function(t=lt){return function(){const e={};for(const t in an)e[t]=an[t].toStorage();t(e)}}(lt)),D().subscribe(L("project"),dt);const ut=n.p+"ddce2e1e5ef60024f029.svg",mt=n.p+"475dbdfbd9245e1deeed.svg";function pt(t,e,n,r={}){const o=Pe[t.type].includes(e),i=r.attributeText||t[e]||"None";return`<div class="attribute" data-type="${t.type}" data-id="${t.id}" data-attribute="${e}">\n      <span class="element-text">${r.elementText||""}</span>\n      <span class="attr-text">${o?i:""}</span>\n      <button class="edit-attribute link" data-type="${t.type}" data-id="${t.id}"\n              data-attribute="${e}" data-attribute-type="${n}"\n              data-attribute-value="${t[e]||""}">\n        ${o?"Edit":i}\n      </button>\n   </div>`}function ft(t=document.body,e=!0){[...t.children].forEach((t=>{e?(t.classList.add("disabled"),t.classList.remove("enabled")):(t.classList.remove("disabled"),t.classList.add("enabled"))})),t.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=e)),t.querySelectorAll(".check").forEach((t=>t.src=e?mt:ut))}function bt(t){return t.split(" ").filter((t=>t)).map(Number)}function At(t){return t.split(/(?=[A-Z])/).map((t=>t.toLowerCase())).join("-")}function ht(t,e){const n=an.todoItemsList.withId(+e.id).belongs[e.belongType],r=document.querySelector(".todo-items").dataset.full,o=t.includes("show")?r+` ${e.id}`:bt(r).filter((t=>t!==+e.id)).join(" ");D().publish(z(e.belongType),{id:n,todoItemsFull:o})}D().subscribe(L("todoItem"),(function(t,e){const n=bt(e.full);document.querySelector(".todo-items-index")?.remove(),document.body.innerHTML+=`<div class="todo-items-index todo-items" data-full="${e.full}"></div>`,an.todoItemsList.withIds(e.ids).sort(((t,e)=>Oe.indexOf(t.status)-Oe.indexOf(e.status))).forEach((t=>D().publish(z("todoItem"),{id:t.id,full:n.includes(t.id),belongType:e.belongType,parentElementSelector:".todo-items"}))),D().publish(it("todoItem"))})),D().subscribe(z("todoItemFull"),ht),D().subscribe(Z("todoItemFull"),ht),D().subscribe(L("checklistItem"),(function(t,e){const n=document.querySelector(e.parentElementSelector||"body");var r,o;document.querySelector(".checklist-items-index")?.remove(),n.innerHTML+=`<div class="checklist-items-index">\n    <h3>Checklist</h3>\n     <ol class="checklist-items"></ol>\n     <form data-type="${e.belongType}" data-id="${e.belongId}" data-collection-type="checklistItem">\n        <button class="back hidden">←</button>\n        <button class="new link" data-type="checklistItem"\n                data-belong-type="${e.belongType}" data-belong-id="${e.belongId}">\n          Add a Checklist Item\n        </button>\n        <button class="submit hidden">Submit</button>\n     </form>\n  </div>`,r=e.ids,o=e.belongType,an.checklistItemsList.withIds(r).sort(((t,e)=>+t[o+"Index"]-+e[o+"Index"])).forEach((t=>{D().publish(z("checklistItem"),{id:t.id,elementType:"li",parentElementSelector:".checklist-items"})})),D().publish(it("checklistItem"))}));const gt=n.p+"8d317290131028fe10cf.svg";D().subscribe(U("project"),(function(){ft();const t=document.querySelector('.new[data-type="project"]'),e=`<form class="new-form enabled" data-type="project">\n      <button class="back symbol">←</button>\n      <label for="title">New Project</label>\n      <input type="text" name="title" id="title">\n      <button class="submit symbol"><img src="${gt}" alt="Submit"></button>\n   </form>`;t.insertAdjacentHTML("afterend",e),t.remove(),D().publish(at("project"))})),D().subscribe(U("todoItem"),(function(t,e){ft();const n=document.querySelector('.new[data-type="todoItem"]'),r=`<form class="new-form enabled" data-type="todoItem">\n      <button class="back">Back</button>\n      <div class="field">\n        <label for="title">New To-Do</label>\n        <input type="text" name="title" id="title">\n      </div>\n      <div class="field">\n        <label for="dueDate">Due Date</label>\n        <input type="datetime-local" name="dueDate" id="dueDate">\n      </div>\n      <div class="field">\n        <label for="description" class="textarea-label">Description</label>\n        <textarea name="description" id="description"></textarea>\n      </div>\n      <div class="field">\n        <label for="notes" class="textarea-label">Notes</label>\n        <textarea name="notes" id="notes"></textarea>\n      </div>\n      <div class="field">\n        <label for="belongs[project]">Project</label>\n        <select name="belongs[project]" id="belongs[project]">\n          ${an.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==+e.projectId?"selected":""}>\n              ${t.title}\n            </option>`)).join("\n")}\n        </select>\n      </div>\n      <div class="field">\n        <label for="priority">Priority</label>\n        <select name="priority" id="priority">\n          ${Me.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n        </select>\n      </div>\n      <input type="hidden" name="status" id="status" value="${Oe[0]}">\n      <h3>Checklist</h3>\n      <button class="new link" data-belong-type="todoItem" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n      <button class="submit">Submit</button>\n   </form>`;n.insertAdjacentHTML("afterend",r),n.remove(),D().publish(at("todoItem"))})),D().subscribe(U("checklistItem"),(function(t,{belongType:e,belongId:n}){n&&ft();const r=(n?`.${At(e)}[data-id="${n}"] `:"")+'.new[data-type="checklistItem"]',o=document.querySelector(r),i=o.closest("form"),a=i.querySelector(".back"),s=i.querySelector(".submit");ft(i,!1),[a,s].forEach((t=>t?.classList?.remove("hidden")));const c=1+document.querySelectorAll(".checklist-item.field").length+(n?an[e+"sList"].withId(n).checklistItems.length:0),l=t=>`checklistItemsCollectionData[${c}][${t}]`,d=`<div class="field enabled checklist-item" data-type="checklistItem" data-index="${c}">\n      <input type="hidden" name="${l(e+"Index")}" id="${l(e+"Index")}" value="${c}">\n      <label for="${l("title")}">${c}.</label>\n      <input type="text" name="${l("title")}" id="${l("title")}">\n      <input type="hidden" name="${l("status")}" id="${l("status")}" value="${Oe[0]}">\n      <button class="hide symbol" data-type="new-checklistItem" data-index="${c}" \n              data-belong-type="${e}" ${n?`data-belong-id=${n}`:""}>X</button>\n   </div>`;o.insertAdjacentHTML("beforebegin",d),D().publish(n?`rendered.view.collection.new.${e}`:at("checklistItem"))})),D().subscribe(Z("new-checklistItem"),(function(t,{belongType:e,belongId:n,index:r}){const o=n?`.${At(e)}[data-id="${n}"] form[data-collection-type="checklistItem"]`:`form[data-type="${e}"]`,i=document.querySelector(o);i.querySelector(`.checklist-item.field[data-index="${r}"]`).remove();const a=i.querySelectorAll(".checklist-item.field");if(n&&0==a.length){ft(document,!1);[i.querySelector(".back"),i.querySelector(".submit")].forEach((t=>t?.classList?.add("hidden")))}const s=1+(n?an[e+"sList"].withId(n).checklistItems.length:0);a.forEach(((t,n)=>{!function(t,e,n){const r=t.querySelectorAll("input"),o=t.querySelector(`input[name*="${e}Index"]`),i=t.querySelector('label[for*="title"]'),a=t.querySelector(".hide");r.forEach((t=>{["name","id"].forEach((e=>t[e]=t[e].replace(/\d+/,n)))})),t.dataset.index=n,o.value=n,i.textContent=`${n}.`,a.dataset.index=n}(t,e,n+s)}))})),D().subscribe(z("project"),(function t(e,n){const r=an.projectsList.withId(n.id);document.body.innerHTML=`<button class="index" data-type="${r.type}">All Projects</button>\n   <div class="headings">\n      <div class="project-heading">\n        ${pt(r,"title","text")}\n      </div>\n      <div class="todo-items-heading">\n        <h2>To-Dos</h2>\n        <button class="new symbol" data-type="todoItem" data-project-id="${r.id}">+</button>\n      </div>\n   </div>`,function(t,e){D().publish(L("todoItem"),{belongType:t.type,ids:t.todoItems,full:e})}(r,n.todoItemsFull),D().publish(ot,t.bind(null,e,n)),D().publish(st("project"))}));var yt={};function vt(){return yt}function wt(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function Et(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function Ct(t){return Ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ct(t)}function Bt(t){Et(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===Ct(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function xt(t){Et(1,arguments);var e=Bt(t);return e.setHours(0,0,0,0),e}var kt=864e5;function Tt(t,e){Et(2,arguments);var n=xt(t),r=xt(e),o=n.getTime()-wt(n),i=r.getTime()-wt(r);return Math.round((o-i)/kt)}function St(t){return St="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},St(t)}function $t(t){return Et(1,arguments),t instanceof Date||"object"===St(t)&&"[object Date]"===Object.prototype.toString.call(t)}function jt(t){if(Et(1,arguments),!$t(t)&&"number"!=typeof t)return!1;var e=Bt(t);return!isNaN(Number(e))}function It(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Mt(t,e){Et(2,arguments);var n=Bt(t).getTime(),r=It(e);return new Date(n+r)}function Ot(t,e){Et(2,arguments);var n=It(e);return Mt(t,-n)}var Dt=864e5;function Pt(t){Et(1,arguments);var e=1,n=Bt(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function Wt(t){Et(1,arguments);var e=Bt(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=Pt(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=Pt(i);return e.getTime()>=o.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}function qt(t){Et(1,arguments);var e=Wt(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=Pt(n);return r}var Lt=6048e5;function Ut(t,e){var n,r,o,i,a,s,c,l;Et(1,arguments);var d=vt(),u=It(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=Bt(t),p=m.getUTCDay(),f=(p<u?7:0)+p-u;return m.setUTCDate(m.getUTCDate()-f),m.setUTCHours(0,0,0,0),m}function Nt(t,e){var n,r,o,i,a,s,c,l;Et(1,arguments);var d=Bt(t),u=d.getUTCFullYear(),m=vt(),p=It(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,p),f.setUTCHours(0,0,0,0);var b=Ut(f,e),A=new Date(0);A.setUTCFullYear(u,0,p),A.setUTCHours(0,0,0,0);var h=Ut(A,e);return d.getTime()>=b.getTime()?u+1:d.getTime()>=h.getTime()?u:u-1}function Yt(t,e){var n,r,o,i,a,s,c,l;Et(1,arguments);var d=vt(),u=It(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(c=d.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),m=Nt(t,e),p=new Date(0);p.setUTCFullYear(m,0,u),p.setUTCHours(0,0,0,0);var f=Ut(p,e);return f}var zt=6048e5;function Zt(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const Ft=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return Zt("yy"===e?r%100:r,e.length)},Ht=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):Zt(n+1,2)},Rt=function(t,e){return Zt(t.getUTCDate(),e.length)},Xt=function(t,e){return Zt(t.getUTCHours()%12||12,e.length)},Qt=function(t,e){return Zt(t.getUTCHours(),e.length)},Gt=function(t,e){return Zt(t.getUTCMinutes(),e.length)},Jt=function(t,e){return Zt(t.getUTCSeconds(),e.length)},Vt=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return Zt(Math.floor(r*Math.pow(10,n-3)),e.length)};var _t={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return Ft(t,e)},Y:function(t,e,n,r){var o=Nt(t,r),i=o>0?o:1-o;return"YY"===e?Zt(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):Zt(i,e.length)},R:function(t,e){return Zt(Wt(t),e.length)},u:function(t,e){return Zt(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return Zt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return Zt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Ht(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return Zt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){Et(1,arguments);var n=Bt(t),r=Ut(n,e).getTime()-Yt(n,e).getTime();return Math.round(r/zt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):Zt(o,e.length)},I:function(t,e,n){var r=function(t){Et(1,arguments);var e=Bt(t),n=Pt(e).getTime()-qt(e).getTime();return Math.round(n/Lt)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):Zt(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Rt(t,e)},D:function(t,e,n){var r=function(t){Et(1,arguments);var e=Bt(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/Dt)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):Zt(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Zt(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Zt(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return Zt(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Xt(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Qt(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):Zt(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):Zt(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Gt(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Jt(t,e)},S:function(t,e){return Vt(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return te(o);case"XXXX":case"XX":return ee(o);default:return ee(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return te(o);case"xxxx":case"xx":return ee(o);default:return ee(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Kt(o,":");default:return"GMT"+ee(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Kt(o,":");default:return"GMT"+ee(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return Zt(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return Zt((r._originalDate||t).getTime(),e.length)}};function Kt(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=e||"";return n+String(o)+a+Zt(i,2)}function te(t,e){return t%60==0?(t>0?"-":"+")+Zt(Math.abs(t)/60,2):ee(t,e)}function ee(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+Zt(Math.floor(o/60),2)+n+Zt(o%60,2)}const ne=_t;var re=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},oe=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const ie={p:oe,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return re(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",re(o,e)).replace("{{time}}",oe(i,e))}};var ae=["D","DD"],se=["YY","YYYY"];function ce(t){return-1!==ae.indexOf(t)}function le(t){return-1!==se.indexOf(t)}function de(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ue={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function me(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const pe={date:me({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:me({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:me({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var fe={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function be(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var a=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const Ae={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:be({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:be({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:be({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:be({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:be({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function he(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,s=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(c)?ye(c,(function(t){return t.test(s)})):ge(c,(function(t){return t.test(s)}));a=t.valueCallback?t.valueCallback(l):l,a=n.valueCallback?n.valueCallback(a):a;var d=e.slice(s.length);return{value:a,rest:d}}}function ge(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function ye(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var ve,we={ordinalNumber:(ve={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(ve.matchPattern);if(!n)return null;var r=n[0],o=t.match(ve.parsePattern);if(!o)return null;var i=ve.valueCallback?ve.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var a=t.slice(r.length);return{value:i,rest:a}}),era:he({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:he({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:he({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:he({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:he({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Ee={code:"en-US",formatDistance:function(t,e,n){var r,o=ue[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:pe,formatRelative:function(t,e,n,r){return fe[t]},localize:Ae,match:we,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Ce=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Be=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,xe=/^'([^]*?)'?$/,ke=/''/g,Te=/[a-zA-Z]/;function Se(t,e,n){var r,o,i,a,s,c,l,d,u,m,p,f,b,A,h,g,y,v;Et(2,arguments);var w=String(e),E=vt(),C=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:E.locale)&&void 0!==r?r:Ee,B=It(null!==(i=null!==(a=null!==(s=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(l=n.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==a?a:null===(u=E.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(B>=1&&B<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var x=It(null!==(p=null!==(f=null!==(b=null!==(A=null==n?void 0:n.weekStartsOn)&&void 0!==A?A:null==n||null===(h=n.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==b?b:E.weekStartsOn)&&void 0!==f?f:null===(y=E.locale)||void 0===y||null===(v=y.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==p?p:0);if(!(x>=0&&x<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!C.localize)throw new RangeError("locale must contain localize property");if(!C.formatLong)throw new RangeError("locale must contain formatLong property");var k=Bt(t);if(!jt(k))throw new RangeError("Invalid time value");var T=wt(k),S=Ot(k,T),$={firstWeekContainsDate:B,weekStartsOn:x,locale:C,_originalDate:k},j=w.match(Be).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,ie[e])(t,C.formatLong):t})).join("").match(Ce).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return $e(r);var i=ne[o];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!le(r)||de(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!ce(r)||de(r,e,String(t)),i(S,r,C.localize,$);if(o.match(Te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return j}function $e(t){var e=t.match(xe);return e?e[1].replace(ke,"'"):t}function je(t,e,n){var r,o,i,a,s,c,l,d,u,m;Et(2,arguments);var p=Bt(t),f=Bt(e),b=vt(),A=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:b.locale)&&void 0!==r?r:Ee,h=It(null!==(i=null!==(a=null!==(s=null!==(c=null==n?void 0:n.weekStartsOn)&&void 0!==c?c:null==n||null===(l=n.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==s?s:b.weekStartsOn)&&void 0!==a?a:null===(u=b.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==i?i:0);if(!A.localize)throw new RangeError("locale must contain localize property");if(!A.formatLong)throw new RangeError("locale must contain formatLong property");if(!A.formatRelative)throw new RangeError("locale must contain formatRelative property");var g,y=Tt(p,f);if(isNaN(y))throw new RangeError("Invalid time value");g=y<-6?"other":y<-1?"lastWeek":y<0?"yesterday":y<1?"today":y<2?"tomorrow":y<7?"nextWeek":"other";var v=Ot(p,wt(p)),w=Ot(f,wt(f)),E=A.formatRelative(g,v,w,{locale:A,weekStartsOn:h});return Se(p,E,{locale:A,weekStartsOn:h})}D().subscribe(z("todoItem"),(function(t,e){const n=an.todoItemsList.withId(e.id),r=document.querySelector(e.parentElementSelector||"body");(function(t,e){document.querySelector(`.todo-item[data-id="${t.id}"]`)?.remove(),(e.parentElement||document.body).innerHTML+=`<div class="priority-${Me.indexOf(t.priority)} \n               status-${Oe.indexOf(t.status)} todo-item" data-id="${t.id}">\n      <div class="todo-item-heading">\n        ${pt(t,"title","text")}\n        <button class="update-status symbol" data-type="${t.type}" data-id="${t.id}">\n          ${Oe.indexOf(t.status)?`<img class="check" src="${ut}" alt="${Oe[1]}">`:""}\n        </button>\n      </div>\n      ${pt(t,"dueDate","datetime-local",{elementText:"Due: ",attributeText:t.dueDate?je(new Date(t.dueDate),new Date):"None"})}\n      <button class="show" data-type="${t.type}Full" data-id="${t.id}" \n             data-belong-type="${e.belongType||""}">\n        Expand\n      </button>\n      <button class="hide hidden" data-type="${t.type}Full" data-id="${t.id}"\n              data-belong-type="${e.belongType||""}">\n        Shrink\n      </button>\n      <button class="destroy" data-type="${t.type}" data-id="${t.id}">-</button>\n   </div>`})(n,{parentElement:r,belongType:e.belongType}),e.full&&function(t,e){const n=(e.parentElement||document).querySelector(`.todo-item[data-id="${t.id}"]`),r=n.querySelector(`.show[data-type="${t.type}Full"]`),o=n.querySelector(`.hide[data-type="${t.type}Full"]`);r.classList.add("hidden"),o.classList.remove("hidden"),n.innerHTML+=`${pt(t,"description","textarea",{elementText:"Description: "})}\n     ${pt(t,"notes","textarea",{elementText:"Notes: "})}\n      <button class="edit-belong" data-type="${t.type}" data-id="${t.id}"\n             data-belong-type="project" data-belong-id="${t.belongs.project}">\n      Change Project\n     </button>\n     <div>\n      Priority: ${t.priority||"None"}\n      <button class="update-priority symbol" data-type="${t.type}" data-id="${t.id}" \n              direction="-1">v</button>\n      <button class="update-priority symbol" data-type="${t.type}" data-id="${t.id}"\n              direction="1">^</button>\n     </div>`,function(t){D().publish(L("checklistItem"),{belongType:t.type,belongId:t.id,ids:t.checklistItems,parentElementSelector:`.todo-item[data-id="${t.id}"]`})}(t)}(n,{parentElement:r}),D().publish(st("todoItem"))})),D().subscribe(z("checklistItem"),(function(t,e){const n=an.checklistItemsList.withId(e.id),r=document.querySelector(e.parentElementSelector||"body");document.querySelector(`.checklist-item[data-id="${n.id}"]`)?.remove(),r.innerHTML+=`<${e.elementType||"div"} class="status-${Oe.indexOf(n.status)} checklist-item" data-id="${n.id}">\n      ${pt(n,"title","text")}\n      <button class="update-status" data-type="${n.type}" data-id="${n.id}">\n        ${Oe.indexOf(n.status)?"✓":""}\n      </button>\n      <button class="destroy" data-type="${n.type}" data-id="${n.id}">-</button>\n   </${e.elementType||"div"}>`,D().publish(st("checklistItem"))})),D().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:r,attributeType:o,attributeValue:i}){ft();const a=`.attribute[data-type="${e}"][data-id="${n}"][data-attribute="${r}"]`,s=document.querySelector(a),c=s.querySelector(".element-text").textContent,l="textarea"==o,d=`<form class="edit-attribute-form enabled \n                  ${De.includes(o)?"click-out":""}\n                  ${c?"with-label":""}" \n           data-type="${e}" data-id="${n}" data-attribute="${r}">\n      ${De.includes(o)?"":'<button class="back symbol">←</button>'}\n      ${c?`<label for="${r}">${c}</label>`:""}\n      <${l?"textarea":"input"} \n      type="${o}" name="${r}" id="${r}" \n      value="${i}">${l?`${i}</textarea>`:""}\n      <button class="submit symbol"><img src="${gt}" alt="Submit"></button>\n   </form>`;s.insertAdjacentHTML("afterend",d),s.remove(),D().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:r})})),D().subscribe("edit.belong",(function(t,{type:e,id:n,belongType:r,belongId:o}){ft();const i=`.edit-belong[data-belong-type="${r}"][data-type="${e}"][data-id="${n}"]`,a=document.querySelector(i),s=`<form class="edit-form" data-type="${e}" data-id="${n}" data-belong-type="${r}">\n      <button class="back">←</button>\n      <label for="belongId">Project</label>\n      <select name="belongId" id="belongId">\n        ${an[r+"sList"][r+"s"].map((t=>`<option value="${t.id}" ${t.id==+o?"selected":""}>\n            ${t.title}\n           </option>`)).join("\n")}\n      </select>\n      <button class="submit">Change</button>\n   </form>`;a.insertAdjacentHTML("afterend",s),a.remove(),D().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:n,belongType:r})}));const Ie=2,Me=["Low","Medium","High"],Oe=["Incomplete","Complete"],De=["text"],Pe={project:[],todoItem:["description","notes"],checklistItem:[]},We={title:"name",todoItem:"to-do item",checklistItem:"checklist item"};D().subscribe(Q,(function(t,e){const n=`[data-type="${e.type}"]${e.id?`[data-id="${e.id}"]`:""}${e.index?`[data-index="${e.index}"]`:""}`,r=document.querySelector(`form${n},.field${n}`);if(r){r.querySelectorAll(".error").forEach((t=>t.remove()));for(const t of e.errors){const e=r.querySelector(`input[name*="${t.attribute}"],textarea[name*="${t.attribute}"]`);if(!e)continue;const n=`<p class="error">${(o=We[t.objType]||t.objType)[0].toUpperCase()+o.slice(1).toLowerCase()} ${We[t.objAttribute]||t.objAttribute} ${t.message}</p>`;e.insertAdjacentHTML("afterend",n)}var o}}));let qe=dt;function Le(){document.body.innerHTML="",qe()}D().subscribe(ot,(function(t,e){qe=e})),D().subscribe(K,Le),D().subscribe(q,Le);const Ue=()=>document.querySelectorAll('input:not([type="checkbox"],[type="radio"]),textarea');function Ne(t,e,n={}){t.forEach((t=>{(t=Ze(t)).addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation();const r=t.target.closest("button"),o=[r.dataset.type].concat((n.extraArgs||[]).map((t=>r.dataset[t])));D().publish("function"==typeof e?e(...o):e,r.dataset)}))}))}function Ye(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=Ze(n)).addEventListener("click",(n=>{n.preventDefault();const r=n.target.closest("form"),o=e.map((t=>r.dataset[t]));D().publish(t(...o),Object.fromEntries(new FormData(r)))}))}))}function ze(t,e){Ue().forEach((n=>{const r=(n=Ze(n)).closest("form"),o=e.map((t=>r.dataset[t]));n.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==n&&(e.preventDefault(),D().publish(t(...o),Object.fromEntries(new FormData(r))))}))}))}function Ze(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function Fe(t){t.tempKeys=[...t.tempKeys||[],"tempKeys"],t.toStorage=function(){const t={};for(const e in this)"function"==typeof this[e]||this.tempKeys.includes(e)||(t[e]=this[e]);return t}}function He(t){function e(e,n,r=[]){return this.validations?.[e]?.forEach((o=>{o.fn(n)||r.push({objAttribute:e,objType:t.type,attribute:e,message:o.message})})),r}function n(t,e=[]){return t.forEach((t=>{t.obj.valid()||e.push(...t.obj.errors.map((e=>Object.assign({},e,{attribute:t.attrWrapper?t.attrWrapper(e.attribute):e.attribute}))))})),e}t.validations||={},t.associatedValidations||=[],t.errors||=[],t.tempKeys=[...t.tempKeys||[],"validations","associatedValidations","errors"],t.validate=function(r=t){this.errors=[];for(const t in r)this.errors.push(...e.call(this,t,r[t]));r.associatedValidations&&this.errors.push(...n(r.associatedValidations))},t.validateAssociated=function(t){this.errors=[],this.errors.push(...n(t))},t.valid=function(){return this.validate(),0==this.errors.length}}function Re(t,e){e.forEach((e=>{t.validations[e]||=[],t.validations[e].push({fn:t=>t,message:"cannot be blank"})}))}function Xe(t){D().subscribe(G(t.type,t.id),(function(e,n){if(t.validate(n),t.errors.length)return D().publish(Q,{type:t.type,id:t.id,errors:t.errors});for(const e in n)t[e]=n[e];D().publish(tt(t.type,t.id))}))}function Qe(t){const e=Oe;D().subscribe(J(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],D().publish(tt(t.type,t.id))}))}function Ge(t){const e=Me;D().subscribe(V(t.type,t.id),(function(n,r){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +r.direction,0),e.length-1)],D().publish(tt(t.type,t.id))}))}function Je(t,e,n){const r=e+"s";function o(r,o=!1){const i=Object.values(r[e+"sCollectionData"]||{}).map((e=>n(Object.assign(e,{belongs:{[t.type]:t.id}})))),a=i.map((n=>({obj:n,attrWrapper:r=>`${e+"sCollectionData"}[${n[t.type+"Index"]}][${r}]`})));if(o){if(!t.valid())return;t.associatedValidations=a}if(t.validateAssociated(a),t.errors.length)return D().publish(Q,{type:t.type,errors:t.errors});D().publish(X(e),{collectionItems:i})}t[r]||=[],D().subscribe(rt(e),(function(e,n){const o=n?.[t.type]?.[t.id];if(o){t[r]=o.map((t=>t.id));const e=t.type+"Index";o.sort(((t,n)=>+t[e]-+n[e])).forEach(((t,n)=>t[e]=n+1))}D().publish(tt(t.type,t.id))})),o(t,!0),delete t[e+"sCollectionData"],D().subscribe(Y(t.type,t.id,e),(function(t,e){tn(e),o(e)}))}function Ve(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function _e(t,e){D().subscribe(_(t.type,t.id,e),(function(n,r){const o=t.belongs[e],i=+r.belongId;t.belongs[e]=i,D().publish(nt(t.type),{id:t.id,belongType:e,oldBelongId:o,newBelongId:i}),D().publish(tt(t.type,t.id))}))}function Ke(t,e=[]){let n=1;const r=t.itemType+"s";function o(e){const n={};e.forEach((e=>{Object.entries(e.belongs||{}).forEach((([e,o])=>{n[e]||={},n[e][o]||=t[r].filter((t=>t.belongs[e]==o))}))})),D().publish(rt(t.itemType),n)}t[r]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(t){return this[r].find((e=>+t==e.id))},t.withIds=function(t){return t=t.map(Number),this[r].filter((e=>t.includes(e.id)))},t.toStorage=function(){return this[r].map((t=>t.toStorage()))},D().subscribe(nt(t.itemType),(function(e,n){const o=n.belongType,i=n.oldBelongId,a=n.newBelongId;t[r].find((t=>t.id==+n.id)).belongs[o]=a,D().publish(rt(t.itemType),{[o]:{[i]:t[r].filter((t=>t.belongs[o]==i)),[a]:t[r].filter((t=>t.belongs[o]==a))}})})),D().subscribe(N(t.itemType),(function(e,i){tn(i);const a=t.itemFactory(Object.assign({id:n++},i));if(!a.valid())return D().publish(Q,{type:t.itemType,errors:a.errors});t[r].unshift(a),o([a]),D().publish(et(t.itemType))})),D().subscribe(X(t.itemType),(function(e,i){o(i.collectionItems.map((e=>{const o=t.itemFactory(Object.assign({id:n++},e.toStorage?e.toStorage():e));return t[r].unshift(o),o}))),D().publish(et(t.itemType))})),D().subscribe(R(t.itemType),(function(e,n){if(0==+n.id)return;const i=t[r].find((t=>t.id==+n.id));t[r].splice(t[r].indexOf(i),1),o([i]),D().publish(et(t.itemType))})),o(t[r])}function tn(t){const e=/(.+)\[(.+)\]/;let n;for(;(n=Object.keys(t).filter((t=>e.test(t)))).length>0;)n.forEach((n=>{const[r,o]=n.match(e).slice(1);t[r]||={},t[r][o]=t[n],delete t[n]}))}function en(t){const e=Object.assign({type:"project"},t);return[Fe,He,Xe].forEach((t=>t(e))),Re(e,["title"]),Je(e,"todoItem"),e}function nn(t){const e=Object.assign({type:"checklistItem"},t);return[Fe,He,Xe,Qe].forEach((t=>t(e))),Re(e,["title"]),Ve(e,"todoItem"),e}function rn(t){const e=Object.assign({type:"todoItem"},t);return[Fe,He,Xe,Qe,Ge].forEach((t=>t(e))),[Ve,_e].forEach((t=>t(e,"project"))),Re(e,["title"]),Je(e,"checklistItem",nn),e}D().subscribe("rendered.view",(function(){Ne(document.querySelectorAll(".index"),L),Ne(document.querySelectorAll(".new"),U),Ne(document.querySelectorAll(".show"),z),Ne(document.querySelectorAll(".hide"),Z),Ne(document.querySelectorAll(".edit-attribute"),F),Ne(document.querySelectorAll(".edit-belong"),H),Ne(document.querySelectorAll(".update-status"),J,{extraArgs:["id"]}),Ne(document.querySelectorAll(".update-priority"),V,{extraArgs:["id"]}),Ne(document.querySelectorAll(".destroy"),R),Ne(document.querySelectorAll(".back"),q)})),D().subscribe("rendered.view.new",(function(){Ye(N,["type"])})),D().subscribe(at("project"),(function(){ze(N,["type"])})),D().subscribe("rendered.view.collection.new",(function(){Ye(Y,["type","id","collectionType"]),ze(Y,["type","id","collectionType"])})),D().subscribe("rendered.view.edit.attribute",(function(t,e){Ye(G,["type","id"]),ze(G,["type","id"]),Ue().forEach((t=>{const n=t.closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),"number"==typeof t.selectionStart&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),De.includes(t.type)&&t.addEventListener("focusout",(()=>D().publish(G(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))))}))})),D().subscribe("rendered.view.edit.belong",(function(){Ye(_,["type","id","belongType"])}));const on={ProjectsList:function(t){const e={itemFactory:en,itemType:"project"};return Ke(e,t),e},TodoItemsList:function(t){const e={itemFactory:rn,itemType:"todoItem"};return Ke(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:nn,itemType:"checklistItem"};return Ke(e,t),e}};let an={};D().subscribe(W,(function(t,e){for(const t in e)an[t]=on[t[0].toUpperCase()+t.slice(1)](e[t]);D().publish(K)})),D().publish(P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,