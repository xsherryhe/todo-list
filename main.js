(()=>{var t={798:function(t,e,n){t=n.nmd(t),function(n,o){"use strict";var i={};n.PubSub?(i=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=i,function(t){var e={},n=-1;function o(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function i(t,e,n){t(e,n)}function r(t,n,r,c){var s,d=e[n],u=c?i:o;if(Object.prototype.hasOwnProperty.call(e,n))for(s in d)Object.prototype.hasOwnProperty.call(d,s)&&u(d[s],t,r)}function c(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,o){var i=function(t,e,n){return function(){var o=String(t),i=o.lastIndexOf(".");for(r(t,t,e,n);-1!==i;)i=(o=o.substr(0,i)).lastIndexOf("."),r(t,o,e,n);r(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,o);return!!function(t){for(var e=String(t),n=c(e)||c("*"),o=e.lastIndexOf(".");!n&&-1!==o;)o=(e=e.substr(0,o)).lastIndexOf("."),n=c(e);return n}(t)&&(!0===n?i():setTimeout(i,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,o){if("function"!=typeof o)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=o,i},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var o=t.subscribe(e,(function(){t.unsubscribe(o),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,o,i=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(o in e[n])i++;break}return i},t.getSubscriptions=function(t){var n,o=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&o.push(n);return o},t.unsubscribe=function(n){var o,i,r,c="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!c&&"string"==typeof n,d="function"==typeof n,u=!1;if(!c){for(o in e)if(Object.prototype.hasOwnProperty.call(e,o)){if(i=e[o],s&&i[n]){delete i[n],u=n;break}if(d)for(r in i)Object.prototype.hasOwnProperty.call(i,r)&&i[r]===n&&(delete i[r],u=!0)}return u}t.clearSubscriptions(n)}}(i)),void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i}("object"==typeof window&&window||this)}},e={};function n(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,loaded:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var o={};(()=>{"use strict";n.d(o,{O:()=>q});var t={};n.r(t),n.d(t,{O:()=>q});var e=n(798),i=n.n(e);const r="initialize",c="dataInitialized",s="back",d=t=>`index.${t}`,u=t=>`new.${t}`,a=t=>`create.${t}`,l=t=>`show.${t}`,p=t=>`destroy.${t}`,b="updated",f=(t,e)=>`updated.${t}.${e}`,m=t=>`updated.${t}.belong`,y=t=>`updated.${t}.list`,h="rendered.page";function w(){}function O(t){}function j(){document.body.innerHTML="",function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("new"),n.dataset.type="todoItem",n.dataset.projectId=0,n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("new"),n.dataset.type="project",n.textContent="+",t.append(e,n),document.body.append(t)}(),q.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("button"),i=document.createElement("ul");[n,o].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("show"),n.textContent=t.title,o.classList.add("destroy"),o.textContent="-",q.todoItemsList.withIds(t.todoItemIds).slice(0,2).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,i.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(o),e.append(i),document.body.appendChild(e)})),i().publish(h,j),i().publish("rendered.view.index.project")}i().subscribe(r,function(t=w){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItemIds:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"low",status:"incomplete",dueDate:Date()}],checklistItemsList:[]};i().publish(c,e)}}(w)),i().subscribe(b,function(e=O){return function(){e(t.default)}}(O)),i().subscribe(d("project"),j),i().subscribe(u("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.classList.add("new-form"),n.dataset.type="project",n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.parentNode.append(e,n),t.remove(),i().publish(("project","rendered.view.new.project"))})),i().subscribe(l("project"),(function t(e,n){console.log("showProjectView"),document.body.innerHTML="";const o=q.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),o=document.createElement("button"),i=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",o.classList.add("edit-title"),o.textContent=t.title,i.classList.add("new"),i.dataset.type="todoItem",i.dataset.projectId=t.id,i.textContent="+",n.append(o,i),document.body.append(e,n)})(o),function(t){q.todoItemsList.withIds(t.todoItemIds).forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("div"),i=document.createElement("button"),r=document.createElement("button");e.classList.add(t.priority),n.classList.add("edit-title"),n.textContent=t.title,o.innerHTML=`Due Date: <button class="edit-dueDate">${t.dueDate}</button>`,[i,r].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),i.classList.add("show"),i.textContent="Expand",r.classList.add("destroy"),r.textContent="-",e.append(n,o,i,r),document.body.append(e)}))}(o),i().publish(h,t.bind(null,e,n)),i().publish(("project","rendered.view.show.project"))})),i().subscribe(u("todoItem"),(function(){console.log("newTodoItemView")})),i().subscribe(l("todoItem"),(function(t,e){console.log("showTodoItemView")}));let g=j;function x(){document.body.innerHTML="",g()}i().subscribe(h,(function(t,e){g=e})),i().subscribe(b,x),i().subscribe(s,x);const v=()=>document.querySelector(".new-form");function I(t,e){t.forEach((t=>{const n=t.cloneNode(!0);t.replaceWith(n),n.addEventListener("click",(t=>i().publish(e(t.target.dataset.type),t.target.dataset)))}))}function E(t){i().subscribe(`update.${t.type}.${t.id}`,(function(e,n){for(key in n)t[attribute]=n[attribute];i().publish(f(t.type,t.id))}))}function S(t){const e=["incomplete","complete"];i().subscribe(`update.${t.type}.status.${t.id}`,(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],i().publish(f(t.type,t.id))}))}function L(t){const e=["low","medium","high"];i().subscribe(`update.${t.type}.priority.${t.id}`,(function(n,o){t.priority=e[Math.max(Math.min(e.indexOf(t.priority)+o,0),e.length-1)],i().publish(f(t.type,t.id))}))}function P(t,e){const n=e+"Ids";t[n]||=[],i().subscribe(y(e),(function(e,o){const i=o?.[t.type]?.[t.id];i&&(t[n]=i)}))}function T(t,e){t.belongs||={[e]:0}}function C(t,e){i().subscribe(((t,e,n)=>`update.${t}.belong.${n}.${e}`)(t.type,t.id,e),(function(n,o){const r=t.belongs[e],c=o.belongId;t.belongs[e]=c,i().publish(m(t.type),{id:t.id,belongType:e,oldBelongId:r,newBelongId:c})}))}function $(t,e=[]){let n=1;const o=t.itemType+"s";function r(e){const n=Object.entries(e.belongs||{}).reduce(((e,[n,i])=>Object.assign(e,{[n]:{[i]:t[o].filter((t=>t.belongs[n]==i))}})),{});i().publish(y(t.itemType),n)}t[o]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[o].find((t=>e==t.id))},t.withIds=function(e){return t[o].filter((t=>e.includes(t.id)))},i().subscribe(m(t.itemType),(function(e,n){const r=n.belongType,c=n.oldBelongId,s=n.newBelongId;t[o].find((t=>t.id==n.id)).belongs[r]=s,i().publish(y(t.itemType),{[r]:{[c]:t[o].filter((t=>t.belongs[r]==c)).map((t=>t.id)),[s]:t[o].filter((t=>t.belongs[r]==s)).map((t=>t.id))}})})),i().subscribe(a(t.itemType),(function(e,i){const c=t.itemFactory(Object.assign({id:n++},i));t[o].unshift(c),r(c)})),i().subscribe(p(t.itemType),(function(e,n){if(0==n.id)return;const i=t[o].find((t=>t.id==n.id));t[o].splice(t[o].indexOf(i),1),r(i)}))}function k(t){const e=Object.assign({type:"project"},t);return E(e),P(e,"todoItem"),e}function M(t){const e=Object.assign({type:"todoItem"},t);return[E,S,L].forEach((t=>t(e))),[T,C].forEach((t=>t(e,"project"))),P(e,"checklistItem"),e}function D(t){const e=Object.assign({type:"checklistItem"},t);return[E,S].forEach((t=>t(e))),T(e,"todoItem"),e}i().subscribe("rendered.view",(function(){I(document.querySelectorAll(".index"),d),I(document.querySelectorAll(".new"),u),I(document.querySelectorAll(".show"),l),I(document.querySelectorAll(".destroy"),p)})),i().subscribe("rendered.view.new",(function(){document.querySelector(".back").addEventListener("click",(()=>i().publish(s))),document.querySelector(".submit").addEventListener("click",(t=>{t.preventDefault(),i().publish(a(v().dataset.type),Object.fromEntries(new FormData(v())))}))}));const A={ProjectsList:function(t){const e={itemFactory:k,itemType:"project"};return $(e,t),e},TodoItemsList:function(t){const e={itemFactory:M,itemType:"todoItem"};return $(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:D,itemType:"checklistItem"};return $(e,t),e}};let q={};i().subscribe(c,(function(t,e){for(const t in e)q[t]=A[t[0].toUpperCase()+t.slice(1)](e[t]);i().publish(b)})),i().publish(r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,