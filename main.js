/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={689:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,"html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol, ul {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.submit.symbol {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 1.75rem;\n  min-height: 1.75rem;\n}\n\nbutton.submit.symbol img {\n  max-height: 1.25rem;\n}\n\nbutton.destroy:not(.symbol), button.back:not(.symbol) {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.update-status.update-status {\n  min-height: 2rem;\n  min-width: 2rem;\n  border: 1px solid black;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.update-status.update-status:disabled {\n  border: 1px solid gray;\n}\n\n.update-status img {\n  max-height: 1.5rem;\n}\n\n.status-1, .status-1 button {\n  color: gray;\n}\n\n.disabled {\n  color: gray;\n}\n\n.enabled.enabled, .enabled.enabled button {\n  color: black;\n}\n\n.hidden {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,gBAAgB;EAChB,eAAe;EACf,uBAAuB;EACvB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf",sourcesContent:["html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol, ul {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.submit.symbol {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 1.75rem;\n  min-height: 1.75rem;\n}\n\nbutton.submit.symbol img {\n  max-height: 1.25rem;\n}\n\nbutton.destroy:not(.symbol), button.back:not(.symbol) {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.update-status.update-status {\n  min-height: 2rem;\n  min-width: 2rem;\n  border: 1px solid black;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.update-status.update-status:disabled {\n  border: 1px solid gray;\n}\n\n.update-status img {\n  max-height: 1.5rem;\n}\n\n.status-1, .status-1 button {\n  color: gray;\n}\n\n.disabled {\n  color: gray;\n}\n\n.enabled.enabled, .enabled.enabled button {\n  color: black;\n}\n\n.hidden {\n  display: none;\n}\n"],sourceRoot:""}]);const a=s},542:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,".edit-attribute-form {\n  display: grid;\n  grid-template-rows: repeat(2, max-content);\n  column-gap: 0.5rem;\n}\n\n.edit-attribute-form.click-out {\n  align-items: flex-end;\n}\n\n.edit-attribute-form:not(.click-out) {\n  align-items: center;\n}\n\n.edit-attribute-form.click-out:not(.with-label) {\n  grid-template-columns: repeat(2, max-content);\n}\n\n.edit-attribute-form.click-out.with-label,\n.edit-attribute-form:not(.click-out,.with-label) {\n  grid-template-columns: repeat(3, max-content);\n}\n\n.edit-attribute-form:not(.click-out).with-label {\n  grid-template-columns: repeat(4, max-content);\n}\n\n.edit-attribute-form input {\n  background-color: transparent;\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0;\n  height: max-content;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n\n.edit-attribute-form .error {\n  grid-row: 2;\n  font-size: 1rem;\n}\n\n.edit-attribute-form.click-out:not(.with-label) .error {\n  grid-column: 1 / span 2;\n}\n\n.edit-attribute-form.click-out.with-label .error,\n.edit-attribute-form:not(.click-out,.with-label) .error {\n  grid-column: 2 / span 2;\n}\n\n.edit-attribute-form:not(.click-out).with-label .error {\n  grid-column: 3 / span 2;\n}\n","",{version:3,sources:["webpack://./src/styles/edit.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,0CAA0C;EAC1C,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;;EAEE,6CAA6C;AAC/C;;AAEA;EACE,6CAA6C;AAC/C;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,+BAA+B;EAC/B,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;EACE,uBAAuB;AACzB",sourcesContent:[".edit-attribute-form {\n  display: grid;\n  grid-template-rows: repeat(2, max-content);\n  column-gap: 0.5rem;\n}\n\n.edit-attribute-form.click-out {\n  align-items: flex-end;\n}\n\n.edit-attribute-form:not(.click-out) {\n  align-items: center;\n}\n\n.edit-attribute-form.click-out:not(.with-label) {\n  grid-template-columns: repeat(2, max-content);\n}\n\n.edit-attribute-form.click-out.with-label,\n.edit-attribute-form:not(.click-out,.with-label) {\n  grid-template-columns: repeat(3, max-content);\n}\n\n.edit-attribute-form:not(.click-out).with-label {\n  grid-template-columns: repeat(4, max-content);\n}\n\n.edit-attribute-form input {\n  background-color: transparent;\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0;\n  height: max-content;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n\n.edit-attribute-form .error {\n  grid-row: 2;\n  font-size: 1rem;\n}\n\n.edit-attribute-form.click-out:not(.with-label) .error {\n  grid-column: 1 / span 2;\n}\n\n.edit-attribute-form.click-out.with-label .error,\n.edit-attribute-form:not(.click-out,.with-label) .error {\n  grid-column: 2 / span 2;\n}\n\n.edit-attribute-form:not(.click-out).with-label .error {\n  grid-column: 3 / span 2;\n}\n"],sourceRoot:""}]);const a=s},713:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n',"",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,SAAS;AACX",sourcesContent:['input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n'],sourceRoot:""}]);const a=s},240:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  min-height: 9rem;\n  display: grid;\n  grid-template: 1fr 2fr / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n  line-height: 2;\n}\n\n.project-preview.status-1 {\n  font-style: italic;\n  font-size: 1.5rem;\n  color: black;\n  justify-self: center;\n  align-self: start;\n}\n',"",{version:3,sources:["webpack://./src/styles/index-projects.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,aAAa;EACb,wCAAwC;EACxC,oBAAoB;EACpB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,YAAY;EACZ,oBAAoB;EACpB,iBAAiB;AACnB",sourcesContent:['.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  min-height: 9rem;\n  display: grid;\n  grid-template: 1fr 2fr / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n  line-height: 2;\n}\n\n.project-preview.status-1 {\n  font-style: italic;\n  font-size: 1.5rem;\n  color: black;\n  justify-self: center;\n  align-self: start;\n}\n'],sourceRoot:""}]);const a=s},415:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'.new.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-checklistItem.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['.new.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n'],sourceRoot:""}]);const a=s},156:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n',"",{version:3,sources:["webpack://./src/styles/new-project.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;EACpB,8DAA8D;EAC9D,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB",sourcesContent:['.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n'],sourceRoot:""}]);const a=s},599:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-todoItem.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;AACrB",sourcesContent:['.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n'],sourceRoot:""}]);const a=s},416:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit.submit {\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.project-heading .submit.submit img {\n  max-height: 1.5rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n","",{version:3,sources:["webpack://./src/styles/show-project.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,+BAA+B;AACjC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;AACtB",sourcesContent:[".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit.submit {\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.project-heading .submit.submit img {\n  max-height: 1.5rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n"],sourceRoot:""}]);const a=s},587:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(537),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([t.id,'.todo-item {\n  background-color: lightgray;\n  border-radius: 0.2rem;\n  padding: 1.5rem;\n  margin: 1rem auto;\n  width: 65vw;\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  justify-items: start;\n  align-items: start;\n  gap: 1rem;\n}\n\n.todo-item-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.todo-item-heading *,\n.todo-item-heading input {\n  font-size: 1.25rem;\n}\n\n.todo-item *:not(.destroy[data-type="todoItem"]) {\n  grid-column: 1;\n}\n\n.todo-item .destroy[data-type="todoItem"] {\n  grid-row: 1;\n  grid-column: 2;\n}\n',"",{version:3,sources:["webpack://./src/styles/show-todoItem.css"],names:[],mappings:"AAAA;EACE,2BAA2B;EAC3B,qBAAqB;EACrB,eAAe;EACf,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sCAAsC;EACtC,oBAAoB;EACpB,kBAAkB;EAClB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;;EAEE,kBAAkB;AACpB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB",sourcesContent:['.todo-item {\n  background-color: lightgray;\n  border-radius: 0.2rem;\n  padding: 1.5rem;\n  margin: 1rem auto;\n  width: 65vw;\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  justify-items: start;\n  align-items: start;\n  gap: 1rem;\n}\n\n.todo-item-heading {\n  display: flex;\n  align-items: center;\n  gap: 0.75rem;\n}\n\n.todo-item-heading *,\n.todo-item-heading input {\n  font-size: 1.25rem;\n}\n\n.todo-item *:not(.destroy[data-type="todoItem"]) {\n  grid-column: 1;\n}\n\n.todo-item .destroy[data-type="todoItem"] {\n  grid-row: 1;\n  grid-column: 2;\n}\n'],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);n&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */"),s=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},9996:t=>{"use strict";var e=function(t){return function(t){return!!t&&"object"==typeof t}(t)&&!function(t){var e=Object.prototype.toString.call(t);return"[object RegExp]"===e||"[object Date]"===e||function(t){return t.$$typeof===r}(t)}(t)},r="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function n(t,e){return!1!==e.clone&&e.isMergeableObject(t)?a((r=t,Array.isArray(r)?[]:{}),t,e):t;var r}function i(t,e,r){return t.concat(e).map((function(t){return n(t,r)}))}function o(t){return Object.keys(t).concat(function(t){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(t).filter((function(e){return t.propertyIsEnumerable(e)})):[]}(t))}function s(t,e){try{return e in t}catch(t){return!1}}function a(t,r,l){(l=l||{}).arrayMerge=l.arrayMerge||i,l.isMergeableObject=l.isMergeableObject||e,l.cloneUnlessOtherwiseSpecified=n;var c=Array.isArray(r);return c===Array.isArray(t)?c?l.arrayMerge(t,r,l):function(t,e,r){var i={};return r.isMergeableObject(t)&&o(t).forEach((function(e){i[e]=n(t[e],r)})),o(e).forEach((function(o){(function(t,e){return s(t,e)&&!(Object.hasOwnProperty.call(t,e)&&Object.propertyIsEnumerable.call(t,e))})(t,o)||(s(t,o)&&r.isMergeableObject(e[o])?i[o]=function(t,e){if(!e.customMerge)return a;var r=e.customMerge(t);return"function"==typeof r?r:a}(o,r)(t[o],e[o],r):i[o]=n(e[o],r))})),i}(t,r,l):n(r,l)}a.all=function(t,e){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce((function(t,r){return a(t,r,e)}),{})};var l=a;t.exports=l},7837:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.attributeNames=e.elementNames=void 0,e.elementNames=new Map([["altglyph","altGlyph"],["altglyphdef","altGlyphDef"],["altglyphitem","altGlyphItem"],["animatecolor","animateColor"],["animatemotion","animateMotion"],["animatetransform","animateTransform"],["clippath","clipPath"],["feblend","feBlend"],["fecolormatrix","feColorMatrix"],["fecomponenttransfer","feComponentTransfer"],["fecomposite","feComposite"],["feconvolvematrix","feConvolveMatrix"],["fediffuselighting","feDiffuseLighting"],["fedisplacementmap","feDisplacementMap"],["fedistantlight","feDistantLight"],["fedropshadow","feDropShadow"],["feflood","feFlood"],["fefunca","feFuncA"],["fefuncb","feFuncB"],["fefuncg","feFuncG"],["fefuncr","feFuncR"],["fegaussianblur","feGaussianBlur"],["feimage","feImage"],["femerge","feMerge"],["femergenode","feMergeNode"],["femorphology","feMorphology"],["feoffset","feOffset"],["fepointlight","fePointLight"],["fespecularlighting","feSpecularLighting"],["fespotlight","feSpotLight"],["fetile","feTile"],["feturbulence","feTurbulence"],["foreignobject","foreignObject"],["glyphref","glyphRef"],["lineargradient","linearGradient"],["radialgradient","radialGradient"],["textpath","textPath"]]),e.attributeNames=new Map([["definitionurl","definitionURL"],["attributename","attributeName"],["attributetype","attributeType"],["basefrequency","baseFrequency"],["baseprofile","baseProfile"],["calcmode","calcMode"],["clippathunits","clipPathUnits"],["diffuseconstant","diffuseConstant"],["edgemode","edgeMode"],["filterunits","filterUnits"],["glyphref","glyphRef"],["gradienttransform","gradientTransform"],["gradientunits","gradientUnits"],["kernelmatrix","kernelMatrix"],["kernelunitlength","kernelUnitLength"],["keypoints","keyPoints"],["keysplines","keySplines"],["keytimes","keyTimes"],["lengthadjust","lengthAdjust"],["limitingconeangle","limitingConeAngle"],["markerheight","markerHeight"],["markerunits","markerUnits"],["markerwidth","markerWidth"],["maskcontentunits","maskContentUnits"],["maskunits","maskUnits"],["numoctaves","numOctaves"],["pathlength","pathLength"],["patterncontentunits","patternContentUnits"],["patterntransform","patternTransform"],["patternunits","patternUnits"],["pointsatx","pointsAtX"],["pointsaty","pointsAtY"],["pointsatz","pointsAtZ"],["preservealpha","preserveAlpha"],["preserveaspectratio","preserveAspectRatio"],["primitiveunits","primitiveUnits"],["refx","refX"],["refy","refY"],["repeatcount","repeatCount"],["repeatdur","repeatDur"],["requiredextensions","requiredExtensions"],["requiredfeatures","requiredFeatures"],["specularconstant","specularConstant"],["specularexponent","specularExponent"],["spreadmethod","spreadMethod"],["startoffset","startOffset"],["stddeviation","stdDeviation"],["stitchtiles","stitchTiles"],["surfacescale","surfaceScale"],["systemlanguage","systemLanguage"],["tablevalues","tableValues"],["targetx","targetX"],["targety","targetY"],["textlength","textLength"],["viewbox","viewBox"],["viewtarget","viewTarget"],["xchannelselector","xChannelSelector"],["ychannelselector","yChannelSelector"],["zoomandpan","zoomAndPan"]])},7220:function(t,e,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},n.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),o=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),s=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&i(e,t,r);return o(e,t),e};Object.defineProperty(e,"__esModule",{value:!0});var a=s(r(9960)),l=r(3661),c=r(7837),u=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]),d=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function p(t,e){void 0===e&&(e={});for(var r=("length"in t?t:[t]),n="",i=0;i<r.length;i++)n+=h(r[i],e);return n}function h(t,e){switch(t.type){case a.Root:return p(t.children,e);case a.Directive:case a.Doctype:return"<"+t.data+">";case a.Comment:return"\x3c!--"+t.data+"--\x3e";case a.CDATA:return function(t){return"<![CDATA["+t.children[0].data+"]]>"}(t);case a.Script:case a.Style:case a.Tag:return function(t,e){var r;"foreign"===e.xmlMode&&(t.name=null!==(r=c.elementNames.get(t.name))&&void 0!==r?r:t.name,t.parent&&f.has(t.parent.name)&&(e=n(n({},e),{xmlMode:!1}))),!e.xmlMode&&m.has(t.name)&&(e=n(n({},e),{xmlMode:"foreign"}));var i="<"+t.name,o=function(t,e){if(t)return Object.keys(t).map((function(r){var n,i,o=null!==(n=t[r])&&void 0!==n?n:"";return"foreign"===e.xmlMode&&(r=null!==(i=c.attributeNames.get(r))&&void 0!==i?i:r),e.emptyAttrs||e.xmlMode||""!==o?r+'="'+(!1!==e.decodeEntities?l.encodeXML(o):o.replace(/"/g,"&quot;"))+'"':r})).join(" ")}(t.attribs,e);return o&&(i+=" "+o),0===t.children.length&&(e.xmlMode?!1!==e.selfClosingTags:e.selfClosingTags&&d.has(t.name))?(e.xmlMode||(i+=" "),i+="/>"):(i+=">",t.children.length>0&&(i+=p(t.children,e)),!e.xmlMode&&d.has(t.name)||(i+="</"+t.name+">")),i}(t,e);case a.Text:return function(t,e){var r=t.data||"";return!1===e.decodeEntities||!e.xmlMode&&t.parent&&u.has(t.parent.name)||(r=l.encodeXML(r)),r}(t,e)}}e.default=p;var f=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),m=new Set(["svg","math"])},901:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.decodeHTML=e.decodeHTMLStrict=e.decodeXML=void 0;var i=n(r(1363)),o=n(r(8611)),s=n(r(4204)),a=n(r(6312)),l=/&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;function c(t){var e=d(t);return function(t){return String(t).replace(l,e)}}e.decodeXML=c(s.default),e.decodeHTMLStrict=c(i.default);var u=function(t,e){return t<e?1:-1};function d(t){return function(e){if("#"===e.charAt(1)){var r=e.charAt(2);return"X"===r||"x"===r?a.default(parseInt(e.substr(3),16)):a.default(parseInt(e.substr(2),10))}return t[e.slice(1,-1)]||e}}e.decodeHTML=function(){for(var t=Object.keys(o.default).sort(u),e=Object.keys(i.default).sort(u),r=0,n=0;r<e.length;r++)t[n]===e[r]?(e[r]+=";?",n++):e[r]+=";";var s=new RegExp("&(?:"+e.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),a=d(i.default);function l(t){return";"!==t.substr(-1)&&(t+=";"),a(t)}return function(t){return String(t).replace(s,l)}}()},6312:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(9451)),o=String.fromCodePoint||function(t){var e="";return t>65535&&(t-=65536,e+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e+String.fromCharCode(t)};e.default=function(t){return t>=55296&&t<=57343||t>1114111?"�":(t in i.default&&(t=i.default[t]),o(t))}},5278:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.escapeUTF8=e.escape=e.encodeNonAsciiHTML=e.encodeHTML=e.encodeXML=void 0;var i=u(n(r(4204)).default),o=d(i);e.encodeXML=g(i);var s,a,l=u(n(r(1363)).default),c=d(l);function u(t){return Object.keys(t).sort().reduce((function(e,r){return e[t[r]]="&"+r+";",e}),{})}function d(t){for(var e=[],r=[],n=0,i=Object.keys(t);n<i.length;n++){var o=i[n];1===o.length?e.push("\\"+o):r.push(o)}e.sort();for(var s=0;s<e.length-1;s++){for(var a=s;a<e.length-1&&e[a].charCodeAt(1)+1===e[a+1].charCodeAt(1);)a+=1;var l=1+a-s;l<3||e.splice(s,l,e[s]+"-"+e[a])}return r.unshift("["+e.join("")+"]"),new RegExp(r.join("|"),"g")}e.encodeHTML=(s=l,a=c,function(t){return t.replace(a,(function(t){return s[t]})).replace(p,f)}),e.encodeNonAsciiHTML=g(l);var p=/(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,h=null!=String.prototype.codePointAt?function(t){return t.codePointAt(0)}:function(t){return 1024*(t.charCodeAt(0)-55296)+t.charCodeAt(1)-56320+65536};function f(t){return"&#x"+(t.length>1?h(t):t.charCodeAt(0)).toString(16).toUpperCase()+";"}var m=new RegExp(o.source+"|"+p.source,"g");function g(t){return function(e){return e.replace(m,(function(e){return t[e]||f(e)}))}}e.escape=function(t){return t.replace(m,f)},e.escapeUTF8=function(t){return t.replace(o,f)}},3661:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.decodeXMLStrict=e.decodeHTML5Strict=e.decodeHTML4Strict=e.decodeHTML5=e.decodeHTML4=e.decodeHTMLStrict=e.decodeHTML=e.decodeXML=e.encodeHTML5=e.encodeHTML4=e.escapeUTF8=e.escape=e.encodeNonAsciiHTML=e.encodeHTML=e.encodeXML=e.encode=e.decodeStrict=e.decode=void 0;var n=r(901),i=r(5278);e.decode=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTML)(t)},e.decodeStrict=function(t,e){return(!e||e<=0?n.decodeXML:n.decodeHTMLStrict)(t)},e.encode=function(t,e){return(!e||e<=0?i.encodeXML:i.encodeHTML)(t)};var o=r(5278);Object.defineProperty(e,"encodeXML",{enumerable:!0,get:function(){return o.encodeXML}}),Object.defineProperty(e,"encodeHTML",{enumerable:!0,get:function(){return o.encodeHTML}}),Object.defineProperty(e,"encodeNonAsciiHTML",{enumerable:!0,get:function(){return o.encodeNonAsciiHTML}}),Object.defineProperty(e,"escape",{enumerable:!0,get:function(){return o.escape}}),Object.defineProperty(e,"escapeUTF8",{enumerable:!0,get:function(){return o.escapeUTF8}}),Object.defineProperty(e,"encodeHTML4",{enumerable:!0,get:function(){return o.encodeHTML}}),Object.defineProperty(e,"encodeHTML5",{enumerable:!0,get:function(){return o.encodeHTML}});var s=r(901);Object.defineProperty(e,"decodeXML",{enumerable:!0,get:function(){return s.decodeXML}}),Object.defineProperty(e,"decodeHTML",{enumerable:!0,get:function(){return s.decodeHTML}}),Object.defineProperty(e,"decodeHTMLStrict",{enumerable:!0,get:function(){return s.decodeHTMLStrict}}),Object.defineProperty(e,"decodeHTML4",{enumerable:!0,get:function(){return s.decodeHTML}}),Object.defineProperty(e,"decodeHTML5",{enumerable:!0,get:function(){return s.decodeHTML}}),Object.defineProperty(e,"decodeHTML4Strict",{enumerable:!0,get:function(){return s.decodeHTMLStrict}}),Object.defineProperty(e,"decodeHTML5Strict",{enumerable:!0,get:function(){return s.decodeHTMLStrict}}),Object.defineProperty(e,"decodeXMLStrict",{enumerable:!0,get:function(){return s.decodeXML}})},9960:(t,e)=>{"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.Doctype=e.CDATA=e.Tag=e.Style=e.Script=e.Comment=e.Directive=e.Text=e.Root=e.isTag=e.ElementType=void 0,function(t){t.Root="root",t.Text="text",t.Directive="directive",t.Comment="comment",t.Script="script",t.Style="style",t.Tag="tag",t.CDATA="cdata",t.Doctype="doctype"}(r=e.ElementType||(e.ElementType={})),e.isTag=function(t){return t.type===r.Tag||t.type===r.Script||t.type===r.Style},e.Root=r.Root,e.Text=r.Text,e.Directive=r.Directive,e.Comment=r.Comment,e.Script=r.Script,e.Style=r.Style,e.Tag=r.Tag,e.CDATA=r.CDATA,e.Doctype=r.Doctype},7915:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(e,r);i&&!("get"in i?!e.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,n,i)}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.DomHandler=void 0;var o=r(9960),s=r(7790);i(r(7790),e);var a=/\s+/g,l={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1,xmlMode:!1},c=function(){function t(t,e,r){this.dom=[],this.root=new s.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof e&&(r=e,e=l),"object"==typeof t&&(e=t,t=void 0),this.callback=null!=t?t:null,this.options=null!=e?e:l,this.elementCB=null!=r?r:null}return t.prototype.onparserinit=function(t){this.parser=t},t.prototype.onreset=function(){this.dom=[],this.root=new s.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},t.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},t.prototype.onerror=function(t){this.handleCallback(t)},t.prototype.onclosetag=function(){this.lastNode=null;var t=this.tagStack.pop();this.options.withEndIndices&&(t.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(t)},t.prototype.onopentag=function(t,e){var r=this.options.xmlMode?o.ElementType.Tag:void 0,n=new s.Element(t,e,void 0,r);this.addNode(n),this.tagStack.push(n)},t.prototype.ontext=function(t){var e=this.options.normalizeWhitespace,r=this.lastNode;if(r&&r.type===o.ElementType.Text)e?r.data=(r.data+t).replace(a," "):r.data+=t,this.options.withEndIndices&&(r.endIndex=this.parser.endIndex);else{e&&(t=t.replace(a," "));var n=new s.Text(t);this.addNode(n),this.lastNode=n}},t.prototype.oncomment=function(t){if(this.lastNode&&this.lastNode.type===o.ElementType.Comment)this.lastNode.data+=t;else{var e=new s.Comment(t);this.addNode(e),this.lastNode=e}},t.prototype.oncommentend=function(){this.lastNode=null},t.prototype.oncdatastart=function(){var t=new s.Text(""),e=new s.NodeWithChildren(o.ElementType.CDATA,[t]);this.addNode(e),t.parent=e,this.lastNode=t},t.prototype.oncdataend=function(){this.lastNode=null},t.prototype.onprocessinginstruction=function(t,e){var r=new s.ProcessingInstruction(t,e);this.addNode(r)},t.prototype.handleCallback=function(t){if("function"==typeof this.callback)this.callback(t,this.dom);else if(t)throw t},t.prototype.addNode=function(t){var e=this.tagStack[this.tagStack.length-1],r=e.children[e.children.length-1];this.options.withStartIndices&&(t.startIndex=this.parser.startIndex),this.options.withEndIndices&&(t.endIndex=this.parser.endIndex),e.children.push(t),r&&(t.prev=r,r.next=t),t.parent=e,this.lastNode=null},t}();e.DomHandler=c,e.default=c},7790:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__assign||function(){return o=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},o.apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0}),e.cloneNode=e.hasChildren=e.isDocument=e.isDirective=e.isComment=e.isText=e.isCDATA=e.isTag=e.Element=e.Document=e.NodeWithChildren=e.ProcessingInstruction=e.Comment=e.Text=e.DataNode=e.Node=void 0;var s=r(9960),a=new Map([[s.ElementType.Tag,1],[s.ElementType.Script,1],[s.ElementType.Style,1],[s.ElementType.Directive,1],[s.ElementType.Text,3],[s.ElementType.CDATA,4],[s.ElementType.Comment,8],[s.ElementType.Root,9]]),l=function(){function t(t){this.type=t,this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(t.prototype,"nodeType",{get:function(){var t;return null!==(t=a.get(this.type))&&void 0!==t?t:1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parentNode",{get:function(){return this.parent},set:function(t){this.parent=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){return this.prev},set:function(t){this.prev=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nextSibling",{get:function(){return this.next},set:function(t){this.next=t},enumerable:!1,configurable:!0}),t.prototype.cloneNode=function(t){return void 0===t&&(t=!1),x(this,t)},t}();e.Node=l;var c=function(t){function e(e,r){var n=t.call(this,e)||this;return n.data=r,n}return i(e,t),Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.data},set:function(t){this.data=t},enumerable:!1,configurable:!0}),e}(l);e.DataNode=c;var u=function(t){function e(e){return t.call(this,s.ElementType.Text,e)||this}return i(e,t),e}(c);e.Text=u;var d=function(t){function e(e){return t.call(this,s.ElementType.Comment,e)||this}return i(e,t),e}(c);e.Comment=d;var p=function(t){function e(e,r){var n=t.call(this,s.ElementType.Directive,r)||this;return n.name=e,n}return i(e,t),e}(c);e.ProcessingInstruction=p;var h=function(t){function e(e,r){var n=t.call(this,e)||this;return n.children=r,n}return i(e,t),Object.defineProperty(e.prototype,"firstChild",{get:function(){var t;return null!==(t=this.children[0])&&void 0!==t?t:null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.children},set:function(t){this.children=t},enumerable:!1,configurable:!0}),e}(l);e.NodeWithChildren=h;var f=function(t){function e(e){return t.call(this,s.ElementType.Root,e)||this}return i(e,t),e}(h);e.Document=f;var m=function(t){function e(e,r,n,i){void 0===n&&(n=[]),void 0===i&&(i="script"===e?s.ElementType.Script:"style"===e?s.ElementType.Style:s.ElementType.Tag);var o=t.call(this,i,n)||this;return o.name=e,o.attribs=r,o}return i(e,t),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name},set:function(t){this.name=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){var t=this;return Object.keys(this.attribs).map((function(e){var r,n;return{name:e,value:t.attribs[e],namespace:null===(r=t["x-attribsNamespace"])||void 0===r?void 0:r[e],prefix:null===(n=t["x-attribsPrefix"])||void 0===n?void 0:n[e]}}))},enumerable:!1,configurable:!0}),e}(h);function g(t){return(0,s.isTag)(t)}function b(t){return t.type===s.ElementType.CDATA}function y(t){return t.type===s.ElementType.Text}function v(t){return t.type===s.ElementType.Comment}function w(t){return t.type===s.ElementType.Directive}function A(t){return t.type===s.ElementType.Root}function x(t,e){var r;if(void 0===e&&(e=!1),y(t))r=new u(t.data);else if(v(t))r=new d(t.data);else if(g(t)){var n=e?E(t.children):[],i=new m(t.name,o({},t.attribs),n);n.forEach((function(t){return t.parent=i})),null!=t.namespace&&(i.namespace=t.namespace),t["x-attribsNamespace"]&&(i["x-attribsNamespace"]=o({},t["x-attribsNamespace"])),t["x-attribsPrefix"]&&(i["x-attribsPrefix"]=o({},t["x-attribsPrefix"])),r=i}else if(b(t)){n=e?E(t.children):[];var a=new h(s.ElementType.CDATA,n);n.forEach((function(t){return t.parent=a})),r=a}else if(A(t)){n=e?E(t.children):[];var l=new f(n);n.forEach((function(t){return t.parent=l})),t["x-mode"]&&(l["x-mode"]=t["x-mode"]),r=l}else{if(!w(t))throw new Error("Not implemented yet: ".concat(t.type));var c=new p(t.name,t.data);null!=t["x-name"]&&(c["x-name"]=t["x-name"],c["x-publicId"]=t["x-publicId"],c["x-systemId"]=t["x-systemId"]),r=c}return r.startIndex=t.startIndex,r.endIndex=t.endIndex,null!=t.sourceCodeLocation&&(r.sourceCodeLocation=t.sourceCodeLocation),r}function E(t){for(var e=t.map((function(t){return x(t,!0)})),r=1;r<e.length;r++)e[r].prev=e[r-1],e[r-1].next=e[r];return e}e.Element=m,e.isTag=g,e.isCDATA=b,e.isText=y,e.isComment=v,e.isDirective=w,e.isDocument=A,e.hasChildren=function(t){return Object.prototype.hasOwnProperty.call(t,"children")},e.cloneNode=x},6996:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getFeed=void 0;var n=r(3346),i=r(3905);e.getFeed=function(t){var e=l(d,t);return e?"feed"===e.name?function(t){var e,r=t.children,n={type:"atom",items:(0,i.getElementsByTagName)("entry",r).map((function(t){var e,r=t.children,n={media:a(r)};u(n,"id","id",r),u(n,"title","title",r);var i=null===(e=l("link",r))||void 0===e?void 0:e.attribs.href;i&&(n.link=i);var o=c("summary",r)||c("content",r);o&&(n.description=o);var s=c("updated",r);return s&&(n.pubDate=new Date(s)),n}))};u(n,"id","id",r),u(n,"title","title",r);var o=null===(e=l("link",r))||void 0===e?void 0:e.attribs.href;o&&(n.link=o),u(n,"description","subtitle",r);var s=c("updated",r);return s&&(n.updated=new Date(s)),u(n,"author","email",r,!0),n}(e):function(t){var e,r,n=null!==(r=null===(e=l("channel",t.children))||void 0===e?void 0:e.children)&&void 0!==r?r:[],o={type:t.name.substr(0,3),id:"",items:(0,i.getElementsByTagName)("item",t.children).map((function(t){var e=t.children,r={media:a(e)};u(r,"id","guid",e),u(r,"title","title",e),u(r,"link","link",e),u(r,"description","description",e);var n=c("pubDate",e);return n&&(r.pubDate=new Date(n)),r}))};u(o,"title","title",n),u(o,"link","link",n),u(o,"description","description",n);var s=c("lastBuildDate",n);return s&&(o.updated=new Date(s)),u(o,"author","managingEditor",n,!0),o}(e):null};var o=["url","type","lang"],s=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function a(t){return(0,i.getElementsByTagName)("media:content",t).map((function(t){for(var e=t.attribs,r={medium:e.medium,isDefault:!!e.isDefault},n=0,i=o;n<i.length;n++)e[c=i[n]]&&(r[c]=e[c]);for(var a=0,l=s;a<l.length;a++){var c;e[c=l[a]]&&(r[c]=parseInt(e[c],10))}return e.expression&&(r.expression=e.expression),r}))}function l(t,e){return(0,i.getElementsByTagName)(t,e,!0,1)[0]}function c(t,e,r){return void 0===r&&(r=!1),(0,n.textContent)((0,i.getElementsByTagName)(t,e,r,1)).trim()}function u(t,e,r,n,i){void 0===i&&(i=!1);var o=c(r,n,i);o&&(t[e]=o)}function d(t){return"rss"===t||"feed"===t||"rdf:RDF"===t}},4975:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.uniqueSort=e.compareDocumentPosition=e.removeSubsets=void 0;var n=r(7915);function i(t,e){var r=[],i=[];if(t===e)return 0;for(var o=(0,n.hasChildren)(t)?t:t.parent;o;)r.unshift(o),o=o.parent;for(o=(0,n.hasChildren)(e)?e:e.parent;o;)i.unshift(o),o=o.parent;for(var s=Math.min(r.length,i.length),a=0;a<s&&r[a]===i[a];)a++;if(0===a)return 1;var l=r[a-1],c=l.children,u=r[a],d=i[a];return c.indexOf(u)>c.indexOf(d)?l===e?20:4:l===t?10:2}e.removeSubsets=function(t){for(var e=t.length;--e>=0;){var r=t[e];if(e>0&&t.lastIndexOf(r,e-1)>=0)t.splice(e,1);else for(var n=r.parent;n;n=n.parent)if(t.includes(n)){t.splice(e,1);break}}return t},e.compareDocumentPosition=i,e.uniqueSort=function(t){return(t=t.filter((function(t,e,r){return!r.includes(t,e+1)}))).sort((function(t,e){var r=i(t,e);return 2&r?-1:4&r?1:0})),t}},9432:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.hasChildren=e.isDocument=e.isComment=e.isText=e.isCDATA=e.isTag=void 0,i(r(3346),e),i(r(5010),e),i(r(6765),e),i(r(8043),e),i(r(3905),e),i(r(4975),e),i(r(6996),e);var o=r(7915);Object.defineProperty(e,"isTag",{enumerable:!0,get:function(){return o.isTag}}),Object.defineProperty(e,"isCDATA",{enumerable:!0,get:function(){return o.isCDATA}}),Object.defineProperty(e,"isText",{enumerable:!0,get:function(){return o.isText}}),Object.defineProperty(e,"isComment",{enumerable:!0,get:function(){return o.isComment}}),Object.defineProperty(e,"isDocument",{enumerable:!0,get:function(){return o.isDocument}}),Object.defineProperty(e,"hasChildren",{enumerable:!0,get:function(){return o.hasChildren}})},3905:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getElementsByTagType=e.getElementsByTagName=e.getElementById=e.getElements=e.testElement=void 0;var n=r(7915),i=r(8043),o={tag_name:function(t){return"function"==typeof t?function(e){return(0,n.isTag)(e)&&t(e.name)}:"*"===t?n.isTag:function(e){return(0,n.isTag)(e)&&e.name===t}},tag_type:function(t){return"function"==typeof t?function(e){return t(e.type)}:function(e){return e.type===t}},tag_contains:function(t){return"function"==typeof t?function(e){return(0,n.isText)(e)&&t(e.data)}:function(e){return(0,n.isText)(e)&&e.data===t}}};function s(t,e){return"function"==typeof e?function(r){return(0,n.isTag)(r)&&e(r.attribs[t])}:function(r){return(0,n.isTag)(r)&&r.attribs[t]===e}}function a(t,e){return function(r){return t(r)||e(r)}}function l(t){var e=Object.keys(t).map((function(e){var r=t[e];return Object.prototype.hasOwnProperty.call(o,e)?o[e](r):s(e,r)}));return 0===e.length?null:e.reduce(a)}e.testElement=function(t,e){var r=l(t);return!r||r(e)},e.getElements=function(t,e,r,n){void 0===n&&(n=1/0);var o=l(t);return o?(0,i.filter)(o,e,r,n):[]},e.getElementById=function(t,e,r){return void 0===r&&(r=!0),Array.isArray(e)||(e=[e]),(0,i.findOne)(s("id",t),e,r)},e.getElementsByTagName=function(t,e,r,n){return void 0===r&&(r=!0),void 0===n&&(n=1/0),(0,i.filter)(o.tag_name(t),e,r,n)},e.getElementsByTagType=function(t,e,r,n){return void 0===r&&(r=!0),void 0===n&&(n=1/0),(0,i.filter)(o.tag_type(t),e,r,n)}},6765:(t,e)=>{"use strict";function r(t){if(t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.parent){var e=t.parent.children;e.splice(e.lastIndexOf(t),1)}}Object.defineProperty(e,"__esModule",{value:!0}),e.prepend=e.prependChild=e.append=e.appendChild=e.replaceElement=e.removeElement=void 0,e.removeElement=r,e.replaceElement=function(t,e){var r=e.prev=t.prev;r&&(r.next=e);var n=e.next=t.next;n&&(n.prev=e);var i=e.parent=t.parent;if(i){var o=i.children;o[o.lastIndexOf(t)]=e}},e.appendChild=function(t,e){if(r(e),e.next=null,e.parent=t,t.children.push(e)>1){var n=t.children[t.children.length-2];n.next=e,e.prev=n}else e.prev=null},e.append=function(t,e){r(e);var n=t.parent,i=t.next;if(e.next=i,e.prev=t,t.next=e,e.parent=n,i){if(i.prev=e,n){var o=n.children;o.splice(o.lastIndexOf(i),0,e)}}else n&&n.children.push(e)},e.prependChild=function(t,e){if(r(e),e.parent=t,e.prev=null,1!==t.children.unshift(e)){var n=t.children[1];n.prev=e,e.next=n}else e.next=null},e.prepend=function(t,e){r(e);var n=t.parent;if(n){var i=n.children;i.splice(i.indexOf(t),0,e)}t.prev&&(t.prev.next=e),e.parent=n,e.prev=t.prev,e.next=t,t.prev=e}},8043:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.findAll=e.existsOne=e.findOne=e.findOneChild=e.find=e.filter=void 0;var n=r(7915);function i(t,e,r,o){for(var s=[],a=0,l=e;a<l.length;a++){var c=l[a];if(t(c)&&(s.push(c),--o<=0))break;if(r&&(0,n.hasChildren)(c)&&c.children.length>0){var u=i(t,c.children,r,o);if(s.push.apply(s,u),(o-=u.length)<=0)break}}return s}e.filter=function(t,e,r,n){return void 0===r&&(r=!0),void 0===n&&(n=1/0),Array.isArray(e)||(e=[e]),i(t,e,r,n)},e.find=i,e.findOneChild=function(t,e){return e.find(t)},e.findOne=function t(e,r,i){void 0===i&&(i=!0);for(var o=null,s=0;s<r.length&&!o;s++){var a=r[s];(0,n.isTag)(a)&&(e(a)?o=a:i&&a.children.length>0&&(o=t(e,a.children)))}return o},e.existsOne=function t(e,r){return r.some((function(r){return(0,n.isTag)(r)&&(e(r)||r.children.length>0&&t(e,r.children))}))},e.findAll=function(t,e){for(var r,i,o=[],s=e.filter(n.isTag);i=s.shift();){var a=null===(r=i.children)||void 0===r?void 0:r.filter(n.isTag);a&&a.length>0&&s.unshift.apply(s,a),t(i)&&o.push(i)}return o}},3346:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.innerText=e.textContent=e.getText=e.getInnerHTML=e.getOuterHTML=void 0;var i=r(7915),o=n(r(7220)),s=r(9960);function a(t,e){return(0,o.default)(t,e)}e.getOuterHTML=a,e.getInnerHTML=function(t,e){return(0,i.hasChildren)(t)?t.children.map((function(t){return a(t,e)})).join(""):""},e.getText=function t(e){return Array.isArray(e)?e.map(t).join(""):(0,i.isTag)(e)?"br"===e.name?"\n":t(e.children):(0,i.isCDATA)(e)?t(e.children):(0,i.isText)(e)?e.data:""},e.textContent=function t(e){return Array.isArray(e)?e.map(t).join(""):(0,i.hasChildren)(e)&&!(0,i.isComment)(e)?t(e.children):(0,i.isText)(e)?e.data:""},e.innerText=function t(e){return Array.isArray(e)?e.map(t).join(""):(0,i.hasChildren)(e)&&(e.type===s.ElementType.Tag||(0,i.isCDATA)(e))?t(e.children):(0,i.isText)(e)?e.data:""}},5010:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.prevElementSibling=e.nextElementSibling=e.getName=e.hasAttrib=e.getAttributeValue=e.getSiblings=e.getParent=e.getChildren=void 0;var n=r(7915),i=[];function o(t){var e;return null!==(e=t.children)&&void 0!==e?e:i}function s(t){return t.parent||null}e.getChildren=o,e.getParent=s,e.getSiblings=function(t){var e=s(t);if(null!=e)return o(e);for(var r=[t],n=t.prev,i=t.next;null!=n;)r.unshift(n),n=n.prev;for(;null!=i;)r.push(i),i=i.next;return r},e.getAttributeValue=function(t,e){var r;return null===(r=t.attribs)||void 0===r?void 0:r[e]},e.hasAttrib=function(t,e){return null!=t.attribs&&Object.prototype.hasOwnProperty.call(t.attribs,e)&&null!=t.attribs[e]},e.getName=function(t){return t.name},e.nextElementSibling=function(t){for(var e=t.next;null!==e&&!(0,n.isTag)(e);)e=e.next;return e},e.prevElementSibling=function(t){for(var e=t.prev;null!==e&&!(0,n.isTag)(e);)e=e.prev;return e}},3150:t=>{"use strict";t.exports=t=>{if("string"!=typeof t)throw new TypeError("Expected a string");return t.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}},3870:function(t,e,r){"use strict";var n,i=this&&this.__extends||(n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),o=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),a=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&o(e,t,r);return s(e,t),e},l=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.parseFeed=e.FeedHandler=void 0;var c,u,d=l(r(7915)),p=a(r(9432)),h=r(763);!function(t){t[t.image=0]="image",t[t.audio=1]="audio",t[t.video=2]="video",t[t.document=3]="document",t[t.executable=4]="executable"}(c||(c={})),function(t){t[t.sample=0]="sample",t[t.full=1]="full",t[t.nonstop=2]="nonstop"}(u||(u={}));var f=function(t){function e(e,r){return"object"==typeof e&&(r=e=void 0),t.call(this,e,r)||this}return i(e,t),e.prototype.onend=function(){var t,e,r=b(A,this.dom);if(r){var n={};if("feed"===r.name){var i=r.children;n.type="atom",w(n,"id","id",i),w(n,"title","title",i);var o=v("href",b("link",i));o&&(n.link=o),w(n,"description","subtitle",i),(s=y("updated",i))&&(n.updated=new Date(s)),w(n,"author","email",i,!0),n.items=g("entry",i).map((function(t){var e={},r=t.children;w(e,"id","id",r),w(e,"title","title",r);var n=v("href",b("link",r));n&&(e.link=n);var i=y("summary",r)||y("content",r);i&&(e.description=i);var o=y("updated",r);return o&&(e.pubDate=new Date(o)),e.media=m(r),e}))}else{var s;i=null!==(e=null===(t=b("channel",r.children))||void 0===t?void 0:t.children)&&void 0!==e?e:[],n.type=r.name.substr(0,3),n.id="",w(n,"title","title",i),w(n,"link","link",i),w(n,"description","description",i),(s=y("lastBuildDate",i))&&(n.updated=new Date(s)),w(n,"author","managingEditor",i,!0),n.items=g("item",r.children).map((function(t){var e={},r=t.children;w(e,"id","guid",r),w(e,"title","title",r),w(e,"link","link",r),w(e,"description","description",r);var n=y("pubDate",r);return n&&(e.pubDate=new Date(n)),e.media=m(r),e}))}this.feed=n,this.handleCallback(null)}else this.handleCallback(new Error("couldn't find root of feed"))},e}(d.default);function m(t){return g("media:content",t).map((function(t){var e={medium:t.attribs.medium,isDefault:!!t.attribs.isDefault};return t.attribs.url&&(e.url=t.attribs.url),t.attribs.fileSize&&(e.fileSize=parseInt(t.attribs.fileSize,10)),t.attribs.type&&(e.type=t.attribs.type),t.attribs.expression&&(e.expression=t.attribs.expression),t.attribs.bitrate&&(e.bitrate=parseInt(t.attribs.bitrate,10)),t.attribs.framerate&&(e.framerate=parseInt(t.attribs.framerate,10)),t.attribs.samplingrate&&(e.samplingrate=parseInt(t.attribs.samplingrate,10)),t.attribs.channels&&(e.channels=parseInt(t.attribs.channels,10)),t.attribs.duration&&(e.duration=parseInt(t.attribs.duration,10)),t.attribs.height&&(e.height=parseInt(t.attribs.height,10)),t.attribs.width&&(e.width=parseInt(t.attribs.width,10)),t.attribs.lang&&(e.lang=t.attribs.lang),e}))}function g(t,e){return p.getElementsByTagName(t,e,!0)}function b(t,e){return p.getElementsByTagName(t,e,!0,1)[0]}function y(t,e,r){return void 0===r&&(r=!1),p.getText(p.getElementsByTagName(t,e,r,1)).trim()}function v(t,e){return e?e.attribs[t]:null}function w(t,e,r,n,i){void 0===i&&(i=!1);var o=y(r,n,i);o&&(t[e]=o)}function A(t){return"rss"===t||"feed"===t||"rdf:RDF"===t}e.FeedHandler=f,e.parseFeed=function(t,e){void 0===e&&(e={xmlMode:!0});var r=new f(e);return new h.Parser(r,e).end(t),r.feed}},763:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Parser=void 0;var i=n(r(9889)),o=new Set(["input","option","optgroup","select","button","datalist","textarea"]),s=new Set(["p"]),a={tr:new Set(["tr","th","td"]),th:new Set(["th"]),td:new Set(["thead","th","td"]),body:new Set(["head","link","script"]),li:new Set(["li"]),p:s,h1:s,h2:s,h3:s,h4:s,h5:s,h6:s,select:o,input:o,output:o,button:o,datalist:o,textarea:o,option:new Set(["option"]),optgroup:new Set(["optgroup","option"]),dd:new Set(["dt","dd"]),dt:new Set(["dt","dd"]),address:s,article:s,aside:s,blockquote:s,details:s,div:s,dl:s,fieldset:s,figcaption:s,figure:s,footer:s,form:s,header:s,hr:s,main:s,nav:s,ol:s,pre:s,section:s,table:s,ul:s,rt:new Set(["rt","rp"]),rp:new Set(["rt","rp"]),tbody:new Set(["thead","tbody"]),tfoot:new Set(["thead","tbody"])},l=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),c=new Set(["math","svg"]),u=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),d=/\s|\//,p=function(){function t(t,e){var r,n,o,s,a;void 0===e&&(e={}),this.startIndex=0,this.endIndex=null,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.foreignContext=[],this.options=e,this.cbs=null!=t?t:{},this.lowerCaseTagNames=null!==(r=e.lowerCaseTags)&&void 0!==r?r:!e.xmlMode,this.lowerCaseAttributeNames=null!==(n=e.lowerCaseAttributeNames)&&void 0!==n?n:!e.xmlMode,this.tokenizer=new(null!==(o=e.Tokenizer)&&void 0!==o?o:i.default)(this.options,this),null===(a=(s=this.cbs).onparserinit)||void 0===a||a.call(s,this)}return t.prototype.updatePosition=function(t){null===this.endIndex?this.tokenizer.sectionStart<=t?this.startIndex=0:this.startIndex=this.tokenizer.sectionStart-t:this.startIndex=this.endIndex+1,this.endIndex=this.tokenizer.getAbsoluteIndex()},t.prototype.ontext=function(t){var e,r;this.updatePosition(1),this.endIndex--,null===(r=(e=this.cbs).ontext)||void 0===r||r.call(e,t)},t.prototype.onopentagname=function(t){var e,r;if(this.lowerCaseTagNames&&(t=t.toLowerCase()),this.tagname=t,!this.options.xmlMode&&Object.prototype.hasOwnProperty.call(a,t))for(var n=void 0;this.stack.length>0&&a[t].has(n=this.stack[this.stack.length-1]);)this.onclosetag(n);!this.options.xmlMode&&l.has(t)||(this.stack.push(t),c.has(t)?this.foreignContext.push(!0):u.has(t)&&this.foreignContext.push(!1)),null===(r=(e=this.cbs).onopentagname)||void 0===r||r.call(e,t),this.cbs.onopentag&&(this.attribs={})},t.prototype.onopentagend=function(){var t,e;this.updatePosition(1),this.attribs&&(null===(e=(t=this.cbs).onopentag)||void 0===e||e.call(t,this.tagname,this.attribs),this.attribs=null),!this.options.xmlMode&&this.cbs.onclosetag&&l.has(this.tagname)&&this.cbs.onclosetag(this.tagname),this.tagname=""},t.prototype.onclosetag=function(t){if(this.updatePosition(1),this.lowerCaseTagNames&&(t=t.toLowerCase()),(c.has(t)||u.has(t))&&this.foreignContext.pop(),!this.stack.length||!this.options.xmlMode&&l.has(t))this.options.xmlMode||"br"!==t&&"p"!==t||(this.onopentagname(t),this.closeCurrentTag());else{var e=this.stack.lastIndexOf(t);if(-1!==e)if(this.cbs.onclosetag)for(e=this.stack.length-e;e--;)this.cbs.onclosetag(this.stack.pop());else this.stack.length=e;else"p"!==t||this.options.xmlMode||(this.onopentagname(t),this.closeCurrentTag())}},t.prototype.onselfclosingtag=function(){this.options.xmlMode||this.options.recognizeSelfClosing||this.foreignContext[this.foreignContext.length-1]?this.closeCurrentTag():this.onopentagend()},t.prototype.closeCurrentTag=function(){var t,e,r=this.tagname;this.onopentagend(),this.stack[this.stack.length-1]===r&&(null===(e=(t=this.cbs).onclosetag)||void 0===e||e.call(t,r),this.stack.pop())},t.prototype.onattribname=function(t){this.lowerCaseAttributeNames&&(t=t.toLowerCase()),this.attribname=t},t.prototype.onattribdata=function(t){this.attribvalue+=t},t.prototype.onattribend=function(t){var e,r;null===(r=(e=this.cbs).onattribute)||void 0===r||r.call(e,this.attribname,this.attribvalue,t),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribname="",this.attribvalue=""},t.prototype.getInstructionName=function(t){var e=t.search(d),r=e<0?t:t.substr(0,e);return this.lowerCaseTagNames&&(r=r.toLowerCase()),r},t.prototype.ondeclaration=function(t){if(this.cbs.onprocessinginstruction){var e=this.getInstructionName(t);this.cbs.onprocessinginstruction("!"+e,"!"+t)}},t.prototype.onprocessinginstruction=function(t){if(this.cbs.onprocessinginstruction){var e=this.getInstructionName(t);this.cbs.onprocessinginstruction("?"+e,"?"+t)}},t.prototype.oncomment=function(t){var e,r,n,i;this.updatePosition(4),null===(r=(e=this.cbs).oncomment)||void 0===r||r.call(e,t),null===(i=(n=this.cbs).oncommentend)||void 0===i||i.call(n)},t.prototype.oncdata=function(t){var e,r,n,i,o,s;this.updatePosition(1),this.options.xmlMode||this.options.recognizeCDATA?(null===(r=(e=this.cbs).oncdatastart)||void 0===r||r.call(e),null===(i=(n=this.cbs).ontext)||void 0===i||i.call(n,t),null===(s=(o=this.cbs).oncdataend)||void 0===s||s.call(o)):this.oncomment("[CDATA["+t+"]]")},t.prototype.onerror=function(t){var e,r;null===(r=(e=this.cbs).onerror)||void 0===r||r.call(e,t)},t.prototype.onend=function(){var t,e;if(this.cbs.onclosetag)for(var r=this.stack.length;r>0;this.cbs.onclosetag(this.stack[--r]));null===(e=(t=this.cbs).onend)||void 0===e||e.call(t)},t.prototype.reset=function(){var t,e,r,n;null===(e=(t=this.cbs).onreset)||void 0===e||e.call(t),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack=[],null===(n=(r=this.cbs).onparserinit)||void 0===n||n.call(r,this)},t.prototype.parseComplete=function(t){this.reset(),this.end(t)},t.prototype.write=function(t){this.tokenizer.write(t)},t.prototype.end=function(t){this.tokenizer.end(t)},t.prototype.pause=function(){this.tokenizer.pause()},t.prototype.resume=function(){this.tokenizer.resume()},t.prototype.parseChunk=function(t){this.write(t)},t.prototype.done=function(t){this.end(t)},t}();e.Parser=p},9889:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(8894)),o=n(r(4926)),s=n(r(96)),a=n(r(1164));function l(t){return" "===t||"\n"===t||"\t"===t||"\f"===t||"\r"===t}function c(t){return t>="a"&&t<="z"||t>="A"&&t<="Z"}function u(t,e,r){var n=t.toLowerCase();return t===n?function(t,i){i===n?t._state=e:(t._state=r,t._index--)}:function(i,o){o===n||o===t?i._state=e:(i._state=r,i._index--)}}function d(t,e){var r=t.toLowerCase();return function(n,i){i===r||i===t?n._state=e:(n._state=3,n._index--)}}var p=u("C",24,16),h=u("D",25,16),f=u("A",26,16),m=u("T",27,16),g=u("A",28,16),b=d("R",35),y=d("I",36),v=d("P",37),w=d("T",38),A=u("R",40,1),x=u("I",41,1),E=u("P",42,1),C=u("T",43,1),S=d("Y",45),k=d("L",46),T=d("E",47),q=u("Y",49,1),O=u("L",50,1),D=u("E",51,1),B=d("I",54),L=d("T",55),_=d("L",56),j=d("E",57),P=u("I",58,1),I=u("T",59,1),M=u("L",60,1),N=u("E",61,1),R=u("#",63,64),U=u("X",66,65),$=function(){function t(t,e){var r;this._state=1,this.buffer="",this.sectionStart=0,this._index=0,this.bufferOffset=0,this.baseState=1,this.special=1,this.running=!0,this.ended=!1,this.cbs=e,this.xmlMode=!!(null==t?void 0:t.xmlMode),this.decodeEntities=null===(r=null==t?void 0:t.decodeEntities)||void 0===r||r}return t.prototype.reset=function(){this._state=1,this.buffer="",this.sectionStart=0,this._index=0,this.bufferOffset=0,this.baseState=1,this.special=1,this.running=!0,this.ended=!1},t.prototype.write=function(t){this.ended&&this.cbs.onerror(Error(".write() after done!")),this.buffer+=t,this.parse()},t.prototype.end=function(t){this.ended&&this.cbs.onerror(Error(".end() after done!")),t&&this.write(t),this.ended=!0,this.running&&this.finish()},t.prototype.pause=function(){this.running=!1},t.prototype.resume=function(){this.running=!0,this._index<this.buffer.length&&this.parse(),this.ended&&this.finish()},t.prototype.getAbsoluteIndex=function(){return this.bufferOffset+this._index},t.prototype.stateText=function(t){"<"===t?(this._index>this.sectionStart&&this.cbs.ontext(this.getSection()),this._state=2,this.sectionStart=this._index):!this.decodeEntities||"&"!==t||1!==this.special&&4!==this.special||(this._index>this.sectionStart&&this.cbs.ontext(this.getSection()),this.baseState=1,this._state=62,this.sectionStart=this._index)},t.prototype.isTagStartChar=function(t){return c(t)||this.xmlMode&&!l(t)&&"/"!==t&&">"!==t},t.prototype.stateBeforeTagName=function(t){"/"===t?this._state=5:"<"===t?(this.cbs.ontext(this.getSection()),this.sectionStart=this._index):">"===t||1!==this.special||l(t)?this._state=1:"!"===t?(this._state=15,this.sectionStart=this._index+1):"?"===t?(this._state=17,this.sectionStart=this._index+1):this.isTagStartChar(t)?(this._state=this.xmlMode||"s"!==t&&"S"!==t?this.xmlMode||"t"!==t&&"T"!==t?3:52:32,this.sectionStart=this._index):this._state=1},t.prototype.stateInTagName=function(t){("/"===t||">"===t||l(t))&&(this.emitToken("onopentagname"),this._state=8,this._index--)},t.prototype.stateBeforeClosingTagName=function(t){l(t)||(">"===t?this._state=1:1!==this.special?4===this.special||"s"!==t&&"S"!==t?4!==this.special||"t"!==t&&"T"!==t?(this._state=1,this._index--):this._state=53:this._state=33:this.isTagStartChar(t)?(this._state=6,this.sectionStart=this._index):(this._state=20,this.sectionStart=this._index))},t.prototype.stateInClosingTagName=function(t){(">"===t||l(t))&&(this.emitToken("onclosetag"),this._state=7,this._index--)},t.prototype.stateAfterClosingTagName=function(t){">"===t&&(this._state=1,this.sectionStart=this._index+1)},t.prototype.stateBeforeAttributeName=function(t){">"===t?(this.cbs.onopentagend(),this._state=1,this.sectionStart=this._index+1):"/"===t?this._state=4:l(t)||(this._state=9,this.sectionStart=this._index)},t.prototype.stateInSelfClosingTag=function(t){">"===t?(this.cbs.onselfclosingtag(),this._state=1,this.sectionStart=this._index+1,this.special=1):l(t)||(this._state=8,this._index--)},t.prototype.stateInAttributeName=function(t){("="===t||"/"===t||">"===t||l(t))&&(this.cbs.onattribname(this.getSection()),this.sectionStart=-1,this._state=10,this._index--)},t.prototype.stateAfterAttributeName=function(t){"="===t?this._state=11:"/"===t||">"===t?(this.cbs.onattribend(void 0),this._state=8,this._index--):l(t)||(this.cbs.onattribend(void 0),this._state=9,this.sectionStart=this._index)},t.prototype.stateBeforeAttributeValue=function(t){'"'===t?(this._state=12,this.sectionStart=this._index+1):"'"===t?(this._state=13,this.sectionStart=this._index+1):l(t)||(this._state=14,this.sectionStart=this._index,this._index--)},t.prototype.handleInAttributeValue=function(t,e){t===e?(this.emitToken("onattribdata"),this.cbs.onattribend(e),this._state=8):this.decodeEntities&&"&"===t&&(this.emitToken("onattribdata"),this.baseState=this._state,this._state=62,this.sectionStart=this._index)},t.prototype.stateInAttributeValueDoubleQuotes=function(t){this.handleInAttributeValue(t,'"')},t.prototype.stateInAttributeValueSingleQuotes=function(t){this.handleInAttributeValue(t,"'")},t.prototype.stateInAttributeValueNoQuotes=function(t){l(t)||">"===t?(this.emitToken("onattribdata"),this.cbs.onattribend(null),this._state=8,this._index--):this.decodeEntities&&"&"===t&&(this.emitToken("onattribdata"),this.baseState=this._state,this._state=62,this.sectionStart=this._index)},t.prototype.stateBeforeDeclaration=function(t){this._state="["===t?23:"-"===t?18:16},t.prototype.stateInDeclaration=function(t){">"===t&&(this.cbs.ondeclaration(this.getSection()),this._state=1,this.sectionStart=this._index+1)},t.prototype.stateInProcessingInstruction=function(t){">"===t&&(this.cbs.onprocessinginstruction(this.getSection()),this._state=1,this.sectionStart=this._index+1)},t.prototype.stateBeforeComment=function(t){"-"===t?(this._state=19,this.sectionStart=this._index+1):this._state=16},t.prototype.stateInComment=function(t){"-"===t&&(this._state=21)},t.prototype.stateInSpecialComment=function(t){">"===t&&(this.cbs.oncomment(this.buffer.substring(this.sectionStart,this._index)),this._state=1,this.sectionStart=this._index+1)},t.prototype.stateAfterComment1=function(t){this._state="-"===t?22:19},t.prototype.stateAfterComment2=function(t){">"===t?(this.cbs.oncomment(this.buffer.substring(this.sectionStart,this._index-2)),this._state=1,this.sectionStart=this._index+1):"-"!==t&&(this._state=19)},t.prototype.stateBeforeCdata6=function(t){"["===t?(this._state=29,this.sectionStart=this._index+1):(this._state=16,this._index--)},t.prototype.stateInCdata=function(t){"]"===t&&(this._state=30)},t.prototype.stateAfterCdata1=function(t){this._state="]"===t?31:29},t.prototype.stateAfterCdata2=function(t){">"===t?(this.cbs.oncdata(this.buffer.substring(this.sectionStart,this._index-2)),this._state=1,this.sectionStart=this._index+1):"]"!==t&&(this._state=29)},t.prototype.stateBeforeSpecialS=function(t){"c"===t||"C"===t?this._state=34:"t"===t||"T"===t?this._state=44:(this._state=3,this._index--)},t.prototype.stateBeforeSpecialSEnd=function(t){2!==this.special||"c"!==t&&"C"!==t?3!==this.special||"t"!==t&&"T"!==t?this._state=1:this._state=48:this._state=39},t.prototype.stateBeforeSpecialLast=function(t,e){("/"===t||">"===t||l(t))&&(this.special=e),this._state=3,this._index--},t.prototype.stateAfterSpecialLast=function(t,e){">"===t||l(t)?(this.special=1,this._state=6,this.sectionStart=this._index-e,this._index--):this._state=1},t.prototype.parseFixedEntity=function(t){if(void 0===t&&(t=this.xmlMode?a.default:o.default),this.sectionStart+1<this._index){var e=this.buffer.substring(this.sectionStart+1,this._index);Object.prototype.hasOwnProperty.call(t,e)&&(this.emitPartial(t[e]),this.sectionStart=this._index+1)}},t.prototype.parseLegacyEntity=function(){for(var t=this.sectionStart+1,e=Math.min(this._index-t,6);e>=2;){var r=this.buffer.substr(t,e);if(Object.prototype.hasOwnProperty.call(s.default,r))return this.emitPartial(s.default[r]),void(this.sectionStart+=e+1);e--}},t.prototype.stateInNamedEntity=function(t){";"===t?(this.parseFixedEntity(),1===this.baseState&&this.sectionStart+1<this._index&&!this.xmlMode&&this.parseLegacyEntity(),this._state=this.baseState):(t<"0"||t>"9")&&!c(t)&&(this.xmlMode||this.sectionStart+1===this._index||(1!==this.baseState?"="!==t&&this.parseFixedEntity(s.default):this.parseLegacyEntity()),this._state=this.baseState,this._index--)},t.prototype.decodeNumericEntity=function(t,e,r){var n=this.sectionStart+t;if(n!==this._index){var o=this.buffer.substring(n,this._index),s=parseInt(o,e);this.emitPartial(i.default(s)),this.sectionStart=r?this._index+1:this._index}this._state=this.baseState},t.prototype.stateInNumericEntity=function(t){";"===t?this.decodeNumericEntity(2,10,!0):(t<"0"||t>"9")&&(this.xmlMode?this._state=this.baseState:this.decodeNumericEntity(2,10,!1),this._index--)},t.prototype.stateInHexEntity=function(t){";"===t?this.decodeNumericEntity(3,16,!0):(t<"a"||t>"f")&&(t<"A"||t>"F")&&(t<"0"||t>"9")&&(this.xmlMode?this._state=this.baseState:this.decodeNumericEntity(3,16,!1),this._index--)},t.prototype.cleanup=function(){this.sectionStart<0?(this.buffer="",this.bufferOffset+=this._index,this._index=0):this.running&&(1===this._state?(this.sectionStart!==this._index&&this.cbs.ontext(this.buffer.substr(this.sectionStart)),this.buffer="",this.bufferOffset+=this._index,this._index=0):this.sectionStart===this._index?(this.buffer="",this.bufferOffset+=this._index,this._index=0):(this.buffer=this.buffer.substr(this.sectionStart),this._index-=this.sectionStart,this.bufferOffset+=this.sectionStart),this.sectionStart=0)},t.prototype.parse=function(){for(;this._index<this.buffer.length&&this.running;){var t=this.buffer.charAt(this._index);1===this._state?this.stateText(t):12===this._state?this.stateInAttributeValueDoubleQuotes(t):9===this._state?this.stateInAttributeName(t):19===this._state?this.stateInComment(t):20===this._state?this.stateInSpecialComment(t):8===this._state?this.stateBeforeAttributeName(t):3===this._state?this.stateInTagName(t):6===this._state?this.stateInClosingTagName(t):2===this._state?this.stateBeforeTagName(t):10===this._state?this.stateAfterAttributeName(t):13===this._state?this.stateInAttributeValueSingleQuotes(t):11===this._state?this.stateBeforeAttributeValue(t):5===this._state?this.stateBeforeClosingTagName(t):7===this._state?this.stateAfterClosingTagName(t):32===this._state?this.stateBeforeSpecialS(t):21===this._state?this.stateAfterComment1(t):14===this._state?this.stateInAttributeValueNoQuotes(t):4===this._state?this.stateInSelfClosingTag(t):16===this._state?this.stateInDeclaration(t):15===this._state?this.stateBeforeDeclaration(t):22===this._state?this.stateAfterComment2(t):18===this._state?this.stateBeforeComment(t):33===this._state?this.stateBeforeSpecialSEnd(t):53===this._state?P(this,t):39===this._state?A(this,t):40===this._state?x(this,t):41===this._state?E(this,t):34===this._state?b(this,t):35===this._state?y(this,t):36===this._state?v(this,t):37===this._state?w(this,t):38===this._state?this.stateBeforeSpecialLast(t,2):42===this._state?C(this,t):43===this._state?this.stateAfterSpecialLast(t,6):44===this._state?S(this,t):29===this._state?this.stateInCdata(t):45===this._state?k(this,t):46===this._state?T(this,t):47===this._state?this.stateBeforeSpecialLast(t,3):48===this._state?q(this,t):49===this._state?O(this,t):50===this._state?D(this,t):51===this._state?this.stateAfterSpecialLast(t,5):52===this._state?B(this,t):54===this._state?L(this,t):55===this._state?_(this,t):56===this._state?j(this,t):57===this._state?this.stateBeforeSpecialLast(t,4):58===this._state?I(this,t):59===this._state?M(this,t):60===this._state?N(this,t):61===this._state?this.stateAfterSpecialLast(t,5):17===this._state?this.stateInProcessingInstruction(t):64===this._state?this.stateInNamedEntity(t):23===this._state?p(this,t):62===this._state?R(this,t):24===this._state?h(this,t):25===this._state?f(this,t):30===this._state?this.stateAfterCdata1(t):31===this._state?this.stateAfterCdata2(t):26===this._state?m(this,t):27===this._state?g(this,t):28===this._state?this.stateBeforeCdata6(t):66===this._state?this.stateInHexEntity(t):65===this._state?this.stateInNumericEntity(t):63===this._state?U(this,t):this.cbs.onerror(Error("unknown _state"),this._state),this._index++}this.cleanup()},t.prototype.finish=function(){this.sectionStart<this._index&&this.handleTrailingData(),this.cbs.onend()},t.prototype.handleTrailingData=function(){var t=this.buffer.substr(this.sectionStart);29===this._state||30===this._state||31===this._state?this.cbs.oncdata(t):19===this._state||21===this._state||22===this._state?this.cbs.oncomment(t):64!==this._state||this.xmlMode?65!==this._state||this.xmlMode?66!==this._state||this.xmlMode?3!==this._state&&8!==this._state&&11!==this._state&&10!==this._state&&9!==this._state&&13!==this._state&&12!==this._state&&14!==this._state&&6!==this._state&&this.cbs.ontext(t):(this.decodeNumericEntity(3,16,!1),this.sectionStart<this._index&&(this._state=this.baseState,this.handleTrailingData())):(this.decodeNumericEntity(2,10,!1),this.sectionStart<this._index&&(this._state=this.baseState,this.handleTrailingData())):(this.parseLegacyEntity(),this.sectionStart<this._index&&(this._state=this.baseState,this.handleTrailingData()))},t.prototype.getSection=function(){return this.buffer.substring(this.sectionStart,this._index)},t.prototype.emitToken=function(t){this.cbs[t](this.getSection()),this.sectionStart=-1},t.prototype.emitPartial=function(t){1!==this.baseState?this.cbs.onattribdata(t):this.cbs.ontext(t)},t}();e.default=$},3719:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),o=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&n(e,t,r);return i(e,t),e},s=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.RssHandler=e.DefaultHandler=e.DomUtils=e.ElementType=e.Tokenizer=e.createDomStream=e.parseDOM=e.parseDocument=e.DomHandler=e.Parser=void 0;var l=r(763);Object.defineProperty(e,"Parser",{enumerable:!0,get:function(){return l.Parser}});var c=r(7915);function u(t,e){var r=new c.DomHandler(void 0,e);return new l.Parser(r,e).end(t),r.root}Object.defineProperty(e,"DomHandler",{enumerable:!0,get:function(){return c.DomHandler}}),Object.defineProperty(e,"DefaultHandler",{enumerable:!0,get:function(){return c.DomHandler}}),e.parseDocument=u,e.parseDOM=function(t,e){return u(t,e).children},e.createDomStream=function(t,e,r){var n=new c.DomHandler(t,e,r);return new l.Parser(n,e)};var d=r(9889);Object.defineProperty(e,"Tokenizer",{enumerable:!0,get:function(){return a(d).default}});var p=o(r(9960));e.ElementType=p,s(r(3870),e),e.DomUtils=o(r(9432));var h=r(3870);Object.defineProperty(e,"RssHandler",{enumerable:!0,get:function(){return h.FeedHandler}})},8894:function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(r(6483)),o=String.fromCodePoint||function(t){var e="";return t>65535&&(t-=65536,e+=String.fromCharCode(t>>>10&1023|55296),t=56320|1023&t),e+String.fromCharCode(t)};e.default=function(t){return t>=55296&&t<=57343||t>1114111?"�":(t in i.default&&(t=i.default[t]),o(t))}},9430:function(t,e){var r,n;void 0===(n="function"==typeof(r=function(){return function(t){function e(t){return" "===t||"\t"===t||"\n"===t||"\f"===t||"\r"===t}function r(e){var r,n=e.exec(t.substring(m));if(n)return r=n[0],m+=r.length,r}for(var n,i,o,s,a,l=t.length,c=/^[ \t\n\r\u000c]+/,u=/^[, \t\n\r\u000c]+/,d=/^[^ \t\n\r\u000c]+/,p=/[,]+$/,h=/^\d+$/,f=/^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/,m=0,g=[];;){if(r(u),m>=l)return g;n=r(d),i=[],","===n.slice(-1)?(n=n.replace(p,""),y()):b()}function b(){for(r(c),o="",s="in descriptor";;){if(a=t.charAt(m),"in descriptor"===s)if(e(a))o&&(i.push(o),o="",s="after descriptor");else{if(","===a)return m+=1,o&&i.push(o),void y();if("("===a)o+=a,s="in parens";else{if(""===a)return o&&i.push(o),void y();o+=a}}else if("in parens"===s)if(")"===a)o+=a,s="in descriptor";else{if(""===a)return i.push(o),void y();o+=a}else if("after descriptor"===s)if(e(a));else{if(""===a)return void y();s="in descriptor",m-=1}m+=1}}function y(){var e,r,o,s,a,l,c,u,d,p=!1,m={};for(s=0;s<i.length;s++)l=(a=i[s])[a.length-1],c=a.substring(0,a.length-1),u=parseInt(c,10),d=parseFloat(c),h.test(c)&&"w"===l?((e||r)&&(p=!0),0===u?p=!0:e=u):f.test(c)&&"x"===l?((e||r||o)&&(p=!0),d<0?p=!0:r=d):h.test(c)&&"h"===l?((o||r)&&(p=!0),0===u?p=!0:o=u):p=!0;p?console&&console.log&&console.log("Invalid srcset descriptor found in '"+t+"' at '"+a+"'."):(m.url=n,e&&(m.w=e),r&&(m.d=r),o&&(m.h=o),g.push(m))}}})?r.apply(e,[]):r)||(t.exports=n)},4241:t=>{var e=String,r=function(){return{isColorSupported:!1,reset:e,bold:e,dim:e,italic:e,underline:e,inverse:e,hidden:e,strikethrough:e,black:e,red:e,green:e,yellow:e,blue:e,magenta:e,cyan:e,white:e,gray:e,bgBlack:e,bgRed:e,bgGreen:e,bgYellow:e,bgBlue:e,bgMagenta:e,bgCyan:e,bgWhite:e}};t.exports=r(),t.exports.createColors=r},1353:(t,e,r)=>{"use strict";let n=r(1019);class i extends n{constructor(t){super(t),this.type="atrule"}append(...t){return this.proxyOf.nodes||(this.nodes=[]),super.append(...t)}prepend(...t){return this.proxyOf.nodes||(this.nodes=[]),super.prepend(...t)}}t.exports=i,i.default=i,n.registerAtRule(i)},9932:(t,e,r)=>{"use strict";let n=r(5631);class i extends n{constructor(t){super(t),this.type="comment"}}t.exports=i,i.default=i},1019:(t,e,r)=>{"use strict";let n,i,o,s,{isClean:a,my:l}=r(5513),c=r(4258),u=r(9932),d=r(5631);function p(t){return t.map((t=>(t.nodes&&(t.nodes=p(t.nodes)),delete t.source,t)))}function h(t){if(t[a]=!1,t.proxyOf.nodes)for(let e of t.proxyOf.nodes)h(e)}class f extends d{push(t){return t.parent=this,this.proxyOf.nodes.push(t),this}each(t){if(!this.proxyOf.nodes)return;let e,r,n=this.getIterator();for(;this.indexes[n]<this.proxyOf.nodes.length&&(e=this.indexes[n],r=t(this.proxyOf.nodes[e],e),!1!==r);)this.indexes[n]+=1;return delete this.indexes[n],r}walk(t){return this.each(((e,r)=>{let n;try{n=t(e,r)}catch(t){throw e.addToError(t)}return!1!==n&&e.walk&&(n=e.walk(t)),n}))}walkDecls(t,e){return e?t instanceof RegExp?this.walk(((r,n)=>{if("decl"===r.type&&t.test(r.prop))return e(r,n)})):this.walk(((r,n)=>{if("decl"===r.type&&r.prop===t)return e(r,n)})):(e=t,this.walk(((t,r)=>{if("decl"===t.type)return e(t,r)})))}walkRules(t,e){return e?t instanceof RegExp?this.walk(((r,n)=>{if("rule"===r.type&&t.test(r.selector))return e(r,n)})):this.walk(((r,n)=>{if("rule"===r.type&&r.selector===t)return e(r,n)})):(e=t,this.walk(((t,r)=>{if("rule"===t.type)return e(t,r)})))}walkAtRules(t,e){return e?t instanceof RegExp?this.walk(((r,n)=>{if("atrule"===r.type&&t.test(r.name))return e(r,n)})):this.walk(((r,n)=>{if("atrule"===r.type&&r.name===t)return e(r,n)})):(e=t,this.walk(((t,r)=>{if("atrule"===t.type)return e(t,r)})))}walkComments(t){return this.walk(((e,r)=>{if("comment"===e.type)return t(e,r)}))}append(...t){for(let e of t){let t=this.normalize(e,this.last);for(let e of t)this.proxyOf.nodes.push(e)}return this.markDirty(),this}prepend(...t){t=t.reverse();for(let e of t){let t=this.normalize(e,this.first,"prepend").reverse();for(let e of t)this.proxyOf.nodes.unshift(e);for(let e in this.indexes)this.indexes[e]=this.indexes[e]+t.length}return this.markDirty(),this}cleanRaws(t){if(super.cleanRaws(t),this.nodes)for(let e of this.nodes)e.cleanRaws(t)}insertBefore(t,e){let r,n=this.index(t),i=0===t&&"prepend",o=this.normalize(e,this.proxyOf.nodes[n],i).reverse();n=this.index(t);for(let t of o)this.proxyOf.nodes.splice(n,0,t);for(let t in this.indexes)r=this.indexes[t],n<=r&&(this.indexes[t]=r+o.length);return this.markDirty(),this}insertAfter(t,e){let r,n=this.index(t),i=this.normalize(e,this.proxyOf.nodes[n]).reverse();n=this.index(t);for(let t of i)this.proxyOf.nodes.splice(n+1,0,t);for(let t in this.indexes)r=this.indexes[t],n<r&&(this.indexes[t]=r+i.length);return this.markDirty(),this}removeChild(t){let e;t=this.index(t),this.proxyOf.nodes[t].parent=void 0,this.proxyOf.nodes.splice(t,1);for(let r in this.indexes)e=this.indexes[r],e>=t&&(this.indexes[r]=e-1);return this.markDirty(),this}removeAll(){for(let t of this.proxyOf.nodes)t.parent=void 0;return this.proxyOf.nodes=[],this.markDirty(),this}replaceValues(t,e,r){return r||(r=e,e={}),this.walkDecls((n=>{e.props&&!e.props.includes(n.prop)||e.fast&&!n.value.includes(e.fast)||(n.value=n.value.replace(t,r))})),this.markDirty(),this}every(t){return this.nodes.every(t)}some(t){return this.nodes.some(t)}index(t){return"number"==typeof t?t:(t.proxyOf&&(t=t.proxyOf),this.proxyOf.nodes.indexOf(t))}get first(){if(this.proxyOf.nodes)return this.proxyOf.nodes[0]}get last(){if(this.proxyOf.nodes)return this.proxyOf.nodes[this.proxyOf.nodes.length-1]}normalize(t,e){if("string"==typeof t)t=p(n(t).nodes);else if(Array.isArray(t)){t=t.slice(0);for(let e of t)e.parent&&e.parent.removeChild(e,"ignore")}else if("root"===t.type&&"document"!==this.type){t=t.nodes.slice(0);for(let e of t)e.parent&&e.parent.removeChild(e,"ignore")}else if(t.type)t=[t];else if(t.prop){if(void 0===t.value)throw new Error("Value field is missed in node creation");"string"!=typeof t.value&&(t.value=String(t.value)),t=[new c(t)]}else if(t.selector)t=[new i(t)];else if(t.name)t=[new o(t)];else{if(!t.text)throw new Error("Unknown node type in node creation");t=[new u(t)]}return t.map((t=>(t[l]||f.rebuild(t),(t=t.proxyOf).parent&&t.parent.removeChild(t),t[a]&&h(t),void 0===t.raws.before&&e&&void 0!==e.raws.before&&(t.raws.before=e.raws.before.replace(/\S/g,"")),t.parent=this.proxyOf,t)))}getProxyProcessor(){return{set:(t,e,r)=>(t[e]===r||(t[e]=r,"name"!==e&&"params"!==e&&"selector"!==e||t.markDirty()),!0),get:(t,e)=>"proxyOf"===e?t:t[e]?"each"===e||"string"==typeof e&&e.startsWith("walk")?(...r)=>t[e](...r.map((t=>"function"==typeof t?(e,r)=>t(e.toProxy(),r):t))):"every"===e||"some"===e?r=>t[e](((t,...e)=>r(t.toProxy(),...e))):"root"===e?()=>t.root().toProxy():"nodes"===e?t.nodes.map((t=>t.toProxy())):"first"===e||"last"===e?t[e].toProxy():t[e]:t[e]}}getIterator(){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;let t=this.lastEach;return this.indexes[t]=0,t}}f.registerParse=t=>{n=t},f.registerRule=t=>{i=t},f.registerAtRule=t=>{o=t},f.registerRoot=t=>{s=t},t.exports=f,f.default=f,f.rebuild=t=>{"atrule"===t.type?Object.setPrototypeOf(t,o.prototype):"rule"===t.type?Object.setPrototypeOf(t,i.prototype):"decl"===t.type?Object.setPrototypeOf(t,c.prototype):"comment"===t.type?Object.setPrototypeOf(t,u.prototype):"root"===t.type&&Object.setPrototypeOf(t,s.prototype),t[l]=!0,t.nodes&&t.nodes.forEach((t=>{f.rebuild(t)}))}},2671:(t,e,r)=>{"use strict";let n=r(4241),i=r(2868);class o extends Error{constructor(t,e,r,n,i,s){super(t),this.name="CssSyntaxError",this.reason=t,i&&(this.file=i),n&&(this.source=n),s&&(this.plugin=s),void 0!==e&&void 0!==r&&("number"==typeof e?(this.line=e,this.column=r):(this.line=e.line,this.column=e.column,this.endLine=r.line,this.endColumn=r.column)),this.setMessage(),Error.captureStackTrace&&Error.captureStackTrace(this,o)}setMessage(){this.message=this.plugin?this.plugin+": ":"",this.message+=this.file?this.file:"<css input>",void 0!==this.line&&(this.message+=":"+this.line+":"+this.column),this.message+=": "+this.reason}showSourceCode(t){if(!this.source)return"";let e=this.source;null==t&&(t=n.isColorSupported),i&&t&&(e=i(e));let r,o,s=e.split(/\r?\n/),a=Math.max(this.line-3,0),l=Math.min(this.line+2,s.length),c=String(l).length;if(t){let{bold:t,red:e,gray:i}=n.createColors(!0);r=r=>t(e(r)),o=t=>i(t)}else r=o=t=>t;return s.slice(a,l).map(((t,e)=>{let n=a+1+e,i=" "+(" "+n).slice(-c)+" | ";if(n===this.line){let e=o(i.replace(/\d/g," "))+t.slice(0,this.column-1).replace(/[^\t]/g," ");return r(">")+o(i)+t+"\n "+e+r("^")}return" "+o(i)+t})).join("\n")}toString(){let t=this.showSourceCode();return t&&(t="\n\n"+t+"\n"),this.name+": "+this.message+t}}t.exports=o,o.default=o},4258:(t,e,r)=>{"use strict";let n=r(5631);class i extends n{constructor(t){t&&void 0!==t.value&&"string"!=typeof t.value&&(t={...t,value:String(t.value)}),super(t),this.type="decl"}get variable(){return this.prop.startsWith("--")||"$"===this.prop[0]}}t.exports=i,i.default=i},6461:(t,e,r)=>{"use strict";let n,i,o=r(1019);class s extends o{constructor(t){super({type:"document",...t}),this.nodes||(this.nodes=[])}toResult(t={}){return new n(new i,this,t).stringify()}}s.registerLazyResult=t=>{n=t},s.registerProcessor=t=>{i=t},t.exports=s,s.default=s},250:(t,e,r)=>{"use strict";let n=r(4258),i=r(7981),o=r(9932),s=r(1353),a=r(5995),l=r(1025),c=r(1675);function u(t,e){if(Array.isArray(t))return t.map((t=>u(t)));let{inputs:r,...d}=t;if(r){e=[];for(let t of r){let r={...t,__proto__:a.prototype};r.map&&(r.map={...r.map,__proto__:i.prototype}),e.push(r)}}if(d.nodes&&(d.nodes=t.nodes.map((t=>u(t,e)))),d.source){let{inputId:t,...r}=d.source;d.source=r,null!=t&&(d.source.input=e[t])}if("root"===d.type)return new l(d);if("decl"===d.type)return new n(d);if("rule"===d.type)return new c(d);if("comment"===d.type)return new o(d);if("atrule"===d.type)return new s(d);throw new Error("Unknown node type: "+t.type)}t.exports=u,u.default=u},5995:(t,e,r)=>{"use strict";let{SourceMapConsumer:n,SourceMapGenerator:i}=r(209),{fileURLToPath:o,pathToFileURL:s}=r(7414),{resolve:a,isAbsolute:l}=r(9830),{nanoid:c}=r(2961),u=r(2868),d=r(2671),p=r(7981),h=Symbol("fromOffsetCache"),f=Boolean(n&&i),m=Boolean(a&&l);class g{constructor(t,e={}){if(null==t||"object"==typeof t&&!t.toString)throw new Error(`PostCSS received ${t} instead of CSS string`);if(this.css=t.toString(),"\ufeff"===this.css[0]||"￾"===this.css[0]?(this.hasBOM=!0,this.css=this.css.slice(1)):this.hasBOM=!1,e.from&&(!m||/^\w+:\/\//.test(e.from)||l(e.from)?this.file=e.from:this.file=a(e.from)),m&&f){let t=new p(this.css,e);if(t.text){this.map=t;let e=t.consumer().file;!this.file&&e&&(this.file=this.mapResolve(e))}}this.file||(this.id="<input css "+c(6)+">"),this.map&&(this.map.file=this.from)}fromOffset(t){let e,r;if(this[h])r=this[h];else{let t=this.css.split("\n");r=new Array(t.length);let e=0;for(let n=0,i=t.length;n<i;n++)r[n]=e,e+=t[n].length+1;this[h]=r}e=r[r.length-1];let n=0;if(t>=e)n=r.length-1;else{let e,i=r.length-2;for(;n<i;)if(e=n+(i-n>>1),t<r[e])i=e-1;else{if(!(t>=r[e+1])){n=e;break}n=e+1}}return{line:n+1,col:t-r[n]+1}}error(t,e,r,n={}){let i,o,a;if(e&&"object"==typeof e){let t=e,n=r;if("number"==typeof e.offset){let n=this.fromOffset(t.offset);e=n.line,r=n.col}else e=t.line,r=t.column;if("number"==typeof n.offset){let t=this.fromOffset(n.offset);o=t.line,a=t.col}else o=n.line,a=n.column}else if(!r){let t=this.fromOffset(e);e=t.line,r=t.col}let l=this.origin(e,r,o,a);return i=l?new d(t,void 0===l.endLine?l.line:{line:l.line,column:l.column},void 0===l.endLine?l.column:{line:l.endLine,column:l.endColumn},l.source,l.file,n.plugin):new d(t,void 0===o?e:{line:e,column:r},void 0===o?r:{line:o,column:a},this.css,this.file,n.plugin),i.input={line:e,column:r,endLine:o,endColumn:a,source:this.css},this.file&&(s&&(i.input.url=s(this.file).toString()),i.input.file=this.file),i}origin(t,e,r,n){if(!this.map)return!1;let i,a,c=this.map.consumer(),u=c.originalPositionFor({line:t,column:e});if(!u.source)return!1;"number"==typeof r&&(i=c.originalPositionFor({line:r,column:n})),a=l(u.source)?s(u.source):new URL(u.source,this.map.consumer().sourceRoot||s(this.map.mapFile));let d={url:a.toString(),line:u.line,column:u.column,endLine:i&&i.line,endColumn:i&&i.column};if("file:"===a.protocol){if(!o)throw new Error("file: protocol is not available in this PostCSS build");d.file=o(a)}let p=c.sourceContentFor(u.source);return p&&(d.source=p),d}mapResolve(t){return/^\w+:\/\//.test(t)?t:a(this.map.consumer().sourceRoot||this.map.root||".",t)}get from(){return this.file||this.id}toJSON(){let t={};for(let e of["hasBOM","css","file","id"])null!=this[e]&&(t[e]=this[e]);return this.map&&(t.map={...this.map},t.map.consumerCache&&(t.map.consumerCache=void 0)),t}}t.exports=g,g.default=g,u&&u.registerInput&&u.registerInput(g)},1939:(t,e,r)=>{"use strict";let{isClean:n,my:i}=r(5513),o=r(8505),s=r(7088),a=r(1019),l=r(6461),c=(r(2448),r(3632)),u=r(6939),d=r(1025);const p={document:"Document",root:"Root",atrule:"AtRule",rule:"Rule",decl:"Declaration",comment:"Comment"},h={postcssPlugin:!0,prepare:!0,Once:!0,Document:!0,Root:!0,Declaration:!0,Rule:!0,AtRule:!0,Comment:!0,DeclarationExit:!0,RuleExit:!0,AtRuleExit:!0,CommentExit:!0,RootExit:!0,DocumentExit:!0,OnceExit:!0},f={postcssPlugin:!0,prepare:!0,Once:!0};function m(t){return"object"==typeof t&&"function"==typeof t.then}function g(t){let e=!1,r=p[t.type];return"decl"===t.type?e=t.prop.toLowerCase():"atrule"===t.type&&(e=t.name.toLowerCase()),e&&t.append?[r,r+"-"+e,0,r+"Exit",r+"Exit-"+e]:e?[r,r+"-"+e,r+"Exit",r+"Exit-"+e]:t.append?[r,0,r+"Exit"]:[r,r+"Exit"]}function b(t){let e;return e="document"===t.type?["Document",0,"DocumentExit"]:"root"===t.type?["Root",0,"RootExit"]:g(t),{node:t,events:e,eventIndex:0,visitors:[],visitorIndex:0,iterator:0}}function y(t){return t[n]=!1,t.nodes&&t.nodes.forEach((t=>y(t))),t}let v={};class w{constructor(t,e,r){let n;if(this.stringified=!1,this.processed=!1,"object"!=typeof e||null===e||"root"!==e.type&&"document"!==e.type)if(e instanceof w||e instanceof c)n=y(e.root),e.map&&(void 0===r.map&&(r.map={}),r.map.inline||(r.map.inline=!1),r.map.prev=e.map);else{let t=u;r.syntax&&(t=r.syntax.parse),r.parser&&(t=r.parser),t.parse&&(t=t.parse);try{n=t(e,r)}catch(t){this.processed=!0,this.error=t}n&&!n[i]&&a.rebuild(n)}else n=y(e);this.result=new c(t,n,r),this.helpers={...v,result:this.result,postcss:v},this.plugins=this.processor.plugins.map((t=>"object"==typeof t&&t.prepare?{...t,...t.prepare(this.result)}:t))}get[Symbol.toStringTag](){return"LazyResult"}get processor(){return this.result.processor}get opts(){return this.result.opts}get css(){return this.stringify().css}get content(){return this.stringify().content}get map(){return this.stringify().map}get root(){return this.sync().root}get messages(){return this.sync().messages}warnings(){return this.sync().warnings()}toString(){return this.css}then(t,e){return this.async().then(t,e)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}async(){return this.error?Promise.reject(this.error):this.processed?Promise.resolve(this.result):(this.processing||(this.processing=this.runAsync()),this.processing)}sync(){if(this.error)throw this.error;if(this.processed)return this.result;if(this.processed=!0,this.processing)throw this.getAsyncError();for(let t of this.plugins)if(m(this.runOnRoot(t)))throw this.getAsyncError();if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[n];)t[n]=!0,this.walkSync(t);if(this.listeners.OnceExit)if("document"===t.type)for(let e of t.nodes)this.visitSync(this.listeners.OnceExit,e);else this.visitSync(this.listeners.OnceExit,t)}return this.result}stringify(){if(this.error)throw this.error;if(this.stringified)return this.result;this.stringified=!0,this.sync();let t=this.result.opts,e=s;t.syntax&&(e=t.syntax.stringify),t.stringifier&&(e=t.stringifier),e.stringify&&(e=e.stringify);let r=new o(e,this.result.root,this.result.opts).generate();return this.result.css=r[0],this.result.map=r[1],this.result}walkSync(t){t[n]=!0;let e=g(t);for(let r of e)if(0===r)t.nodes&&t.each((t=>{t[n]||this.walkSync(t)}));else{let e=this.listeners[r];if(e&&this.visitSync(e,t.toProxy()))return}}visitSync(t,e){for(let[r,n]of t){let t;this.result.lastPlugin=r;try{t=n(e,this.helpers)}catch(t){throw this.handleError(t,e.proxyOf)}if("root"!==e.type&&"document"!==e.type&&!e.parent)return!0;if(m(t))throw this.getAsyncError()}}runOnRoot(t){this.result.lastPlugin=t;try{if("object"==typeof t&&t.Once){if("document"===this.result.root.type){let e=this.result.root.nodes.map((e=>t.Once(e,this.helpers)));return m(e[0])?Promise.all(e):e}return t.Once(this.result.root,this.helpers)}if("function"==typeof t)return t(this.result.root,this.result)}catch(t){throw this.handleError(t)}}getAsyncError(){throw new Error("Use process(css).then(cb) to work with async plugins")}handleError(t,e){let r=this.result.lastPlugin;try{e&&e.addToError(t),this.error=t,"CssSyntaxError"!==t.name||t.plugin?r.postcssVersion:(t.plugin=r.postcssPlugin,t.setMessage())}catch(t){console&&console.error&&console.error(t)}return t}async runAsync(){this.plugin=0;for(let t=0;t<this.plugins.length;t++){let e=this.plugins[t],r=this.runOnRoot(e);if(m(r))try{await r}catch(t){throw this.handleError(t)}}if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[n];){t[n]=!0;let e=[b(t)];for(;e.length>0;){let t=this.visitTick(e);if(m(t))try{await t}catch(t){let r=e[e.length-1].node;throw this.handleError(t,r)}}}if(this.listeners.OnceExit)for(let[e,r]of this.listeners.OnceExit){this.result.lastPlugin=e;try{if("document"===t.type){let e=t.nodes.map((t=>r(t,this.helpers)));await Promise.all(e)}else await r(t,this.helpers)}catch(t){throw this.handleError(t)}}}return this.processed=!0,this.stringify()}prepareVisitors(){this.listeners={};let t=(t,e,r)=>{this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push([t,r])};for(let e of this.plugins)if("object"==typeof e)for(let r in e){if(!h[r]&&/^[A-Z]/.test(r))throw new Error(`Unknown event ${r} in ${e.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);if(!f[r])if("object"==typeof e[r])for(let n in e[r])t(e,"*"===n?r:r+"-"+n.toLowerCase(),e[r][n]);else"function"==typeof e[r]&&t(e,r,e[r])}this.hasListener=Object.keys(this.listeners).length>0}visitTick(t){let e=t[t.length-1],{node:r,visitors:i}=e;if("root"!==r.type&&"document"!==r.type&&!r.parent)return void t.pop();if(i.length>0&&e.visitorIndex<i.length){let[t,n]=i[e.visitorIndex];e.visitorIndex+=1,e.visitorIndex===i.length&&(e.visitors=[],e.visitorIndex=0),this.result.lastPlugin=t;try{return n(r.toProxy(),this.helpers)}catch(t){throw this.handleError(t,r)}}if(0!==e.iterator){let i,o=e.iterator;for(;i=r.nodes[r.indexes[o]];)if(r.indexes[o]+=1,!i[n])return i[n]=!0,void t.push(b(i));e.iterator=0,delete r.indexes[o]}let o=e.events;for(;e.eventIndex<o.length;){let t=o[e.eventIndex];if(e.eventIndex+=1,0===t)return void(r.nodes&&r.nodes.length&&(r[n]=!0,e.iterator=r.getIterator()));if(this.listeners[t])return void(e.visitors=this.listeners[t])}t.pop()}}w.registerPostcss=t=>{v=t},t.exports=w,w.default=w,d.registerLazyResult(w),l.registerLazyResult(w)},4715:t=>{"use strict";let e={split(t,e,r){let n=[],i="",o=!1,s=0,a=!1,l="",c=!1;for(let r of t)c?c=!1:"\\"===r?c=!0:a?r===l&&(a=!1):'"'===r||"'"===r?(a=!0,l=r):"("===r?s+=1:")"===r?s>0&&(s-=1):0===s&&e.includes(r)&&(o=!0),o?(""!==i&&n.push(i.trim()),i="",o=!1):i+=r;return(r||""!==i)&&n.push(i.trim()),n},space:t=>e.split(t,[" ","\n","\t"]),comma:t=>e.split(t,[","],!0)};t.exports=e,e.default=e},8505:(t,e,r)=>{"use strict";let{SourceMapConsumer:n,SourceMapGenerator:i}=r(209),{dirname:o,resolve:s,relative:a,sep:l}=r(9830),{pathToFileURL:c}=r(7414),u=r(5995),d=Boolean(n&&i),p=Boolean(o&&s&&a&&l);t.exports=class{constructor(t,e,r,n){this.stringify=t,this.mapOpts=r.map||{},this.root=e,this.opts=r,this.css=n,this.usesFileUrls=!this.mapOpts.from&&this.mapOpts.absolute}isMap(){return void 0!==this.opts.map?!!this.opts.map:this.previous().length>0}previous(){if(!this.previousMaps)if(this.previousMaps=[],this.root)this.root.walk((t=>{if(t.source&&t.source.input.map){let e=t.source.input.map;this.previousMaps.includes(e)||this.previousMaps.push(e)}}));else{let t=new u(this.css,this.opts);t.map&&this.previousMaps.push(t.map)}return this.previousMaps}isInline(){if(void 0!==this.mapOpts.inline)return this.mapOpts.inline;let t=this.mapOpts.annotation;return(void 0===t||!0===t)&&(!this.previous().length||this.previous().some((t=>t.inline)))}isSourcesContent(){return void 0!==this.mapOpts.sourcesContent?this.mapOpts.sourcesContent:!this.previous().length||this.previous().some((t=>t.withContent()))}clearAnnotation(){if(!1!==this.mapOpts.annotation)if(this.root){let t;for(let e=this.root.nodes.length-1;e>=0;e--)t=this.root.nodes[e],"comment"===t.type&&0===t.text.indexOf("# sourceMappingURL=")&&this.root.removeChild(e)}else this.css&&(this.css=this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm,""))}setSourcesContent(){let t={};if(this.root)this.root.walk((e=>{if(e.source){let r=e.source.input.from;if(r&&!t[r]){t[r]=!0;let n=this.usesFileUrls?this.toFileUrl(r):this.toUrl(this.path(r));this.map.setSourceContent(n,e.source.input.css)}}}));else if(this.css){let t=this.opts.from?this.toUrl(this.path(this.opts.from)):"<no source>";this.map.setSourceContent(t,this.css)}}applyPrevMaps(){for(let t of this.previous()){let e,r=this.toUrl(this.path(t.file)),i=t.root||o(t.file);!1===this.mapOpts.sourcesContent?(e=new n(t.text),e.sourcesContent&&(e.sourcesContent=e.sourcesContent.map((()=>null)))):e=t.consumer(),this.map.applySourceMap(e,r,this.toUrl(this.path(i)))}}isAnnotation(){return!!this.isInline()||(void 0!==this.mapOpts.annotation?this.mapOpts.annotation:!this.previous().length||this.previous().some((t=>t.annotation)))}toBase64(t){return Buffer?Buffer.from(t).toString("base64"):window.btoa(unescape(encodeURIComponent(t)))}addAnnotation(){let t;t=this.isInline()?"data:application/json;base64,"+this.toBase64(this.map.toString()):"string"==typeof this.mapOpts.annotation?this.mapOpts.annotation:"function"==typeof this.mapOpts.annotation?this.mapOpts.annotation(this.opts.to,this.root):this.outputFile()+".map";let e="\n";this.css.includes("\r\n")&&(e="\r\n"),this.css+=e+"/*# sourceMappingURL="+t+" */"}outputFile(){return this.opts.to?this.path(this.opts.to):this.opts.from?this.path(this.opts.from):"to.css"}generateMap(){if(this.root)this.generateString();else if(1===this.previous().length){let t=this.previous()[0].consumer();t.file=this.outputFile(),this.map=i.fromSourceMap(t)}else this.map=new i({file:this.outputFile()}),this.map.addMapping({source:this.opts.from?this.toUrl(this.path(this.opts.from)):"<no source>",generated:{line:1,column:0},original:{line:1,column:0}});return this.isSourcesContent()&&this.setSourcesContent(),this.root&&this.previous().length>0&&this.applyPrevMaps(),this.isAnnotation()&&this.addAnnotation(),this.isInline()?[this.css]:[this.css,this.map]}path(t){if(0===t.indexOf("<"))return t;if(/^\w+:\/\//.test(t))return t;if(this.mapOpts.absolute)return t;let e=this.opts.to?o(this.opts.to):".";return"string"==typeof this.mapOpts.annotation&&(e=o(s(e,this.mapOpts.annotation))),a(e,t)}toUrl(t){return"\\"===l&&(t=t.replace(/\\/g,"/")),encodeURI(t).replace(/[#?]/g,encodeURIComponent)}toFileUrl(t){if(c)return c(t).toString();throw new Error("`map.absolute` option is not available in this PostCSS build")}sourcePath(t){return this.mapOpts.from?this.toUrl(this.mapOpts.from):this.usesFileUrls?this.toFileUrl(t.source.input.from):this.toUrl(this.path(t.source.input.from))}generateString(){this.css="",this.map=new i({file:this.outputFile()});let t,e,r=1,n=1,o="<no source>",s={source:"",generated:{line:0,column:0},original:{line:0,column:0}};this.stringify(this.root,((i,a,l)=>{if(this.css+=i,a&&"end"!==l&&(s.generated.line=r,s.generated.column=n-1,a.source&&a.source.start?(s.source=this.sourcePath(a),s.original.line=a.source.start.line,s.original.column=a.source.start.column-1,this.map.addMapping(s)):(s.source=o,s.original.line=1,s.original.column=0,this.map.addMapping(s))),t=i.match(/\n/g),t?(r+=t.length,e=i.lastIndexOf("\n"),n=i.length-e):n+=i.length,a&&"start"!==l){let t=a.parent||{raws:{}};("decl"!==a.type||a!==t.last||t.raws.semicolon)&&(a.source&&a.source.end?(s.source=this.sourcePath(a),s.original.line=a.source.end.line,s.original.column=a.source.end.column-1,s.generated.line=r,s.generated.column=n-2,this.map.addMapping(s)):(s.source=o,s.original.line=1,s.original.column=0,s.generated.line=r,s.generated.column=n-1,this.map.addMapping(s)))}}))}generate(){if(this.clearAnnotation(),p&&d&&this.isMap())return this.generateMap();{let t="";return this.stringify(this.root,(e=>{t+=e})),[t]}}}},7647:(t,e,r)=>{"use strict";let n=r(8505),i=r(7088),o=(r(2448),r(6939));const s=r(3632);class a{constructor(t,e,r){let o;e=e.toString(),this.stringified=!1,this._processor=t,this._css=e,this._opts=r,this._map=void 0;let a=i;this.result=new s(this._processor,o,this._opts),this.result.css=e;let l=this;Object.defineProperty(this.result,"root",{get:()=>l.root});let c=new n(a,o,this._opts,e);if(c.isMap()){let[t,e]=c.generate();t&&(this.result.css=t),e&&(this.result.map=e)}}get[Symbol.toStringTag](){return"NoWorkResult"}get processor(){return this.result.processor}get opts(){return this.result.opts}get css(){return this.result.css}get content(){return this.result.css}get map(){return this.result.map}get root(){if(this._root)return this._root;let t,e=o;try{t=e(this._css,this._opts)}catch(t){this.error=t}if(this.error)throw this.error;return this._root=t,t}get messages(){return[]}warnings(){return[]}toString(){return this._css}then(t,e){return this.async().then(t,e)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}async(){return this.error?Promise.reject(this.error):Promise.resolve(this.result)}sync(){if(this.error)throw this.error;return this.result}}t.exports=a,a.default=a},5631:(t,e,r)=>{"use strict";let{isClean:n,my:i}=r(5513),o=r(2671),s=r(1062),a=r(7088);function l(t,e){let r=new t.constructor;for(let n in t){if(!Object.prototype.hasOwnProperty.call(t,n))continue;if("proxyCache"===n)continue;let i=t[n],o=typeof i;"parent"===n&&"object"===o?e&&(r[n]=e):"source"===n?r[n]=i:Array.isArray(i)?r[n]=i.map((t=>l(t,r))):("object"===o&&null!==i&&(i=l(i)),r[n]=i)}return r}class c{constructor(t={}){this.raws={},this[n]=!1,this[i]=!0;for(let e in t)if("nodes"===e){this.nodes=[];for(let r of t[e])"function"==typeof r.clone?this.append(r.clone()):this.append(r)}else this[e]=t[e]}error(t,e={}){if(this.source){let{start:r,end:n}=this.rangeBy(e);return this.source.input.error(t,{line:r.line,column:r.column},{line:n.line,column:n.column},e)}return new o(t)}warn(t,e,r){let n={node:this};for(let t in r)n[t]=r[t];return t.warn(e,n)}remove(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this}toString(t=a){t.stringify&&(t=t.stringify);let e="";return t(this,(t=>{e+=t})),e}assign(t={}){for(let e in t)this[e]=t[e];return this}clone(t={}){let e=l(this);for(let r in t)e[r]=t[r];return e}cloneBefore(t={}){let e=this.clone(t);return this.parent.insertBefore(this,e),e}cloneAfter(t={}){let e=this.clone(t);return this.parent.insertAfter(this,e),e}replaceWith(...t){if(this.parent){let e=this,r=!1;for(let n of t)n===this?r=!0:r?(this.parent.insertAfter(e,n),e=n):this.parent.insertBefore(e,n);r||this.remove()}return this}next(){if(!this.parent)return;let t=this.parent.index(this);return this.parent.nodes[t+1]}prev(){if(!this.parent)return;let t=this.parent.index(this);return this.parent.nodes[t-1]}before(t){return this.parent.insertBefore(this,t),this}after(t){return this.parent.insertAfter(this,t),this}root(){let t=this;for(;t.parent&&"document"!==t.parent.type;)t=t.parent;return t}raw(t,e){return(new s).raw(this,t,e)}cleanRaws(t){delete this.raws.before,delete this.raws.after,t||delete this.raws.between}toJSON(t,e){let r={},n=null==e;e=e||new Map;let i=0;for(let t in this){if(!Object.prototype.hasOwnProperty.call(this,t))continue;if("parent"===t||"proxyCache"===t)continue;let n=this[t];if(Array.isArray(n))r[t]=n.map((t=>"object"==typeof t&&t.toJSON?t.toJSON(null,e):t));else if("object"==typeof n&&n.toJSON)r[t]=n.toJSON(null,e);else if("source"===t){let o=e.get(n.input);null==o&&(o=i,e.set(n.input,i),i++),r[t]={inputId:o,start:n.start,end:n.end}}else r[t]=n}return n&&(r.inputs=[...e.keys()].map((t=>t.toJSON()))),r}positionInside(t){let e=this.toString(),r=this.source.start.column,n=this.source.start.line;for(let i=0;i<t;i++)"\n"===e[i]?(r=1,n+=1):r+=1;return{line:n,column:r}}positionBy(t){let e=this.source.start;if(t.index)e=this.positionInside(t.index);else if(t.word){let r=this.toString().indexOf(t.word);-1!==r&&(e=this.positionInside(r))}return e}rangeBy(t){let e={line:this.source.start.line,column:this.source.start.column},r=this.source.end?{line:this.source.end.line,column:this.source.end.column+1}:{line:e.line,column:e.column+1};if(t.word){let n=this.toString().indexOf(t.word);-1!==n&&(e=this.positionInside(n),r=this.positionInside(n+t.word.length))}else t.start?e={line:t.start.line,column:t.start.column}:t.index&&(e=this.positionInside(t.index)),t.end?r={line:t.end.line,column:t.end.column}:t.endIndex?r=this.positionInside(t.endIndex):t.index&&(r=this.positionInside(t.index+1));return(r.line<e.line||r.line===e.line&&r.column<=e.column)&&(r={line:e.line,column:e.column+1}),{start:e,end:r}}getProxyProcessor(){return{set:(t,e,r)=>(t[e]===r||(t[e]=r,"prop"!==e&&"value"!==e&&"name"!==e&&"params"!==e&&"important"!==e&&"text"!==e||t.markDirty()),!0),get:(t,e)=>"proxyOf"===e?t:"root"===e?()=>t.root().toProxy():t[e]}}toProxy(){return this.proxyCache||(this.proxyCache=new Proxy(this,this.getProxyProcessor())),this.proxyCache}addToError(t){if(t.postcssNode=this,t.stack&&this.source&&/\n\s{4}at /.test(t.stack)){let e=this.source;t.stack=t.stack.replace(/\n\s{4}at /,`$&${e.input.from}:${e.start.line}:${e.start.column}$&`)}return t}markDirty(){if(this[n]){this[n]=!1;let t=this;for(;t=t.parent;)t[n]=!1}}get proxyOf(){return this}}t.exports=c,c.default=c},6939:(t,e,r)=>{"use strict";let n=r(1019),i=r(8867),o=r(5995);function s(t,e){let r=new o(t,e),n=new i(r);try{n.parse()}catch(t){throw t}return n.root}t.exports=s,s.default=s,n.registerParse(s)},8867:(t,e,r)=>{"use strict";let n=r(4258),i=r(3852),o=r(9932),s=r(1353),a=r(1025),l=r(1675);const c={empty:!0,space:!0};t.exports=class{constructor(t){this.input=t,this.root=new a,this.current=this.root,this.spaces="",this.semicolon=!1,this.customProperty=!1,this.createTokenizer(),this.root.source={input:t,start:{offset:0,line:1,column:1}}}createTokenizer(){this.tokenizer=i(this.input)}parse(){let t;for(;!this.tokenizer.endOfFile();)switch(t=this.tokenizer.nextToken(),t[0]){case"space":this.spaces+=t[1];break;case";":this.freeSemicolon(t);break;case"}":this.end(t);break;case"comment":this.comment(t);break;case"at-word":this.atrule(t);break;case"{":this.emptyRule(t);break;default:this.other(t)}this.endFile()}comment(t){let e=new o;this.init(e,t[2]),e.source.end=this.getPosition(t[3]||t[2]);let r=t[1].slice(2,-2);if(/^\s*$/.test(r))e.text="",e.raws.left=r,e.raws.right="";else{let t=r.match(/^(\s*)([^]*\S)(\s*)$/);e.text=t[2],e.raws.left=t[1],e.raws.right=t[3]}}emptyRule(t){let e=new l;this.init(e,t[2]),e.selector="",e.raws.between="",this.current=e}other(t){let e=!1,r=null,n=!1,i=null,o=[],s=t[1].startsWith("--"),a=[],l=t;for(;l;){if(r=l[0],a.push(l),"("===r||"["===r)i||(i=l),o.push("("===r?")":"]");else if(s&&n&&"{"===r)i||(i=l),o.push("}");else if(0===o.length){if(";"===r){if(n)return void this.decl(a,s);break}if("{"===r)return void this.rule(a);if("}"===r){this.tokenizer.back(a.pop()),e=!0;break}":"===r&&(n=!0)}else r===o[o.length-1]&&(o.pop(),0===o.length&&(i=null));l=this.tokenizer.nextToken()}if(this.tokenizer.endOfFile()&&(e=!0),o.length>0&&this.unclosedBracket(i),e&&n){if(!s)for(;a.length&&(l=a[a.length-1][0],"space"===l||"comment"===l);)this.tokenizer.back(a.pop());this.decl(a,s)}else this.unknownWord(a)}rule(t){t.pop();let e=new l;this.init(e,t[0][2]),e.raws.between=this.spacesAndCommentsFromEnd(t),this.raw(e,"selector",t),this.current=e}decl(t,e){let r=new n;this.init(r,t[0][2]);let i,o=t[t.length-1];for(";"===o[0]&&(this.semicolon=!0,t.pop()),r.source.end=this.getPosition(o[3]||o[2]||function(t){for(let e=t.length-1;e>=0;e--){let r=t[e],n=r[3]||r[2];if(n)return n}}(t));"word"!==t[0][0];)1===t.length&&this.unknownWord(t),r.raws.before+=t.shift()[1];for(r.source.start=this.getPosition(t[0][2]),r.prop="";t.length;){let e=t[0][0];if(":"===e||"space"===e||"comment"===e)break;r.prop+=t.shift()[1]}for(r.raws.between="";t.length;){if(i=t.shift(),":"===i[0]){r.raws.between+=i[1];break}"word"===i[0]&&/\w/.test(i[1])&&this.unknownWord([i]),r.raws.between+=i[1]}"_"!==r.prop[0]&&"*"!==r.prop[0]||(r.raws.before+=r.prop[0],r.prop=r.prop.slice(1));let s,a=[];for(;t.length&&(s=t[0][0],"space"===s||"comment"===s);)a.push(t.shift());this.precheckMissedSemicolon(t);for(let e=t.length-1;e>=0;e--){if(i=t[e],"!important"===i[1].toLowerCase()){r.important=!0;let n=this.stringFrom(t,e);n=this.spacesFromEnd(t)+n," !important"!==n&&(r.raws.important=n);break}if("important"===i[1].toLowerCase()){let n=t.slice(0),i="";for(let t=e;t>0;t--){let e=n[t][0];if(0===i.trim().indexOf("!")&&"space"!==e)break;i=n.pop()[1]+i}0===i.trim().indexOf("!")&&(r.important=!0,r.raws.important=i,t=n)}if("space"!==i[0]&&"comment"!==i[0])break}t.some((t=>"space"!==t[0]&&"comment"!==t[0]))&&(r.raws.between+=a.map((t=>t[1])).join(""),a=[]),this.raw(r,"value",a.concat(t),e),r.value.includes(":")&&!e&&this.checkMissedSemicolon(t)}atrule(t){let e,r,n,i=new s;i.name=t[1].slice(1),""===i.name&&this.unnamedAtrule(i,t),this.init(i,t[2]);let o=!1,a=!1,l=[],c=[];for(;!this.tokenizer.endOfFile();){if(e=(t=this.tokenizer.nextToken())[0],"("===e||"["===e?c.push("("===e?")":"]"):"{"===e&&c.length>0?c.push("}"):e===c[c.length-1]&&c.pop(),0===c.length){if(";"===e){i.source.end=this.getPosition(t[2]),this.semicolon=!0;break}if("{"===e){a=!0;break}if("}"===e){if(l.length>0){for(n=l.length-1,r=l[n];r&&"space"===r[0];)r=l[--n];r&&(i.source.end=this.getPosition(r[3]||r[2]))}this.end(t);break}l.push(t)}else l.push(t);if(this.tokenizer.endOfFile()){o=!0;break}}i.raws.between=this.spacesAndCommentsFromEnd(l),l.length?(i.raws.afterName=this.spacesAndCommentsFromStart(l),this.raw(i,"params",l),o&&(t=l[l.length-1],i.source.end=this.getPosition(t[3]||t[2]),this.spaces=i.raws.between,i.raws.between="")):(i.raws.afterName="",i.params=""),a&&(i.nodes=[],this.current=i)}end(t){this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.semicolon=!1,this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.spaces="",this.current.parent?(this.current.source.end=this.getPosition(t[2]),this.current=this.current.parent):this.unexpectedClose(t)}endFile(){this.current.parent&&this.unclosedBlock(),this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces}freeSemicolon(t){if(this.spaces+=t[1],this.current.nodes){let t=this.current.nodes[this.current.nodes.length-1];t&&"rule"===t.type&&!t.raws.ownSemicolon&&(t.raws.ownSemicolon=this.spaces,this.spaces="")}}getPosition(t){let e=this.input.fromOffset(t);return{offset:t,line:e.line,column:e.col}}init(t,e){this.current.push(t),t.source={start:this.getPosition(e),input:this.input},t.raws.before=this.spaces,this.spaces="","comment"!==t.type&&(this.semicolon=!1)}raw(t,e,r,n){let i,o,s,a,l=r.length,u="",d=!0;for(let t=0;t<l;t+=1)i=r[t],o=i[0],"space"!==o||t!==l-1||n?"comment"===o?(a=r[t-1]?r[t-1][0]:"empty",s=r[t+1]?r[t+1][0]:"empty",c[a]||c[s]||","===u.slice(-1)?d=!1:u+=i[1]):u+=i[1]:d=!1;if(!d){let n=r.reduce(((t,e)=>t+e[1]),"");t.raws[e]={value:u,raw:n}}t[e]=u}spacesAndCommentsFromEnd(t){let e,r="";for(;t.length&&(e=t[t.length-1][0],"space"===e||"comment"===e);)r=t.pop()[1]+r;return r}spacesAndCommentsFromStart(t){let e,r="";for(;t.length&&(e=t[0][0],"space"===e||"comment"===e);)r+=t.shift()[1];return r}spacesFromEnd(t){let e,r="";for(;t.length&&(e=t[t.length-1][0],"space"===e);)r=t.pop()[1]+r;return r}stringFrom(t,e){let r="";for(let n=e;n<t.length;n++)r+=t[n][1];return t.splice(e,t.length-e),r}colon(t){let e,r,n,i=0;for(let[o,s]of t.entries()){if(e=s,r=e[0],"("===r&&(i+=1),")"===r&&(i-=1),0===i&&":"===r){if(n){if("word"===n[0]&&"progid"===n[1])continue;return o}this.doubleColon(e)}n=e}return!1}unclosedBracket(t){throw this.input.error("Unclosed bracket",{offset:t[2]},{offset:t[2]+1})}unknownWord(t){throw this.input.error("Unknown word",{offset:t[0][2]},{offset:t[0][2]+t[0][1].length})}unexpectedClose(t){throw this.input.error("Unexpected }",{offset:t[2]},{offset:t[2]+1})}unclosedBlock(){let t=this.current.source.start;throw this.input.error("Unclosed block",t.line,t.column)}doubleColon(t){throw this.input.error("Double colon",{offset:t[2]},{offset:t[2]+t[1].length})}unnamedAtrule(t,e){throw this.input.error("At-rule without name",{offset:e[2]},{offset:e[2]+e[1].length})}precheckMissedSemicolon(){}checkMissedSemicolon(t){let e=this.colon(t);if(!1===e)return;let r,n=0;for(let i=e-1;i>=0&&(r=t[i],"space"===r[0]||(n+=1,2!==n));i--);throw this.input.error("Missed semicolon","word"===r[0]?r[3]+1:r[2])}}},20:(t,e,r)=>{"use strict";let n=r(2671),i=r(4258),o=r(1939),s=r(1019),a=r(1723),l=r(7088),c=r(250),u=r(6461),d=r(1728),p=r(9932),h=r(1353),f=r(3632),m=r(5995),g=r(6939),b=r(4715),y=r(1675),v=r(1025),w=r(5631);function A(...t){return 1===t.length&&Array.isArray(t[0])&&(t=t[0]),new a(t)}A.plugin=function(t,e){let r,n=!1;function i(...r){console&&console.warn&&!n&&(n=!0,console.warn(t+": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"),process.env.LANG&&process.env.LANG.startsWith("cn")&&console.warn(t+": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"));let i=e(...r);return i.postcssPlugin=t,i.postcssVersion=(new a).version,i}return Object.defineProperty(i,"postcss",{get:()=>(r||(r=i()),r)}),i.process=function(t,e,r){return A([i(r)]).process(t,e)},i},A.stringify=l,A.parse=g,A.fromJSON=c,A.list=b,A.comment=t=>new p(t),A.atRule=t=>new h(t),A.decl=t=>new i(t),A.rule=t=>new y(t),A.root=t=>new v(t),A.document=t=>new u(t),A.CssSyntaxError=n,A.Declaration=i,A.Container=s,A.Processor=a,A.Document=u,A.Comment=p,A.Warning=d,A.AtRule=h,A.Result=f,A.Input=m,A.Rule=y,A.Root=v,A.Node=w,o.registerPostcss(A),t.exports=A,A.default=A},7981:(t,e,r)=>{"use strict";let{SourceMapConsumer:n,SourceMapGenerator:i}=r(209),{existsSync:o,readFileSync:s}=r(4777),{dirname:a,join:l}=r(9830);class c{constructor(t,e){if(!1===e.map)return;this.loadAnnotation(t),this.inline=this.startWith(this.annotation,"data:");let r=e.map?e.map.prev:void 0,n=this.loadMap(e.from,r);!this.mapFile&&e.from&&(this.mapFile=e.from),this.mapFile&&(this.root=a(this.mapFile)),n&&(this.text=n)}consumer(){return this.consumerCache||(this.consumerCache=new n(this.text)),this.consumerCache}withContent(){return!!(this.consumer().sourcesContent&&this.consumer().sourcesContent.length>0)}startWith(t,e){return!!t&&t.substr(0,e.length)===e}getAnnotationURL(t){return t.replace(/^\/\*\s*# sourceMappingURL=/,"").trim()}loadAnnotation(t){let e=t.match(/\/\*\s*# sourceMappingURL=/gm);if(!e)return;let r=t.lastIndexOf(e.pop()),n=t.indexOf("*/",r);r>-1&&n>-1&&(this.annotation=this.getAnnotationURL(t.substring(r,n)))}decodeInline(t){if(/^data:application\/json;charset=utf-?8,/.test(t)||/^data:application\/json,/.test(t))return decodeURIComponent(t.substr(RegExp.lastMatch.length));if(/^data:application\/json;charset=utf-?8;base64,/.test(t)||/^data:application\/json;base64,/.test(t))return e=t.substr(RegExp.lastMatch.length),Buffer?Buffer.from(e,"base64").toString():window.atob(e);var e;let r=t.match(/data:application\/json;([^,]+),/)[1];throw new Error("Unsupported source map encoding "+r)}loadFile(t){if(this.root=a(t),o(t))return this.mapFile=t,s(t,"utf-8").toString().trim()}loadMap(t,e){if(!1===e)return!1;if(e){if("string"==typeof e)return e;if("function"!=typeof e){if(e instanceof n)return i.fromSourceMap(e).toString();if(e instanceof i)return e.toString();if(this.isMap(e))return JSON.stringify(e);throw new Error("Unsupported previous source map format: "+e.toString())}{let r=e(t);if(r){let t=this.loadFile(r);if(!t)throw new Error("Unable to load previous source map: "+r.toString());return t}}}else{if(this.inline)return this.decodeInline(this.annotation);if(this.annotation){let e=this.annotation;return t&&(e=l(a(t),e)),this.loadFile(e)}}}isMap(t){return"object"==typeof t&&("string"==typeof t.mappings||"string"==typeof t._mappings||Array.isArray(t.sections))}}t.exports=c,c.default=c},1723:(t,e,r)=>{"use strict";let n=r(7647),i=r(1939),o=r(6461),s=r(1025);class a{constructor(t=[]){this.version="8.4.18",this.plugins=this.normalize(t)}use(t){return this.plugins=this.plugins.concat(this.normalize([t])),this}process(t,e={}){return 0===this.plugins.length&&void 0===e.parser&&void 0===e.stringifier&&void 0===e.syntax?new n(this,t,e):new i(this,t,e)}normalize(t){let e=[];for(let r of t)if(!0===r.postcss?r=r():r.postcss&&(r=r.postcss),"object"==typeof r&&Array.isArray(r.plugins))e=e.concat(r.plugins);else if("object"==typeof r&&r.postcssPlugin)e.push(r);else if("function"==typeof r)e.push(r);else if("object"!=typeof r||!r.parse&&!r.stringify)throw new Error(r+" is not a PostCSS plugin");return e}}t.exports=a,a.default=a,s.registerProcessor(a),o.registerProcessor(a)},3632:(t,e,r)=>{"use strict";let n=r(1728);class i{constructor(t,e,r){this.processor=t,this.messages=[],this.root=e,this.opts=r,this.css=void 0,this.map=void 0}toString(){return this.css}warn(t,e={}){e.plugin||this.lastPlugin&&this.lastPlugin.postcssPlugin&&(e.plugin=this.lastPlugin.postcssPlugin);let r=new n(t,e);return this.messages.push(r),r}warnings(){return this.messages.filter((t=>"warning"===t.type))}get content(){return this.css}}t.exports=i,i.default=i},1025:(t,e,r)=>{"use strict";let n,i,o=r(1019);class s extends o{constructor(t){super(t),this.type="root",this.nodes||(this.nodes=[])}removeChild(t,e){let r=this.index(t);return!e&&0===r&&this.nodes.length>1&&(this.nodes[1].raws.before=this.nodes[r].raws.before),super.removeChild(t)}normalize(t,e,r){let n=super.normalize(t);if(e)if("prepend"===r)this.nodes.length>1?e.raws.before=this.nodes[1].raws.before:delete e.raws.before;else if(this.first!==e)for(let t of n)t.raws.before=e.raws.before;return n}toResult(t={}){return new n(new i,this,t).stringify()}}s.registerLazyResult=t=>{n=t},s.registerProcessor=t=>{i=t},t.exports=s,s.default=s,o.registerRoot(s)},1675:(t,e,r)=>{"use strict";let n=r(1019),i=r(4715);class o extends n{constructor(t){super(t),this.type="rule",this.nodes||(this.nodes=[])}get selectors(){return i.comma(this.selector)}set selectors(t){let e=this.selector?this.selector.match(/,\s*/):null,r=e?e[0]:","+this.raw("between","beforeOpen");this.selector=t.join(r)}}t.exports=o,o.default=o,n.registerRule(o)},1062:t=>{"use strict";const e={colon:": ",indent:"    ",beforeDecl:"\n",beforeRule:"\n",beforeOpen:" ",beforeClose:"\n",beforeComment:"\n",after:"\n",emptyBody:"",commentLeft:" ",commentRight:" ",semicolon:!1};class r{constructor(t){this.builder=t}stringify(t,e){if(!this[t.type])throw new Error("Unknown AST node type "+t.type+". Maybe you need to change PostCSS stringifier.");this[t.type](t,e)}document(t){this.body(t)}root(t){this.body(t),t.raws.after&&this.builder(t.raws.after)}comment(t){let e=this.raw(t,"left","commentLeft"),r=this.raw(t,"right","commentRight");this.builder("/*"+e+t.text+r+"*/",t)}decl(t,e){let r=this.raw(t,"between","colon"),n=t.prop+r+this.rawValue(t,"value");t.important&&(n+=t.raws.important||" !important"),e&&(n+=";"),this.builder(n,t)}rule(t){this.block(t,this.rawValue(t,"selector")),t.raws.ownSemicolon&&this.builder(t.raws.ownSemicolon,t,"end")}atrule(t,e){let r="@"+t.name,n=t.params?this.rawValue(t,"params"):"";if(void 0!==t.raws.afterName?r+=t.raws.afterName:n&&(r+=" "),t.nodes)this.block(t,r+n);else{let i=(t.raws.between||"")+(e?";":"");this.builder(r+n+i,t)}}body(t){let e=t.nodes.length-1;for(;e>0&&"comment"===t.nodes[e].type;)e-=1;let r=this.raw(t,"semicolon");for(let n=0;n<t.nodes.length;n++){let i=t.nodes[n],o=this.raw(i,"before");o&&this.builder(o),this.stringify(i,e!==n||r)}}block(t,e){let r,n=this.raw(t,"between","beforeOpen");this.builder(e+n+"{",t,"start"),t.nodes&&t.nodes.length?(this.body(t),r=this.raw(t,"after")):r=this.raw(t,"after","emptyBody"),r&&this.builder(r),this.builder("}",t,"end")}raw(t,r,n){let i;if(n||(n=r),r&&(i=t.raws[r],void 0!==i))return i;let o=t.parent;if("before"===n){if(!o||"root"===o.type&&o.first===t)return"";if(o&&"document"===o.type)return""}if(!o)return e[n];let s=t.root();if(s.rawCache||(s.rawCache={}),void 0!==s.rawCache[n])return s.rawCache[n];if("before"===n||"after"===n)return this.beforeAfter(t,n);{let e="raw"+((a=n)[0].toUpperCase()+a.slice(1));this[e]?i=this[e](s,t):s.walk((t=>{if(i=t.raws[r],void 0!==i)return!1}))}var a;return void 0===i&&(i=e[n]),s.rawCache[n]=i,i}rawSemicolon(t){let e;return t.walk((t=>{if(t.nodes&&t.nodes.length&&"decl"===t.last.type&&(e=t.raws.semicolon,void 0!==e))return!1})),e}rawEmptyBody(t){let e;return t.walk((t=>{if(t.nodes&&0===t.nodes.length&&(e=t.raws.after,void 0!==e))return!1})),e}rawIndent(t){if(t.raws.indent)return t.raws.indent;let e;return t.walk((r=>{let n=r.parent;if(n&&n!==t&&n.parent&&n.parent===t&&void 0!==r.raws.before){let t=r.raws.before.split("\n");return e=t[t.length-1],e=e.replace(/\S/g,""),!1}})),e}rawBeforeComment(t,e){let r;return t.walkComments((t=>{if(void 0!==t.raws.before)return r=t.raws.before,r.includes("\n")&&(r=r.replace(/[^\n]+$/,"")),!1})),void 0===r?r=this.raw(e,null,"beforeDecl"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeDecl(t,e){let r;return t.walkDecls((t=>{if(void 0!==t.raws.before)return r=t.raws.before,r.includes("\n")&&(r=r.replace(/[^\n]+$/,"")),!1})),void 0===r?r=this.raw(e,null,"beforeRule"):r&&(r=r.replace(/\S/g,"")),r}rawBeforeRule(t){let e;return t.walk((r=>{if(r.nodes&&(r.parent!==t||t.first!==r)&&void 0!==r.raws.before)return e=r.raws.before,e.includes("\n")&&(e=e.replace(/[^\n]+$/,"")),!1})),e&&(e=e.replace(/\S/g,"")),e}rawBeforeClose(t){let e;return t.walk((t=>{if(t.nodes&&t.nodes.length>0&&void 0!==t.raws.after)return e=t.raws.after,e.includes("\n")&&(e=e.replace(/[^\n]+$/,"")),!1})),e&&(e=e.replace(/\S/g,"")),e}rawBeforeOpen(t){let e;return t.walk((t=>{if("decl"!==t.type&&(e=t.raws.between,void 0!==e))return!1})),e}rawColon(t){let e;return t.walkDecls((t=>{if(void 0!==t.raws.between)return e=t.raws.between.replace(/[^\s:]/g,""),!1})),e}beforeAfter(t,e){let r;r="decl"===t.type?this.raw(t,null,"beforeDecl"):"comment"===t.type?this.raw(t,null,"beforeComment"):"before"===e?this.raw(t,null,"beforeRule"):this.raw(t,null,"beforeClose");let n=t.parent,i=0;for(;n&&"root"!==n.type;)i+=1,n=n.parent;if(r.includes("\n")){let e=this.raw(t,null,"indent");if(e.length)for(let t=0;t<i;t++)r+=e}return r}rawValue(t,e){let r=t[e],n=t.raws[e];return n&&n.value===r?n.raw:r}}t.exports=r,r.default=r},7088:(t,e,r)=>{"use strict";let n=r(1062);function i(t,e){new n(e).stringify(t)}t.exports=i,i.default=i},5513:t=>{"use strict";t.exports.isClean=Symbol("isClean"),t.exports.my=Symbol("my")},3852:t=>{"use strict";const e="'".charCodeAt(0),r='"'.charCodeAt(0),n="\\".charCodeAt(0),i="/".charCodeAt(0),o="\n".charCodeAt(0),s=" ".charCodeAt(0),a="\f".charCodeAt(0),l="\t".charCodeAt(0),c="\r".charCodeAt(0),u="[".charCodeAt(0),d="]".charCodeAt(0),p="(".charCodeAt(0),h=")".charCodeAt(0),f="{".charCodeAt(0),m="}".charCodeAt(0),g=";".charCodeAt(0),b="*".charCodeAt(0),y=":".charCodeAt(0),v="@".charCodeAt(0),w=/[\t\n\f\r "#'()/;[\\\]{}]/g,A=/[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g,x=/.[\n"'(/\\]/,E=/[\da-f]/i;t.exports=function(t,C={}){let S,k,T,q,O,D,B,L,_,j,P=t.css.valueOf(),I=C.ignoreErrors,M=P.length,N=0,R=[],U=[];function $(e){throw t.error("Unclosed "+e,N)}return{back:function(t){U.push(t)},nextToken:function(t){if(U.length)return U.pop();if(N>=M)return;let C=!!t&&t.ignoreUnclosed;switch(S=P.charCodeAt(N),S){case o:case s:case l:case c:case a:k=N;do{k+=1,S=P.charCodeAt(k)}while(S===s||S===o||S===l||S===c||S===a);j=["space",P.slice(N,k)],N=k-1;break;case u:case d:case f:case m:case y:case g:case h:{let t=String.fromCharCode(S);j=[t,t,N];break}case p:if(L=R.length?R.pop()[1]:"",_=P.charCodeAt(N+1),"url"===L&&_!==e&&_!==r&&_!==s&&_!==o&&_!==l&&_!==a&&_!==c){k=N;do{if(D=!1,k=P.indexOf(")",k+1),-1===k){if(I||C){k=N;break}$("bracket")}for(B=k;P.charCodeAt(B-1)===n;)B-=1,D=!D}while(D);j=["brackets",P.slice(N,k+1),N,k],N=k}else k=P.indexOf(")",N+1),q=P.slice(N,k+1),-1===k||x.test(q)?j=["(","(",N]:(j=["brackets",q,N,k],N=k);break;case e:case r:T=S===e?"'":'"',k=N;do{if(D=!1,k=P.indexOf(T,k+1),-1===k){if(I||C){k=N+1;break}$("string")}for(B=k;P.charCodeAt(B-1)===n;)B-=1,D=!D}while(D);j=["string",P.slice(N,k+1),N,k],N=k;break;case v:w.lastIndex=N+1,w.test(P),k=0===w.lastIndex?P.length-1:w.lastIndex-2,j=["at-word",P.slice(N,k+1),N,k],N=k;break;case n:for(k=N,O=!0;P.charCodeAt(k+1)===n;)k+=1,O=!O;if(S=P.charCodeAt(k+1),O&&S!==i&&S!==s&&S!==o&&S!==l&&S!==c&&S!==a&&(k+=1,E.test(P.charAt(k)))){for(;E.test(P.charAt(k+1));)k+=1;P.charCodeAt(k+1)===s&&(k+=1)}j=["word",P.slice(N,k+1),N,k],N=k;break;default:S===i&&P.charCodeAt(N+1)===b?(k=P.indexOf("*/",N+2)+1,0===k&&(I||C?k=P.length:$("comment")),j=["comment",P.slice(N,k+1),N,k],N=k):(A.lastIndex=N+1,A.test(P),k=0===A.lastIndex?P.length-1:A.lastIndex-2,j=["word",P.slice(N,k+1),N,k],R.push(j),N=k)}return N++,j},endOfFile:function(){return 0===U.length&&N>=M},position:function(){return N}}}},2448:t=>{"use strict";let e={};t.exports=function(t){e[t]||(e[t]=!0,"undefined"!=typeof console&&console.warn&&console.warn(t))}},1728:t=>{"use strict";class e{constructor(t,e={}){if(this.type="warning",this.text=t,e.node&&e.node.source){let t=e.node.rangeBy(e);this.line=t.start.line,this.column=t.start.column,this.endLine=t.end.line,this.endColumn=t.end.column}for(let t in e)this[t]=e[t]}toString(){return this.node?this.node.error(this.text,{plugin:this.plugin,index:this.index,word:this.word}).message:this.plugin?this.plugin+": "+this.text:this.text}}t.exports=e,e.default=e},798:function(t,e,r){t=r.nmd(t),function(r,n){"use strict";var i={};r.PubSub?(i=r.PubSub,console.warn("PubSub already loaded, using existing version")):(r.PubSub=i,function(t){var e={},r=-1;function n(t,e,r){try{t(e,r)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function i(t,e,r){t(e,r)}function o(t,r,o,s){var a,l=e[r],c=s?i:n;if(Object.prototype.hasOwnProperty.call(e,r))for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&c(l[a],t,o)}function s(t){var r=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,r)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[r]))}function a(t,e,r,n){var i=function(t,e,r){return function(){var n=String(t),i=n.lastIndexOf(".");for(o(t,t,e,r);-1!==i;)i=(n=n.substr(0,i)).lastIndexOf("."),o(t,n,e,r);o(t,"*",e,r)}}(t="symbol"==typeof t?t.toString():t,e,n);return!!function(t){for(var e=String(t),r=s(e)||s("*"),n=e.lastIndexOf(".");!r&&-1!==n;)n=(e=e.substr(0,n)).lastIndexOf("."),r=s(e);return r}(t)&&(!0===r?i():setTimeout(i,0),!0)}t.publish=function(e,r){return a(e,r,!1,t.immediateExceptions)},t.publishSync=function(e,r){return a(e,r,!0,t.immediateExceptions)},t.subscribe=function(t,n){if("function"!=typeof n)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var i="uid_"+String(++r);return e[t][i]=n,i},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,r){var n=t.subscribe(e,(function(){t.unsubscribe(n),r.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var r;for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&0===r.indexOf(t)&&delete e[r]},t.countSubscriptions=function(t){var r,n,i=0;for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&0===r.indexOf(t)){for(n in e[r])i++;break}return i},t.getSubscriptions=function(t){var r,n=[];for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&0===r.indexOf(t)&&n.push(r);return n},t.unsubscribe=function(r){var n,i,o,s="string"==typeof r&&(Object.prototype.hasOwnProperty.call(e,r)||function(t){var r;for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)&&0===r.indexOf(t))return!0;return!1}(r)),a=!s&&"string"==typeof r,l="function"==typeof r,c=!1;if(!s){for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)){if(i=e[n],a&&i[r]){delete i[r],c=r;break}if(l)for(o in i)Object.prototype.hasOwnProperty.call(i,o)&&i[o]===r&&(delete i[o],c=!0)}return c}t.clearSubscriptions(r)}}(i)),void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i}("object"==typeof window&&window||this)},1036:(t,e,r)=>{const n=r(3719),i=r(3150),{isPlainObject:o}=r(977),s=r(9996),a=r(9430),{parse:l}=r(20),c=["img","audio","video","picture","svg","object","map","iframe","embed"],u=["script","style"];function d(t,e){t&&Object.keys(t).forEach((function(r){e(t[r],r)}))}function p(t,e){return{}.hasOwnProperty.call(t,e)}function h(t,e){const r=[];return d(t,(function(t){e(t)&&r.push(t)})),r}t.exports=m;const f=/^[^\0\t\n\f\r /<=>]+$/;function m(t,e,r){if(null==t)return"";let b="",y="";function v(t,e){const r=this;this.tag=t,this.attribs=e||{},this.tagPosition=b.length,this.text="",this.mediaChildren=[],this.updateParentNodeText=function(){O.length&&(O[O.length-1].text+=r.text)},this.updateParentNodeMediaChildren=function(){O.length&&c.includes(this.tag)&&O[O.length-1].mediaChildren.push(this.tag)}}(e=Object.assign({},m.defaults,e)).parser=Object.assign({},g,e.parser),u.forEach((function(t){!1!==e.allowedTags&&(e.allowedTags||[]).indexOf(t)>-1&&!e.allowVulnerableTags&&console.warn(`\n\n⚠️ Your \`allowedTags\` option includes, \`${t}\`, which is inherently\nvulnerable to XSS attacks. Please remove it from \`allowedTags\`.\nOr, to disable this warning, add the \`allowVulnerableTags\` option\nand ensure you are accounting for this risk.\n\n`)}));const w=e.nonTextTags||["script","style","textarea","option"];let A,x;e.allowedAttributes&&(A={},x={},d(e.allowedAttributes,(function(t,e){A[e]=[];const r=[];t.forEach((function(t){"string"==typeof t&&t.indexOf("*")>=0?r.push(i(t).replace(/\\\*/g,".*")):A[e].push(t)})),r.length&&(x[e]=new RegExp("^("+r.join("|")+")$"))})));const E={},C={},S={};d(e.allowedClasses,(function(t,e){A&&(p(A,e)||(A[e]=[]),A[e].push("class")),E[e]=[],S[e]=[];const r=[];t.forEach((function(t){"string"==typeof t&&t.indexOf("*")>=0?r.push(i(t).replace(/\\\*/g,".*")):t instanceof RegExp?S[e].push(t):E[e].push(t)})),r.length&&(C[e]=new RegExp("^("+r.join("|")+")$"))}));const k={};let T,q,O,D,B,L,_;d(e.transformTags,(function(t,e){let r;"function"==typeof t?r=t:"string"==typeof t&&(r=m.simpleTransform(t)),"*"===e?T=r:k[e]=r}));let j=!1;I();const P=new n.Parser({onopentag:function(t,r){if(e.enforceHtmlBoundary&&"html"===t&&I(),L)return void _++;const n=new v(t,r);O.push(n);let i=!1;const c=!!n.text;let u;if(p(k,t)&&(u=k[t](t,r),n.attribs=r=u.attribs,void 0!==u.text&&(n.innerText=u.text),t!==u.tagName&&(n.name=t=u.tagName,B[q]=u.tagName)),T&&(u=T(t,r),n.attribs=r=u.attribs,t!==u.tagName&&(n.name=t=u.tagName,B[q]=u.tagName)),(!1!==e.allowedTags&&-1===(e.allowedTags||[]).indexOf(t)||"recursiveEscape"===e.disallowedTagsMode&&!function(t){for(const e in t)if(p(t,e))return!1;return!0}(D)||null!=e.nestingLimit&&q>=e.nestingLimit)&&(i=!0,D[q]=!0,"discard"===e.disallowedTagsMode&&-1!==w.indexOf(t)&&(L=!0,_=1),D[q]=!0),q++,i){if("discard"===e.disallowedTagsMode)return;y=b,b=""}b+="<"+t,"script"===t&&(e.allowedScriptHostnames||e.allowedScriptDomains)&&(n.innerText=""),(!A||p(A,t)||A["*"])&&d(r,(function(r,i){if(!f.test(i))return void delete n.attribs[i];let c=!1;if(!A||p(A,t)&&-1!==A[t].indexOf(i)||A["*"]&&-1!==A["*"].indexOf(i)||p(x,t)&&x[t].test(i)||x["*"]&&x["*"].test(i))c=!0;else if(A&&A[t])for(const e of A[t])if(o(e)&&e.name&&e.name===i){c=!0;let t="";if(!0===e.multiple){const n=r.split(" ");for(const r of n)-1!==e.values.indexOf(r)&&(""===t?t=r:t+=" "+r)}else e.values.indexOf(r)>=0&&(t=r);r=t}if(c){if(-1!==e.allowedSchemesAppliedToAttributes.indexOf(i)&&N(t,r))return void delete n.attribs[i];if("script"===t&&"src"===i){let t=!0;try{const n=R(r);if(e.allowedScriptHostnames||e.allowedScriptDomains){const r=(e.allowedScriptHostnames||[]).find((function(t){return t===n.url.hostname})),i=(e.allowedScriptDomains||[]).find((function(t){return n.url.hostname===t||n.url.hostname.endsWith(`.${t}`)}));t=r||i}}catch(e){t=!1}if(!t)return void delete n.attribs[i]}if("iframe"===t&&"src"===i){let t=!0;try{const n=R(r);if(n.isRelativeUrl)t=p(e,"allowIframeRelativeUrls")?e.allowIframeRelativeUrls:!e.allowedIframeHostnames&&!e.allowedIframeDomains;else if(e.allowedIframeHostnames||e.allowedIframeDomains){const r=(e.allowedIframeHostnames||[]).find((function(t){return t===n.url.hostname})),i=(e.allowedIframeDomains||[]).find((function(t){return n.url.hostname===t||n.url.hostname.endsWith(`.${t}`)}));t=r||i}}catch(e){t=!1}if(!t)return void delete n.attribs[i]}if("srcset"===i)try{let t=a(r);if(t.forEach((function(t){N("srcset",t.url)&&(t.evil=!0)})),t=h(t,(function(t){return!t.evil})),!t.length)return void delete n.attribs[i];r=h(t,(function(t){return!t.evil})).map((function(t){if(!t.url)throw new Error("URL missing");return t.url+(t.w?` ${t.w}w`:"")+(t.h?` ${t.h}h`:"")+(t.d?` ${t.d}x`:"")})).join(", "),n.attribs[i]=r}catch(t){return void delete n.attribs[i]}if("class"===i){const e=E[t],o=E["*"],a=C[t],l=S[t],c=[a,C["*"]].concat(l).filter((function(t){return t}));if(!(u=r,d=e&&o?s(e,o):e||o,m=c,r=d?(u=u.split(/\s+/)).filter((function(t){return-1!==d.indexOf(t)||m.some((function(e){return e.test(t)}))})).join(" "):u).length)return void delete n.attribs[i]}if("style"===i)try{if(0===(r=function(t){return t.nodes[0].nodes.reduce((function(t,e){return t.push(`${e.prop}:${e.value}${e.important?" !important":""}`),t}),[]).join(";")}(function(t,e){if(!e)return t;const r=t.nodes[0];let n;return n=e[r.selector]&&e["*"]?s(e[r.selector],e["*"]):e[r.selector]||e["*"],n&&(t.nodes[0].nodes=r.nodes.reduce(function(t){return function(e,r){return p(t,r.prop)&&t[r.prop].some((function(t){return t.test(r.value)}))&&e.push(r),e}}(n),[])),t}(l(t+" {"+r+"}"),e.allowedStyles))).length)return void delete n.attribs[i]}catch(t){return void delete n.attribs[i]}b+=" "+i,r&&r.length&&(b+='="'+M(r,!0)+'"')}else delete n.attribs[i];var u,d,m})),-1!==e.selfClosing.indexOf(t)?b+=" />":(b+=">",!n.innerText||c||e.textFilter||(b+=M(n.innerText),j=!0)),i&&(b=y+M(b),y="")},ontext:function(t){if(L)return;const r=O[O.length-1];let n;if(r&&(n=r.tag,t=void 0!==r.innerText?r.innerText:t),"discard"!==e.disallowedTagsMode||"script"!==n&&"style"!==n){const r=M(t,!1);e.textFilter&&!j?b+=e.textFilter(r,n):j||(b+=r)}else b+=t;O.length&&(O[O.length-1].text+=t)},onclosetag:function(t){if(L){if(_--,_)return;L=!1}const r=O.pop();if(!r)return;if(r.tag!==t)return void O.push(r);L=!!e.enforceHtmlBoundary&&"html"===t,q--;const n=D[q];if(n){if(delete D[q],"discard"===e.disallowedTagsMode)return void r.updateParentNodeText();y=b,b=""}B[q]&&(t=B[q],delete B[q]),e.exclusiveFilter&&e.exclusiveFilter(r)?b=b.substr(0,r.tagPosition):(r.updateParentNodeMediaChildren(),r.updateParentNodeText(),-1===e.selfClosing.indexOf(t)?(b+="</"+t+">",n&&(b=y+M(b),y=""),j=!1):n&&(b=y,y=""))}},e.parser);return P.write(t),P.end(),b;function I(){b="",q=0,O=[],D={},B={},L=!1,_=0}function M(t,r){return"string"!=typeof t&&(t+=""),e.parser.decodeEntities&&(t=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),r&&(t=t.replace(/"/g,"&quot;"))),t=t.replace(/&(?![a-zA-Z0-9#]{1,20};)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),r&&(t=t.replace(/"/g,"&quot;")),t}function N(t,r){for(r=r.replace(/[\x00-\x20]+/g,"");;){const t=r.indexOf("\x3c!--");if(-1===t)break;const e=r.indexOf("--\x3e",t+4);if(-1===e)break;r=r.substring(0,t)+r.substring(e+3)}const n=r.match(/^([a-zA-Z][a-zA-Z0-9.\-+]*):/);if(!n)return!!r.match(/^[/\\]{2}/)&&!e.allowProtocolRelative;const i=n[1].toLowerCase();return p(e.allowedSchemesByTag,t)?-1===e.allowedSchemesByTag[t].indexOf(i):!e.allowedSchemes||-1===e.allowedSchemes.indexOf(i)}function R(t){if((t=t.replace(/^(\w+:)?\s*[\\/]\s*[\\/]/,"$1//")).startsWith("relative:"))throw new Error("relative: exploit attempt");let e="relative://relative-site";for(let t=0;t<100;t++)e+=`/${t}`;const r=new URL(t,e);return{isRelativeUrl:r&&"relative-site"===r.hostname&&"relative:"===r.protocol,url:r}}}const g={decodeEntities:!0};m.defaults={allowedTags:["address","article","aside","footer","header","h1","h2","h3","h4","h5","h6","hgroup","main","nav","section","blockquote","dd","div","dl","dt","figcaption","figure","hr","li","main","ol","p","pre","ul","a","abbr","b","bdi","bdo","br","cite","code","data","dfn","em","i","kbd","mark","q","rb","rp","rt","rtc","ruby","s","samp","small","span","strong","sub","sup","time","u","var","wbr","caption","col","colgroup","table","tbody","td","tfoot","th","thead","tr"],disallowedTagsMode:"discard",allowedAttributes:{a:["href","name","target"],img:["src","srcset","alt","title","width","height","loading"]},selfClosing:["img","br","hr","area","base","basefont","input","link","meta"],allowedSchemes:["http","https","ftp","mailto","tel"],allowedSchemesByTag:{},allowedSchemesAppliedToAttributes:["href","src","cite"],allowProtocolRelative:!0,enforceHtmlBoundary:!1},m.simpleTransform=function(t,e,r){return r=void 0===r||r,e=e||{},function(n,i){let o;if(r)for(o in e)i[o]=e[o];else i=e;return{tagName:t,attribs:i}}}},977:(t,e)=>{"use strict";function r(t){return"[object Object]"===Object.prototype.toString.call(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.isPlainObject=function(t){var e,n;return!1!==r(t)&&(void 0===(e=t.constructor)||!1!==r(n=e.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf"))}},379:t=>{"use strict";var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var l=t[a],c=n.base?l[0]+n.base:l[0],u=o[c]||0,d="".concat(c," ").concat(u);o[c]=u+1;var p=r(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var f=i(h,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function i(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var o=n(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=r(o[s]);e[a].references--}for(var l=n(t,i),c=0;c<o.length;c++){var u=r(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=l}}},569:t=>{"use strict";var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},2868:()=>{},4777:()=>{},9830:()=>{},209:()=>{},7414:()=>{},2961:t=>{t.exports={nanoid:(t=21)=>{let e="",r=t;for(;r--;)e+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[64*Math.random()|0];return e},customAlphabet:(t,e=21)=>(r=e)=>{let n="",i=r;for(;i--;)n+=t[Math.random()*t.length|0];return n}}},9451:t=>{"use strict";t.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},1363:t=>{"use strict";t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},8611:t=>{"use strict";t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},4204:t=>{"use strict";t.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},6483:t=>{"use strict";t.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},4926:t=>{"use strict";t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},96:t=>{"use strict";t.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},1164:t=>{"use strict";t.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={id:n,loaded:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),r.nc=void 0;var n={};(()=>{"use strict";r.d(n,{O:()=>lr,w:()=>t});var t={};r.r(t),r.d(t,{fn:()=>je,oF:()=>Ie,yo:()=>Be,tA:()=>Le,Sn:()=>Pe,Do:()=>_e});var e=r(379),i=r.n(e),o=r(795),s=r.n(o),a=r(569),l=r.n(a),c=r(565),u=r.n(c),d=r(216),p=r.n(d),h=r(589),f=r.n(h),m=r(689),g={};g.styleTagTransform=f(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=p(),i()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var b=r(713),y={};y.styleTagTransform=f(),y.setAttributes=u(),y.insert=l().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=p(),i()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var v=r(240),w={};w.styleTagTransform=f(),w.setAttributes=u(),w.insert=l().bind(null,"head"),w.domAPI=s(),w.insertStyleElement=p(),i()(v.Z,w),v.Z&&v.Z.locals&&v.Z.locals;var A=r(156),x={};x.styleTagTransform=f(),x.setAttributes=u(),x.insert=l().bind(null,"head"),x.domAPI=s(),x.insertStyleElement=p(),i()(A.Z,x),A.Z&&A.Z.locals&&A.Z.locals;var E=r(599),C={};C.styleTagTransform=f(),C.setAttributes=u(),C.insert=l().bind(null,"head"),C.domAPI=s(),C.insertStyleElement=p(),i()(E.Z,C),E.Z&&E.Z.locals&&E.Z.locals;var S=r(415),k={};k.styleTagTransform=f(),k.setAttributes=u(),k.insert=l().bind(null,"head"),k.domAPI=s(),k.insertStyleElement=p(),i()(S.Z,k),S.Z&&S.Z.locals&&S.Z.locals;var T=r(416),q={};q.styleTagTransform=f(),q.setAttributes=u(),q.insert=l().bind(null,"head"),q.domAPI=s(),q.insertStyleElement=p(),i()(T.Z,q),T.Z&&T.Z.locals&&T.Z.locals;var O=r(587),D={};D.styleTagTransform=f(),D.setAttributes=u(),D.insert=l().bind(null,"head"),D.domAPI=s(),D.insertStyleElement=p(),i()(O.Z,D),O.Z&&O.Z.locals&&O.Z.locals;var B=r(542),L={};L.styleTagTransform=f(),L.setAttributes=u(),L.insert=l().bind(null,"head"),L.domAPI=s(),L.insertStyleElement=p(),i()(B.Z,L),B.Z&&B.Z.locals&&B.Z.locals;var _=r(798),j=r.n(_);const P="initialize",I="dataInitialized",M="back",N=t=>`index.${t}`,R=t=>`new.${t}`,U=t=>`create.${t}`,$=(t,e,r)=>`create.collection.${r}.${t}.${e}`,H=t=>`show.${t}`,F=t=>`hide.${t}`,z=t=>`edit.attribute.${t}`,V=t=>`edit.belong.${t}`,W=t=>`destroy.${t}`,G=t=>`created.collection.${t}`,Y="error.validation",Z=(t,e)=>`update.${t}.${e}`,X=(t,e)=>`update.${t}.status.${e}`,J=(t,e)=>`update.${t}.priority.${e}`,Q=(t,e,r)=>`update.${t}.belong.${r}.${e}`,K="updated.data",tt=(t,e)=>`updated.data.item.${t}.${e}`,et=t=>`updated.data.list.${t}`,rt=t=>`updated.${t}.belong`,nt=t=>`updated.${t}.collection`,it="rendered.page",ot=t=>`rendered.view.index.${t}`,st=t=>`rendered.view.new.${t}`,at=t=>`rendered.view.show.${t}`;function lt(){if(!localStorage.data)return;const t=JSON.parse(localStorage.data),e={};for(const r in t)e[r]=JSON.parse(t[r]);return e}function ct(t){const e={};for(const r in t)e[r]=JSON.stringify(t[r]);localStorage.data=JSON.stringify(e)}function ut(){document.body.innerHTML='<div class="intro">\n      <div class="intro-heading">\n        <h1>Actionality</h1>\n        <h2>Your one-stop to-do app</h2>\n      </div>\n      <button class="new" data-type="todoItem" data-project-id="0">\n        Add a New To-Do\n      </button>\n   </div>\n   <div class="projects-heading">\n      <h2>My Projects</h2>\n      <button class="new symbol" data-type="project">+</button>\n   </div>',lr.projectsList.projects.forEach((t=>{const e=document.createElement("button");e.classList.add("project","show"),e.dataset.type=t.type,e.dataset.id=t.id,e.dataset.todoItemsFull="",e.innerHTML=`<h3>${t.title}</h3>`,t.id&&(e.innerHTML+=`<button class="destroy" \n             data-type="${t.type}" data-id="${t.id}">\n        Delete\n     </button>`);const r=lr.todoItemsList.withIds(t.todoItems,{conditions:{status:_e[0]}}),n=r.length?"ul":"div";e.innerHTML+=`<${n} class="project-preview status-${r.length?0:1}">\n        ${r.length?r.slice(0,Be).map((t=>`<li>${t.title}</li>`)).join(""):"Everything done!"}\n     </${n}>`,document.body.append(e)})),j().publish(it,ut),j().publish(ot("project"))}j().subscribe(P,function(t=lt){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete"}],checklistItemsList:[]};j().publish(I,e)}}(lt)),j().subscribe("updated",function(t=ct){return function(){const e={};for(const t in lr)e[t]=lr[t].toStorage();t(e)}}(ct)),j().subscribe(N("project"),ut);const dt=r.p+"ddce2e1e5ef60024f029.svg",pt=r.p+"475dbdfbd9245e1deeed.svg";function ht(t,e,r,n={}){const i=Pe[t.type].includes(e),o=n.attributeText||t[e]||"None";return`<div class="attribute" data-type="${t.type}" data-id="${t.id}" data-attribute="${e}">\n      <span class="element-text">${n.elementText||""}</span>\n      <span class="attr-text">${i?o:""}</span>\n      <button class="edit-attribute link" data-type="${t.type}" data-id="${t.id}"\n              data-attribute="${e}" data-attribute-type="${r}"\n              data-attribute-value="${t[e]||""}">\n        ${i?"Edit":o}\n      </button>\n   </div>`}function ft(t=document.body,e=!0){[...t.children].forEach((t=>{e?(t.classList.add("disabled"),t.classList.remove("enabled")):(t.classList.remove("disabled"),t.classList.add("enabled"))})),t.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=e)),t.querySelectorAll(".check").forEach((t=>t.src=e?pt:dt))}function mt(t){return t.split(" ").filter((t=>t)).map(Number)}function gt(t){return t.split(/(?=[A-Z])/).map((t=>t.toLowerCase())).join("-")}function bt(t,e){const r=lr.todoItemsList.withId(+e.id).belongs[e.belongType],n=document.querySelector(".todo-items").dataset.full,i=t.includes("show")?n+` ${e.id}`:mt(n).filter((t=>t!==+e.id)).join(" ");j().publish(H(e.belongType),{id:r,todoItemsFull:i})}j().subscribe(N("todoItem"),(function(t,e){const r=mt(e.full);document.querySelector(".todo-items-index")?.remove(),document.body.innerHTML+=`<div class="todo-items-index todo-items" data-full="${e.full}"></div>`,lr.todoItemsList.withIds(e.ids).sort(((t,e)=>_e.indexOf(t.status)-_e.indexOf(e.status))).forEach((t=>j().publish(H("todoItem"),{id:t.id,full:r.includes(t.id),belongType:e.belongType,parentElementSelector:".todo-items"}))),j().publish(ot("todoItem"))})),j().subscribe(H("todoItemFull"),bt),j().subscribe(F("todoItemFull"),bt),j().subscribe(N("checklistItem"),(function(t,e){const r=document.querySelector(e.parentElementSelector||"body");var n,i;document.querySelector(".checklist-items-index")?.remove(),r.innerHTML+=`<div class="checklist-items-index">\n    <h3>Checklist</h3>\n     <ol class="checklist-items"></ol>\n     <form data-type="${e.belongType}" data-id="${e.belongId}" data-collection-type="checklistItem">\n        <button class="back hidden">←</button>\n        <button class="new link" data-type="checklistItem"\n                data-belong-type="${e.belongType}" data-belong-id="${e.belongId}">\n          Add a Checklist Item\n        </button>\n        <button class="submit hidden">Submit</button>\n     </form>\n  </div>`,n=e.ids,i=e.belongType,lr.checklistItemsList.withIds(n).sort(((t,e)=>+t[i+"Index"]-+e[i+"Index"])).forEach((t=>{j().publish(H("checklistItem"),{id:t.id,elementType:"li",parentElementSelector:".checklist-items"})})),j().publish(ot("checklistItem"))}));const yt=r.p+"8d317290131028fe10cf.svg";j().subscribe(R("project"),(function(){ft();const t=document.querySelector('.new[data-type="project"]'),e=`<form class="new-form enabled" data-type="project">\n      <button class="back symbol">←</button>\n      <label for="title">New Project</label>\n      <input type="text" name="title" id="title">\n      <button class="submit symbol"><img src="${yt}" alt="Submit"></button>\n   </form>`;t.insertAdjacentHTML("afterend",e),t.remove(),j().publish(st("project"))})),j().subscribe(R("todoItem"),(function(t,e){ft();const r=document.querySelector('.new[data-type="todoItem"]'),n=`<form class="new-form enabled" data-type="todoItem">\n      <button class="back">Back</button>\n      <div class="field">\n        <label for="title">New To-Do</label>\n        <input type="text" name="title" id="title">\n      </div>\n      <div class="field">\n        <label for="dueDate">Due Date</label>\n        <input type="datetime-local" name="dueDate" id="dueDate">\n      </div>\n      <div class="field">\n        <label for="description" class="textarea-label">Description</label>\n        <textarea name="description" id="description"></textarea>\n      </div>\n      <div class="field">\n        <label for="notes" class="textarea-label">Notes</label>\n        <textarea name="notes" id="notes"></textarea>\n      </div>\n      <div class="field">\n        <label for="belongs[project]">Project</label>\n        <select name="belongs[project]" id="belongs[project]">\n          ${lr.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==+e.projectId?"selected":""}>\n              ${t.title}\n            </option>`)).join("\n")}\n        </select>\n      </div>\n      <div class="field">\n        <label for="priority">Priority</label>\n        <select name="priority" id="priority">\n          ${Le.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n        </select>\n      </div>\n      <input type="hidden" name="status" id="status" value="${_e[0]}">\n      <h3>Checklist</h3>\n      <button class="new link" data-belong-type="todoItem" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n      <button class="submit">Submit</button>\n   </form>`;r.insertAdjacentHTML("afterend",n),r.remove(),j().publish(st("todoItem"))})),j().subscribe(R("checklistItem"),(function(t,{belongType:e,belongId:r}){r&&ft();const n=(r?`.${gt(e)}[data-id="${r}"] `:"")+'.new[data-type="checklistItem"]',i=document.querySelector(n),o=i.closest("form"),s=o.querySelector(".back"),a=o.querySelector(".submit");ft(o,!1),[s,a].forEach((t=>t?.classList?.remove("hidden")));const l=1+document.querySelectorAll(".checklist-item.field").length+(r?lr[e+"sList"].withId(r).checklistItems.length:0),c=t=>`checklistItemsCollectionData[${l}][${t}]`,u=`<div class="field enabled checklist-item" data-type="checklistItem" data-index="${l}">\n      <input type="hidden" name="${c(e+"Index")}" id="${c(e+"Index")}" value="${l}">\n      <label for="${c("title")}">${l}.</label>\n      <input type="text" name="${c("title")}" id="${c("title")}">\n      <input type="hidden" name="${c("status")}" id="${c("status")}" value="${_e[0]}">\n      <button class="hide symbol" data-type="new-checklistItem" data-index="${l}" \n              data-belong-type="${e}" ${r?`data-belong-id=${r}`:""}>X</button>\n   </div>`;i.insertAdjacentHTML("beforebegin",u),j().publish(r?`rendered.view.collection.new.${e}`:st("checklistItem"))})),j().subscribe(F("new-checklistItem"),(function(t,{belongType:e,belongId:r,index:n}){const i=r?`.${gt(e)}[data-id="${r}"] form[data-collection-type="checklistItem"]`:`form[data-type="${e}"]`,o=document.querySelector(i);o.querySelector(`.checklist-item.field[data-index="${n}"]`).remove();const s=o.querySelectorAll(".checklist-item.field");if(r&&0==s.length){ft(document,!1);[o.querySelector(".back"),o.querySelector(".submit")].forEach((t=>t?.classList?.add("hidden")))}const a=1+(r?lr[e+"sList"].withId(r).checklistItems.length:0);s.forEach(((t,r)=>{!function(t,e,r){const n=t.querySelectorAll("input"),i=t.querySelector(`input[name*="${e}Index"]`),o=t.querySelector('label[for*="title"]'),s=t.querySelector(".hide");n.forEach((t=>{["name","id"].forEach((e=>t[e]=t[e].replace(/\d+/,r)))})),t.dataset.index=r,i.value=r,o.textContent=`${r}.`,s.dataset.index=r}(t,e,r+a)}))})),j().subscribe(H("project"),(function t(e,r){const n=lr.projectsList.withId(r.id);document.body.innerHTML=`<button class="index" data-type="${n.type}">All Projects</button>\n   <div class="headings">\n      <div class="project-heading">\n        ${ht(n,"title","text")}\n      </div>\n      <div class="todo-items-heading">\n        <h2>To-Dos</h2>\n        <button class="new symbol" data-type="todoItem" data-project-id="${n.id}">+</button>\n      </div>\n   </div>`,function(t,e){j().publish(N("todoItem"),{belongType:t.type,ids:t.todoItems,full:e})}(n,r.todoItemsFull),j().publish(it,t.bind(null,e,r)),j().publish(at("project"))}));var vt={};function wt(){return vt}function At(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function xt(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function Et(t){return Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Et(t)}function Ct(t){xt(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===Et(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function St(t){xt(1,arguments);var e=Ct(t);return e.setHours(0,0,0,0),e}var kt=864e5;function Tt(t,e){xt(2,arguments);var r=St(t),n=St(e),i=r.getTime()-At(r),o=n.getTime()-At(n);return Math.round((i-o)/kt)}function qt(t){return qt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},qt(t)}function Ot(t){return xt(1,arguments),t instanceof Date||"object"===qt(t)&&"[object Date]"===Object.prototype.toString.call(t)}function Dt(t){if(xt(1,arguments),!Ot(t)&&"number"!=typeof t)return!1;var e=Ct(t);return!isNaN(Number(e))}function Bt(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Lt(t,e){xt(2,arguments);var r=Ct(t).getTime(),n=Bt(e);return new Date(r+n)}function _t(t,e){xt(2,arguments);var r=Bt(e);return Lt(t,-r)}var jt=864e5;function Pt(t){xt(1,arguments);var e=1,r=Ct(t),n=r.getUTCDay(),i=(n<e?7:0)+n-e;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function It(t){xt(1,arguments);var e=Ct(t),r=e.getUTCFullYear(),n=new Date(0);n.setUTCFullYear(r+1,0,4),n.setUTCHours(0,0,0,0);var i=Pt(n),o=new Date(0);o.setUTCFullYear(r,0,4),o.setUTCHours(0,0,0,0);var s=Pt(o);return e.getTime()>=i.getTime()?r+1:e.getTime()>=s.getTime()?r:r-1}function Mt(t){xt(1,arguments);var e=It(t),r=new Date(0);r.setUTCFullYear(e,0,4),r.setUTCHours(0,0,0,0);var n=Pt(r);return n}var Nt=6048e5;function Rt(t,e){var r,n,i,o,s,a,l,c;xt(1,arguments);var u=wt(),d=Bt(null!==(r=null!==(n=null!==(i=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(s=e.locale)||void 0===s||null===(a=s.options)||void 0===a?void 0:a.weekStartsOn)&&void 0!==i?i:u.weekStartsOn)&&void 0!==n?n:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==r?r:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=Ct(t),h=p.getUTCDay(),f=(h<d?7:0)+h-d;return p.setUTCDate(p.getUTCDate()-f),p.setUTCHours(0,0,0,0),p}function Ut(t,e){var r,n,i,o,s,a,l,c;xt(1,arguments);var u=Ct(t),d=u.getUTCFullYear(),p=wt(),h=Bt(null!==(r=null!==(n=null!==(i=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(s=e.locale)||void 0===s||null===(a=s.options)||void 0===a?void 0:a.firstWeekContainsDate)&&void 0!==i?i:p.firstWeekContainsDate)&&void 0!==n?n:null===(l=p.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==r?r:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(d+1,0,h),f.setUTCHours(0,0,0,0);var m=Rt(f,e),g=new Date(0);g.setUTCFullYear(d,0,h),g.setUTCHours(0,0,0,0);var b=Rt(g,e);return u.getTime()>=m.getTime()?d+1:u.getTime()>=b.getTime()?d:d-1}function $t(t,e){var r,n,i,o,s,a,l,c;xt(1,arguments);var u=wt(),d=Bt(null!==(r=null!==(n=null!==(i=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(s=e.locale)||void 0===s||null===(a=s.options)||void 0===a?void 0:a.firstWeekContainsDate)&&void 0!==i?i:u.firstWeekContainsDate)&&void 0!==n?n:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==r?r:1),p=Ut(t,e),h=new Date(0);h.setUTCFullYear(p,0,d),h.setUTCHours(0,0,0,0);var f=Rt(h,e);return f}var Ht=6048e5;function Ft(t,e){for(var r=t<0?"-":"",n=Math.abs(t).toString();n.length<e;)n="0"+n;return r+n}const zt=function(t,e){var r=t.getUTCFullYear(),n=r>0?r:1-r;return Ft("yy"===e?n%100:n,e.length)},Vt=function(t,e){var r=t.getUTCMonth();return"M"===e?String(r+1):Ft(r+1,2)},Wt=function(t,e){return Ft(t.getUTCDate(),e.length)},Gt=function(t,e){return Ft(t.getUTCHours()%12||12,e.length)},Yt=function(t,e){return Ft(t.getUTCHours(),e.length)},Zt=function(t,e){return Ft(t.getUTCMinutes(),e.length)},Xt=function(t,e){return Ft(t.getUTCSeconds(),e.length)},Jt=function(t,e){var r=e.length,n=t.getUTCMilliseconds();return Ft(Math.floor(n*Math.pow(10,r-3)),e.length)};var Qt={G:function(t,e,r){var n=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return r.era(n,{width:"abbreviated"});case"GGGGG":return r.era(n,{width:"narrow"});default:return r.era(n,{width:"wide"})}},y:function(t,e,r){if("yo"===e){var n=t.getUTCFullYear(),i=n>0?n:1-n;return r.ordinalNumber(i,{unit:"year"})}return zt(t,e)},Y:function(t,e,r,n){var i=Ut(t,n),o=i>0?i:1-i;return"YY"===e?Ft(o%100,2):"Yo"===e?r.ordinalNumber(o,{unit:"year"}):Ft(o,e.length)},R:function(t,e){return Ft(It(t),e.length)},u:function(t,e){return Ft(t.getUTCFullYear(),e.length)},Q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(n);case"QQ":return Ft(n,2);case"Qo":return r.ordinalNumber(n,{unit:"quarter"});case"QQQ":return r.quarter(n,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(n,{width:"narrow",context:"formatting"});default:return r.quarter(n,{width:"wide",context:"formatting"})}},q:function(t,e,r){var n=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(n);case"qq":return Ft(n,2);case"qo":return r.ordinalNumber(n,{unit:"quarter"});case"qqq":return r.quarter(n,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(n,{width:"narrow",context:"standalone"});default:return r.quarter(n,{width:"wide",context:"standalone"})}},M:function(t,e,r){var n=t.getUTCMonth();switch(e){case"M":case"MM":return Vt(t,e);case"Mo":return r.ordinalNumber(n+1,{unit:"month"});case"MMM":return r.month(n,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(n,{width:"narrow",context:"formatting"});default:return r.month(n,{width:"wide",context:"formatting"})}},L:function(t,e,r){var n=t.getUTCMonth();switch(e){case"L":return String(n+1);case"LL":return Ft(n+1,2);case"Lo":return r.ordinalNumber(n+1,{unit:"month"});case"LLL":return r.month(n,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(n,{width:"narrow",context:"standalone"});default:return r.month(n,{width:"wide",context:"standalone"})}},w:function(t,e,r,n){var i=function(t,e){xt(1,arguments);var r=Ct(t),n=Rt(r,e).getTime()-$t(r,e).getTime();return Math.round(n/Ht)+1}(t,n);return"wo"===e?r.ordinalNumber(i,{unit:"week"}):Ft(i,e.length)},I:function(t,e,r){var n=function(t){xt(1,arguments);var e=Ct(t),r=Pt(e).getTime()-Mt(e).getTime();return Math.round(r/Nt)+1}(t);return"Io"===e?r.ordinalNumber(n,{unit:"week"}):Ft(n,e.length)},d:function(t,e,r){return"do"===e?r.ordinalNumber(t.getUTCDate(),{unit:"date"}):Wt(t,e)},D:function(t,e,r){var n=function(t){xt(1,arguments);var e=Ct(t),r=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var n=e.getTime(),i=r-n;return Math.floor(i/jt)+1}(t);return"Do"===e?r.ordinalNumber(n,{unit:"dayOfYear"}):Ft(n,e.length)},E:function(t,e,r){var n=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return r.day(n,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(n,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},e:function(t,e,r,n){var i=t.getUTCDay(),o=(i-n.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return Ft(o,2);case"eo":return r.ordinalNumber(o,{unit:"day"});case"eee":return r.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(i,{width:"short",context:"formatting"});default:return r.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,r,n){var i=t.getUTCDay(),o=(i-n.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return Ft(o,e.length);case"co":return r.ordinalNumber(o,{unit:"day"});case"ccc":return r.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(i,{width:"narrow",context:"standalone"});case"cccccc":return r.day(i,{width:"short",context:"standalone"});default:return r.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,r){var n=t.getUTCDay(),i=0===n?7:n;switch(e){case"i":return String(i);case"ii":return Ft(i,e.length);case"io":return r.ordinalNumber(i,{unit:"day"});case"iii":return r.day(n,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(n,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},a:function(t,e,r){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},b:function(t,e,r){var n,i=t.getUTCHours();switch(n=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},B:function(t,e,r){var n,i=t.getUTCHours();switch(n=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return r.dayPeriod(n,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(n,{width:"narrow",context:"formatting"});default:return r.dayPeriod(n,{width:"wide",context:"formatting"})}},h:function(t,e,r){if("ho"===e){var n=t.getUTCHours()%12;return 0===n&&(n=12),r.ordinalNumber(n,{unit:"hour"})}return Gt(t,e)},H:function(t,e,r){return"Ho"===e?r.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Yt(t,e)},K:function(t,e,r){var n=t.getUTCHours()%12;return"Ko"===e?r.ordinalNumber(n,{unit:"hour"}):Ft(n,e.length)},k:function(t,e,r){var n=t.getUTCHours();return 0===n&&(n=24),"ko"===e?r.ordinalNumber(n,{unit:"hour"}):Ft(n,e.length)},m:function(t,e,r){return"mo"===e?r.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Zt(t,e)},s:function(t,e,r){return"so"===e?r.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Xt(t,e)},S:function(t,e){return Jt(t,e)},X:function(t,e,r,n){var i=(n._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return te(i);case"XXXX":case"XX":return ee(i);default:return ee(i,":")}},x:function(t,e,r,n){var i=(n._originalDate||t).getTimezoneOffset();switch(e){case"x":return te(i);case"xxxx":case"xx":return ee(i);default:return ee(i,":")}},O:function(t,e,r,n){var i=(n._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Kt(i,":");default:return"GMT"+ee(i,":")}},z:function(t,e,r,n){var i=(n._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Kt(i,":");default:return"GMT"+ee(i,":")}},t:function(t,e,r,n){var i=n._originalDate||t;return Ft(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,r,n){return Ft((n._originalDate||t).getTime(),e.length)}};function Kt(t,e){var r=t>0?"-":"+",n=Math.abs(t),i=Math.floor(n/60),o=n%60;if(0===o)return r+String(i);var s=e||"";return r+String(i)+s+Ft(o,2)}function te(t,e){return t%60==0?(t>0?"-":"+")+Ft(Math.abs(t)/60,2):ee(t,e)}function ee(t,e){var r=e||"",n=t>0?"-":"+",i=Math.abs(t);return n+Ft(Math.floor(i/60),2)+r+Ft(i%60,2)}const re=Qt;var ne=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},ie=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const oe={p:ie,P:function(t,e){var r,n=t.match(/(P+)(p+)?/)||[],i=n[1],o=n[2];if(!o)return ne(t,e);switch(i){case"P":r=e.dateTime({width:"short"});break;case"PP":r=e.dateTime({width:"medium"});break;case"PPP":r=e.dateTime({width:"long"});break;default:r=e.dateTime({width:"full"})}return r.replace("{{date}}",ne(i,e)).replace("{{time}}",ie(o,e))}};var se=["D","DD"],ae=["YY","YYYY"];function le(t){return-1!==se.indexOf(t)}function ce(t){return-1!==ae.indexOf(t)}function ue(t,e,r){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(r,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(r,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var de={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function pe(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.width?String(e.width):t.defaultWidth,n=t.formats[r]||t.formats[t.defaultWidth];return n}}const he={date:pe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:pe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:pe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var fe={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function me(t){return function(e,r){var n;if("formatting"===(null!=r&&r.context?String(r.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=null!=r&&r.width?String(r.width):i;n=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,a=null!=r&&r.width?String(r.width):t.defaultWidth;n=t.values[a]||t.values[s]}return n[t.argumentCallback?t.argumentCallback(e):e]}}const ge={ordinalNumber:function(t,e){var r=Number(t),n=r%100;if(n>20||n<10)switch(n%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:me({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:me({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:me({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:me({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:me({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function be(t){return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=r.width,i=n&&t.matchPatterns[n]||t.matchPatterns[t.defaultMatchWidth],o=e.match(i);if(!o)return null;var s,a=o[0],l=n&&t.parsePatterns[n]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(l)?ve(l,(function(t){return t.test(a)})):ye(l,(function(t){return t.test(a)}));s=t.valueCallback?t.valueCallback(c):c,s=r.valueCallback?r.valueCallback(s):s;var u=e.slice(a.length);return{value:s,rest:u}}}function ye(t,e){for(var r in t)if(t.hasOwnProperty(r)&&e(t[r]))return r}function ve(t,e){for(var r=0;r<t.length;r++)if(e(t[r]))return r}var we,Ae={ordinalNumber:(we={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.match(we.matchPattern);if(!r)return null;var n=r[0],i=t.match(we.parsePattern);if(!i)return null;var o=we.valueCallback?we.valueCallback(i[0]):i[0];o=e.valueCallback?e.valueCallback(o):o;var s=t.slice(n.length);return{value:o,rest:s}}),era:be({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:be({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:be({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:be({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:be({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const xe={code:"en-US",formatDistance:function(t,e,r){var n,i=de[t];return n="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+n:n+" ago":n},formatLong:he,formatRelative:function(t,e,r,n){return fe[t]},localize:ge,match:Ae,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Ee=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ce=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Se=/^'([^]*?)'?$/,ke=/''/g,Te=/[a-zA-Z]/;function qe(t,e,r){var n,i,o,s,a,l,c,u,d,p,h,f,m,g,b,y,v,w;xt(2,arguments);var A=String(e),x=wt(),E=null!==(n=null!==(i=null==r?void 0:r.locale)&&void 0!==i?i:x.locale)&&void 0!==n?n:xe,C=Bt(null!==(o=null!==(s=null!==(a=null!==(l=null==r?void 0:r.firstWeekContainsDate)&&void 0!==l?l:null==r||null===(c=r.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:x.firstWeekContainsDate)&&void 0!==s?s:null===(d=x.locale)||void 0===d||null===(p=d.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==o?o:1);if(!(C>=1&&C<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=Bt(null!==(h=null!==(f=null!==(m=null!==(g=null==r?void 0:r.weekStartsOn)&&void 0!==g?g:null==r||null===(b=r.locale)||void 0===b||null===(y=b.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==m?m:x.weekStartsOn)&&void 0!==f?f:null===(v=x.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==h?h:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var k=Ct(t);if(!Dt(k))throw new RangeError("Invalid time value");var T=At(k),q=_t(k,T),O={firstWeekContainsDate:C,weekStartsOn:S,locale:E,_originalDate:k},D=A.match(Ce).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,oe[e])(t,E.formatLong):t})).join("").match(Ee).map((function(n){if("''"===n)return"'";var i=n[0];if("'"===i)return Oe(n);var o=re[i];if(o)return null!=r&&r.useAdditionalWeekYearTokens||!ce(n)||ue(n,e,String(t)),null!=r&&r.useAdditionalDayOfYearTokens||!le(n)||ue(n,e,String(t)),o(q,n,E.localize,O);if(i.match(Te))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return n})).join("");return D}function Oe(t){var e=t.match(Se);return e?e[1].replace(ke,"'"):t}function De(t,e,r){var n,i,o,s,a,l,c,u,d,p;xt(2,arguments);var h=Ct(t),f=Ct(e),m=wt(),g=null!==(n=null!==(i=null==r?void 0:r.locale)&&void 0!==i?i:m.locale)&&void 0!==n?n:xe,b=Bt(null!==(o=null!==(s=null!==(a=null!==(l=null==r?void 0:r.weekStartsOn)&&void 0!==l?l:null==r||null===(c=r.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:m.weekStartsOn)&&void 0!==s?s:null===(d=m.locale)||void 0===d||null===(p=d.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==o?o:0);if(!g.localize)throw new RangeError("locale must contain localize property");if(!g.formatLong)throw new RangeError("locale must contain formatLong property");if(!g.formatRelative)throw new RangeError("locale must contain formatRelative property");var y,v=Tt(h,f);if(isNaN(v))throw new RangeError("Invalid time value");y=v<-6?"other":v<-1?"lastWeek":v<0?"yesterday":v<1?"today":v<2?"tomorrow":v<7?"nextWeek":"other";var w=_t(h,At(h)),A=_t(f,At(f)),x=g.formatRelative(y,w,A,{locale:g,weekStartsOn:b});return qe(h,x,{locale:g,weekStartsOn:b})}j().subscribe(H("todoItem"),(function(t,e){const r=lr.todoItemsList.withId(e.id),n=document.querySelector(e.parentElementSelector||"body");(function(t,e){document.querySelector(`.todo-item[data-id="${t.id}"]`)?.remove(),(e.parentElement||document.body).innerHTML+=`<div class="priority-${Le.indexOf(t.priority)} \n               status-${_e.indexOf(t.status)} todo-item" data-id="${t.id}">\n      <div class="todo-item-heading">\n        ${ht(t,"title","text")}\n        <button class="update-status symbol" data-type="${t.type}" data-id="${t.id}">\n          ${_e.indexOf(t.status)?`<img class="check" src="${dt}" alt="${_e[1]}">`:""}\n        </button>\n      </div>\n      ${ht(t,"dueDate","datetime-local",{elementText:"Due: ",attributeText:t.dueDate?De(new Date(t.dueDate),new Date):"None"})}\n      <button class="show" data-type="${t.type}Full" data-id="${t.id}" \n             data-belong-type="${e.belongType||""}">\n        Expand\n      </button>\n      <button class="hide hidden" data-type="${t.type}Full" data-id="${t.id}"\n              data-belong-type="${e.belongType||""}">\n        Shrink\n      </button>\n      <button class="destroy" data-type="${t.type}" data-id="${t.id}">Delete</button>\n   </div>`})(r,{parentElement:n,belongType:e.belongType}),e.full&&function(t,e){const r=(e.parentElement||document).querySelector(`.todo-item[data-id="${t.id}"]`),n=r.querySelector(`.show[data-type="${t.type}Full"]`),i=r.querySelector(`.hide[data-type="${t.type}Full"]`);n.classList.add("hidden"),i.classList.remove("hidden"),r.innerHTML+=`${ht(t,"description","textarea",{elementText:"Description: "})}\n     ${ht(t,"notes","textarea",{elementText:"Notes: "})}\n      <button class="edit-belong" data-type="${t.type}" data-id="${t.id}"\n             data-belong-type="project" data-belong-id="${t.belongs.project}">\n      Change Project\n     </button>\n     <div>\n      Priority: ${t.priority||"None"}\n      <button class="update-priority symbol" data-type="${t.type}" data-id="${t.id}" \n              direction="-1">v</button>\n      <button class="update-priority symbol" data-type="${t.type}" data-id="${t.id}"\n              direction="1">^</button>\n     </div>`,function(t){j().publish(N("checklistItem"),{belongType:t.type,belongId:t.id,ids:t.checklistItems,parentElementSelector:`.todo-item[data-id="${t.id}"]`})}(t)}(r,{parentElement:n}),j().publish(at("todoItem"))})),j().subscribe(H("checklistItem"),(function(t,e){const r=lr.checklistItemsList.withId(e.id),n=document.querySelector(e.parentElementSelector||"body");document.querySelector(`.checklist-item[data-id="${r.id}"]`)?.remove(),n.innerHTML+=`<${e.elementType||"div"} class="status-${_e.indexOf(r.status)} checklist-item" data-id="${r.id}">\n      ${ht(r,"title","text")}\n      <button class="update-status" data-type="${r.type}" data-id="${r.id}">\n        ${_e.indexOf(r.status)?"✓":""}\n      </button>\n      <button class="destroy" data-type="${r.type}" data-id="${r.id}">-</button>\n   </${e.elementType||"div"}>`,j().publish(at("checklistItem"))})),j().subscribe("edit.attribute",(function(t,{type:e,id:r,attribute:n,attributeType:i,attributeValue:o}){ft();const s=`.attribute[data-type="${e}"][data-id="${r}"][data-attribute="${n}"]`,a=document.querySelector(s),l=a.querySelector(".element-text").textContent,c="textarea"==i,u=`<form class="edit-attribute-form enabled \n                  ${je.includes(i)?"click-out":""}\n                  ${l?"with-label":""}" \n           data-type="${e}" data-id="${r}" data-attribute="${n}">\n      ${je.includes(i)?"":'<button class="back symbol">←</button>'}\n      ${l?`<label for="${n}">${l}</label>`:""}\n      <${c?"textarea":"input"} \n      type="${i}" name="${n}" id="${n}" \n      value="${o}">${c?`${o}</textarea>`:""}\n      <button class="submit symbol"><img src="${yt}" alt="Submit"></button>\n   </form>`;a.insertAdjacentHTML("afterend",u),a.remove(),j().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:r,attribute:n})})),j().subscribe("edit.belong",(function(t,{type:e,id:r,belongType:n,belongId:i}){ft();const o=`.edit-belong[data-belong-type="${n}"][data-type="${e}"][data-id="${r}"]`,s=document.querySelector(o),a=`<form class="edit-form" data-type="${e}" data-id="${r}" data-belong-type="${n}">\n      <button class="back">←</button>\n      <label for="belongId">Project</label>\n      <select name="belongId" id="belongId">\n        ${lr[n+"sList"][n+"s"].map((t=>`<option value="${t.id}" ${t.id==+i?"selected":""}>\n            ${t.title}\n           </option>`)).join("\n")}\n      </select>\n      <button class="submit">Change</button>\n   </form>`;s.insertAdjacentHTML("afterend",a),s.remove(),j().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:r,belongType:n})}));const Be=2,Le=["Low","Medium","High"],_e=["Incomplete","Complete"],je=["text"],Pe={project:[],todoItem:["description","notes"],checklistItem:[]},Ie={title:"name",todoItem:"to-do item",checklistItem:"checklist item"};j().subscribe(Y,(function(t,e){const r=`[data-type="${e.type}"]${e.id?`[data-id="${e.id}"]`:""}${e.index?`[data-index="${e.index}"]`:""}`,n=document.querySelector(`form${r},.field${r}`);if(n){n.querySelectorAll(".error").forEach((t=>t.remove()));for(const t of e.errors){const e=n.querySelector(`input[name*="${t.attribute}"],textarea[name*="${t.attribute}"]`);if(!e)continue;const r=`<p class="error">${(i=Ie[t.objType]||t.objType)[0].toUpperCase()+i.slice(1).toLowerCase()} ${Ie[t.objAttribute]||t.objAttribute} ${t.message}</p>`;e.insertAdjacentHTML("afterend",r)}var i}}));let Me=ut;function Ne(){document.body.style=`min-height: ${window.scrollY+window.innerHeight}px`,document.body.innerHTML="",Me()}j().subscribe(it,(function(t,e){Me=e})),j().subscribe(K,Ne),j().subscribe(M,Ne);const Re=()=>document.querySelectorAll('input:not([type="checkbox"],[type="radio"]),textarea');function Ue(t,e,r={}){t.forEach((t=>{(t=Fe(t)).addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation();const n=t.target.closest("button"),i=[n.dataset.type].concat((r.extraArgs||[]).map((t=>n.dataset[t])));j().publish("function"==typeof e?e(...i):e,n.dataset)}))}))}function $e(t,e){document.querySelectorAll(".submit").forEach((r=>{(r=Fe(r)).addEventListener("click",(r=>{r.preventDefault();const n=r.target.closest("form"),i=e.map((t=>n.dataset[t]));j().publish(t(...i),Object.fromEntries(new FormData(n)))}))}))}function He(t,e){Re().forEach((r=>{const n=(r=Fe(r)).closest("form"),i=e.map((t=>n.dataset[t]));r.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==r&&(e.preventDefault(),j().publish(t(...i),Object.fromEntries(new FormData(n))))}))}))}function Fe(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}j().subscribe("rendered.view",(function(){Ue(document.querySelectorAll(".index"),N),Ue(document.querySelectorAll(".new"),R),Ue(document.querySelectorAll(".show"),H),Ue(document.querySelectorAll(".hide"),F),Ue(document.querySelectorAll(".edit-attribute"),z),Ue(document.querySelectorAll(".edit-belong"),V),Ue(document.querySelectorAll(".update-status"),X,{extraArgs:["id"]}),Ue(document.querySelectorAll(".update-priority"),J,{extraArgs:["id"]}),Ue(document.querySelectorAll(".destroy"),W),Ue(document.querySelectorAll(".back"),M)})),j().subscribe("rendered.view.new",(function(){$e(U,["type"])})),j().subscribe(st("project"),(function(){He(U,["type"])})),j().subscribe("rendered.view.collection.new",(function(){$e($,["type","id","collectionType"]),He($,["type","id","collectionType"])})),j().subscribe("rendered.view.edit.attribute",(function(t,e){$e(Z,["type","id"]),He(Z,["type","id"]),Re().forEach((t=>{const r=t.closest("form");Object.entries(e).every((([t,e])=>r.dataset[t]==e))&&function(t){t.focus(),"number"==typeof t.selectionStart&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),je.includes(t.type)&&t.addEventListener("focusout",(()=>j().publish(Z(r.dataset.type,r.dataset.id),Object.fromEntries(new FormData(r)))))}))})),j().subscribe("rendered.view.edit.belong",(function(){$e(Q,["type","id","belongType"])}));var ze=r(1036),Ve=r.n(ze);function We(t){t.tempKeys=[...t.tempKeys||[],"tempKeys"],t.toStorage=function(){const t={};for(const e in this)"function"==typeof this[e]||this.tempKeys.includes(e)||(t[e]=this[e]);return t}}function Ge(t){function e(e,r,n=[]){return this.validations?.[e]?.forEach((i=>{i.fn(r)||n.push({objAttribute:e,objType:t.type,attribute:e,message:i.message})})),n}function r(t,e=[]){return t.forEach((t=>{t.obj.valid()||e.push(...t.obj.errors.map((e=>Object.assign({},e,{attribute:t.attrWrapper?t.attrWrapper(e.attribute):e.attribute}))))})),e}t.validations||={},t.associatedValidations||=[],t.errors||=[],t.tempKeys=[...t.tempKeys||[],"validations","associatedValidations","errors"],t.validate=function(n=t){this.errors=[];for(const t in n)this.errors.push(...e.call(this,t,n[t]));n.associatedValidations&&this.errors.push(...r(n.associatedValidations))},t.validateAssociated=function(t){this.errors=[],this.errors.push(...r(t))},t.valid=function(){return this.validate(),0==this.errors.length}}function Ye(t,e){e.forEach((e=>{t.validations[e]||=[],t.validations[e].push({fn:t=>t,message:"cannot be blank"})}))}function Ze(t){j().subscribe(Z(t.type,t.id),(function(e,r){if(rr(r),t.validate(r),t.errors.length)return j().publish(Y,{type:t.type,id:t.id,errors:t.errors});for(const e in r)t[e]=r[e];j().publish(tt(t.type,t.id))}))}function Xe(t){const e=_e;j().subscribe(X(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],j().publish(tt(t.type,t.id))}))}function Je(t){const e=Le;j().subscribe(J(t.type,t.id),(function(r,n){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +n.direction,0),e.length-1)],j().publish(tt(t.type,t.id))}))}function Qe(t,e,r){const n=e+"s";function i(n,i=!1){const o=Object.values(n[e+"sCollectionData"]||{}).map((e=>r(Object.assign(e,{belongs:{[t.type]:t.id}})))),s=o.map((r=>({obj:r,attrWrapper:n=>`${e+"sCollectionData"}[${r[t.type+"Index"]}][${n}]`})));if(i){if(!t.valid())return;t.associatedValidations=s}if(t.validateAssociated(s),t.errors.length)return j().publish(Y,{type:t.type,errors:t.errors});j().publish(G(e),{collectionItems:o})}t[n]||=[],j().subscribe(nt(e),(function(e,r){const i=r?.[t.type]?.[t.id];if(i){t[n]=i.map((t=>t.id));const e=t.type+"Index";i.sort(((t,r)=>+t[e]-+r[e])).forEach(((t,r)=>t[e]=r+1))}j().publish(tt(t.type,t.id))})),i(t,!0),delete t[e+"sCollectionData"],j().subscribe($(t.type,t.id,e),(function(t,e){rr(e),i(e)}))}function Ke(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function tr(t,e){j().subscribe(Q(t.type,t.id,e),(function(r,n){const i=t.belongs[e],o=+n.belongId;t.belongs[e]=o,j().publish(rt(t.type),{id:t.id,belongType:e,oldBelongId:i,newBelongId:o}),j().publish(tt(t.type,t.id))}))}function er(t,e=[]){let r=1;const n=t.itemType+"s";function i(e){const r={};e.forEach((e=>{Object.entries(e.belongs||{}).forEach((([e,i])=>{r[e]||={},r[e][i]||=t[n].filter((t=>t.belongs[e]==i))}))})),j().publish(nt(t.itemType),r)}t[n]||=e.map((e=>(rr(e),t.itemFactory(Object.assign({id:r++},e))))),t.withId=function(t){return this[n].find((e=>+t==e.id))},t.withIds=function(t,e={}){return t=t.map(Number),this[n].filter((r=>t.includes(r.id)&&Object.entries(e.conditions||{}).every((([t,e])=>r[t]==e))))},t.toStorage=function(){return this[n].map((t=>t.toStorage()))},j().subscribe(rt(t.itemType),(function(e,r){const i=r.belongType,o=r.oldBelongId,s=r.newBelongId;t[n].find((t=>t.id==+r.id)).belongs[i]=s,j().publish(nt(t.itemType),{[i]:{[o]:t[n].filter((t=>t.belongs[i]==o)),[s]:t[n].filter((t=>t.belongs[i]==s))}})})),j().subscribe(U(t.itemType),(function(e,o){rr(o);const s=t.itemFactory(Object.assign({id:r++},o));if(!s.valid())return j().publish(Y,{type:t.itemType,errors:s.errors});t[n].unshift(s),i([s]),j().publish(et(t.itemType))})),j().subscribe(G(t.itemType),(function(e,o){i(o.collectionItems.map((e=>{const i=t.itemFactory(Object.assign({id:r++},e.toStorage?e.toStorage():e));return t[n].unshift(i),i}))),j().publish(et(t.itemType))})),j().subscribe(W(t.itemType),(function(e,r){if(0==+r.id)return;const o=t[n].find((t=>t.id==+r.id));t[n].splice(t[n].indexOf(o),1),i([o]),j().publish(et(t.itemType))})),i(t[n])}function rr(t){nr(t),function(t){const e=/(.+)\[(.+)\]/;let r;for(;(r=Object.keys(t).filter((t=>e.test(t)))).length>0;)r.forEach((r=>{const[n,i]=r.match(e).slice(1);t[n]||={},t[n][i]=t[r],delete t[r]}))}(t)}function nr(t){if("string"==typeof t)return Ve()(t,{allowedTags:[],allowedAttributes:{}});if(Array.isArray(t))return t.map((t=>nr(t)));if("object"==typeof t){for(const e in t)t[e]=nr(t[e]);return t}return t}function ir(t){const e=Object.assign({type:"project"},t);return[We,Ge,Ze].forEach((t=>t(e))),Ye(e,["title"]),Qe(e,"todoItem"),e}function or(t){const e=Object.assign({type:"checklistItem"},t);return[We,Ge,Ze,Xe].forEach((t=>t(e))),Ye(e,["title"]),Ke(e,"todoItem"),e}function sr(t){const e=Object.assign({type:"todoItem"},t);return[We,Ge,Ze,Xe,Je].forEach((t=>t(e))),[Ke,tr].forEach((t=>t(e,"project"))),Ye(e,["title"]),Qe(e,"checklistItem",or),e}const ar={ProjectsList:function(t){const e={itemFactory:ir,itemType:"project"};return er(e,t),e},TodoItemsList:function(t){const e={itemFactory:sr,itemType:"todoItem"};return er(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:or,itemType:"checklistItem"};return er(e,t),e}};let lr={};j().subscribe(I,(function(t,e){for(const t in e)lr[t]=ar[t[0].toUpperCase()+t.slice(1)](e[t]);j().publish(K)})),j().publish(P)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0QsR0FBWUMsSUFBaUJ6c0QsU0FBUTZ0RCxHQUFVQSxFQUFPOWxELEVBQUssYUFDNURxakQsR0FBb0JyakQsRUFBSyxDQUFDLFVBQzFCOGpELEdBQWU5akQsRUFBSyxnQkFBaUIrbEQsSUFFOUIvbEQsQ0FDVCxDQ1dBLE1BQU1pbUQsR0FBdUIsQ0FBRUMsYUhaeEIsU0FBc0JwQixHQUMzQixNQUFNOWtELEVBQU0sQ0FBRXFsRCxZQUFhUSxHQUFTYixTQUFVLFdBRTlDLE9BREFILEdBQVM3a0QsRUFBSzhrRCxHQUNQOWtELENBQ1QsRUdRMkMsY0RUcEMsU0FBdUI4a0QsR0FDNUIsTUFBTTlrRCxFQUFNLENBQUVxbEQsWUFBYVcsR0FBVWhCLFNBQVUsWUFFL0MsT0FEQUgsR0FBUzdrRCxFQUFLOGtELEdBQ1A5a0QsQ0FDVCxFQ0swRCxtQkZabkQsU0FBNEI4a0QsR0FDakMsTUFBTTlrRCxFQUFNLENBQUVxbEQsWUFBYVUsR0FBZWYsU0FBVSxpQkFFcEQsT0FEQUgsR0FBUzdrRCxFQUFLOGtELEdBQ1A5a0QsQ0FDVCxHRVVPLElBQUlnckMsR0FBa0IsQ0FBQyxFQU85QixjQUFpQnRELEdBQ2pCLFNBQXNCN3ZDLEVBQUd2QyxHQUN2QixJQUFJLE1BQU00QyxLQUFPNUMsRUFDZjAxQyxHQUFnQjl5QyxHQUFPK3RELEdBQXFCL3RELEVBQUksR0FBRzZJLGNBQWdCN0ksRUFBSXVHLE1BQU0sSUFBSW5KLEVBQUs0QyxJQUN4RixZQUFlMndDLEVBQ2pCLElBUkUsWUFBZXBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9hbGwuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvZWRpdC5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9mb3JtLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL2luZGV4LXByb2plY3RzLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL25ldy1jaGVja2xpc3RJdGVtLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL25ldy1wcm9qZWN0LmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL25ldy10b2RvSXRlbS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9zaG93LXByb2plY3QuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvc2hvdy10b2RvSXRlbS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvZm9yZWlnbk5hbWVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbS1zZXJpYWxpemVyL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2RlY29kZV9jb2RlcG9pbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbS1zZXJpYWxpemVyL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZW5jb2RlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb21lbGVtZW50dHlwZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2xpYi9ub2RlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvZmVlZHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9oZWxwZXJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9sZWdhY3kuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9tYW5pcHVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9xdWVyeWluZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3RyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZXNjYXBlLXN0cmluZy1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9GZWVkSGFuZGxlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2RlY29kZV9jb2RlcG9pbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3BhcnNlLXNyY3NldC9zcmMvcGFyc2Utc3Jjc2V0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9waWNvY29sb3JzL3BpY29jb2xvcnMuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvYXQtcnVsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29tbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29udGFpbmVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9jc3Mtc3ludGF4LWVycm9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9kZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvZG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2Zyb21KU09OLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9pbnB1dC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGF6eS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL21hcC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL25vLXdvcmstcmVzdWx0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9ub2RlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcGFyc2VyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wb3N0Y3NzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wcmV2aW91cy1tYXAuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Byb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcmVzdWx0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9yb290LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9ydWxlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZmllci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zeW1ib2xzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi90b2tlbml6ZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2Fybi1vbmNlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9wdWJzdWItanMvc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc2FuaXRpemUtaHRtbC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc2FuaXRpemUtaHRtbC9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqZWN0L2Rpc3QvaXMtcGxhaW4tb2JqZWN0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL25hbm9pZC9ub24tc2VjdXJlL2luZGV4LmNqcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9hbGwuY3NzPzE4ZWMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9mb3JtLmNzcz83NGVhIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvaW5kZXgtcHJvamVjdHMuY3NzP2RhOWEiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0eWxlcy9uZXctcHJvamVjdC5jc3M/MDY0YyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL25ldy10b2RvSXRlbS5jc3M/OWE5MCIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL25ldy1jaGVja2xpc3RJdGVtLmNzcz8wNWY0Iiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvc2hvdy1wcm9qZWN0LmNzcz9iZGU1Iiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMvc2hvdy10b2RvSXRlbS5jc3M/NjM5NSIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzL2VkaXQuY3NzP2E5NmYiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvcHVic3ViLWV2ZW50LXR5cGVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3N0b3JhZ2UtcHJvdmlkZXJzL2xvY2FsLXN0b3JhZ2UtcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvaW5kZXgtcHJvamVjdHMtdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy9zdG9yYWdlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3ZpZXdzL3ZpZXctaGVscGVycy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy9pbmRleC10b2RvSXRlbXMtdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy9pbmRleC1jaGVja2xpc3RJdGVtcy12aWV3LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3ZpZXdzL25ldy1wcm9qZWN0LXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvbmV3LXRvZG9JdGVtLXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvbmV3LWNoZWNrbGlzdEl0ZW0tdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy9zaG93LXByb2plY3Qtdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3ZpZXdzL3Nob3ctdG9kb0l0ZW0tdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy9zaG93LWNoZWNrbGlzdEl0ZW0tdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy9lZGl0LXZpZXcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvc2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3NjcmlwdHMvdmlld3MvZXJyb3Itdmlldy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy92aWV3cy92aWV3cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy9kb20tZXZlbnRzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL2NvbXBvc2l0aW9uLXVuaXRzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL3Byb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL2NoZWNrbGlzdC1pdGVtcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2NyaXB0cy90b2RvLWl0ZW1zLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zY3JpcHRzL2FwcGxpY2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICBmb250LXNpemU6IDE4cHg7XFxufVxcblxcbmJvZHkge1xcbiAgcGFkZGluZzogMXJlbSAzcmVtO1xcbn1cXG5cXG5oMSwgaDIsIGgzLCBvbCwgdWwge1xcbiAgbWFyZ2luOiAwLjI1cmVtIDA7XFxufVxcblxcbnVsIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogJ+KmviAgJztcXG59XFxuXFxubGkge1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxufVxcblxcbmJ1dHRvbiB7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwYWRkaW5nOiAwLjVyZW0gMXJlbTtcXG59XFxuXFxuYnV0dG9uLmxpbmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5idXR0b24ubGluazpob3ZlciB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuYnV0dG9uLnN5bWJvbCB7XFxuICBwYWRkaW5nOiAwO1xcbiAgbWluLXdpZHRoOiAxLjVyZW07XFxuICBtaW4taGVpZ2h0OiAxLjVyZW07XFxufVxcblxcbmJ1dHRvbi5zdWJtaXQuc3ltYm9sIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBtaW4td2lkdGg6IDEuNzVyZW07XFxuICBtaW4taGVpZ2h0OiAxLjc1cmVtO1xcbn1cXG5cXG5idXR0b24uc3VibWl0LnN5bWJvbCBpbWcge1xcbiAgbWF4LWhlaWdodDogMS4yNXJlbTtcXG59XFxuXFxuYnV0dG9uLmRlc3Ryb3k6bm90KC5zeW1ib2wpLCBidXR0b24uYmFjazpub3QoLnN5bWJvbCkge1xcbiAgZm9udC1zaXplOiAwLjhyZW07XFxuICBwYWRkaW5nOiAwLjI1cmVtIDAuNXJlbTtcXG59XFxuXFxuLnVwZGF0ZS1zdGF0dXMudXBkYXRlLXN0YXR1cyB7XFxuICBtaW4taGVpZ2h0OiAycmVtO1xcbiAgbWluLXdpZHRoOiAycmVtO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4udXBkYXRlLXN0YXR1cy51cGRhdGUtc3RhdHVzOmRpc2FibGVkIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7XFxufVxcblxcbi51cGRhdGUtc3RhdHVzIGltZyB7XFxuICBtYXgtaGVpZ2h0OiAxLjVyZW07XFxufVxcblxcbi5zdGF0dXMtMSwgLnN0YXR1cy0xIGJ1dHRvbiB7XFxuICBjb2xvcjogZ3JheTtcXG59XFxuXFxuLmRpc2FibGVkIHtcXG4gIGNvbG9yOiBncmF5O1xcbn1cXG5cXG4uZW5hYmxlZC5lbmFibGVkLCAuZW5hYmxlZC5lbmFibGVkIGJ1dHRvbiB7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9hbGwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGVBQWU7RUFDZixlQUFlO0VBQ2Ysb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixVQUFVO0FBQ1o7O0FBRUE7RUFDRSwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsaUJBQWlCO0VBQ2pCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGVBQWU7RUFDZix1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbn1cXG5cXG5ib2R5IHtcXG4gIHBhZGRpbmc6IDFyZW0gM3JlbTtcXG59XFxuXFxuaDEsIGgyLCBoMywgb2wsIHVsIHtcXG4gIG1hcmdpbjogMC4yNXJlbSAwO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6ICfipr4gICc7XFxufVxcblxcbmxpIHtcXG4gIHRleHQtYWxpZ246IHN0YXJ0O1xcbn1cXG5cXG5idXR0b24ge1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgcGFkZGluZzogMC41cmVtIDFyZW07XFxufVxcblxcbmJ1dHRvbi5saW5rIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuYnV0dG9uLmxpbms6aG92ZXIge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XFxufVxcblxcbmJ1dHRvbi5zeW1ib2wge1xcbiAgcGFkZGluZzogMDtcXG4gIG1pbi13aWR0aDogMS41cmVtO1xcbiAgbWluLWhlaWdodDogMS41cmVtO1xcbn1cXG5cXG5idXR0b24uc3VibWl0LnN5bWJvbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWluLXdpZHRoOiAxLjc1cmVtO1xcbiAgbWluLWhlaWdodDogMS43NXJlbTtcXG59XFxuXFxuYnV0dG9uLnN1Ym1pdC5zeW1ib2wgaW1nIHtcXG4gIG1heC1oZWlnaHQ6IDEuMjVyZW07XFxufVxcblxcbmJ1dHRvbi5kZXN0cm95Om5vdCguc3ltYm9sKSwgYnV0dG9uLmJhY2s6bm90KC5zeW1ib2wpIHtcXG4gIGZvbnQtc2l6ZTogMC44cmVtO1xcbiAgcGFkZGluZzogMC4yNXJlbSAwLjVyZW07XFxufVxcblxcbi51cGRhdGUtc3RhdHVzLnVwZGF0ZS1zdGF0dXMge1xcbiAgbWluLWhlaWdodDogMnJlbTtcXG4gIG1pbi13aWR0aDogMnJlbTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnVwZGF0ZS1zdGF0dXMudXBkYXRlLXN0YXR1czpkaXNhYmxlZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xcbn1cXG5cXG4udXBkYXRlLXN0YXR1cyBpbWcge1xcbiAgbWF4LWhlaWdodDogMS41cmVtO1xcbn1cXG5cXG4uc3RhdHVzLTEsIC5zdGF0dXMtMSBidXR0b24ge1xcbiAgY29sb3I6IGdyYXk7XFxufVxcblxcbi5kaXNhYmxlZCB7XFxuICBjb2xvcjogZ3JheTtcXG59XFxuXFxuLmVuYWJsZWQuZW5hYmxlZCwgLmVuYWJsZWQuZW5hYmxlZCBidXR0b24ge1xcbiAgY29sb3I6IGJsYWNrO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5lZGl0LWF0dHJpYnV0ZS1mb3JtIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCBtYXgtY29udGVudCk7XFxuICBjb2x1bW4tZ2FwOiAwLjVyZW07XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtLmNsaWNrLW91dCB7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0KSB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybS5jbGljay1vdXQ6bm90KC53aXRoLWxhYmVsKSB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCBtYXgtY29udGVudCk7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtLmNsaWNrLW91dC53aXRoLWxhYmVsLFxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0LC53aXRoLWxhYmVsKSB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBtYXgtY29udGVudCk7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0KS53aXRoLWxhYmVsIHtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIG1heC1jb250ZW50KTtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm0gaW5wdXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBtaW4td2lkdGg6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGJsYWNrIGRhc2hlZDtcXG4gIHBhZGRpbmc6IDA7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybSBpbnB1dDpmb2N1cyB7XFxuICBib3JkZXItYm90dG9tOiAxcHggYmxhY2sgc29saWQ7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtIC5lcnJvciB7XFxuICBncmlkLXJvdzogMjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm0uY2xpY2stb3V0Om5vdCgud2l0aC1sYWJlbCkgLmVycm9yIHtcXG4gIGdyaWQtY29sdW1uOiAxIC8gc3BhbiAyO1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybS5jbGljay1vdXQud2l0aC1sYWJlbCAuZXJyb3IsXFxuLmVkaXQtYXR0cmlidXRlLWZvcm06bm90KC5jbGljay1vdXQsLndpdGgtbGFiZWwpIC5lcnJvciB7XFxuICBncmlkLWNvbHVtbjogMiAvIHNwYW4gMjtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm06bm90KC5jbGljay1vdXQpLndpdGgtbGFiZWwgLmVycm9yIHtcXG4gIGdyaWQtY29sdW1uOiAzIC8gc3BhbiAyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2VkaXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLDBDQUEwQztFQUMxQyxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSw2Q0FBNkM7QUFDL0M7O0FBRUE7O0VBRUUsNkNBQTZDO0FBQy9DOztBQUVBO0VBQ0UsNkNBQTZDO0FBQy9DOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixZQUFZO0VBQ1osYUFBYTtFQUNiLCtCQUErQjtFQUMvQixVQUFVO0VBQ1YsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0UsV0FBVztFQUNYLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7O0VBRUUsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsdUJBQXVCO0FBQ3pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5lZGl0LWF0dHJpYnV0ZS1mb3JtIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCBtYXgtY29udGVudCk7XFxuICBjb2x1bW4tZ2FwOiAwLjVyZW07XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtLmNsaWNrLW91dCB7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0KSB7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybS5jbGljay1vdXQ6bm90KC53aXRoLWxhYmVsKSB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCBtYXgtY29udGVudCk7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtLmNsaWNrLW91dC53aXRoLWxhYmVsLFxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0LC53aXRoLWxhYmVsKSB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBtYXgtY29udGVudCk7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtOm5vdCguY2xpY2stb3V0KS53aXRoLWxhYmVsIHtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIG1heC1jb250ZW50KTtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm0gaW5wdXQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBtaW4td2lkdGg6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IGJsYWNrIGRhc2hlZDtcXG4gIHBhZGRpbmc6IDA7XFxuICBoZWlnaHQ6IG1heC1jb250ZW50O1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybSBpbnB1dDpmb2N1cyB7XFxuICBib3JkZXItYm90dG9tOiAxcHggYmxhY2sgc29saWQ7XFxufVxcblxcbi5lZGl0LWF0dHJpYnV0ZS1mb3JtIC5lcnJvciB7XFxuICBncmlkLXJvdzogMjtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm0uY2xpY2stb3V0Om5vdCgud2l0aC1sYWJlbCkgLmVycm9yIHtcXG4gIGdyaWQtY29sdW1uOiAxIC8gc3BhbiAyO1xcbn1cXG5cXG4uZWRpdC1hdHRyaWJ1dGUtZm9ybS5jbGljay1vdXQud2l0aC1sYWJlbCAuZXJyb3IsXFxuLmVkaXQtYXR0cmlidXRlLWZvcm06bm90KC5jbGljay1vdXQsLndpdGgtbGFiZWwpIC5lcnJvciB7XFxuICBncmlkLWNvbHVtbjogMiAvIHNwYW4gMjtcXG59XFxuXFxuLmVkaXQtYXR0cmlidXRlLWZvcm06bm90KC5jbGljay1vdXQpLndpdGgtbGFiZWwgLmVycm9yIHtcXG4gIGdyaWQtY29sdW1uOiAzIC8gc3BhbiAyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJpbnB1dDpub3QoW3R5cGU9XFxcImNoZWNrYm94XFxcIl0sW3R5cGU9XFxcInJhZGlvXFxcIl0pLHRleHRhcmVhLHNlbGVjdCB7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBwYWRkaW5nOiAwLjI1cmVtO1xcbiAgbWluLXdpZHRoOiAxNXJlbTtcXG59XFxuXFxuLmVycm9yIHtcXG4gIG1hcmdpbjogMDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9mb3JtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGVBQWU7RUFDZixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsU0FBUztBQUNYXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImlucHV0Om5vdChbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSxbdHlwZT1cXFwicmFkaW9cXFwiXSksdGV4dGFyZWEsc2VsZWN0IHtcXG4gIGZvbnQtc2l6ZTogMXJlbTtcXG4gIHBhZGRpbmc6IDAuMjVyZW07XFxuICBtaW4td2lkdGg6IDE1cmVtO1xcbn1cXG5cXG4uZXJyb3Ige1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaW50cm8taGVhZGluZyBoMiB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbi5pbnRybyAubmV3W2RhdGEtdHlwZT1cXFwidG9kb0l0ZW1cXFwiXSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMnJlbSBhdXRvO1xcbiAgcGFkZGluZzogMXJlbSAxLjVyZW07IFxcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbWluLXdpZHRoOiAzNXZ3O1xcbn1cXG5cXG4ucHJvamVjdHMtaGVhZGluZyB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KDIsIG1heC1jb250ZW50KSAvIG1heC1jb250ZW50IDFmcjtcXG4gIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4ucHJvamVjdCB7XFxuICBtYXJnaW46IDFyZW0gYXV0bztcXG4gIG1pbi13aWR0aDogNjV2dztcXG4gIG1pbi1oZWlnaHQ6IDlyZW07XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogMWZyIDJmciAvIDFmciBtYXgtY29udGVudDtcXG4gIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnByb2plY3QgaDMge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG5cXG4ucHJvamVjdC1wcmV2aWV3IHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgbGluZS1oZWlnaHQ6IDI7XFxufVxcblxcbi5wcm9qZWN0LXByZXZpZXcuc3RhdHVzLTEge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBjb2xvcjogYmxhY2s7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIGFsaWduLXNlbGY6IHN0YXJ0O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2luZGV4LXByb2plY3RzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsb0JBQW9CO0VBQ3BCLGtCQUFrQjtFQUNsQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVEQUF1RDtFQUN2RCxvQkFBb0I7RUFDcEIsbUJBQW1CO0VBQ25CLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGlCQUFpQjtFQUNqQixlQUFlO0VBQ2YsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYix3Q0FBd0M7RUFDeEMsb0JBQW9CO0VBQ3BCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxjQUFjO0FBQ2hCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGlCQUFpQjtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaW50cm8taGVhZGluZyBoMiB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbi5pbnRybyAubmV3W2RhdGEtdHlwZT1cXFwidG9kb0l0ZW1cXFwiXSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbjogMnJlbSBhdXRvO1xcbiAgcGFkZGluZzogMXJlbSAxLjVyZW07IFxcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbWluLXdpZHRoOiAzNXZ3O1xcbn1cXG5cXG4ucHJvamVjdHMtaGVhZGluZyB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KDIsIG1heC1jb250ZW50KSAvIG1heC1jb250ZW50IDFmcjtcXG4gIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4ucHJvamVjdCB7XFxuICBtYXJnaW46IDFyZW0gYXV0bztcXG4gIG1pbi13aWR0aDogNjV2dztcXG4gIG1pbi1oZWlnaHQ6IDlyZW07XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZTogMWZyIDJmciAvIDFmciBtYXgtY29udGVudDtcXG4gIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnByb2plY3QgaDMge1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbn1cXG5cXG4ucHJvamVjdC1wcmV2aWV3IHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgbGluZS1oZWlnaHQ6IDI7XFxufVxcblxcbi5wcm9qZWN0LXByZXZpZXcuc3RhdHVzLTEge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBjb2xvcjogYmxhY2s7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIGFsaWduLXNlbGY6IHN0YXJ0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubmV3Lm5ld1tkYXRhLXR5cGU9XFxcImNoZWNrbGlzdEl0ZW1cXFwiXSB7XFxuICBjb2xvcjogYmx1ZTtcXG59XFxuXFxuLmNoZWNrbGlzdC1pdGVtLmZpZWxkW2RhdGEtdHlwZT1cXFwiY2hlY2tsaXN0SXRlbVxcXCJdIHtcXG4gIG1heC13aWR0aDogNTB2dztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4uY2hlY2tsaXN0LWl0ZW0uZmllbGRbZGF0YS10eXBlPVxcXCJjaGVja2xpc3RJdGVtXFxcIl0gaW5wdXQge1xcbiAgZmxleDogMSAxIDA7XFxufVxcblxcbi5jaGVja2xpc3QtaXRlbS5maWVsZFtkYXRhLXR5cGU9XFxcImNoZWNrbGlzdEl0ZW1cXFwiXSBidXR0b24ge1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL25ldy1jaGVja2xpc3RJdGVtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7RUFDZixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLG1CQUFtQjtFQUNuQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm5ldy5uZXdbZGF0YS10eXBlPVxcXCJjaGVja2xpc3RJdGVtXFxcIl0ge1xcbiAgY29sb3I6IGJsdWU7XFxufVxcblxcbi5jaGVja2xpc3QtaXRlbS5maWVsZFtkYXRhLXR5cGU9XFxcImNoZWNrbGlzdEl0ZW1cXFwiXSB7XFxuICBtYXgtd2lkdGg6IDUwdnc7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDAuNXJlbTtcXG59XFxuXFxuLmNoZWNrbGlzdC1pdGVtLmZpZWxkW2RhdGEtdHlwZT1cXFwiY2hlY2tsaXN0SXRlbVxcXCJdIGlucHV0IHtcXG4gIGZsZXg6IDEgMSAwO1xcbn1cXG5cXG4uY2hlY2tsaXN0LWl0ZW0uZmllbGRbZGF0YS10eXBlPVxcXCJjaGVja2xpc3RJdGVtXFxcIl0gYnV0dG9uIHtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm5ldy1mb3JtW2RhdGEtdHlwZT1cXFwicHJvamVjdFxcXCJdIHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gIGdyaWQtdGVtcGxhdGU6IHJlcGVhdCgyLCBtYXgtY29udGVudCkgLyByZXBlYXQoNCwgbWF4LWNvbnRlbnQpO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGNvbHVtbi1nYXA6IDAuNXJlbTtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5uZXctZm9ybVtkYXRhLXR5cGU9XFxcInByb2plY3RcXFwiXSAuZXJyb3Ige1xcbiAgZ3JpZC1yb3c6IDI7XFxuICBncmlkLWNvbHVtbjogMztcXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9uZXctcHJvamVjdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsdUJBQXVCO0VBQ3ZCLG9CQUFvQjtFQUNwQiw4REFBOEQ7RUFDOUQsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsY0FBYztBQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJwcm9qZWN0XFxcIl0ge1xcbiAgZ3JpZC1yb3c6IDI7XFxuICBncmlkLWNvbHVtbjogMSAvIHNwYW4gMjtcXG4gIGp1c3RpZnktc2VsZjogY2VudGVyO1xcbiAgZ3JpZC10ZW1wbGF0ZTogcmVwZWF0KDIsIG1heC1jb250ZW50KSAvIHJlcGVhdCg0LCBtYXgtY29udGVudCk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgY29sdW1uLWdhcDogMC41cmVtO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLm5ldy1mb3JtW2RhdGEtdHlwZT1cXFwicHJvamVjdFxcXCJdIC5lcnJvciB7XFxuICBncmlkLXJvdzogMjtcXG4gIGdyaWQtY29sdW1uOiAzO1xcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIHtcXG4gIG1hcmdpbjogMXJlbSBhdXRvO1xcbiAgd2lkdGg6IDUwdnc7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIGJ1dHRvbiB7XFxuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIC5maWVsZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMC4xcmVtO1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIC5zdWJtaXQge1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgcGFkZGluZzogMC41cmVtIDRyZW07XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL25ldy10b2RvSXRlbS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxpQkFBaUI7RUFDakIsV0FBVztFQUNYLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsV0FBVztBQUNiOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsb0JBQW9CO0VBQ3BCLG1CQUFtQjtBQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIHtcXG4gIG1hcmdpbjogMXJlbSBhdXRvO1xcbiAgd2lkdGg6IDUwdnc7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIGJ1dHRvbiB7XFxuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIC5maWVsZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMC4xcmVtO1xcbn1cXG5cXG4ubmV3LWZvcm1bZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdIC5zdWJtaXQge1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgcGFkZGluZzogMC41cmVtIDRyZW07XFxuICBtYXJnaW4tdG9wOiAwLjI1cmVtO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIucHJvamVjdC1oZWFkaW5nIHtcXG4gIG1hcmdpbjogMXJlbSAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nICoge1xcbiAgZm9udC1zaXplOiAxLjc1cmVtO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nLnByb2plY3QtaGVhZGluZyBpbnB1dCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBibGFjayBkYXNoZWQ7XFxufVxcblxcbi5wcm9qZWN0LWhlYWRpbmcucHJvamVjdC1oZWFkaW5nIGlucHV0OmZvY3VzIHtcXG4gIGJvcmRlci1ib3R0b206IDJweCBibGFjayBzb2xpZDtcXG59XFxuXFxuLnByb2plY3QtaGVhZGluZyAuc3VibWl0LnN1Ym1pdCB7XFxuICBtaW4td2lkdGg6IDJyZW07XFxuICBtaW4taGVpZ2h0OiAycmVtO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nIC5zdWJtaXQuc3VibWl0IGltZyB7XFxuICBtYXgtaGVpZ2h0OiAxLjVyZW07XFxufVxcblxcbi50b2RvLWl0ZW1zLWhlYWRpbmcge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGU6IHJlcGVhdCgyLCBtYXgtY29udGVudCkgLyBtYXgtY29udGVudCAxZnI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBzdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2x1bW4tZ2FwOiAwLjVyZW07XFxufVxcblxcbi50b2RvLWl0ZW1zLWhlYWRpbmcgLm5ldy1mb3JtIHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9zaG93LXByb2plY3QuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsY0FBYztFQUNkLGFBQWE7RUFDYix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsK0JBQStCO0FBQ2pDOztBQUVBO0VBQ0UsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1REFBdUQ7RUFDdkQsb0JBQW9CO0VBQ3BCLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsdUJBQXVCO0VBQ3ZCLG9CQUFvQjtBQUN0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIucHJvamVjdC1oZWFkaW5nIHtcXG4gIG1hcmdpbjogMXJlbSAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nICoge1xcbiAgZm9udC1zaXplOiAxLjc1cmVtO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nLnByb2plY3QtaGVhZGluZyBpbnB1dCB7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIGJvcmRlci1ib3R0b206IDJweCBibGFjayBkYXNoZWQ7XFxufVxcblxcbi5wcm9qZWN0LWhlYWRpbmcucHJvamVjdC1oZWFkaW5nIGlucHV0OmZvY3VzIHtcXG4gIGJvcmRlci1ib3R0b206IDJweCBibGFjayBzb2xpZDtcXG59XFxuXFxuLnByb2plY3QtaGVhZGluZyAuc3VibWl0LnN1Ym1pdCB7XFxuICBtaW4td2lkdGg6IDJyZW07XFxuICBtaW4taGVpZ2h0OiAycmVtO1xcbn1cXG5cXG4ucHJvamVjdC1oZWFkaW5nIC5zdWJtaXQuc3VibWl0IGltZyB7XFxuICBtYXgtaGVpZ2h0OiAxLjVyZW07XFxufVxcblxcbi50b2RvLWl0ZW1zLWhlYWRpbmcge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGU6IHJlcGVhdCgyLCBtYXgtY29udGVudCkgLyBtYXgtY29udGVudCAxZnI7XFxuICBqdXN0aWZ5LWl0ZW1zOiBzdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBjb2x1bW4tZ2FwOiAwLjVyZW07XFxufVxcblxcbi50b2RvLWl0ZW1zLWhlYWRpbmcgLm5ldy1mb3JtIHtcXG4gIGdyaWQtcm93OiAyO1xcbiAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XFxuICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRvZG8taXRlbSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxuICBib3JkZXItcmFkaXVzOiAwLjJyZW07XFxuICBwYWRkaW5nOiAxLjVyZW07XFxuICBtYXJnaW46IDFyZW0gYXV0bztcXG4gIHdpZHRoOiA2NXZ3O1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIG1heC1jb250ZW50O1xcbiAganVzdGlmeS1pdGVtczogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogc3RhcnQ7XFxuICBnYXA6IDFyZW07XFxufVxcblxcbi50b2RvLWl0ZW0taGVhZGluZyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC43NXJlbTtcXG59XFxuXFxuLnRvZG8taXRlbS1oZWFkaW5nICosXFxuLnRvZG8taXRlbS1oZWFkaW5nIGlucHV0IHtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG59XFxuXFxuLnRvZG8taXRlbSAqOm5vdCguZGVzdHJveVtkYXRhLXR5cGU9XFxcInRvZG9JdGVtXFxcIl0pIHtcXG4gIGdyaWQtY29sdW1uOiAxO1xcbn1cXG5cXG4udG9kby1pdGVtIC5kZXN0cm95W2RhdGEtdHlwZT1cXFwidG9kb0l0ZW1cXFwiXSB7XFxuICBncmlkLXJvdzogMTtcXG4gIGdyaWQtY29sdW1uOiAyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3Nob3ctdG9kb0l0ZW0uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsMkJBQTJCO0VBQzNCLHFCQUFxQjtFQUNyQixlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLFdBQVc7RUFDWCxhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLG9CQUFvQjtFQUNwQixrQkFBa0I7RUFDbEIsU0FBUztBQUNYOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixZQUFZO0FBQ2Q7O0FBRUE7O0VBRUUsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxjQUFjO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b2RvLWl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xcbiAgYm9yZGVyLXJhZGl1czogMC4ycmVtO1xcbiAgcGFkZGluZzogMS41cmVtO1xcbiAgbWFyZ2luOiAxcmVtIGF1dG87XFxuICB3aWR0aDogNjV2dztcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBtYXgtY29udGVudDtcXG4gIGp1c3RpZnktaXRlbXM6IHN0YXJ0O1xcbiAgYWxpZ24taXRlbXM6IHN0YXJ0O1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4udG9kby1pdGVtLWhlYWRpbmcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDAuNzVyZW07XFxufVxcblxcbi50b2RvLWl0ZW0taGVhZGluZyAqLFxcbi50b2RvLWl0ZW0taGVhZGluZyBpbnB1dCB7XFxuICBmb250LXNpemU6IDEuMjVyZW07XFxufVxcblxcbi50b2RvLWl0ZW0gKjpub3QoLmRlc3Ryb3lbZGF0YS10eXBlPVxcXCJ0b2RvSXRlbVxcXCJdKSB7XFxuICBncmlkLWNvbHVtbjogMTtcXG59XFxuXFxuLnRvZG8taXRlbSAuZGVzdHJveVtkYXRhLXR5cGU9XFxcInRvZG9JdGVtXFxcIl0ge1xcbiAgZ3JpZC1yb3c6IDE7XFxuICBncmlkLWNvbHVtbjogMjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuZWxlbWVudE5hbWVzID0gdm9pZCAwO1xuZXhwb3J0cy5lbGVtZW50TmFtZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJhbHRnbHlwaFwiLCBcImFsdEdseXBoXCJdLFxuICAgIFtcImFsdGdseXBoZGVmXCIsIFwiYWx0R2x5cGhEZWZcIl0sXG4gICAgW1wiYWx0Z2x5cGhpdGVtXCIsIFwiYWx0R2x5cGhJdGVtXCJdLFxuICAgIFtcImFuaW1hdGVjb2xvclwiLCBcImFuaW1hdGVDb2xvclwiXSxcbiAgICBbXCJhbmltYXRlbW90aW9uXCIsIFwiYW5pbWF0ZU1vdGlvblwiXSxcbiAgICBbXCJhbmltYXRldHJhbnNmb3JtXCIsIFwiYW5pbWF0ZVRyYW5zZm9ybVwiXSxcbiAgICBbXCJjbGlwcGF0aFwiLCBcImNsaXBQYXRoXCJdLFxuICAgIFtcImZlYmxlbmRcIiwgXCJmZUJsZW5kXCJdLFxuICAgIFtcImZlY29sb3JtYXRyaXhcIiwgXCJmZUNvbG9yTWF0cml4XCJdLFxuICAgIFtcImZlY29tcG9uZW50dHJhbnNmZXJcIiwgXCJmZUNvbXBvbmVudFRyYW5zZmVyXCJdLFxuICAgIFtcImZlY29tcG9zaXRlXCIsIFwiZmVDb21wb3NpdGVcIl0sXG4gICAgW1wiZmVjb252b2x2ZW1hdHJpeFwiLCBcImZlQ29udm9sdmVNYXRyaXhcIl0sXG4gICAgW1wiZmVkaWZmdXNlbGlnaHRpbmdcIiwgXCJmZURpZmZ1c2VMaWdodGluZ1wiXSxcbiAgICBbXCJmZWRpc3BsYWNlbWVudG1hcFwiLCBcImZlRGlzcGxhY2VtZW50TWFwXCJdLFxuICAgIFtcImZlZGlzdGFudGxpZ2h0XCIsIFwiZmVEaXN0YW50TGlnaHRcIl0sXG4gICAgW1wiZmVkcm9wc2hhZG93XCIsIFwiZmVEcm9wU2hhZG93XCJdLFxuICAgIFtcImZlZmxvb2RcIiwgXCJmZUZsb29kXCJdLFxuICAgIFtcImZlZnVuY2FcIiwgXCJmZUZ1bmNBXCJdLFxuICAgIFtcImZlZnVuY2JcIiwgXCJmZUZ1bmNCXCJdLFxuICAgIFtcImZlZnVuY2dcIiwgXCJmZUZ1bmNHXCJdLFxuICAgIFtcImZlZnVuY3JcIiwgXCJmZUZ1bmNSXCJdLFxuICAgIFtcImZlZ2F1c3NpYW5ibHVyXCIsIFwiZmVHYXVzc2lhbkJsdXJcIl0sXG4gICAgW1wiZmVpbWFnZVwiLCBcImZlSW1hZ2VcIl0sXG4gICAgW1wiZmVtZXJnZVwiLCBcImZlTWVyZ2VcIl0sXG4gICAgW1wiZmVtZXJnZW5vZGVcIiwgXCJmZU1lcmdlTm9kZVwiXSxcbiAgICBbXCJmZW1vcnBob2xvZ3lcIiwgXCJmZU1vcnBob2xvZ3lcIl0sXG4gICAgW1wiZmVvZmZzZXRcIiwgXCJmZU9mZnNldFwiXSxcbiAgICBbXCJmZXBvaW50bGlnaHRcIiwgXCJmZVBvaW50TGlnaHRcIl0sXG4gICAgW1wiZmVzcGVjdWxhcmxpZ2h0aW5nXCIsIFwiZmVTcGVjdWxhckxpZ2h0aW5nXCJdLFxuICAgIFtcImZlc3BvdGxpZ2h0XCIsIFwiZmVTcG90TGlnaHRcIl0sXG4gICAgW1wiZmV0aWxlXCIsIFwiZmVUaWxlXCJdLFxuICAgIFtcImZldHVyYnVsZW5jZVwiLCBcImZlVHVyYnVsZW5jZVwiXSxcbiAgICBbXCJmb3JlaWdub2JqZWN0XCIsIFwiZm9yZWlnbk9iamVjdFwiXSxcbiAgICBbXCJnbHlwaHJlZlwiLCBcImdseXBoUmVmXCJdLFxuICAgIFtcImxpbmVhcmdyYWRpZW50XCIsIFwibGluZWFyR3JhZGllbnRcIl0sXG4gICAgW1wicmFkaWFsZ3JhZGllbnRcIiwgXCJyYWRpYWxHcmFkaWVudFwiXSxcbiAgICBbXCJ0ZXh0cGF0aFwiLCBcInRleHRQYXRoXCJdLFxuXSk7XG5leHBvcnRzLmF0dHJpYnV0ZU5hbWVzID0gbmV3IE1hcChbXG4gICAgW1wiZGVmaW5pdGlvbnVybFwiLCBcImRlZmluaXRpb25VUkxcIl0sXG4gICAgW1wiYXR0cmlidXRlbmFtZVwiLCBcImF0dHJpYnV0ZU5hbWVcIl0sXG4gICAgW1wiYXR0cmlidXRldHlwZVwiLCBcImF0dHJpYnV0ZVR5cGVcIl0sXG4gICAgW1wiYmFzZWZyZXF1ZW5jeVwiLCBcImJhc2VGcmVxdWVuY3lcIl0sXG4gICAgW1wiYmFzZXByb2ZpbGVcIiwgXCJiYXNlUHJvZmlsZVwiXSxcbiAgICBbXCJjYWxjbW9kZVwiLCBcImNhbGNNb2RlXCJdLFxuICAgIFtcImNsaXBwYXRodW5pdHNcIiwgXCJjbGlwUGF0aFVuaXRzXCJdLFxuICAgIFtcImRpZmZ1c2Vjb25zdGFudFwiLCBcImRpZmZ1c2VDb25zdGFudFwiXSxcbiAgICBbXCJlZGdlbW9kZVwiLCBcImVkZ2VNb2RlXCJdLFxuICAgIFtcImZpbHRlcnVuaXRzXCIsIFwiZmlsdGVyVW5pdHNcIl0sXG4gICAgW1wiZ2x5cGhyZWZcIiwgXCJnbHlwaFJlZlwiXSxcbiAgICBbXCJncmFkaWVudHRyYW5zZm9ybVwiLCBcImdyYWRpZW50VHJhbnNmb3JtXCJdLFxuICAgIFtcImdyYWRpZW50dW5pdHNcIiwgXCJncmFkaWVudFVuaXRzXCJdLFxuICAgIFtcImtlcm5lbG1hdHJpeFwiLCBcImtlcm5lbE1hdHJpeFwiXSxcbiAgICBbXCJrZXJuZWx1bml0bGVuZ3RoXCIsIFwia2VybmVsVW5pdExlbmd0aFwiXSxcbiAgICBbXCJrZXlwb2ludHNcIiwgXCJrZXlQb2ludHNcIl0sXG4gICAgW1wia2V5c3BsaW5lc1wiLCBcImtleVNwbGluZXNcIl0sXG4gICAgW1wia2V5dGltZXNcIiwgXCJrZXlUaW1lc1wiXSxcbiAgICBbXCJsZW5ndGhhZGp1c3RcIiwgXCJsZW5ndGhBZGp1c3RcIl0sXG4gICAgW1wibGltaXRpbmdjb25lYW5nbGVcIiwgXCJsaW1pdGluZ0NvbmVBbmdsZVwiXSxcbiAgICBbXCJtYXJrZXJoZWlnaHRcIiwgXCJtYXJrZXJIZWlnaHRcIl0sXG4gICAgW1wibWFya2VydW5pdHNcIiwgXCJtYXJrZXJVbml0c1wiXSxcbiAgICBbXCJtYXJrZXJ3aWR0aFwiLCBcIm1hcmtlcldpZHRoXCJdLFxuICAgIFtcIm1hc2tjb250ZW50dW5pdHNcIiwgXCJtYXNrQ29udGVudFVuaXRzXCJdLFxuICAgIFtcIm1hc2t1bml0c1wiLCBcIm1hc2tVbml0c1wiXSxcbiAgICBbXCJudW1vY3RhdmVzXCIsIFwibnVtT2N0YXZlc1wiXSxcbiAgICBbXCJwYXRobGVuZ3RoXCIsIFwicGF0aExlbmd0aFwiXSxcbiAgICBbXCJwYXR0ZXJuY29udGVudHVuaXRzXCIsIFwicGF0dGVybkNvbnRlbnRVbml0c1wiXSxcbiAgICBbXCJwYXR0ZXJudHJhbnNmb3JtXCIsIFwicGF0dGVyblRyYW5zZm9ybVwiXSxcbiAgICBbXCJwYXR0ZXJudW5pdHNcIiwgXCJwYXR0ZXJuVW5pdHNcIl0sXG4gICAgW1wicG9pbnRzYXR4XCIsIFwicG9pbnRzQXRYXCJdLFxuICAgIFtcInBvaW50c2F0eVwiLCBcInBvaW50c0F0WVwiXSxcbiAgICBbXCJwb2ludHNhdHpcIiwgXCJwb2ludHNBdFpcIl0sXG4gICAgW1wicHJlc2VydmVhbHBoYVwiLCBcInByZXNlcnZlQWxwaGFcIl0sXG4gICAgW1wicHJlc2VydmVhc3BlY3RyYXRpb1wiLCBcInByZXNlcnZlQXNwZWN0UmF0aW9cIl0sXG4gICAgW1wicHJpbWl0aXZldW5pdHNcIiwgXCJwcmltaXRpdmVVbml0c1wiXSxcbiAgICBbXCJyZWZ4XCIsIFwicmVmWFwiXSxcbiAgICBbXCJyZWZ5XCIsIFwicmVmWVwiXSxcbiAgICBbXCJyZXBlYXRjb3VudFwiLCBcInJlcGVhdENvdW50XCJdLFxuICAgIFtcInJlcGVhdGR1clwiLCBcInJlcGVhdER1clwiXSxcbiAgICBbXCJyZXF1aXJlZGV4dGVuc2lvbnNcIiwgXCJyZXF1aXJlZEV4dGVuc2lvbnNcIl0sXG4gICAgW1wicmVxdWlyZWRmZWF0dXJlc1wiLCBcInJlcXVpcmVkRmVhdHVyZXNcIl0sXG4gICAgW1wic3BlY3VsYXJjb25zdGFudFwiLCBcInNwZWN1bGFyQ29uc3RhbnRcIl0sXG4gICAgW1wic3BlY3VsYXJleHBvbmVudFwiLCBcInNwZWN1bGFyRXhwb25lbnRcIl0sXG4gICAgW1wic3ByZWFkbWV0aG9kXCIsIFwic3ByZWFkTWV0aG9kXCJdLFxuICAgIFtcInN0YXJ0b2Zmc2V0XCIsIFwic3RhcnRPZmZzZXRcIl0sXG4gICAgW1wic3RkZGV2aWF0aW9uXCIsIFwic3RkRGV2aWF0aW9uXCJdLFxuICAgIFtcInN0aXRjaHRpbGVzXCIsIFwic3RpdGNoVGlsZXNcIl0sXG4gICAgW1wic3VyZmFjZXNjYWxlXCIsIFwic3VyZmFjZVNjYWxlXCJdLFxuICAgIFtcInN5c3RlbWxhbmd1YWdlXCIsIFwic3lzdGVtTGFuZ3VhZ2VcIl0sXG4gICAgW1widGFibGV2YWx1ZXNcIiwgXCJ0YWJsZVZhbHVlc1wiXSxcbiAgICBbXCJ0YXJnZXR4XCIsIFwidGFyZ2V0WFwiXSxcbiAgICBbXCJ0YXJnZXR5XCIsIFwidGFyZ2V0WVwiXSxcbiAgICBbXCJ0ZXh0bGVuZ3RoXCIsIFwidGV4dExlbmd0aFwiXSxcbiAgICBbXCJ2aWV3Ym94XCIsIFwidmlld0JveFwiXSxcbiAgICBbXCJ2aWV3dGFyZ2V0XCIsIFwidmlld1RhcmdldFwiXSxcbiAgICBbXCJ4Y2hhbm5lbHNlbGVjdG9yXCIsIFwieENoYW5uZWxTZWxlY3RvclwiXSxcbiAgICBbXCJ5Y2hhbm5lbHNlbGVjdG9yXCIsIFwieUNoYW5uZWxTZWxlY3RvclwiXSxcbiAgICBbXCJ6b29tYW5kcGFuXCIsIFwiem9vbUFuZFBhblwiXSxcbl0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG52YXIgRWxlbWVudFR5cGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpKTtcbnZhciBlbnRpdGllc18xID0gcmVxdWlyZShcImVudGl0aWVzXCIpO1xuLyoqXG4gKiBNaXhlZC1jYXNlIFNWRyBhbmQgTWF0aE1MIHRhZ3MgJiBhdHRyaWJ1dGVzXG4gKiByZWNvZ25pemVkIGJ5IHRoZSBIVE1MIHBhcnNlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNwYXJzaW5nLW1haW4taW5mb3JlaWduXG4gKi9cbnZhciBmb3JlaWduTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2ZvcmVpZ25OYW1lc1wiKTtcbnZhciB1bmVuY29kZWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwic3R5bGVcIixcbiAgICBcInNjcmlwdFwiLFxuICAgIFwieG1wXCIsXG4gICAgXCJpZnJhbWVcIixcbiAgICBcIm5vZW1iZWRcIixcbiAgICBcIm5vZnJhbWVzXCIsXG4gICAgXCJwbGFpbnRleHRcIixcbiAgICBcIm5vc2NyaXB0XCIsXG5dKTtcbi8qKlxuICogRm9ybWF0IGF0dHJpYnV0ZXNcbiAqL1xuZnVuY3Rpb24gZm9ybWF0QXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBvcHRzKSB7XG4gICAgaWYgKCFhdHRyaWJ1dGVzKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgdmFsdWUgPSAoX2EgPSBhdHRyaWJ1dGVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgPT09IFwiZm9yZWlnblwiKSB7XG4gICAgICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBhdHRyaWJ1dGUgbmFtZXMgKi9cbiAgICAgICAgICAgIGtleSA9IChfYiA9IGZvcmVpZ25OYW1lc18xLmF0dHJpYnV0ZU5hbWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLmVtcHR5QXR0cnMgJiYgIW9wdHMueG1sTW9kZSAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5ICsgXCI9XFxcIlwiICsgKG9wdHMuZGVjb2RlRW50aXRpZXMgIT09IGZhbHNlXG4gICAgICAgICAgICA/IGVudGl0aWVzXzEuZW5jb2RlWE1MKHZhbHVlKVxuICAgICAgICAgICAgOiB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKSkgKyBcIlxcXCJcIjtcbiAgICB9KVxuICAgICAgICAuam9pbihcIiBcIik7XG59XG4vKipcbiAqIFNlbGYtZW5jbG9zaW5nIHRhZ3NcbiAqL1xudmFyIHNpbmdsZVRhZyA9IG5ldyBTZXQoW1xuICAgIFwiYXJlYVwiLFxuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZvbnRcIixcbiAgICBcImJyXCIsXG4gICAgXCJjb2xcIixcbiAgICBcImNvbW1hbmRcIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJcIixcbiAgICBcImltZ1wiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImlzaW5kZXhcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGlua1wiLFxuICAgIFwibWV0YVwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInNvdXJjZVwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcIndiclwiLFxuXSk7XG4vKipcbiAqIFJlbmRlcnMgYSBET00gbm9kZSBvciBhbiBhcnJheSBvZiBET00gbm9kZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQ2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIGBvdXRlckhUTUxgIG9mIHRoZSBwYXNzZWQgbm9kZShzKS5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGJlIHJlbmRlcmVkLlxuICogQHBhcmFtIG9wdGlvbnMgQ2hhbmdlcyBzZXJpYWxpemF0aW9uIGJlaGF2aW9yXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcihub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgbm9kZXMgPSBcImxlbmd0aFwiIGluIG5vZGUgPyBub2RlIDogW25vZGVdO1xuICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0ICs9IHJlbmRlck5vZGUobm9kZXNbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcmVuZGVyO1xuZnVuY3Rpb24gcmVuZGVyTm9kZShub2RlLCBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Sb290OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5EaXJlY3RpdmU6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuRG9jdHlwZTpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJEaXJlY3RpdmUobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuQ29tbWVudDpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJDb21tZW50KG5vZGUpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkNEQVRBOlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNkYXRhKG5vZGUpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlNjcmlwdDpcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5TdHlsZTpcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5UYWc6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGFnKG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlRleHQ6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGV4dChub2RlLCBvcHRpb25zKTtcbiAgICB9XG59XG52YXIgZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cyA9IG5ldyBTZXQoW1xuICAgIFwibWlcIixcbiAgICBcIm1vXCIsXG4gICAgXCJtblwiLFxuICAgIFwibXNcIixcbiAgICBcIm10ZXh0XCIsXG4gICAgXCJhbm5vdGF0aW9uLXhtbFwiLFxuICAgIFwiZm9yZWlnbk9iamVjdFwiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwidGl0bGVcIixcbl0pO1xudmFyIGZvcmVpZ25FbGVtZW50cyA9IG5ldyBTZXQoW1wic3ZnXCIsIFwibWF0aFwiXSk7XG5mdW5jdGlvbiByZW5kZXJUYWcoZWxlbSwgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICAvLyBIYW5kbGUgU1ZHIC8gTWF0aE1MIGluIEhUTUxcbiAgICBpZiAob3B0cy54bWxNb2RlID09PSBcImZvcmVpZ25cIikge1xuICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBlbGVtZW50IG5hbWVzICovXG4gICAgICAgIGVsZW0ubmFtZSA9IChfYSA9IGZvcmVpZ25OYW1lc18xLmVsZW1lbnROYW1lcy5nZXQoZWxlbS5uYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZWxlbS5uYW1lO1xuICAgICAgICAvKiBFeGl0IGZvcmVpZ24gbW9kZSBhdCBpbnRlZ3JhdGlvbiBwb2ludHMgKi9cbiAgICAgICAgaWYgKGVsZW0ucGFyZW50ICYmXG4gICAgICAgICAgICBmb3JlaWduTW9kZUludGVncmF0aW9uUG9pbnRzLmhhcyhlbGVtLnBhcmVudC5uYW1lKSkge1xuICAgICAgICAgICAgb3B0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRzKSwgeyB4bWxNb2RlOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW9wdHMueG1sTW9kZSAmJiBmb3JlaWduRWxlbWVudHMuaGFzKGVsZW0ubmFtZSkpIHtcbiAgICAgICAgb3B0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRzKSwgeyB4bWxNb2RlOiBcImZvcmVpZ25cIiB9KTtcbiAgICB9XG4gICAgdmFyIHRhZyA9IFwiPFwiICsgZWxlbS5uYW1lO1xuICAgIHZhciBhdHRyaWJzID0gZm9ybWF0QXR0cmlidXRlcyhlbGVtLmF0dHJpYnMsIG9wdHMpO1xuICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgIHRhZyArPSBcIiBcIiArIGF0dHJpYnM7XG4gICAgfVxuICAgIGlmIChlbGVtLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAob3B0cy54bWxNb2RlXG4gICAgICAgICAgICA/IC8vIEluIFhNTCBtb2RlIG9yIGZvcmVpZ24gbW9kZSwgYW5kIHVzZXIgaGFzbid0IGV4cGxpY2l0bHkgdHVybmVkIG9mZiBzZWxmLWNsb3NpbmcgdGFnc1xuICAgICAgICAgICAgICAgIG9wdHMuc2VsZkNsb3NpbmdUYWdzICE9PSBmYWxzZVxuICAgICAgICAgICAgOiAvLyBVc2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHNlbGYtY2xvc2luZyB0YWdzLCBldmVuIGluIEhUTUwgbW9kZVxuICAgICAgICAgICAgICAgIG9wdHMuc2VsZkNsb3NpbmdUYWdzICYmIHNpbmdsZVRhZy5oYXMoZWxlbS5uYW1lKSkpIHtcbiAgICAgICAgaWYgKCFvcHRzLnhtbE1vZGUpXG4gICAgICAgICAgICB0YWcgKz0gXCIgXCI7XG4gICAgICAgIHRhZyArPSBcIi8+XCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YWcgKz0gXCI+XCI7XG4gICAgICAgIGlmIChlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRhZyArPSByZW5kZXIoZWxlbS5jaGlsZHJlbiwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMueG1sTW9kZSB8fCAhc2luZ2xlVGFnLmhhcyhlbGVtLm5hbWUpKSB7XG4gICAgICAgICAgICB0YWcgKz0gXCI8L1wiICsgZWxlbS5uYW1lICsgXCI+XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIHJlbmRlckRpcmVjdGl2ZShlbGVtKSB7XG4gICAgcmV0dXJuIFwiPFwiICsgZWxlbS5kYXRhICsgXCI+XCI7XG59XG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW0sIG9wdHMpIHtcbiAgICB2YXIgZGF0YSA9IGVsZW0uZGF0YSB8fCBcIlwiO1xuICAgIC8vIElmIGVudGl0aWVzIHdlcmVuJ3QgZGVjb2RlZCwgbm8gbmVlZCB0byBlbmNvZGUgdGhlbSBiYWNrXG4gICAgaWYgKG9wdHMuZGVjb2RlRW50aXRpZXMgIT09IGZhbHNlICYmXG4gICAgICAgICEoIW9wdHMueG1sTW9kZSAmJlxuICAgICAgICAgICAgZWxlbS5wYXJlbnQgJiZcbiAgICAgICAgICAgIHVuZW5jb2RlZEVsZW1lbnRzLmhhcyhlbGVtLnBhcmVudC5uYW1lKSkpIHtcbiAgICAgICAgZGF0YSA9IGVudGl0aWVzXzEuZW5jb2RlWE1MKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNkYXRhKGVsZW0pIHtcbiAgICByZXR1cm4gXCI8IVtDREFUQVtcIiArIGVsZW0uY2hpbGRyZW5bMF0uZGF0YSArIFwiXV0+XCI7XG59XG5mdW5jdGlvbiByZW5kZXJDb21tZW50KGVsZW0pIHtcbiAgICByZXR1cm4gXCI8IS0tXCIgKyBlbGVtLmRhdGEgKyBcIi0tPlwiO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZUhUTUwgPSBleHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZVhNTCA9IHZvaWQgMDtcbnZhciBlbnRpdGllc19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9lbnRpdGllcy5qc29uXCIpKTtcbnZhciBsZWdhY3lfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvbGVnYWN5Lmpzb25cIikpO1xudmFyIHhtbF9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy94bWwuanNvblwiKSk7XG52YXIgZGVjb2RlX2NvZGVwb2ludF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2RlY29kZV9jb2RlcG9pbnRcIikpO1xudmFyIHN0cmljdEVudGl0eVJlID0gLyYoPzpbYS16QS1aMC05XSt8I1t4WF1bXFxkYS1mQS1GXSt8I1xcZCspOy9nO1xuZXhwb3J0cy5kZWNvZGVYTUwgPSBnZXRTdHJpY3REZWNvZGVyKHhtbF9qc29uXzEuZGVmYXVsdCk7XG5leHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBnZXRTdHJpY3REZWNvZGVyKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbmZ1bmN0aW9uIGdldFN0cmljdERlY29kZXIobWFwKSB7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihtYXApO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHN0cmljdEVudGl0eVJlLCByZXBsYWNlKTsgfTtcbn1cbnZhciBzb3J0ZXIgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKGEgPCBiID8gMSA6IC0xKTsgfTtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxlZ2FjeSA9IE9iamVjdC5rZXlzKGxlZ2FjeV9qc29uXzEuZGVmYXVsdCkuc29ydChzb3J0ZXIpO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsZWdhY3lbal0gPT09IGtleXNbaV0pIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7P1wiO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjtcIjtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiJig/OlwiICsga2V5cy5qb2luKFwifFwiKSArIFwifCNbeFhdW1xcXFxkYS1mQS1GXSs7P3wjXFxcXGQrOz8pXCIsIFwiZ1wiKTtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbiAgICBmdW5jdGlvbiByZXBsYWNlcihzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5zdWJzdHIoLTEpICE9PSBcIjtcIilcbiAgICAgICAgICAgIHN0ciArPSBcIjtcIjtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2Uoc3RyKTtcbiAgICB9XG4gICAgLy8gVE9ETyBjb25zaWRlciBjcmVhdGluZyBhIG1lcmdlZCBtYXBcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZXIpOyB9O1xufSkoKTtcbmZ1bmN0aW9uIGdldFJlcGxhY2VyKG1hcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICAgICAgICBpZiAoc3RyLmNoYXJBdCgxKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIHZhciBzZWNvbmRDaGFyID0gc3RyLmNoYXJBdCgyKTtcbiAgICAgICAgICAgIGlmIChzZWNvbmRDaGFyID09PSBcIlhcIiB8fCBzZWNvbmRDaGFyID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZUludChzdHIuc3Vic3RyKDMpLCAxNikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY29kZV9jb2RlcG9pbnRfMS5kZWZhdWx0KHBhcnNlSW50KHN0ci5zdWJzdHIoMiksIDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgIHJldHVybiBtYXBbc3RyLnNsaWNlKDEsIC0xKV0gfHwgc3RyO1xuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZGVjb2RlLmpzb25cIikpO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL2hlL2Jsb2IvbWFzdGVyL3NyYy9oZS5qcyNMOTQtTDExOVxudmFyIGZyb21Db2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcuZnJvbUNvZGVQb2ludCB8fFxuICAgIGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweGZmZmYpIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZV9qc29uXzEuZGVmYXVsdCkge1xuICAgICAgICBjb2RlUG9pbnQgPSBkZWNvZGVfanNvbl8xLmRlZmF1bHRbY29kZVBvaW50XTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlY29kZUNvZGVQb2ludDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc2NhcGVVVEY4ID0gZXhwb3J0cy5lc2NhcGUgPSBleHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTCA9IGV4cG9ydHMuZW5jb2RlWE1MID0gdm9pZCAwO1xudmFyIHhtbF9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy94bWwuanNvblwiKSk7XG52YXIgaW52ZXJzZVhNTCA9IGdldEludmVyc2VPYmooeG1sX2pzb25fMS5kZWZhdWx0KTtcbnZhciB4bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gWE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgWE1MIGVudGl0aWVzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYVxuICogbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnRzLmVuY29kZVhNTCA9IGdldEFTQ0lJRW5jb2RlcihpbnZlcnNlWE1MKTtcbnZhciBlbnRpdGllc19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9lbnRpdGllcy5qc29uXCIpKTtcbnZhciBpbnZlcnNlSFRNTCA9IGdldEludmVyc2VPYmooZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xudmFyIGh0bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlSFRNTCk7XG4vKipcbiAqIEVuY29kZXMgYWxsIGVudGl0aWVzIGFuZCBub24tQVNDSUkgY2hhcmFjdGVycyBpbiB0aGUgaW5wdXQuXG4gKlxuICogVGhpcyBpbmNsdWRlcyBjaGFyYWN0ZXJzIHRoYXQgYXJlIHZhbGlkIEFTQ0lJIGNoYXJhY3RlcnMgaW4gSFRNTCBkb2N1bWVudHMuXG4gKiBGb3IgZXhhbXBsZSBgI2Agd2lsbCBiZSBlbmNvZGVkIGFzIGAmbnVtO2AuIFRvIGdldCBhIG1vcmUgY29tcGFjdCBvdXRwdXQsXG4gKiBjb25zaWRlciB1c2luZyB0aGUgYGVuY29kZU5vbkFzY2lpSFRNTGAgZnVuY3Rpb24uXG4gKlxuICogSWYgYSBjaGFyYWN0ZXIgaGFzIG5vIGVxdWl2YWxlbnQgZW50aXR5LCBhXG4gKiBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZSAoZWcuIGAmI3hmYztgKSB3aWxsIGJlIHVzZWQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlSFRNTCA9IGdldEludmVyc2UoaW52ZXJzZUhUTUwsIGh0bWxSZXBsYWNlcik7XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIEhUTUxcbiAqIGRvY3VtZW50cyB1c2luZyBIVE1MIGVudGl0aWVzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYVxuICogbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGdldEFTQ0lJRW5jb2RlcihpbnZlcnNlSFRNTCk7XG5mdW5jdGlvbiBnZXRJbnZlcnNlT2JqKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoaW52ZXJzZSwgbmFtZSkge1xuICAgICAgICBpbnZlcnNlW29ialtuYW1lXV0gPSBcIiZcIiArIG5hbWUgKyBcIjtcIjtcbiAgICAgICAgcmV0dXJuIGludmVyc2U7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2UpIHtcbiAgICB2YXIgc2luZ2xlID0gW107XG4gICAgdmFyIG11bHRpcGxlID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGludmVyc2UpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgayA9IF9hW19pXTtcbiAgICAgICAgaWYgKGsubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmFsdWUgdG8gc2luZ2xlIGFycmF5XG4gICAgICAgICAgICBzaW5nbGUucHVzaChcIlxcXFxcIiArIGspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQWRkIHZhbHVlIHRvIG11bHRpcGxlIGFycmF5XG4gICAgICAgICAgICBtdWx0aXBsZS5wdXNoKGspO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZCByYW5nZXMgdG8gc2luZ2xlIGNoYXJhY3RlcnMuXG4gICAgc2luZ2xlLnNvcnQoKTtcbiAgICBmb3IgKHZhciBzdGFydCA9IDA7IHN0YXJ0IDwgc2luZ2xlLmxlbmd0aCAtIDE7IHN0YXJ0KyspIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZW5kIG9mIGEgcnVuIG9mIGNoYXJhY3RlcnNcbiAgICAgICAgdmFyIGVuZCA9IHN0YXJ0O1xuICAgICAgICB3aGlsZSAoZW5kIDwgc2luZ2xlLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgIHNpbmdsZVtlbmRdLmNoYXJDb2RlQXQoMSkgKyAxID09PSBzaW5nbGVbZW5kICsgMV0uY2hhckNvZGVBdCgxKSkge1xuICAgICAgICAgICAgZW5kICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvdW50ID0gMSArIGVuZCAtIHN0YXJ0O1xuICAgICAgICAvLyBXZSB3YW50IHRvIHJlcGxhY2UgYXQgbGVhc3QgdGhyZWUgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoY291bnQgPCAzKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHNpbmdsZS5zcGxpY2Uoc3RhcnQsIGNvdW50LCBzaW5nbGVbc3RhcnRdICsgXCItXCIgKyBzaW5nbGVbZW5kXSk7XG4gICAgfVxuICAgIG11bHRpcGxlLnVuc2hpZnQoXCJbXCIgKyBzaW5nbGUuam9pbihcIlwiKSArIFwiXVwiKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChtdWx0aXBsZS5qb2luKFwifFwiKSwgXCJnXCIpO1xufVxuLy8gL1teXFwwLVxceDdGXS9ndVxudmFyIHJlTm9uQVNDSUkgPSAvKD86W1xceDgwLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2c7XG52YXIgZ2V0Q29kZVBvaW50ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdCAhPSBudWxsXG4gICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIuY29kZVBvaW50QXQoMCk7IH1cbiAgICA6IC8vIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG4gICAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gKGMuY2hhckNvZGVBdCgwKSAtIDB4ZDgwMCkgKiAweDQwMCArXG4gICAgICAgICAgICAgICAgYy5jaGFyQ29kZUF0KDEpIC1cbiAgICAgICAgICAgICAgICAweGRjMDAgK1xuICAgICAgICAgICAgICAgIDB4MTAwMDA7XG4gICAgICAgIH07XG5mdW5jdGlvbiBzaW5nbGVDaGFyUmVwbGFjZXIoYykge1xuICAgIHJldHVybiBcIiYjeFwiICsgKGMubGVuZ3RoID4gMSA/IGdldENvZGVQb2ludChjKSA6IGMuY2hhckNvZGVBdCgwKSlcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZShpbnZlcnNlLCByZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBpbnZlcnNlW25hbWVdOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UocmVOb25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbiAgICB9O1xufVxudmFyIHJlRXNjYXBlQ2hhcnMgPSBuZXcgUmVnRXhwKHhtbFJlcGxhY2VyLnNvdXJjZSArIFwifFwiICsgcmVOb25BU0NJSS5zb3VyY2UsIFwiZ1wiKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gWE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkuXG4gKlxuICogSGF2ZSBhIGxvb2sgYXQgYGVzY2FwZVVURjhgIGlmIHlvdSB3YW50IGEgbW9yZSBjb25jaXNlIG91dHB1dCBhdCB0aGUgZXhwZW5zZVxuICogb2YgcmVkdWNlZCB0cmFuc3BvcnRhYmlsaXR5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZShyZUVzY2FwZUNoYXJzLCBzaW5nbGVDaGFyUmVwbGFjZXIpO1xufVxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGU7XG4vKipcbiAqIEVuY29kZXMgYWxsIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTCBkb2N1bWVudHMgdXNpbmcgbnVtZXJpYyBoZXhhZGVjaW1hbFxuICogcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgb3V0cHV0IHdpbGwgYmUgY2hhcmFjdGVyLXNldCBkZXBlbmRlbnQuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVVRGOChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSh4bWxSZXBsYWNlciwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cbmV4cG9ydHMuZXNjYXBlVVRGOCA9IGVzY2FwZVVURjg7XG5mdW5jdGlvbiBnZXRBU0NJSUVuY29kZXIob2JqKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnJlcGxhY2UocmVFc2NhcGVDaGFycywgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG9ialtjXSB8fCBzaW5nbGVDaGFyUmVwbGFjZXIoYyk7IH0pO1xuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlWE1MU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNVN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTDRTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUw1ID0gZXhwb3J0cy5kZWNvZGVIVE1MNCA9IGV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTCA9IGV4cG9ydHMuZGVjb2RlWE1MID0gZXhwb3J0cy5lbmNvZGVIVE1MNSA9IGV4cG9ydHMuZW5jb2RlSFRNTDQgPSBleHBvcnRzLmVzY2FwZVVURjggPSBleHBvcnRzLmVzY2FwZSA9IGV4cG9ydHMuZW5jb2RlTm9uQXNjaWlIVE1MID0gZXhwb3J0cy5lbmNvZGVIVE1MID0gZXhwb3J0cy5lbmNvZGVYTUwgPSBleHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuZGVjb2RlU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGUgPSB2b2lkIDA7XG52YXIgZGVjb2RlXzEgPSByZXF1aXJlKFwiLi9kZWNvZGVcIik7XG52YXIgZW5jb2RlXzEgPSByZXF1aXJlKFwiLi9lbmNvZGVcIik7XG4vKipcbiAqIERlY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZGVjb2RlLlxuICogQHBhcmFtIGxldmVsIE9wdGlvbmFsIGxldmVsIHRvIGRlY29kZSBhdC4gMCA9IFhNTCwgMSA9IEhUTUwuIERlZmF1bHQgaXMgMC5cbiAqIEBkZXByZWNhdGVkIFVzZSBgZGVjb2RlWE1MYCBvciBgZGVjb2RlSFRNTGAgZGlyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShkYXRhLCBsZXZlbCkge1xuICAgIHJldHVybiAoIWxldmVsIHx8IGxldmVsIDw9IDAgPyBkZWNvZGVfMS5kZWNvZGVYTUwgOiBkZWNvZGVfMS5kZWNvZGVIVE1MKShkYXRhKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuLyoqXG4gKiBEZWNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuIERvZXMgbm90IGFsbG93IG1pc3NpbmcgdHJhaWxpbmcgc2VtaWNvbG9ucyBmb3IgZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBsZXZlbCBPcHRpb25hbCBsZXZlbCB0byBkZWNvZGUgYXQuIDAgPSBYTUwsIDEgPSBIVE1MLiBEZWZhdWx0IGlzIDAuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGRlY29kZUhUTUxTdHJpY3RgIG9yIGBkZWNvZGVYTUxgIGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiBkZWNvZGVTdHJpY3QoZGF0YSwgbGV2ZWwpIHtcbiAgICByZXR1cm4gKCFsZXZlbCB8fCBsZXZlbCA8PSAwID8gZGVjb2RlXzEuZGVjb2RlWE1MIDogZGVjb2RlXzEuZGVjb2RlSFRNTFN0cmljdCkoZGF0YSk7XG59XG5leHBvcnRzLmRlY29kZVN0cmljdCA9IGRlY29kZVN0cmljdDtcbi8qKlxuICogRW5jb2RlcyBhIHN0cmluZyB3aXRoIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlbmNvZGUuXG4gKiBAcGFyYW0gbGV2ZWwgT3B0aW9uYWwgbGV2ZWwgdG8gZW5jb2RlIGF0LiAwID0gWE1MLCAxID0gSFRNTC4gRGVmYXVsdCBpcyAwLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBlbmNvZGVIVE1MYCwgYGVuY29kZVhNTGAgb3IgYGVuY29kZU5vbkFzY2lpSFRNTGAgZGlyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShkYXRhLCBsZXZlbCkge1xuICAgIHJldHVybiAoIWxldmVsIHx8IGxldmVsIDw9IDAgPyBlbmNvZGVfMS5lbmNvZGVYTUwgOiBlbmNvZGVfMS5lbmNvZGVIVE1MKShkYXRhKTtcbn1cbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xudmFyIGVuY29kZV8yID0gcmVxdWlyZShcIi4vZW5jb2RlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlWE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lbmNvZGVYTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVIVE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lbmNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlTm9uQXNjaWlIVE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lbmNvZGVOb25Bc2NpaUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVzY2FwZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVzY2FwZVVURjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVzY2FwZVVURjg7IH0gfSk7XG4vLyBMZWdhY3kgYWxpYXNlcyAoZGVwcmVjYXRlZClcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZUhUTUw0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lbmNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlSFRNTDVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVuY29kZUhUTUw7IH0gfSk7XG52YXIgZGVjb2RlXzIgPSByZXF1aXJlKFwiLi9kZWNvZGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVYTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZVhNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MU3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0OyB9IH0pO1xuLy8gTGVnYWN5IGFsaWFzZXMgKGRlcHJlY2F0ZWQpXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw1XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDRTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUxTdHJpY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNVN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVhNTFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlWE1MOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvY3R5cGUgPSBleHBvcnRzLkNEQVRBID0gZXhwb3J0cy5UYWcgPSBleHBvcnRzLlN0eWxlID0gZXhwb3J0cy5TY3JpcHQgPSBleHBvcnRzLkNvbW1lbnQgPSBleHBvcnRzLkRpcmVjdGl2ZSA9IGV4cG9ydHMuVGV4dCA9IGV4cG9ydHMuUm9vdCA9IGV4cG9ydHMuaXNUYWcgPSBleHBvcnRzLkVsZW1lbnRUeXBlID0gdm9pZCAwO1xuLyoqIFR5cGVzIG9mIGVsZW1lbnRzIGZvdW5kIGluIGh0bWxwYXJzZXIyJ3MgRE9NICovXG52YXIgRWxlbWVudFR5cGU7XG4oZnVuY3Rpb24gKEVsZW1lbnRUeXBlKSB7XG4gICAgLyoqIFR5cGUgZm9yIHRoZSByb290IGVsZW1lbnQgb2YgYSBkb2N1bWVudCAqL1xuICAgIEVsZW1lbnRUeXBlW1wiUm9vdFwiXSA9IFwicm9vdFwiO1xuICAgIC8qKiBUeXBlIGZvciBUZXh0ICovXG4gICAgRWxlbWVudFR5cGVbXCJUZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgLyoqIFR5cGUgZm9yIDw/IC4uLiA/PiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiRGlyZWN0aXZlXCJdID0gXCJkaXJlY3RpdmVcIjtcbiAgICAvKiogVHlwZSBmb3IgPCEtLSAuLi4gLS0+ICovXG4gICAgRWxlbWVudFR5cGVbXCJDb21tZW50XCJdID0gXCJjb21tZW50XCI7XG4gICAgLyoqIFR5cGUgZm9yIDxzY3JpcHQ+IHRhZ3MgKi9cbiAgICBFbGVtZW50VHlwZVtcIlNjcmlwdFwiXSA9IFwic2NyaXB0XCI7XG4gICAgLyoqIFR5cGUgZm9yIDxzdHlsZT4gdGFncyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiU3R5bGVcIl0gPSBcInN0eWxlXCI7XG4gICAgLyoqIFR5cGUgZm9yIEFueSB0YWcgKi9cbiAgICBFbGVtZW50VHlwZVtcIlRhZ1wiXSA9IFwidGFnXCI7XG4gICAgLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG4gICAgRWxlbWVudFR5cGVbXCJDREFUQVwiXSA9IFwiY2RhdGFcIjtcbiAgICAvKiogVHlwZSBmb3IgPCFkb2N0eXBlIC4uLj4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkRvY3R5cGVcIl0gPSBcImRvY3R5cGVcIjtcbn0pKEVsZW1lbnRUeXBlID0gZXhwb3J0cy5FbGVtZW50VHlwZSB8fCAoZXhwb3J0cy5FbGVtZW50VHlwZSA9IHt9KSk7XG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgYW4gZWxlbWVudCBpcyBhIHRhZyBvciBub3QuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byB0ZXN0XG4gKi9cbmZ1bmN0aW9uIGlzVGFnKGVsZW0pIHtcbiAgICByZXR1cm4gKGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuVGFnIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU2NyaXB0IHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gRWxlbWVudFR5cGUuU3R5bGUpO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8qKiBUeXBlIGZvciB0aGUgcm9vdCBlbGVtZW50IG9mIGEgZG9jdW1lbnQgKi9cbmV4cG9ydHMuUm9vdCA9IEVsZW1lbnRUeXBlLlJvb3Q7XG4vKiogVHlwZSBmb3IgVGV4dCAqL1xuZXhwb3J0cy5UZXh0ID0gRWxlbWVudFR5cGUuVGV4dDtcbi8qKiBUeXBlIGZvciA8PyAuLi4gPz4gKi9cbmV4cG9ydHMuRGlyZWN0aXZlID0gRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0cy5Db21tZW50ID0gRWxlbWVudFR5cGUuQ29tbWVudDtcbi8qKiBUeXBlIGZvciA8c2NyaXB0PiB0YWdzICovXG5leHBvcnRzLlNjcmlwdCA9IEVsZW1lbnRUeXBlLlNjcmlwdDtcbi8qKiBUeXBlIGZvciA8c3R5bGU+IHRhZ3MgKi9cbmV4cG9ydHMuU3R5bGUgPSBFbGVtZW50VHlwZS5TdHlsZTtcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnRzLlRhZyA9IEVsZW1lbnRUeXBlLlRhZztcbi8qKiBUeXBlIGZvciA8IVtDREFUQVsgLi4uIF1dPiAqL1xuZXhwb3J0cy5DREFUQSA9IEVsZW1lbnRUeXBlLkNEQVRBO1xuLyoqIFR5cGUgZm9yIDwhZG9jdHlwZSAuLi4+ICovXG5leHBvcnRzLkRvY3R5cGUgPSBFbGVtZW50VHlwZS5Eb2N0eXBlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRG9tSGFuZGxlciA9IHZvaWQgMDtcbnZhciBkb21lbGVtZW50dHlwZV8xID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xudmFyIG5vZGVfMSA9IHJlcXVpcmUoXCIuL25vZGVcIik7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbm9kZVwiKSwgZXhwb3J0cyk7XG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccysvZztcbi8vIERlZmF1bHQgb3B0aW9uc1xudmFyIGRlZmF1bHRPcHRzID0ge1xuICAgIG5vcm1hbGl6ZVdoaXRlc3BhY2U6IGZhbHNlLFxuICAgIHdpdGhTdGFydEluZGljZXM6IGZhbHNlLFxuICAgIHdpdGhFbmRJbmRpY2VzOiBmYWxzZSxcbiAgICB4bWxNb2RlOiBmYWxzZSxcbn07XG52YXIgRG9tSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQ2FsbGVkIG9uY2UgcGFyc2luZyBoYXMgY29tcGxldGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFNldHRpbmdzIGZvciB0aGUgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gZWxlbWVudENCIENhbGxiYWNrIHdoZW5ldmVyIGEgdGFnIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEb21IYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zLCBlbGVtZW50Q0IpIHtcbiAgICAgICAgLyoqIFRoZSBlbGVtZW50cyBvZiB0aGUgRE9NICovXG4gICAgICAgIHRoaXMuZG9tID0gW107XG4gICAgICAgIC8qKiBUaGUgcm9vdCBlbGVtZW50IGZvciB0aGUgRE9NICovXG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBub2RlXzEuRG9jdW1lbnQodGhpcy5kb20pO1xuICAgICAgICAvKiogSW5kaWNhdGVkIHdoZXRoZXIgcGFyc2luZyBoYXMgYmVlbiBjb21wbGV0ZWQuICovXG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICAvKiogU3RhY2sgb2Ygb3BlbiB0YWdzLiAqL1xuICAgICAgICB0aGlzLnRhZ1N0YWNrID0gW3RoaXMucm9vdF07XG4gICAgICAgIC8qKiBBIGRhdGEgbm9kZSB0aGF0IGlzIHN0aWxsIGJlaW5nIHdyaXR0ZW4gdG8uICovXG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICAvKiogUmVmZXJlbmNlIHRvIHRoZSBwYXJzZXIgaW5zdGFuY2UuIFVzZWQgZm9yIGxvY2F0aW9uIGluZm9ybWF0aW9uLiAqL1xuICAgICAgICB0aGlzLnBhcnNlciA9IG51bGw7XG4gICAgICAgIC8vIE1ha2UgaXQgcG9zc2libGUgdG8gc2tpcCBhcmd1bWVudHMsIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgZWxlbWVudENCID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gY2FsbGJhY2s7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2sgIT09IG51bGwgJiYgY2FsbGJhY2sgIT09IHZvaWQgMCA/IGNhbGxiYWNrIDogbnVsbDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDogZGVmYXVsdE9wdHM7XG4gICAgICAgIHRoaXMuZWxlbWVudENCID0gZWxlbWVudENCICE9PSBudWxsICYmIGVsZW1lbnRDQiAhPT0gdm9pZCAwID8gZWxlbWVudENCIDogbnVsbDtcbiAgICB9XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25wYXJzZXJpbml0ID0gZnVuY3Rpb24gKHBhcnNlcikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB9O1xuICAgIC8vIFJlc2V0cyB0aGUgaGFuZGxlciBiYWNrIHRvIHN0YXJ0aW5nIHN0YXRlXG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgdGhpcy5yb290ID0gbmV3IG5vZGVfMS5Eb2N1bWVudCh0aGlzLmRvbSk7XG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRhZ1N0YWNrID0gW3RoaXMucm9vdF07XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICB0aGlzLnBhcnNlciA9IG51bGw7XG4gICAgfTtcbiAgICAvLyBTaWduYWxzIHRoZSBoYW5kbGVyIHRoYXQgcGFyc2luZyBpcyBkb25lXG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRvbmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5oYW5kbGVDYWxsYmFjayhudWxsKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDYWxsYmFjayhlcnJvcik7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICAgICAgdmFyIGVsZW0gPSB0aGlzLnRhZ1N0YWNrLnBvcCgpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICBlbGVtLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudENCKVxuICAgICAgICAgICAgdGhpcy5lbGVtZW50Q0IoZWxlbSk7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbm9wZW50YWcgPSBmdW5jdGlvbiAobmFtZSwgYXR0cmlicykge1xuICAgICAgICB2YXIgdHlwZSA9IHRoaXMub3B0aW9ucy54bWxNb2RlID8gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UYWcgOiB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbmV3IG5vZGVfMS5FbGVtZW50KG5hbWUsIGF0dHJpYnMsIHVuZGVmaW5lZCwgdHlwZSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShlbGVtZW50KTtcbiAgICAgICAgdGhpcy50YWdTdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub250ZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZVdoaXRlc3BhY2UgPSB0aGlzLm9wdGlvbnMubm9ybWFsaXplV2hpdGVzcGFjZTtcbiAgICAgICAgdmFyIGxhc3ROb2RlID0gdGhpcy5sYXN0Tm9kZTtcbiAgICAgICAgaWYgKGxhc3ROb2RlICYmIGxhc3ROb2RlLnR5cGUgPT09IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuVGV4dCkge1xuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZVdoaXRlc3BhY2UpIHtcbiAgICAgICAgICAgICAgICBsYXN0Tm9kZS5kYXRhID0gKGxhc3ROb2RlLmRhdGEgKyBkYXRhKS5yZXBsYWNlKHJlV2hpdGVzcGFjZSwgXCIgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFzdE5vZGUuZGF0YSArPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53aXRoRW5kSW5kaWNlcykge1xuICAgICAgICAgICAgICAgIGxhc3ROb2RlLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UocmVXaGl0ZXNwYWNlLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBub2RlXzEuVGV4dChkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Tm9kZSAmJiB0aGlzLmxhc3ROb2RlLnR5cGUgPT09IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ29tbWVudCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Tm9kZS5kYXRhICs9IGRhdGE7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGUgPSBuZXcgbm9kZV8xLkNvbW1lbnQoZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGV4dCA9IG5ldyBub2RlXzEuVGV4dChcIlwiKTtcbiAgICAgICAgdmFyIG5vZGUgPSBuZXcgbm9kZV8xLk5vZGVXaXRoQ2hpbGRyZW4oZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5DREFUQSwgW3RleHRdKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICB0ZXh0LnBhcmVudCA9IG5vZGU7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSB0ZXh0O1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YWVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yLCB0aGlzLmRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMudGFnU3RhY2tbdGhpcy50YWdTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aFN0YXJ0SW5kaWNlcykge1xuICAgICAgICAgICAgbm9kZS5zdGFydEluZGV4ID0gdGhpcy5wYXJzZXIuc3RhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIHByZXZpb3VzU2libGluZy5uZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gRG9tSGFuZGxlcjtcbn0oKSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSBEb21IYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gRG9tSGFuZGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsb25lTm9kZSA9IGV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzRG9jdW1lbnQgPSBleHBvcnRzLmlzRGlyZWN0aXZlID0gZXhwb3J0cy5pc0NvbW1lbnQgPSBleHBvcnRzLmlzVGV4dCA9IGV4cG9ydHMuaXNDREFUQSA9IGV4cG9ydHMuaXNUYWcgPSBleHBvcnRzLkVsZW1lbnQgPSBleHBvcnRzLkRvY3VtZW50ID0gZXhwb3J0cy5Ob2RlV2l0aENoaWxkcmVuID0gZXhwb3J0cy5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBleHBvcnRzLkNvbW1lbnQgPSBleHBvcnRzLlRleHQgPSBleHBvcnRzLkRhdGFOb2RlID0gZXhwb3J0cy5Ob2RlID0gdm9pZCAwO1xudmFyIGRvbWVsZW1lbnR0eXBlXzEgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIik7XG52YXIgbm9kZVR5cGVzID0gbmV3IE1hcChbXG4gICAgW2RvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuVGFnLCAxXSxcbiAgICBbZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5TY3JpcHQsIDFdLFxuICAgIFtkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlN0eWxlLCAxXSxcbiAgICBbZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5EaXJlY3RpdmUsIDFdLFxuICAgIFtkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRleHQsIDNdLFxuICAgIFtkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLkNEQVRBLCA0XSxcbiAgICBbZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Db21tZW50LCA4XSxcbiAgICBbZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290LCA5XSxcbl0pO1xuLyoqXG4gKiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4gKiBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxuICovXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGUodHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAvKiogUGFyZW50IG9mIHRoZSBub2RlICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFByZXZpb3VzIHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIE5leHQgc2libGluZyAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aFN0YXJ0SW5kaWNlc2Agb24gdGhlIGhhbmRsZXIgdG8gYmUgYHRydWUuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aEVuZEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm5vZGVUeXBlXCIsIHtcbiAgICAgICAgLy8gUmVhZC1vbmx5IGFsaWFzZXNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1ub2RldHlwZSktY29tcGF0aWJsZVxuICAgICAgICAgKiBub2RlIHtAbGluayB0eXBlfS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIChfYSA9IG5vZGVUeXBlcy5nZXQodGhpcy50eXBlKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJwYXJlbnROb2RlXCIsIHtcbiAgICAgICAgLy8gUmVhZC13cml0ZSBhbGlhc2VzIGZvciBwcm9wZXJ0aWVzXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBwYXJlbnR9LlxuICAgICAgICAgKiBbRE9NIHNwZWNdKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZyktY29tcGF0aWJsZSBhbGlhcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInByZXZpb3VzU2libGluZ1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBwcmV2fS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByZXY7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgICAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwibmV4dFNpYmxpbmdcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2FtZSBhcyB7QGxpbmsgbmV4dH0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhpcyBub2RlLCBhbmQgb3B0aW9uYWxseSBpdHMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gICAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGUgPSBmdW5jdGlvbiAocmVjdXJzaXZlKSB7XG4gICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gY2xvbmVOb2RlKHRoaXMsIHJlY3Vyc2l2ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm9kZTtcbn0oKSk7XG5leHBvcnRzLk5vZGUgPSBOb2RlO1xuLyoqXG4gKiBBIG5vZGUgdGhhdCBjb250YWlucyBzb21lIGRhdGEuXG4gKi9cbnZhciBEYXRhTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF0YU5vZGUsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIG5vZGVcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgY29udGVudCBvZiB0aGUgZGF0YSBub2RlXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGF0YU5vZGUodHlwZSwgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB0eXBlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YU5vZGUucHJvdG90eXBlLCBcIm5vZGVWYWx1ZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBkYXRhfS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRGF0YU5vZGU7XG59KE5vZGUpKTtcbmV4cG9ydHMuRGF0YU5vZGUgPSBEYXRhTm9kZTtcbi8qKlxuICogVGV4dCB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuVGV4dCwgZGF0YSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFRleHQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLlRleHQgPSBUZXh0O1xuLyoqXG4gKiBDb21tZW50cyB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgQ29tbWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tbWVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21tZW50KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ29tbWVudCwgZGF0YSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvbW1lbnQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xuLyoqXG4gKiBQcm9jZXNzaW5nIGluc3RydWN0aW9ucywgaW5jbHVkaW5nIGRvYyB0eXBlcy5cbiAqL1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuRGlyZWN0aXZlLCBkYXRhKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xufShEYXRhTm9kZSkpO1xuZXhwb3J0cy5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4vKipcbiAqIEEgYE5vZGVgIHRoYXQgY2FuIGhhdmUgY2hpbGRyZW4uXG4gKi9cbnZhciBOb2RlV2l0aENoaWxkcmVuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb2RlV2l0aENoaWxkcmVuLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdGhlIG5vZGUuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLiBPbmx5IGNlcnRhaW4gbm9kZSB0eXBlcyBjYW4gaGF2ZSBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBOb2RlV2l0aENoaWxkcmVuKHR5cGUsIGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLCBcImZpcnN0Q2hpbGRcIiwge1xuICAgICAgICAvLyBBbGlhc2VzXG4gICAgICAgIC8qKiBGaXJzdCBjaGlsZCBvZiB0aGUgbm9kZS4gKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5jaGlsZHJlblswXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlV2l0aENoaWxkcmVuLnByb3RvdHlwZSwgXCJsYXN0Q2hpbGRcIiwge1xuICAgICAgICAvKiogTGFzdCBjaGlsZCBvZiB0aGUgbm9kZS4gKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwiY2hpbGROb2Rlc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBjaGlsZHJlbn0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBOb2RlV2l0aENoaWxkcmVuO1xufShOb2RlKSk7XG5leHBvcnRzLk5vZGVXaXRoQ2hpbGRyZW4gPSBOb2RlV2l0aENoaWxkcmVuO1xuLyoqXG4gKiBUaGUgcm9vdCBub2RlIG9mIHRoZSBkb2N1bWVudC5cbiAqL1xudmFyIERvY3VtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEb2N1bWVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEb2N1bWVudChjaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290LCBjaGlsZHJlbikgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIERvY3VtZW50O1xufShOb2RlV2l0aENoaWxkcmVuKSk7XG5leHBvcnRzLkRvY3VtZW50ID0gRG9jdW1lbnQ7XG4vKipcbiAqIEFuIGVsZW1lbnQgd2l0aGluIHRoZSBET00uXG4gKi9cbnZhciBFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHRhZywgZWcuIGBkaXZgLCBgc3BhbmAuXG4gICAgICogQHBhcmFtIGF0dHJpYnMgT2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVsZW1lbnQobmFtZSwgYXR0cmlicywgY2hpbGRyZW4sIHR5cGUpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB2b2lkIDApIHsgY2hpbGRyZW4gPSBbXTsgfVxuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSBuYW1lID09PSBcInNjcmlwdFwiXG4gICAgICAgICAgICA/IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuU2NyaXB0XG4gICAgICAgICAgICA6IG5hbWUgPT09IFwic3R5bGVcIlxuICAgICAgICAgICAgICAgID8gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5TdHlsZVxuICAgICAgICAgICAgICAgIDogZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UYWc7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHlwZSwgY2hpbGRyZW4pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudC5wcm90b3R5cGUsIFwidGFnTmFtZVwiLCB7XG4gICAgICAgIC8vIERPTSBMZXZlbCAxIGFsaWFzZXNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIG5hbWV9LlxuICAgICAgICAgKiBbRE9NIHNwZWNdKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZyktY29tcGF0aWJsZSBhbGlhcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50LnByb3RvdHlwZSwgXCJhdHRyaWJ1dGVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlicykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmF0dHJpYnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogKF9hID0gX3RoaXNbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAoX2IgPSBfdGhpc1tcIngtYXR0cmlic1ByZWZpeFwiXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW25hbWVdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRWxlbWVudDtcbn0oTm9kZVdpdGhDaGlsZHJlbikpO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBpcyBhIGBFbGVtZW50YCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzVGFnKG5vZGUpIHtcbiAgICByZXR1cm4gKDAsIGRvbWVsZW1lbnR0eXBlXzEuaXNUYWcpKG5vZGUpO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGhhcyB0aGUgdHlwZSBgQ0RBVEFgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNDREFUQShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5DREFUQTtcbn1cbmV4cG9ydHMuaXNDREFUQSA9IGlzQ0RBVEE7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBUZXh0YCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UZXh0O1xufVxuZXhwb3J0cy5pc1RleHQgPSBpc1RleHQ7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBDb21tZW50YCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzQ29tbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Db21tZW50O1xufVxuZXhwb3J0cy5pc0NvbW1lbnQgPSBpc0NvbW1lbnQ7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNEaXJlY3RpdmUobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuRGlyZWN0aXZlO1xufVxuZXhwb3J0cy5pc0RpcmVjdGl2ZSA9IGlzRGlyZWN0aXZlO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGhhcyB0aGUgdHlwZSBgUHJvY2Vzc2luZ0luc3RydWN0aW9uYCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzRG9jdW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuUm9vdDtcbn1cbmV4cG9ydHMuaXNEb2N1bWVudCA9IGlzRG9jdW1lbnQ7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaXMgYSBgTm9kZVdpdGhDaGlsZHJlbmAgKGhhcyBjaGlsZHJlbiksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXNDaGlsZHJlbihub2RlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChub2RlLCBcImNoaWxkcmVuXCIpO1xufVxuZXhwb3J0cy5oYXNDaGlsZHJlbiA9IGhhc0NoaWxkcmVuO1xuLyoqXG4gKiBDbG9uZSBhIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICovXG5mdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgcmVjdXJzaXZlKSB7XG4gICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoaXNUZXh0KG5vZGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0KG5vZGUuZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICByZXN1bHQgPSBuZXcgQ29tbWVudChub2RlLmRhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1RhZyhub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8xID0gbmV3IEVsZW1lbnQobm9kZS5uYW1lLCBfX2Fzc2lnbih7fSwgbm9kZS5hdHRyaWJzKSwgY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzEpOyB9KTtcbiAgICAgICAgaWYgKG5vZGUubmFtZXNwYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsb25lXzEubmFtZXNwYWNlID0gbm9kZS5uYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNQcmVmaXhcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNQcmVmaXhcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic1ByZWZpeFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDREFUQShub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8yID0gbmV3IE5vZGVXaXRoQ2hpbGRyZW4oZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5DREFUQSwgY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzIpOyB9KTtcbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEb2N1bWVudChub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8zID0gbmV3IERvY3VtZW50KGNoaWxkcmVuKTtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8zKTsgfSk7XG4gICAgICAgIGlmIChub2RlW1wieC1tb2RlXCJdKSB7XG4gICAgICAgICAgICBjbG9uZV8zW1wieC1tb2RlXCJdID0gbm9kZVtcIngtbW9kZVwiXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBjbG9uZV8zO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0RpcmVjdGl2ZShub2RlKSkge1xuICAgICAgICB2YXIgaW5zdHJ1Y3Rpb24gPSBuZXcgUHJvY2Vzc2luZ0luc3RydWN0aW9uKG5vZGUubmFtZSwgbm9kZS5kYXRhKTtcbiAgICAgICAgaWYgKG5vZGVbXCJ4LW5hbWVcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LW5hbWVcIl0gPSBub2RlW1wieC1uYW1lXCJdO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LXB1YmxpY0lkXCJdID0gbm9kZVtcIngtcHVibGljSWRcIl07XG4gICAgICAgICAgICBpbnN0cnVjdGlvbltcIngtc3lzdGVtSWRcIl0gPSBub2RlW1wieC1zeXN0ZW1JZFwiXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBpbnN0cnVjdGlvbjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCB5ZXQ6IFwiLmNvbmNhdChub2RlLnR5cGUpKTtcbiAgICB9XG4gICAgcmVzdWx0LnN0YXJ0SW5kZXggPSBub2RlLnN0YXJ0SW5kZXg7XG4gICAgcmVzdWx0LmVuZEluZGV4ID0gbm9kZS5lbmRJbmRleDtcbiAgICBpZiAobm9kZS5zb3VyY2VDb2RlTG9jYXRpb24gIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQuc291cmNlQ29kZUxvY2F0aW9uID0gbm9kZS5zb3VyY2VDb2RlTG9jYXRpb247XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNsb25lTm9kZSA9IGNsb25lTm9kZTtcbmZ1bmN0aW9uIGNsb25lQ2hpbGRyZW4oY2hpbGRzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gY2hpbGRzLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgdHJ1ZSk7IH0pO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRyZW5baV0ucHJldiA9IGNoaWxkcmVuW2kgLSAxXTtcbiAgICAgICAgY2hpbGRyZW5baSAtIDFdLm5leHQgPSBjaGlsZHJlbltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEZlZWQgPSB2b2lkIDA7XG52YXIgc3RyaW5naWZ5XzEgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnlcIik7XG52YXIgbGVnYWN5XzEgPSByZXF1aXJlKFwiLi9sZWdhY3lcIik7XG4vKipcbiAqIEdldCB0aGUgZmVlZCBvYmplY3QgZnJvbSB0aGUgcm9vdCBvZiBhIERPTSB0cmVlLlxuICpcbiAqIEBwYXJhbSBkb2MgLSBUaGUgRE9NIHRvIHRvIGV4dHJhY3QgdGhlIGZlZWQgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRGZWVkKGRvYykge1xuICAgIHZhciBmZWVkUm9vdCA9IGdldE9uZUVsZW1lbnQoaXNWYWxpZEZlZWQsIGRvYyk7XG4gICAgcmV0dXJuICFmZWVkUm9vdFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBmZWVkUm9vdC5uYW1lID09PSBcImZlZWRcIlxuICAgICAgICAgICAgPyBnZXRBdG9tRmVlZChmZWVkUm9vdClcbiAgICAgICAgICAgIDogZ2V0UnNzRmVlZChmZWVkUm9vdCk7XG59XG5leHBvcnRzLmdldEZlZWQgPSBnZXRGZWVkO1xuLyoqXG4gKiBQYXJzZSBhbiBBdG9tIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRBdG9tRmVlZChmZWVkUm9vdCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2hpbGRzID0gZmVlZFJvb3QuY2hpbGRyZW47XG4gICAgdmFyIGZlZWQgPSB7XG4gICAgICAgIHR5cGU6IFwiYXRvbVwiLFxuICAgICAgICBpdGVtczogKDAsIGxlZ2FjeV8xLmdldEVsZW1lbnRzQnlUYWdOYW1lKShcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJpZFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgdmFyIGhyZWYgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJzLmhyZWY7XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgIGVudHJ5LmxpbmsgPSBocmVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gZmV0Y2goXCJzdW1tYXJ5XCIsIGNoaWxkcmVuKSB8fCBmZXRjaChcImNvbnRlbnRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwdWJEYXRlID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChwdWJEYXRlKSB7XG4gICAgICAgICAgICAgICAgZW50cnkucHViRGF0ZSA9IG5ldyBEYXRlKHB1YkRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9KSxcbiAgICB9O1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRzKTtcbiAgICB2YXIgaHJlZiA9IChfYSA9IGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGNoaWxkcykpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJzLmhyZWY7XG4gICAgaWYgKGhyZWYpIHtcbiAgICAgICAgZmVlZC5saW5rID0gaHJlZjtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwic3VidGl0bGVcIiwgY2hpbGRzKTtcbiAgICB2YXIgdXBkYXRlZCA9IGZldGNoKFwidXBkYXRlZFwiLCBjaGlsZHMpO1xuICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgIGZlZWQudXBkYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWQpO1xuICAgIH1cbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiYXV0aG9yXCIsIFwiZW1haWxcIiwgY2hpbGRzLCB0cnVlKTtcbiAgICByZXR1cm4gZmVlZDtcbn1cbi8qKlxuICogUGFyc2UgYSBSU1MgZmVlZC5cbiAqXG4gKiBAcGFyYW0gZmVlZFJvb3QgVGhlIHJvb3Qgb2YgdGhlIGZlZWQuXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGZlZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJzc0ZlZWQoZmVlZFJvb3QpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBjaGlsZHMgPSAoX2IgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwiY2hhbm5lbFwiLCBmZWVkUm9vdC5jaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgdmFyIGZlZWQgPSB7XG4gICAgICAgIHR5cGU6IGZlZWRSb290Lm5hbWUuc3Vic3RyKDAsIDMpLFxuICAgICAgICBpZDogXCJcIixcbiAgICAgICAgaXRlbXM6ICgwLCBsZWdhY3lfMS5nZXRFbGVtZW50c0J5VGFnTmFtZSkoXCJpdGVtXCIsIGZlZWRSb290LmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGl0ZW0uY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgZW50cnkgPSB7IG1lZGlhOiBnZXRNZWRpYUVsZW1lbnRzKGNoaWxkcmVuKSB9O1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJpZFwiLCBcImd1aWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIHZhciBwdWJEYXRlID0gZmV0Y2goXCJwdWJEYXRlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChwdWJEYXRlKVxuICAgICAgICAgICAgICAgIGVudHJ5LnB1YkRhdGUgPSBuZXcgRGF0ZShwdWJEYXRlKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSksXG4gICAgfTtcbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJsaW5rXCIsIFwibGlua1wiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcImxhc3RCdWlsZERhdGVcIiwgY2hpbGRzKTtcbiAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgcmV0dXJuIGZlZWQ7XG59XG52YXIgTUVESUFfS0VZU19TVFJJTkcgPSBbXCJ1cmxcIiwgXCJ0eXBlXCIsIFwibGFuZ1wiXTtcbnZhciBNRURJQV9LRVlTX0lOVCA9IFtcbiAgICBcImZpbGVTaXplXCIsXG4gICAgXCJiaXRyYXRlXCIsXG4gICAgXCJmcmFtZXJhdGVcIixcbiAgICBcInNhbXBsaW5ncmF0ZVwiLFxuICAgIFwiY2hhbm5lbHNcIixcbiAgICBcImR1cmF0aW9uXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcIndpZHRoXCIsXG5dO1xuLyoqXG4gKiBHZXQgYWxsIG1lZGlhIGVsZW1lbnRzIG9mIGEgZmVlZCBpdGVtLlxuICpcbiAqIEBwYXJhbSB3aGVyZSBOb2RlcyB0byBzZWFyY2ggaW4uXG4gKiBAcmV0dXJucyBNZWRpYSBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gZ2V0TWVkaWFFbGVtZW50cyh3aGVyZSkge1xuICAgIHJldHVybiAoMCwgbGVnYWN5XzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKFwibWVkaWE6Y29udGVudFwiLCB3aGVyZSkubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHZhciBhdHRyaWJzID0gZWxlbS5hdHRyaWJzO1xuICAgICAgICB2YXIgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGF0dHJpYnMubWVkaXVtLFxuICAgICAgICAgICAgaXNEZWZhdWx0OiAhIWF0dHJpYnMuaXNEZWZhdWx0LFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIE1FRElBX0tFWVNfU1RSSU5HXzEgPSBNRURJQV9LRVlTX1NUUklORzsgX2kgPCBNRURJQV9LRVlTX1NUUklOR18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYiA9IE1FRElBX0tFWVNfU1RSSU5HXzFbX2ldO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnNbYXR0cmliXSkge1xuICAgICAgICAgICAgICAgIG1lZGlhW2F0dHJpYl0gPSBhdHRyaWJzW2F0dHJpYl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBNRURJQV9LRVlTX0lOVF8xID0gTUVESUFfS0VZU19JTlQ7IF9hIDwgTUVESUFfS0VZU19JTlRfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWIgPSBNRURJQV9LRVlTX0lOVF8xW19hXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJzW2F0dHJpYl0pIHtcbiAgICAgICAgICAgICAgICBtZWRpYVthdHRyaWJdID0gcGFyc2VJbnQoYXR0cmlic1thdHRyaWJdLCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0dHJpYnMuZXhwcmVzc2lvbikge1xuICAgICAgICAgICAgbWVkaWEuZXhwcmVzc2lvbiA9XG4gICAgICAgICAgICAgICAgYXR0cmlicy5leHByZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IG9uZSBlbGVtZW50IGJ5IHRhZyBuYW1lLlxuICpcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRvIGxvb2sgZm9yXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaCBpblxuICogQHJldHVybnMgVGhlIGVsZW1lbnQgb3IgbnVsbFxuICovXG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHRhZ05hbWUsIG5vZGUpIHtcbiAgICByZXR1cm4gKDAsIGxlZ2FjeV8xLmdldEVsZW1lbnRzQnlUYWdOYW1lKSh0YWdOYW1lLCBub2RlLCB0cnVlLCAxKVswXTtcbn1cbi8qKlxuICogR2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYW4gZWxlbWVudCB3aXRoIGEgY2VydGFpbiB0YWcgbmFtZS5cbiAqXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB3aGVyZSAgTm9kZSB0byBzZWFyY2ggaW4uXG4gKiBAcGFyYW0gcmVjdXJzZSBXaGV0aGVyIHRvIHJlY3Vyc2UgaW50byBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZldGNoKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gKDAsIHN0cmluZ2lmeV8xLnRleHRDb250ZW50KSgoMCwgbGVnYWN5XzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlLCAxKSkudHJpbSgpO1xufVxuLyoqXG4gKiBBZGRzIGEgcHJvcGVydHkgdG8gYW4gb2JqZWN0IGlmIGl0IGhhcyBhIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBvYmogT2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0gcHJvcCBQcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0aGF0IGNvbnRhaW5zIHRoZSBjb25kaXRpb25hbGx5IGFkZGVkIHByb3BlcnR5XG4gKiBAcGFyYW0gd2hlcmUgRWxlbWVudCB0byBzZWFyY2ggZm9yIHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIHJlY3Vyc2UgV2hldGhlciB0byByZWN1cnNlIGludG8gY2hpbGQgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGFkZENvbmRpdGlvbmFsbHkob2JqLCBwcm9wLCB0YWdOYW1lLCB3aGVyZSwgcmVjdXJzZSkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IGZhbHNlOyB9XG4gICAgdmFyIHZhbCA9IGZldGNoKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKTtcbiAgICBpZiAodmFsKVxuICAgICAgICBvYmpbcHJvcF0gPSB2YWw7XG59XG4vKipcbiAqIENoZWNrcyBpZiBhbiBlbGVtZW50IGlzIGEgZmVlZCByb290IG5vZGUuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSBuYW1lIG9mIHRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICogQHJldHVybnMgV2hldGhlciBhbiBlbGVtZW50IGlzIGEgZmVlZCByb290IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRGZWVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBcInJzc1wiIHx8IHZhbHVlID09PSBcImZlZWRcIiB8fCB2YWx1ZSA9PT0gXCJyZGY6UkRGXCI7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW5pcXVlU29ydCA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBleHBvcnRzLnJlbW92ZVN1YnNldHMgPSB2b2lkIDA7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG4vKipcbiAqIEdpdmVuIGFuIGFycmF5IG9mIG5vZGVzLCByZW1vdmUgYW55IG1lbWJlciB0aGF0IGlzIGNvbnRhaW5lZCBieSBhbm90aGVyLlxuICpcbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBmaWx0ZXIuXG4gKiBAcmV0dXJucyBSZW1haW5pbmcgbm9kZXMgdGhhdCBhcmVuJ3Qgc3VidHJlZXMgb2YgZWFjaCBvdGhlci5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlU3Vic2V0cyhub2Rlcykge1xuICAgIHZhciBpZHggPSBub2Rlcy5sZW5ndGg7XG4gICAgLypcbiAgICAgKiBDaGVjayBpZiBlYWNoIG5vZGUgKG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzKSBpcyBhbHJlYWR5IGNvbnRhaW5lZCBpbiB0aGVcbiAgICAgKiBhcnJheS5cbiAgICAgKi9cbiAgICB3aGlsZSAoLS1pZHggPj0gMCkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG4gICAgICAgIC8qXG4gICAgICAgICAqIFJlbW92ZSB0aGUgbm9kZSBpZiBpdCBpcyBub3QgdW5pcXVlLlxuICAgICAgICAgKiBXZSBhcmUgZ29pbmcgdGhyb3VnaCB0aGUgYXJyYXkgZnJvbSB0aGUgZW5kLCBzbyB3ZSBvbmx5XG4gICAgICAgICAqIGhhdmUgdG8gY2hlY2sgbm9kZXMgdGhhdCBwcmVjZWVkIHRoZSBub2RlIHVuZGVyIGNvbnNpZGVyYXRpb24gaW4gdGhlIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGlkeCA+IDAgJiYgbm9kZXMubGFzdEluZGV4T2Yobm9kZSwgaWR4IC0gMSkgPj0gMCkge1xuICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBhbmNlc3RvciA9IG5vZGUucGFyZW50OyBhbmNlc3RvcjsgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQpIHtcbiAgICAgICAgICAgIGlmIChub2Rlcy5pbmNsdWRlcyhhbmNlc3RvcikpIHtcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXM7XG59XG5leHBvcnRzLnJlbW92ZVN1YnNldHMgPSByZW1vdmVTdWJzZXRzO1xuLyoqXG4gKiBDb21wYXJlIHRoZSBwb3NpdGlvbiBvZiBvbmUgbm9kZSBhZ2FpbnN0IGFub3RoZXIgbm9kZSBpbiBhbnkgb3RoZXIgZG9jdW1lbnQuXG4gKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGEgYml0bWFzayB3aXRoIHRoZSBmb2xsb3dpbmcgdmFsdWVzOlxuICpcbiAqIERvY3VtZW50IG9yZGVyOlxuICogPiBUaGVyZSBpcyBhbiBvcmRlcmluZywgZG9jdW1lbnQgb3JkZXIsIGRlZmluZWQgb24gYWxsIHRoZSBub2RlcyBpbiB0aGVcbiAqID4gZG9jdW1lbnQgY29ycmVzcG9uZGluZyB0byB0aGUgb3JkZXIgaW4gd2hpY2ggdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGVcbiAqID4gWE1MIHJlcHJlc2VudGF0aW9uIG9mIGVhY2ggbm9kZSBvY2N1cnMgaW4gdGhlIFhNTCByZXByZXNlbnRhdGlvbiBvZiB0aGVcbiAqID4gZG9jdW1lbnQgYWZ0ZXIgZXhwYW5zaW9uIG9mIGdlbmVyYWwgZW50aXRpZXMuIFRodXMsIHRoZSBkb2N1bWVudCBlbGVtZW50XG4gKiA+IG5vZGUgd2lsbCBiZSB0aGUgZmlyc3Qgbm9kZS4gRWxlbWVudCBub2RlcyBvY2N1ciBiZWZvcmUgdGhlaXIgY2hpbGRyZW4uXG4gKiA+IFRodXMsIGRvY3VtZW50IG9yZGVyIG9yZGVycyBlbGVtZW50IG5vZGVzIGluIG9yZGVyIG9mIHRoZSBvY2N1cnJlbmNlIG9mXG4gKiA+IHRoZWlyIHN0YXJ0LXRhZyBpbiB0aGUgWE1MIChhZnRlciBleHBhbnNpb24gb2YgZW50aXRpZXMpLiBUaGUgYXR0cmlidXRlXG4gKiA+IG5vZGVzIG9mIGFuIGVsZW1lbnQgb2NjdXIgYWZ0ZXIgdGhlIGVsZW1lbnQgYW5kIGJlZm9yZSBpdHMgY2hpbGRyZW4uIFRoZVxuICogPiByZWxhdGl2ZSBvcmRlciBvZiBhdHRyaWJ1dGUgbm9kZXMgaXMgaW1wbGVtZW50YXRpb24tZGVwZW5kZW50Li9cbiAqXG4gKiBTb3VyY2U6XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1Db3JlL2dsb3NzYXJ5Lmh0bWwjZHQtZG9jdW1lbnQtb3JkZXJcbiAqXG4gKiBAcGFyYW0gbm9kZUEgVGhlIGZpcnN0IG5vZGUgdG8gdXNlIGluIHRoZSBjb21wYXJpc29uXG4gKiBAcGFyYW0gbm9kZUIgVGhlIHNlY29uZCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuICogQHJldHVybnMgQSBiaXRtYXNrIGRlc2NyaWJpbmcgdGhlIGlucHV0IG5vZGVzJyByZWxhdGl2ZSBwb3NpdGlvbi5cbiAqXG4gKiBTZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1ub2RlLWNvbXBhcmVkb2N1bWVudHBvc2l0aW9uIGZvclxuICogYSBkZXNjcmlwdGlvbiBvZiB0aGVzZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGVBLCBub2RlQikge1xuICAgIHZhciBhUGFyZW50cyA9IFtdO1xuICAgIHZhciBiUGFyZW50cyA9IFtdO1xuICAgIGlmIChub2RlQSA9PT0gbm9kZUIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciBjdXJyZW50ID0gKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikobm9kZUEpID8gbm9kZUEgOiBub2RlQS5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYVBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICBjdXJyZW50ID0gKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikobm9kZUIpID8gbm9kZUIgOiBub2RlQi5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYlBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICB2YXIgbWF4SWR4ID0gTWF0aC5taW4oYVBhcmVudHMubGVuZ3RoLCBiUGFyZW50cy5sZW5ndGgpO1xuICAgIHZhciBpZHggPSAwO1xuICAgIHdoaWxlIChpZHggPCBtYXhJZHggJiYgYVBhcmVudHNbaWR4XSA9PT0gYlBhcmVudHNbaWR4XSkge1xuICAgICAgICBpZHgrKztcbiAgICB9XG4gICAgaWYgKGlkeCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMSAvKiBESVNDT05ORUNURUQgKi87XG4gICAgfVxuICAgIHZhciBzaGFyZWRQYXJlbnQgPSBhUGFyZW50c1tpZHggLSAxXTtcbiAgICB2YXIgc2libGluZ3MgPSBzaGFyZWRQYXJlbnQuY2hpbGRyZW47XG4gICAgdmFyIGFTaWJsaW5nID0gYVBhcmVudHNbaWR4XTtcbiAgICB2YXIgYlNpYmxpbmcgPSBiUGFyZW50c1tpZHhdO1xuICAgIGlmIChzaWJsaW5ncy5pbmRleE9mKGFTaWJsaW5nKSA+IHNpYmxpbmdzLmluZGV4T2YoYlNpYmxpbmcpKSB7XG4gICAgICAgIGlmIChzaGFyZWRQYXJlbnQgPT09IG5vZGVCKSB7XG4gICAgICAgICAgICByZXR1cm4gNCAvKiBGT0xMT1dJTkcgKi8gfCAxNiAvKiBDT05UQUlORURfQlkgKi87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDQgLyogRk9MTE9XSU5HICovO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuICAgICAgICByZXR1cm4gMiAvKiBQUkVDRURJTkcgKi8gfCA4IC8qIENPTlRBSU5TICovO1xuICAgIH1cbiAgICByZXR1cm4gMiAvKiBQUkVDRURJTkcgKi87XG59XG5leHBvcnRzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID0gY29tcGFyZURvY3VtZW50UG9zaXRpb247XG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgb2Ygbm9kZXMgYmFzZWQgb24gdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50IGFuZFxuICogcmVtb3ZlIGFueSBkdXBsaWNhdGUgbm9kZXMuIElmIHRoZSBhcnJheSBjb250YWlucyBub2RlcyB0aGF0IGRvIG5vdCBiZWxvbmdcbiAqIHRvIHRoZSBzYW1lIGRvY3VtZW50LCBzb3J0IG9yZGVyIGlzIHVuc3BlY2lmaWVkLlxuICpcbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBET00gbm9kZXMuXG4gKiBAcmV0dXJucyBDb2xsZWN0aW9uIG9mIHVuaXF1ZSBub2Rlcywgc29ydGVkIGluIGRvY3VtZW50IG9yZGVyLlxuICovXG5mdW5jdGlvbiB1bmlxdWVTb3J0KG5vZGVzKSB7XG4gICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUsIGksIGFycikgeyByZXR1cm4gIWFyci5pbmNsdWRlcyhub2RlLCBpICsgMSk7IH0pO1xuICAgIG5vZGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSwgYik7XG4gICAgICAgIGlmIChyZWxhdGl2ZSAmIDIgLyogUFJFQ0VESU5HICovKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVsYXRpdmUgJiA0IC8qIEZPTExPV0lORyAqLykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy51bmlxdWVTb3J0ID0gdW5pcXVlU29ydDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhc0NoaWxkcmVuID0gZXhwb3J0cy5pc0RvY3VtZW50ID0gZXhwb3J0cy5pc0NvbW1lbnQgPSBleHBvcnRzLmlzVGV4dCA9IGV4cG9ydHMuaXNDREFUQSA9IGV4cG9ydHMuaXNUYWcgPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmF2ZXJzYWxcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21hbmlwdWxhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcXVlcnlpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xlZ2FjeVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZmVlZHNcIiksIGV4cG9ydHMpO1xuLyoqIEBkZXByZWNhdGVkIFVzZSB0aGVzZSBtZXRob2RzIGZyb20gYGRvbWhhbmRsZXJgIGRpcmVjdGx5LiAqL1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUYWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc1RhZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzQ0RBVEFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc0NEQVRBOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNUZXh0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNUZXh0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNDb21tZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNDb21tZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNEb2N1bWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzRG9jdW1lbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJoYXNDaGlsZHJlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuOyB9IH0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVsZW1lbnRzQnlUYWdUeXBlID0gZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBleHBvcnRzLmdldEVsZW1lbnRzID0gZXhwb3J0cy50ZXN0RWxlbWVudCA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBxdWVyeWluZ18xID0gcmVxdWlyZShcIi4vcXVlcnlpbmdcIik7XG52YXIgQ2hlY2tzID0ge1xuICAgIHRhZ19uYW1lOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBkb21oYW5kbGVyXzEuaXNUYWc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShlbGVtKSAmJiBlbGVtLm5hbWUgPT09IG5hbWU7IH07XG4gICAgfSxcbiAgICB0YWdfdHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50eXBlID09PSB0eXBlOyB9O1xuICAgIH0sXG4gICAgdGFnX2NvbnRhaW5zOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkoZWxlbSkgJiYgZGF0YShlbGVtLmRhdGEpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKGVsZW0pICYmIGVsZW0uZGF0YSA9PT0gZGF0YTsgfTtcbiAgICB9LFxufTtcbi8qKlxuICogQHBhcmFtIGF0dHJpYiBBdHRyaWJ1dGUgdG8gY2hlY2suXG4gKiBAcGFyYW0gdmFsdWUgQXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjaGVjayB3aGV0aGVyIHRoZSBhIG5vZGUgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGEgcGFydGljdWxhciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QXR0cmliQ2hlY2soYXR0cmliLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGVsZW0pICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShlbGVtKSAmJiBlbGVtLmF0dHJpYnNbYXR0cmliXSA9PT0gdmFsdWU7IH07XG59XG4vKipcbiAqIEBwYXJhbSBhIEZpcnN0IGZ1bmN0aW9uIHRvIGNvbWJpbmUuXG4gKiBAcGFyYW0gYiBTZWNvbmQgZnVuY3Rpb24gdG8gY29tYmluZS5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGFraW5nIGEgbm9kZSBhbmQgcmV0dXJuaW5nIGB0cnVlYCBpZiBlaXRoZXJcbiAqIG9mIHRoZSBpbnB1dCBmdW5jdGlvbnMgcmV0dXJucyBgdHJ1ZWAgZm9yIHRoZSBub2RlLlxuICovXG5mdW5jdGlvbiBjb21iaW5lRnVuY3MoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gYShlbGVtKSB8fCBiKGVsZW0pOyB9O1xufVxuLyoqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gZXhlY3V0aW5nIGFsbCBjaGVja3MgaW4gYG9wdGlvbnNgIGFuZCByZXR1cm5pbmcgYHRydWVgXG4gKiBpZiBhbnkgb2YgdGhlbSBtYXRjaCBhIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVUZXN0KG9wdGlvbnMpIHtcbiAgICB2YXIgZnVuY3MgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQ2hlY2tzLCBrZXkpXG4gICAgICAgICAgICA/IENoZWNrc1trZXldKHZhbHVlKVxuICAgICAgICAgICAgOiBnZXRBdHRyaWJDaGVjayhrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3MubGVuZ3RoID09PSAwID8gbnVsbCA6IGZ1bmNzLnJlZHVjZShjb21iaW5lRnVuY3MpO1xufVxuLyoqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlIFRoZSBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBlbGVtZW50IG1hdGNoZXMgdGhlIGRlc2NyaXB0aW9uIGluIGBvcHRpb25zYC5cbiAqL1xuZnVuY3Rpb24gdGVzdEVsZW1lbnQob3B0aW9ucywgbm9kZSkge1xuICAgIHZhciB0ZXN0ID0gY29tcGlsZVRlc3Qob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRlc3QgPyB0ZXN0KG5vZGUpIDogdHJ1ZTtcbn1cbmV4cG9ydHMudGVzdEVsZW1lbnQgPSB0ZXN0RWxlbWVudDtcbi8qKlxuICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGRlc2NyaWJpbmcgbm9kZXMgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gc2VhcmNoIHRocm91Z2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyB0aGF0IG1hdGNoIGBvcHRpb25zYC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHMob3B0aW9ucywgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KSB7XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIHZhciB0ZXN0ID0gY29tcGlsZVRlc3Qob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRlc3QgPyAoMCwgcXVlcnlpbmdfMS5maWx0ZXIpKHRlc3QsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkgOiBbXTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBnZXRFbGVtZW50cztcbi8qKlxuICogQHBhcmFtIGlkIFRoZSB1bmlxdWUgSUQgYXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIElELlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50QnlJZChpZCwgbm9kZXMsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGVzKSlcbiAgICAgICAgbm9kZXMgPSBbbm9kZXNdO1xuICAgIHJldHVybiAoMCwgcXVlcnlpbmdfMS5maW5kT25lKShnZXRBdHRyaWJDaGVjayhcImlkXCIsIGlkKSwgbm9kZXMsIHJlY3Vyc2UpO1xufVxuZXhwb3J0cy5nZXRFbGVtZW50QnlJZCA9IGdldEVsZW1lbnRCeUlkO1xuLyoqXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEBwYXJhbSBsaW1pdCBNYXhpbXVtIG51bWJlciBvZiBub2RlcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBBbGwgbm9kZXMgd2l0aCB0aGUgc3VwcGxpZWQgYHRhZ05hbWVgLlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiAoMCwgcXVlcnlpbmdfMS5maWx0ZXIpKENoZWNrcy50YWdfbmFtZSh0YWdOYW1lKSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBnZXRFbGVtZW50c0J5VGFnTmFtZTtcbi8qKlxuICogQHBhcmFtIHR5cGUgRWxlbWVudCB0eXBlIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEBwYXJhbSBsaW1pdCBNYXhpbXVtIG51bWJlciBvZiBub2RlcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBBbGwgbm9kZXMgd2l0aCB0aGUgc3VwcGxpZWQgYHR5cGVgLlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50c0J5VGFnVHlwZSh0eXBlLCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiAoMCwgcXVlcnlpbmdfMS5maWx0ZXIpKENoZWNrcy50YWdfdHlwZSh0eXBlKSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBnZXRFbGVtZW50c0J5VGFnVHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVwZW5kID0gZXhwb3J0cy5wcmVwZW5kQ2hpbGQgPSBleHBvcnRzLmFwcGVuZCA9IGV4cG9ydHMuYXBwZW5kQ2hpbGQgPSBleHBvcnRzLnJlcGxhY2VFbGVtZW50ID0gZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gdm9pZCAwO1xuLyoqXG4gKiBSZW1vdmUgYW4gZWxlbWVudCBmcm9tIHRoZSBkb21cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBiZSByZW1vdmVkXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbSkge1xuICAgIGlmIChlbGVtLnByZXYpXG4gICAgICAgIGVsZW0ucHJldi5uZXh0ID0gZWxlbS5uZXh0O1xuICAgIGlmIChlbGVtLm5leHQpXG4gICAgICAgIGVsZW0ubmV4dC5wcmV2ID0gZWxlbS5wcmV2O1xuICAgIGlmIChlbGVtLnBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGRzID0gZWxlbS5wYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAxKTtcbiAgICB9XG59XG5leHBvcnRzLnJlbW92ZUVsZW1lbnQgPSByZW1vdmVFbGVtZW50O1xuLyoqXG4gKiBSZXBsYWNlIGFuIGVsZW1lbnQgaW4gdGhlIGRvbVxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGJlIHJlcGxhY2VkXG4gKiBAcGFyYW0gcmVwbGFjZW1lbnQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWRcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbSwgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgcHJldiA9IChyZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2KTtcbiAgICBpZiAocHJldikge1xuICAgICAgICBwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcbiAgICB9XG4gICAgdmFyIG5leHQgPSAocmVwbGFjZW1lbnQubmV4dCA9IGVsZW0ubmV4dCk7XG4gICAgaWYgKG5leHQpIHtcbiAgICAgICAgbmV4dC5wcmV2ID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxuICAgIHZhciBwYXJlbnQgPSAocmVwbGFjZW1lbnQucGFyZW50ID0gZWxlbS5wYXJlbnQpO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgY2hpbGRzW2NoaWxkcy5sYXN0SW5kZXhPZihlbGVtKV0gPSByZXBsYWNlbWVudDtcbiAgICB9XG59XG5leHBvcnRzLnJlcGxhY2VFbGVtZW50ID0gcmVwbGFjZUVsZW1lbnQ7XG4vKipcbiAqIEFwcGVuZCBhIGNoaWxkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIGNoaWxkIFRoZSBlbGVtZW50IHRvIGJlIGFkZGVkIGFzIGEgY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZENoaWxkKGVsZW0sIGNoaWxkKSB7XG4gICAgcmVtb3ZlRWxlbWVudChjaGlsZCk7XG4gICAgY2hpbGQubmV4dCA9IG51bGw7XG4gICAgY2hpbGQucGFyZW50ID0gZWxlbTtcbiAgICBpZiAoZWxlbS5jaGlsZHJlbi5wdXNoKGNoaWxkKSA+IDEpIHtcbiAgICAgICAgdmFyIHNpYmxpbmcgPSBlbGVtLmNoaWxkcmVuW2VsZW0uY2hpbGRyZW4ubGVuZ3RoIC0gMl07XG4gICAgICAgIHNpYmxpbmcubmV4dCA9IGNoaWxkO1xuICAgICAgICBjaGlsZC5wcmV2ID0gc2libGluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkLnByZXYgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kQ2hpbGQgPSBhcHBlbmRDaGlsZDtcbi8qKlxuICogQXBwZW5kIGFuIGVsZW1lbnQgYWZ0ZXIgYW5vdGhlci5cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBhcHBlbmQgYWZ0ZXIuXG4gKiBAcGFyYW0gbmV4dCBUaGUgZWxlbWVudCBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gYXBwZW5kKGVsZW0sIG5leHQpIHtcbiAgICByZW1vdmVFbGVtZW50KG5leHQpO1xuICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcbiAgICB2YXIgY3Vyck5leHQgPSBlbGVtLm5leHQ7XG4gICAgbmV4dC5uZXh0ID0gY3Vyck5leHQ7XG4gICAgbmV4dC5wcmV2ID0gZWxlbTtcbiAgICBlbGVtLm5leHQgPSBuZXh0O1xuICAgIG5leHQucGFyZW50ID0gcGFyZW50O1xuICAgIGlmIChjdXJyTmV4dCkge1xuICAgICAgICBjdXJyTmV4dC5wcmV2ID0gbmV4dDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5leHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kO1xuLyoqXG4gKiBQcmVwZW5kIGEgY2hpbGQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBwcmVwZW5kIGJlZm9yZS5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5mdW5jdGlvbiBwcmVwZW5kQ2hpbGQoZWxlbSwgY2hpbGQpIHtcbiAgICByZW1vdmVFbGVtZW50KGNoaWxkKTtcbiAgICBjaGlsZC5wYXJlbnQgPSBlbGVtO1xuICAgIGNoaWxkLnByZXYgPSBudWxsO1xuICAgIGlmIChlbGVtLmNoaWxkcmVuLnVuc2hpZnQoY2hpbGQpICE9PSAxKSB7XG4gICAgICAgIHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlblsxXTtcbiAgICAgICAgc2libGluZy5wcmV2ID0gY2hpbGQ7XG4gICAgICAgIGNoaWxkLm5leHQgPSBzaWJsaW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQubmV4dCA9IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5wcmVwZW5kQ2hpbGQgPSBwcmVwZW5kQ2hpbGQ7XG4vKipcbiAqIFByZXBlbmQgYW4gZWxlbWVudCBiZWZvcmUgYW5vdGhlci5cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBwcmVwZW5kIGJlZm9yZS5cbiAqIEBwYXJhbSBwcmV2IFRoZSBlbGVtZW50IGJlIGFkZGVkLlxuICovXG5mdW5jdGlvbiBwcmVwZW5kKGVsZW0sIHByZXYpIHtcbiAgICByZW1vdmVFbGVtZW50KHByZXYpO1xuICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmluZGV4T2YoZWxlbSksIDAsIHByZXYpO1xuICAgIH1cbiAgICBpZiAoZWxlbS5wcmV2KSB7XG4gICAgICAgIGVsZW0ucHJldi5uZXh0ID0gcHJldjtcbiAgICB9XG4gICAgcHJldi5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgcHJldi5wcmV2ID0gZWxlbS5wcmV2O1xuICAgIHByZXYubmV4dCA9IGVsZW07XG4gICAgZWxlbS5wcmV2ID0gcHJldjtcbn1cbmV4cG9ydHMucHJlcGVuZCA9IHByZXBlbmQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmluZEFsbCA9IGV4cG9ydHMuZXhpc3RzT25lID0gZXhwb3J0cy5maW5kT25lID0gZXhwb3J0cy5maW5kT25lQ2hpbGQgPSBleHBvcnRzLmZpbmQgPSBleHBvcnRzLmZpbHRlciA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbi8qKlxuICogU2VhcmNoIGEgbm9kZSBhbmQgaXRzIGNoaWxkcmVuIGZvciBub2RlcyBwYXNzaW5nIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guIFdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQgaWYgaXQgbWF0Y2hlcy5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgbm9kZSwgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgbm9kZSA9IFtub2RlXTtcbiAgICByZXR1cm4gZmluZCh0ZXN0LCBub2RlLCByZWN1cnNlLCBsaW1pdCk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8qKlxuICogU2VhcmNoIGFuIGFycmF5IG9mIG5vZGUgYW5kIGl0cyBjaGlsZHJlbiBmb3Igbm9kZXMgcGFzc2luZyBhIHRlc3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZCh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBub2Rlc18xID0gbm9kZXM7IF9pIDwgbm9kZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVsZW0gPSBub2Rlc18xW19pXTtcbiAgICAgICAgaWYgKHRlc3QoZWxlbSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgaWYgKC0tbGltaXQgPD0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzZSAmJiAoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShlbGVtKSAmJiBlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGZpbmQodGVzdCwgZWxlbS5jaGlsZHJlbiwgcmVjdXJzZSwgbGltaXQpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2guYXBwbHkocmVzdWx0LCBjaGlsZHJlbik7XG4gICAgICAgICAgICBsaW1pdCAtPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGltaXQgPD0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5maW5kID0gZmluZDtcbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IGVsZW1lbnQgaW5zaWRlIG9mIGFuIGFycmF5IHRoYXQgbWF0Y2hlcyBhIHRlc3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcmV0dXJucyBUaGUgZmlyc3Qgbm9kZSBpbiB0aGUgYXJyYXkgdGhhdCBwYXNzZXMgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaW5kT25lQ2hpbGQodGVzdCwgbm9kZXMpIHtcbiAgICByZXR1cm4gbm9kZXMuZmluZCh0ZXN0KTtcbn1cbmV4cG9ydHMuZmluZE9uZUNoaWxkID0gZmluZE9uZUNoaWxkO1xuLyoqXG4gKiBGaW5kcyBvbmUgZWxlbWVudCBpbiBhIHRyZWUgdGhhdCBwYXNzZXMgYSB0ZXN0LlxuICpcbiAqIEBwYXJhbSB0ZXN0IEZ1bmN0aW9uIHRvIHRlc3Qgbm9kZXMgb24uXG4gKiBAcGFyYW0gbm9kZXMgQXJyYXkgb2Ygbm9kZXMgdG8gc2VhcmNoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBjaGlsZCBub2RlIHRoYXQgcGFzc2VzIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZE9uZSh0ZXN0LCBub2RlcywgcmVjdXJzZSkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IHRydWU7IH1cbiAgICB2YXIgZWxlbSA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGggJiYgIWVsZW07IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlZCA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoISgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGNoZWNrZWQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0ZXN0KGNoZWNrZWQpKSB7XG4gICAgICAgICAgICBlbGVtID0gY2hlY2tlZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWN1cnNlICYmIGNoZWNrZWQuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZWxlbSA9IGZpbmRPbmUodGVzdCwgY2hlY2tlZC5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW07XG59XG5leHBvcnRzLmZpbmRPbmUgPSBmaW5kT25lO1xuLyoqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIFdoZXRoZXIgYSB0cmVlIG9mIG5vZGVzIGNvbnRhaW5zIGF0IGxlYXN0IG9uZSBub2RlIHBhc3NpbmcgYSB0ZXN0LlxuICovXG5mdW5jdGlvbiBleGlzdHNPbmUodGVzdCwgbm9kZXMpIHtcbiAgICByZXR1cm4gbm9kZXMuc29tZShmdW5jdGlvbiAoY2hlY2tlZCkge1xuICAgICAgICByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5pc1RhZykoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgICh0ZXN0KGNoZWNrZWQpIHx8XG4gICAgICAgICAgICAgICAgKGNoZWNrZWQuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBleGlzdHNPbmUodGVzdCwgY2hlY2tlZC5jaGlsZHJlbikpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhpc3RzT25lID0gZXhpc3RzT25lO1xuLyoqXG4gKiBTZWFyY2ggYW5kIGFycmF5IG9mIG5vZGVzIGFuZCBpdHMgY2hpbGRyZW4gZm9yIG5vZGVzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIFNhbWUgYXMgYGZpbmRgLCBvbmx5IHdpdGggbGVzcyBvcHRpb25zLCBsZWFkaW5nIHRvIHJlZHVjZWQgY29tcGxleGl0eS5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZEFsbCh0ZXN0LCBub2Rlcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHN0YWNrID0gbm9kZXMuZmlsdGVyKGRvbWhhbmRsZXJfMS5pc1RhZyk7XG4gICAgdmFyIGVsZW07XG4gICAgd2hpbGUgKChlbGVtID0gc3RhY2suc2hpZnQoKSkpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gKF9hID0gZWxlbS5jaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbHRlcihkb21oYW5kbGVyXzEuaXNUYWcpO1xuICAgICAgICBpZiAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhY2sudW5zaGlmdC5hcHBseShzdGFjaywgY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXN0KGVsZW0pKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZpbmRBbGwgPSBmaW5kQWxsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlubmVyVGV4dCA9IGV4cG9ydHMudGV4dENvbnRlbnQgPSBleHBvcnRzLmdldFRleHQgPSBleHBvcnRzLmdldElubmVySFRNTCA9IGV4cG9ydHMuZ2V0T3V0ZXJIVE1MID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xudmFyIGRvbV9zZXJpYWxpemVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRvbS1zZXJpYWxpemVyXCIpKTtcbnZhciBkb21lbGVtZW50dHlwZV8xID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgb3V0ZXIgSFRNTCBvZi5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHNlcmlhbGl6YXRpb24uXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBkb20tc2VyaWFsaXplcmAgbW9kdWxlIGRpcmVjdGx5LlxuICogQHJldHVybnMgYG5vZGVgJ3Mgb3V0ZXIgSFRNTC5cbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGRvbV9zZXJpYWxpemVyXzEuZGVmYXVsdCkobm9kZSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdldE91dGVySFRNTCA9IGdldE91dGVySFRNTDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgZG9tLXNlcmlhbGl6ZXJgIG1vZHVsZSBkaXJlY3RseS5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIEhUTUwuXG4gKi9cbmZ1bmN0aW9uIGdldElubmVySFRNTChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKG5vZGUpXG4gICAgICAgID8gbm9kZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGdldE91dGVySFRNTChub2RlLCBvcHRpb25zKTsgfSkuam9pbihcIlwiKVxuICAgICAgICA6IFwiXCI7XG59XG5leHBvcnRzLmdldElubmVySFRNTCA9IGdldElubmVySFRNTDtcbi8qKlxuICogR2V0IGEgbm9kZSdzIGlubmVyIHRleHQuIFNhbWUgYXMgYHRleHRDb250ZW50YCwgYnV0IGluc2VydHMgbmV3bGluZXMgZm9yIGA8YnI+YCB0YWdzLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgdGV4dENvbnRlbnRgIGluc3RlYWQuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgdGV4dCBvZi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIHRleHQuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RhZykobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm5hbWUgPT09IFwiYnJcIiA/IFwiXFxuXCIgOiBnZXRUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzQ0RBVEEpKG5vZGUpKVxuICAgICAgICByZXR1cm4gZ2V0VGV4dChub2RlLmNoaWxkcmVuKTtcbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5nZXRUZXh0ID0gZ2V0VGV4dDtcbi8qKlxuICogR2V0IGEgbm9kZSdzIHRleHQgY29udGVudC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgdGV4dCBjb250ZW50IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgdGV4dCBjb250ZW50LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvdGV4dENvbnRlbnR9XG4gKi9cbmZ1bmN0aW9uIHRleHRDb250ZW50KG5vZGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubWFwKHRleHRDb250ZW50KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShub2RlKSAmJiAhKDAsIGRvbWhhbmRsZXJfMS5pc0NvbW1lbnQpKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiB0ZXh0Q29udGVudChub2RlLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaXNUZXh0KShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcbiAgICByZXR1cm4gXCJcIjtcbn1cbmV4cG9ydHMudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbi8qKlxuICogR2V0IGEgbm9kZSdzIGlubmVyIHRleHQuXG4gKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIHRleHQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyBpbm5lciB0ZXh0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvaW5uZXJUZXh0fVxuICovXG5mdW5jdGlvbiBpbm5lclRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoaW5uZXJUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShub2RlKSAmJiAobm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRhZyB8fCAoMCwgZG9taGFuZGxlcl8xLmlzQ0RBVEEpKG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gaW5uZXJUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5pbm5lclRleHQgPSBpbm5lclRleHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJldkVsZW1lbnRTaWJsaW5nID0gZXhwb3J0cy5uZXh0RWxlbWVudFNpYmxpbmcgPSBleHBvcnRzLmdldE5hbWUgPSBleHBvcnRzLmhhc0F0dHJpYiA9IGV4cG9ydHMuZ2V0QXR0cmlidXRlVmFsdWUgPSBleHBvcnRzLmdldFNpYmxpbmdzID0gZXhwb3J0cy5nZXRQYXJlbnQgPSBleHBvcnRzLmdldENoaWxkcmVuID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xudmFyIGVtcHR5QXJyYXkgPSBbXTtcbi8qKlxuICogR2V0IGEgbm9kZSdzIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSBlbGVtIE5vZGUgdG8gZ2V0IHRoZSBjaGlsZHJlbiBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIGNoaWxkcmVuLCBvciBhbiBlbXB0eSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4oZWxlbSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gZWxlbS5jaGlsZHJlbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZW1wdHlBcnJheTtcbn1cbmV4cG9ydHMuZ2V0Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbjtcbi8qKlxuICogR2V0IGEgbm9kZSdzIHBhcmVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBOb2RlIHRvIGdldCB0aGUgcGFyZW50IG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgcGFyZW50IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ucGFyZW50IHx8IG51bGw7XG59XG5leHBvcnRzLmdldFBhcmVudCA9IGdldFBhcmVudDtcbi8qKlxuICogR2V0cyBhbiBlbGVtZW50cyBzaWJsaW5ncywgaW5jbHVkaW5nIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBBdHRlbXB0cyB0byBnZXQgdGhlIGNoaWxkcmVuIHRocm91Z2ggdGhlIGVsZW1lbnQncyBwYXJlbnQgZmlyc3QuXG4gKiBJZiB3ZSBkb24ndCBoYXZlIGEgcGFyZW50ICh0aGUgZWxlbWVudCBpcyBhIHJvb3Qgbm9kZSksXG4gKiB3ZSB3YWxrIHRoZSBlbGVtZW50J3MgYHByZXZgICYgYG5leHRgIHRvIGdldCBhbGwgcmVtYWluaW5nIG5vZGVzLlxuICpcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gZ2V0IHRoZSBzaWJsaW5ncyBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIHNpYmxpbmdzLlxuICovXG5mdW5jdGlvbiBnZXRTaWJsaW5ncyhlbGVtKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGVsZW0pO1xuICAgIGlmIChwYXJlbnQgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGdldENoaWxkcmVuKHBhcmVudCk7XG4gICAgdmFyIHNpYmxpbmdzID0gW2VsZW1dO1xuICAgIHZhciBwcmV2ID0gZWxlbS5wcmV2LCBuZXh0ID0gZWxlbS5uZXh0O1xuICAgIHdoaWxlIChwcmV2ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MudW5zaGlmdChwcmV2KTtcbiAgICAgICAgKF9hID0gcHJldiwgcHJldiA9IF9hLnByZXYpO1xuICAgIH1cbiAgICB3aGlsZSAobmV4dCAhPSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmdzLnB1c2gobmV4dCk7XG4gICAgICAgIChfYiA9IG5leHQsIG5leHQgPSBfYi5uZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHNpYmxpbmdzO1xufVxuZXhwb3J0cy5nZXRTaWJsaW5ncyA9IGdldFNpYmxpbmdzO1xuLyoqXG4gKiBHZXRzIGFuIGF0dHJpYnV0ZSBmcm9tIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lIHRvIHJldHJpZXZlLlxuICogQHJldHVybnMgVGhlIGVsZW1lbnQncyBhdHRyaWJ1dGUgdmFsdWUsIG9yIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBlbGVtLmF0dHJpYnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbn1cbmV4cG9ydHMuZ2V0QXR0cmlidXRlVmFsdWUgPSBnZXRBdHRyaWJ1dGVWYWx1ZTtcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYW4gZWxlbWVudCBoYXMgYW4gYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcGFyYW0gbmFtZSBBdHRyaWJ1dGUgbmFtZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFJldHVybnMgd2hldGhlciBgZWxlbWAgaGFzIHRoZSBhdHRyaWJ1dGUgYG5hbWVgLlxuICovXG5mdW5jdGlvbiBoYXNBdHRyaWIoZWxlbSwgbmFtZSkge1xuICAgIHJldHVybiAoZWxlbS5hdHRyaWJzICE9IG51bGwgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSkgJiZcbiAgICAgICAgZWxlbS5hdHRyaWJzW25hbWVdICE9IG51bGwpO1xufVxuZXhwb3J0cy5oYXNBdHRyaWIgPSBoYXNBdHRyaWI7XG4vKipcbiAqIEdldCB0aGUgdGFnIG5hbWUgb2YgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG5hbWUgZm9yLlxuICogQHJldHVybnMgVGhlIHRhZyBuYW1lIG9mIGBlbGVtYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZShlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ubmFtZTtcbn1cbmV4cG9ydHMuZ2V0TmFtZSA9IGdldE5hbWU7XG4vKipcbiAqIFJldHVybnMgdGhlIG5leHQgZWxlbWVudCBzaWJsaW5nIG9mIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG5leHQgc2libGluZyBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIG5leHQgc2libGluZyB0aGF0IGlzIGEgdGFnLlxuICovXG5mdW5jdGlvbiBuZXh0RWxlbWVudFNpYmxpbmcoZWxlbSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgbmV4dCA9IGVsZW0ubmV4dDtcbiAgICB3aGlsZSAobmV4dCAhPT0gbnVsbCAmJiAhKDAsIGRvbWhhbmRsZXJfMS5pc1RhZykobmV4dCkpXG4gICAgICAgIChfYSA9IG5leHQsIG5leHQgPSBfYS5uZXh0KTtcbiAgICByZXR1cm4gbmV4dDtcbn1cbmV4cG9ydHMubmV4dEVsZW1lbnRTaWJsaW5nID0gbmV4dEVsZW1lbnRTaWJsaW5nO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcmV2aW91cyBlbGVtZW50IHNpYmxpbmcgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgcHJldmlvdXMgc2libGluZyBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIHByZXZpb3VzIHNpYmxpbmcgdGhhdCBpcyBhIHRhZy5cbiAqL1xuZnVuY3Rpb24gcHJldkVsZW1lbnRTaWJsaW5nKGVsZW0pIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHByZXYgPSBlbGVtLnByZXY7XG4gICAgd2hpbGUgKHByZXYgIT09IG51bGwgJiYgISgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKHByZXYpKVxuICAgICAgICAoX2EgPSBwcmV2LCBwcmV2ID0gX2EucHJldik7XG4gICAgcmV0dXJuIHByZXY7XG59XG5leHBvcnRzLnByZXZFbGVtZW50U2libGluZyA9IHByZXZFbGVtZW50U2libGluZztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmcgPT4ge1xuXHRpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIHN0cmluZycpO1xuXHR9XG5cblx0Ly8gRXNjYXBlIGNoYXJhY3RlcnMgd2l0aCBzcGVjaWFsIG1lYW5pbmcgZWl0aGVyIGluc2lkZSBvciBvdXRzaWRlIGNoYXJhY3RlciBzZXRzLlxuXHQvLyBVc2UgYSBzaW1wbGUgYmFja3NsYXNoIGVzY2FwZSB3aGVuIGl04oCZcyBhbHdheXMgdmFsaWQsIGFuZCBhIFxcdW5ubm4gZXNjYXBlIHdoZW4gdGhlIHNpbXBsZXIgZm9ybSB3b3VsZCBiZSBkaXNhbGxvd2VkIGJ5IFVuaWNvZGUgcGF0dGVybnPigJkgc3RyaWN0ZXIgZ3JhbW1hci5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpXG5cdFx0LnJlcGxhY2UoLy0vZywgJ1xcXFx4MmQnKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VGZWVkID0gZXhwb3J0cy5GZWVkSGFuZGxlciA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRvbWhhbmRsZXJcIikpO1xudmFyIERvbVV0aWxzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJkb211dGlsc1wiKSk7XG52YXIgUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9QYXJzZXJcIik7XG52YXIgRmVlZEl0ZW1NZWRpYU1lZGl1bTtcbihmdW5jdGlvbiAoRmVlZEl0ZW1NZWRpYU1lZGl1bSkge1xuICAgIEZlZWRJdGVtTWVkaWFNZWRpdW1bRmVlZEl0ZW1NZWRpYU1lZGl1bVtcImltYWdlXCJdID0gMF0gPSBcImltYWdlXCI7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiYXVkaW9cIl0gPSAxXSA9IFwiYXVkaW9cIjtcbiAgICBGZWVkSXRlbU1lZGlhTWVkaXVtW0ZlZWRJdGVtTWVkaWFNZWRpdW1bXCJ2aWRlb1wiXSA9IDJdID0gXCJ2aWRlb1wiO1xuICAgIEZlZWRJdGVtTWVkaWFNZWRpdW1bRmVlZEl0ZW1NZWRpYU1lZGl1bVtcImRvY3VtZW50XCJdID0gM10gPSBcImRvY3VtZW50XCI7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiZXhlY3V0YWJsZVwiXSA9IDRdID0gXCJleGVjdXRhYmxlXCI7XG59KShGZWVkSXRlbU1lZGlhTWVkaXVtIHx8IChGZWVkSXRlbU1lZGlhTWVkaXVtID0ge30pKTtcbnZhciBGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbjtcbihmdW5jdGlvbiAoRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb24pIHtcbiAgICBGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbltGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbltcInNhbXBsZVwiXSA9IDBdID0gXCJzYW1wbGVcIjtcbiAgICBGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbltGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbltcImZ1bGxcIl0gPSAxXSA9IFwiZnVsbFwiO1xuICAgIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW0ZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW1wibm9uc3RvcFwiXSA9IDJdID0gXCJub25zdG9wXCI7XG59KShGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbiB8fCAoRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb24gPSB7fSkpO1xuLy8gVE9ETzogQ29uc3VtZSBkYXRhIGFzIGl0IGlzIGNvbWluZyBpblxudmFyIEZlZWRIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhGZWVkSGFuZGxlciwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICovXG4gICAgZnVuY3Rpb24gRmVlZEhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBvcHRpb25zID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjYWxsYmFjaywgb3B0aW9ucykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGZWVkSGFuZGxlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBmZWVkUm9vdCA9IGdldE9uZUVsZW1lbnQoaXNWYWxpZEZlZWQsIHRoaXMuZG9tKTtcbiAgICAgICAgaWYgKCFmZWVkUm9vdCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDYWxsYmFjayhuZXcgRXJyb3IoXCJjb3VsZG4ndCBmaW5kIHJvb3Qgb2YgZmVlZFwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZlZWQgPSB7fTtcbiAgICAgICAgaWYgKGZlZWRSb290Lm5hbWUgPT09IFwiZmVlZFwiKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRzID0gZmVlZFJvb3QuY2hpbGRyZW47XG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBcImF0b21cIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgdmFyIGhyZWYgPSBnZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGNoaWxkcykpO1xuICAgICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgICAgICBmZWVkLmxpbmsgPSBocmVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwic3VidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGZlZWQudXBkYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgICAgICAgICBmZWVkLml0ZW1zID0gZ2V0RWxlbWVudHMoXCJlbnRyeVwiLCBjaGlsZHMpLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGl0ZW0uY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIHZhciBocmVmID0gZ2V0QXR0cmlidXRlKFwiaHJlZlwiLCBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHJlbikpO1xuICAgICAgICAgICAgICAgIGlmIChocmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmxpbmsgPSBocmVmO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBmZXRjaChcInN1bW1hcnlcIiwgY2hpbGRyZW4pIHx8IGZldGNoKFwiY29udGVudFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBwdWJEYXRlID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBpZiAocHViRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUocHViRGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVudHJ5Lm1lZGlhID0gZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRzID0gKF9iID0gKF9hID0gZ2V0T25lRWxlbWVudChcImNoYW5uZWxcIiwgZmVlZFJvb3QuY2hpbGRyZW4pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgICAgICAgICAgZmVlZC50eXBlID0gZmVlZFJvb3QubmFtZS5zdWJzdHIoMCwgMyk7XG4gICAgICAgICAgICBmZWVkLmlkID0gXCJcIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICB2YXIgdXBkYXRlZCA9IGZldGNoKFwibGFzdEJ1aWxkRGF0ZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgaWYgKHVwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJhdXRob3JcIiwgXCJtYW5hZ2luZ0VkaXRvclwiLCBjaGlsZHMsIHRydWUpO1xuICAgICAgICAgICAgZmVlZC5pdGVtcyA9IGdldEVsZW1lbnRzKFwiaXRlbVwiLCBmZWVkUm9vdC5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gaXRlbS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiZ3VpZFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImxpbmtcIiwgXCJsaW5rXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIHZhciBwdWJEYXRlID0gZmV0Y2goXCJwdWJEYXRlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBpZiAocHViRGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucHViRGF0ZSA9IG5ldyBEYXRlKHB1YkRhdGUpO1xuICAgICAgICAgICAgICAgIGVudHJ5Lm1lZGlhID0gZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mZWVkID0gZmVlZDtcbiAgICAgICAgdGhpcy5oYW5kbGVDYWxsYmFjayhudWxsKTtcbiAgICB9O1xuICAgIHJldHVybiBGZWVkSGFuZGxlcjtcbn0oZG9taGFuZGxlcl8xLmRlZmF1bHQpKTtcbmV4cG9ydHMuRmVlZEhhbmRsZXIgPSBGZWVkSGFuZGxlcjtcbmZ1bmN0aW9uIGdldE1lZGlhRWxlbWVudHMod2hlcmUpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudHMoXCJtZWRpYTpjb250ZW50XCIsIHdoZXJlKS5tYXAoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgdmFyIG1lZGlhID0ge1xuICAgICAgICAgICAgbWVkaXVtOiBlbGVtLmF0dHJpYnMubWVkaXVtLFxuICAgICAgICAgICAgaXNEZWZhdWx0OiAhIWVsZW0uYXR0cmlicy5pc0RlZmF1bHQsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMudXJsKSB7XG4gICAgICAgICAgICBtZWRpYS51cmwgPSBlbGVtLmF0dHJpYnMudXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuZmlsZVNpemUpIHtcbiAgICAgICAgICAgIG1lZGlhLmZpbGVTaXplID0gcGFyc2VJbnQoZWxlbS5hdHRyaWJzLmZpbGVTaXplLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy50eXBlKSB7XG4gICAgICAgICAgICBtZWRpYS50eXBlID0gZWxlbS5hdHRyaWJzLnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5leHByZXNzaW9uKSB7XG4gICAgICAgICAgICBtZWRpYS5leHByZXNzaW9uID0gZWxlbS5hdHRyaWJzXG4gICAgICAgICAgICAgICAgLmV4cHJlc3Npb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5iaXRyYXRlKSB7XG4gICAgICAgICAgICBtZWRpYS5iaXRyYXRlID0gcGFyc2VJbnQoZWxlbS5hdHRyaWJzLmJpdHJhdGUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmZyYW1lcmF0ZSkge1xuICAgICAgICAgICAgbWVkaWEuZnJhbWVyYXRlID0gcGFyc2VJbnQoZWxlbS5hdHRyaWJzLmZyYW1lcmF0ZSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuc2FtcGxpbmdyYXRlKSB7XG4gICAgICAgICAgICBtZWRpYS5zYW1wbGluZ3JhdGUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuc2FtcGxpbmdyYXRlLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5jaGFubmVscykge1xuICAgICAgICAgICAgbWVkaWEuY2hhbm5lbHMgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuY2hhbm5lbHMsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICBtZWRpYS5kdXJhdGlvbiA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5kdXJhdGlvbiwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuaGVpZ2h0KSB7XG4gICAgICAgICAgICBtZWRpYS5oZWlnaHQgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuaGVpZ2h0LCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy53aWR0aCkge1xuICAgICAgICAgICAgbWVkaWEud2lkdGggPSBwYXJzZUludChlbGVtLmF0dHJpYnMud2lkdGgsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmxhbmcpIHtcbiAgICAgICAgICAgIG1lZGlhLmxhbmcgPSBlbGVtLmF0dHJpYnMubGFuZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVkaWE7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50cyh0YWdOYW1lLCB3aGVyZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCB3aGVyZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHRhZ05hbWUsIG5vZGUpIHtcbiAgICByZXR1cm4gRG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgbm9kZSwgdHJ1ZSwgMSlbMF07XG59XG5mdW5jdGlvbiBmZXRjaCh0YWdOYW1lLCB3aGVyZSwgcmVjdXJzZSkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IGZhbHNlOyB9XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldFRleHQoRG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UsIDEpKS50cmltKCk7XG59XG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGUobmFtZSwgZWxlbSkge1xuICAgIGlmICghZWxlbSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGF0dHJpYnMgPSBlbGVtLmF0dHJpYnM7XG4gICAgcmV0dXJuIGF0dHJpYnNbbmFtZV07XG59XG5mdW5jdGlvbiBhZGRDb25kaXRpb25hbGx5KG9iaiwgcHJvcCwgd2hhdCwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSBmYWxzZTsgfVxuICAgIHZhciB0bXAgPSBmZXRjaCh3aGF0LCB3aGVyZSwgcmVjdXJzZSk7XG4gICAgaWYgKHRtcClcbiAgICAgICAgb2JqW3Byb3BdID0gdG1wO1xufVxuZnVuY3Rpb24gaXNWYWxpZEZlZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn1cbi8qKlxuICogUGFyc2UgYSBmZWVkLlxuICpcbiAqIEBwYXJhbSBmZWVkIFRoZSBmZWVkIHRoYXQgc2hvdWxkIGJlIHBhcnNlZCwgYXMgYSBzdHJpbmcuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbGx5LCBvcHRpb25zIGZvciBwYXJzaW5nLiBXaGVuIHVzaW5nIHRoaXMgb3B0aW9uLCB5b3Ugc2hvdWxkIHNldCBgeG1sTW9kZWAgdG8gYHRydWVgLlxuICovXG5mdW5jdGlvbiBwYXJzZUZlZWQoZmVlZCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHsgeG1sTW9kZTogdHJ1ZSB9OyB9XG4gICAgdmFyIGhhbmRsZXIgPSBuZXcgRmVlZEhhbmRsZXIob3B0aW9ucyk7XG4gICAgbmV3IFBhcnNlcl8xLlBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZmVlZCk7XG4gICAgcmV0dXJuIGhhbmRsZXIuZmVlZDtcbn1cbmV4cG9ydHMucGFyc2VGZWVkID0gcGFyc2VGZWVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhcnNlciA9IHZvaWQgMDtcbnZhciBUb2tlbml6ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Ub2tlbml6ZXJcIikpO1xudmFyIGZvcm1UYWdzID0gbmV3IFNldChbXG4gICAgXCJpbnB1dFwiLFxuICAgIFwib3B0aW9uXCIsXG4gICAgXCJvcHRncm91cFwiLFxuICAgIFwic2VsZWN0XCIsXG4gICAgXCJidXR0b25cIixcbiAgICBcImRhdGFsaXN0XCIsXG4gICAgXCJ0ZXh0YXJlYVwiLFxuXSk7XG52YXIgcFRhZyA9IG5ldyBTZXQoW1wicFwiXSk7XG52YXIgb3BlbkltcGxpZXNDbG9zZSA9IHtcbiAgICB0cjogbmV3IFNldChbXCJ0clwiLCBcInRoXCIsIFwidGRcIl0pLFxuICAgIHRoOiBuZXcgU2V0KFtcInRoXCJdKSxcbiAgICB0ZDogbmV3IFNldChbXCJ0aGVhZFwiLCBcInRoXCIsIFwidGRcIl0pLFxuICAgIGJvZHk6IG5ldyBTZXQoW1wiaGVhZFwiLCBcImxpbmtcIiwgXCJzY3JpcHRcIl0pLFxuICAgIGxpOiBuZXcgU2V0KFtcImxpXCJdKSxcbiAgICBwOiBwVGFnLFxuICAgIGgxOiBwVGFnLFxuICAgIGgyOiBwVGFnLFxuICAgIGgzOiBwVGFnLFxuICAgIGg0OiBwVGFnLFxuICAgIGg1OiBwVGFnLFxuICAgIGg2OiBwVGFnLFxuICAgIHNlbGVjdDogZm9ybVRhZ3MsXG4gICAgaW5wdXQ6IGZvcm1UYWdzLFxuICAgIG91dHB1dDogZm9ybVRhZ3MsXG4gICAgYnV0dG9uOiBmb3JtVGFncyxcbiAgICBkYXRhbGlzdDogZm9ybVRhZ3MsXG4gICAgdGV4dGFyZWE6IGZvcm1UYWdzLFxuICAgIG9wdGlvbjogbmV3IFNldChbXCJvcHRpb25cIl0pLFxuICAgIG9wdGdyb3VwOiBuZXcgU2V0KFtcIm9wdGdyb3VwXCIsIFwib3B0aW9uXCJdKSxcbiAgICBkZDogbmV3IFNldChbXCJkdFwiLCBcImRkXCJdKSxcbiAgICBkdDogbmV3IFNldChbXCJkdFwiLCBcImRkXCJdKSxcbiAgICBhZGRyZXNzOiBwVGFnLFxuICAgIGFydGljbGU6IHBUYWcsXG4gICAgYXNpZGU6IHBUYWcsXG4gICAgYmxvY2txdW90ZTogcFRhZyxcbiAgICBkZXRhaWxzOiBwVGFnLFxuICAgIGRpdjogcFRhZyxcbiAgICBkbDogcFRhZyxcbiAgICBmaWVsZHNldDogcFRhZyxcbiAgICBmaWdjYXB0aW9uOiBwVGFnLFxuICAgIGZpZ3VyZTogcFRhZyxcbiAgICBmb290ZXI6IHBUYWcsXG4gICAgZm9ybTogcFRhZyxcbiAgICBoZWFkZXI6IHBUYWcsXG4gICAgaHI6IHBUYWcsXG4gICAgbWFpbjogcFRhZyxcbiAgICBuYXY6IHBUYWcsXG4gICAgb2w6IHBUYWcsXG4gICAgcHJlOiBwVGFnLFxuICAgIHNlY3Rpb246IHBUYWcsXG4gICAgdGFibGU6IHBUYWcsXG4gICAgdWw6IHBUYWcsXG4gICAgcnQ6IG5ldyBTZXQoW1wicnRcIiwgXCJycFwiXSksXG4gICAgcnA6IG5ldyBTZXQoW1wicnRcIiwgXCJycFwiXSksXG4gICAgdGJvZHk6IG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0Ym9keVwiXSksXG4gICAgdGZvb3Q6IG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0Ym9keVwiXSksXG59O1xudmFyIHZvaWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwiYXJlYVwiLFxuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZvbnRcIixcbiAgICBcImJyXCIsXG4gICAgXCJjb2xcIixcbiAgICBcImNvbW1hbmRcIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJcIixcbiAgICBcImltZ1wiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImlzaW5kZXhcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGlua1wiLFxuICAgIFwibWV0YVwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInNvdXJjZVwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcIndiclwiLFxuXSk7XG52YXIgZm9yZWlnbkNvbnRleHRFbGVtZW50cyA9IG5ldyBTZXQoW1wibWF0aFwiLCBcInN2Z1wiXSk7XG52YXIgaHRtbEludGVncmF0aW9uRWxlbWVudHMgPSBuZXcgU2V0KFtcbiAgICBcIm1pXCIsXG4gICAgXCJtb1wiLFxuICAgIFwibW5cIixcbiAgICBcIm1zXCIsXG4gICAgXCJtdGV4dFwiLFxuICAgIFwiYW5ub3RhdGlvbi14bWxcIixcbiAgICBcImZvcmVpZ25PYmplY3RcIixcbiAgICBcImRlc2NcIixcbiAgICBcInRpdGxlXCIsXG5dKTtcbnZhciByZU5hbWVFbmQgPSAvXFxzfFxcLy87XG52YXIgUGFyc2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcnNlcihjYnMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgLyoqIFRoZSBzdGFydCBpbmRleCBvZiB0aGUgbGFzdCBldmVudC4gKi9cbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICAgICAgLyoqIFRoZSBlbmQgaW5kZXggb2YgdGhlIGxhc3QgZXZlbnQuICovXG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBudWxsO1xuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0ID0gW107XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzICE9PSBudWxsICYmIGNicyAhPT0gdm9pZCAwID8gY2JzIDoge307XG4gICAgICAgIHRoaXMubG93ZXJDYXNlVGFnTmFtZXMgPSAoX2EgPSBvcHRpb25zLmxvd2VyQ2FzZVRhZ3MpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICFvcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMgPVxuICAgICAgICAgICAgKF9iID0gb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogIW9wdGlvbnMueG1sTW9kZTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgKChfYyA9IG9wdGlvbnMuVG9rZW5pemVyKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBUb2tlbml6ZXJfMS5kZWZhdWx0KSh0aGlzLm9wdGlvbnMsIHRoaXMpO1xuICAgICAgICAoX2UgPSAoX2QgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UuY2FsbChfZCwgdGhpcyk7XG4gICAgfVxuICAgIFBhcnNlci5wcm90b3R5cGUudXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoaW5pdGlhbE9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5lbmRJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5pemVyLnNlY3Rpb25TdGFydCA8PSBpbml0aWFsT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IHRoaXMudG9rZW5pemVyLnNlY3Rpb25TdGFydCAtIGluaXRpYWxPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLmVuZEluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuZEluZGV4ID0gdGhpcy50b2tlbml6ZXIuZ2V0QWJzb2x1dGVJbmRleCgpO1xuICAgIH07XG4gICAgLy8gVG9rZW5pemVyIGV2ZW50IGhhbmRsZXJzXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICB0aGlzLmVuZEluZGV4LS07XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBkYXRhKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25vcGVudGFnbmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IG5hbWU7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnhtbE1vZGUgJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcGVuSW1wbGllc0Nsb3NlLCBuYW1lKSkge1xuICAgICAgICAgICAgdmFyIGVsID0gdm9pZCAwO1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgIG9wZW5JbXBsaWVzQ2xvc2VbbmFtZV0uaGFzKChlbCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbmNsb3NldGFnKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgIXZvaWRFbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChuYW1lKTtcbiAgICAgICAgICAgIGlmIChmb3JlaWduQ29udGV4dEVsZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ub3BlbnRhZ25hbWUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBuYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ub3BlbnRhZylcbiAgICAgICAgICAgIHRoaXMuYXR0cmlicyA9IHt9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbm9wZW50YWdlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oMSk7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnMpIHtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbm9wZW50YWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzLnRhZ25hbWUsIHRoaXMuYXR0cmlicyk7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnMgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnhtbE1vZGUgJiZcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcgJiZcbiAgICAgICAgICAgIHZvaWRFbGVtZW50cy5oYXModGhpcy50YWduYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25jbG9zZXRhZyh0aGlzLnRhZ25hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IFwiXCI7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9yZWlnbkNvbnRleHRFbGVtZW50cy5oYXMobmFtZSkgfHxcbiAgICAgICAgICAgIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGFjay5sZW5ndGggJiZcbiAgICAgICAgICAgICh0aGlzLm9wdGlvbnMueG1sTW9kZSB8fCAhdm9pZEVsZW1lbnRzLmhhcyhuYW1lKSkpIHtcbiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLnN0YWNrLmxhc3RJbmRleE9mKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYnMub25jbG9zZXRhZykge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLnN0YWNrLmxlbmd0aCAtIHBvcztcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHBvcy0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBzdGFjayBoYXMgc3VmZmljaWVudCBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zdGFjay5wb3AoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLmxlbmd0aCA9IHBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09IFwicFwiICYmICF0aGlzLm9wdGlvbnMueG1sTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudFRhZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMueG1sTW9kZSAmJiAobmFtZSA9PT0gXCJiclwiIHx8IG5hbWUgPT09IFwicFwiKSkge1xuICAgICAgICAgICAgdGhpcy5vbm9wZW50YWduYW1lKG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnNlbGZjbG9zaW5ndGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHxcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy5yZWNvZ25pemVTZWxmQ2xvc2luZyB8fFxuICAgICAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dFt0aGlzLmZvcmVpZ25Db250ZXh0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQ3VycmVudFRhZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbm9wZW50YWdlbmQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5jbG9zZUN1cnJlbnRUYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy50YWduYW1lO1xuICAgICAgICB0aGlzLm9ub3BlbnRhZ2VuZCgpO1xuICAgICAgICAvKlxuICAgICAgICAgKiBTZWxmLWNsb3NpbmcgdGFncyB3aWxsIGJlIG9uIHRoZSB0b3Agb2YgdGhlIHN0YWNrXG4gICAgICAgICAqIChjaGVhcGVyIGNoZWNrIHRoYW4gaW4gb25jbG9zZXRhZylcbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmNsb3NldGFnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgbmFtZSk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmlibmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlibmFtZSA9IG5hbWU7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZGF0YSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlICs9IHZhbHVlO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmVuZCA9IGZ1bmN0aW9uIChxdW90ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25hdHRyaWJ1dGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzLmF0dHJpYm5hbWUsIHRoaXMuYXR0cmlidmFsdWUsIHF1b3RlKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlicyAmJlxuICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnMsIHRoaXMuYXR0cmlibmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlic1t0aGlzLmF0dHJpYm5hbWVdID0gdGhpcy5hdHRyaWJ2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlID0gXCJcIjtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuZ2V0SW5zdHJ1Y3Rpb25OYW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpZHggPSB2YWx1ZS5zZWFyY2gocmVOYW1lRW5kKTtcbiAgICAgICAgdmFyIG5hbWUgPSBpZHggPCAwID8gdmFsdWUgOiB2YWx1ZS5zdWJzdHIoMCwgaWR4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uZGVjbGFyYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gdGhpcy5nZXRJbnN0cnVjdGlvbk5hbWUodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24oXCIhXCIgKyBuYW1lXzEsIFwiIVwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgdmFyIG5hbWVfMiA9IHRoaXMuZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiP1wiICsgbmFtZV8yLCBcIj9cIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDQpO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jb21tZW50KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25jb21tZW50ZW5kKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYyk7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uY2RhdGEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oMSk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMueG1sTW9kZSB8fCB0aGlzLm9wdGlvbnMucmVjb2duaXplQ0RBVEEpIHtcbiAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmNkYXRhc3RhcnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgICAgIChfZCA9IChfYyA9IHRoaXMuY2JzKS5vbnRleHQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jLCB2YWx1ZSk7XG4gICAgICAgICAgICAoX2YgPSAoX2UgPSB0aGlzLmNicykub25jZGF0YWVuZCkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmNhbGwoX2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbmNvbW1lbnQoXCJbQ0RBVEFbXCIgKyB2YWx1ZSArIFwiXV1cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLnN0YWNrLmxlbmd0aDsgaSA+IDA7IHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zdGFja1stLWldKSlcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uZW5kKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhcnNlciB0byBhIGJsYW5rIHN0YXRlLCByZWFkeSB0byBwYXJzZSBhIG5ldyBIVE1MIGRvY3VtZW50XG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25yZXNldCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICB0aGlzLnRva2VuaXplci5yZXNldCgpO1xuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLmF0dHJpYnMgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIChfZCA9IChfYyA9IHRoaXMuY2JzKS5vbnBhcnNlcmluaXQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jLCB0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgcGFyc2VyLCB0aGVuIHBhcnNlcyBhIGNvbXBsZXRlIGRvY3VtZW50IGFuZFxuICAgICAqIHB1c2hlcyBpdCB0byB0aGUgaGFuZGxlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIERvY3VtZW50IHRvIHBhcnNlLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDb21wbGV0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5lbmQoZGF0YSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBjaHVuayBvZiBkYXRhIGFuZCBjYWxscyB0aGUgY29ycmVzcG9uZGluZyBjYWxsYmFja3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB0aGlzLnRva2VuaXplci53cml0ZShjaHVuayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGFuZCBjbGVhcnMgdGhlIHN0YWNrLCBjYWxscyBvbmVuZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBPcHRpb25hbCBmaW5hbCBjaHVuayB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB0aGlzLnRva2VuaXplci5lbmQoY2h1bmspO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHBhcnNpbmcuIFRoZSBwYXJzZXIgd29uJ3QgZW1pdCBldmVudHMgdW50aWwgYHJlc3VtZWAgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnBhdXNlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXN1bWVzIHBhcnNpbmcgYWZ0ZXIgYHBhdXNlYCB3YXMgY2FsbGVkLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5yZXN1bWUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIG9mIGB3cml0ZWAsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBDaHVuayB0byBwYXJzZS5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDaHVuayA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB0aGlzLndyaXRlKGNodW5rKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWFzIG9mIGBlbmRgLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgT3B0aW9uYWwgZmluYWwgY2h1bmsgdG8gcGFyc2UuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy5lbmQoY2h1bmspO1xuICAgIH07XG4gICAgcmV0dXJuIFBhcnNlcjtcbn0oKSk7XG5leHBvcnRzLlBhcnNlciA9IFBhcnNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlY29kZV9jb2RlcG9pbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZW50aXRpZXMvbGliL2RlY29kZV9jb2RlcG9pbnRcIikpO1xudmFyIGVudGl0aWVzX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZW50aXRpZXMvbGliL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgbGVnYWN5X2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZW50aXRpZXMvbGliL21hcHMvbGVnYWN5Lmpzb25cIikpO1xudmFyIHhtbF9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9tYXBzL3htbC5qc29uXCIpKTtcbmZ1bmN0aW9uIHdoaXRlc3BhY2UoYykge1xuICAgIHJldHVybiBjID09PSBcIiBcIiB8fCBjID09PSBcIlxcblwiIHx8IGMgPT09IFwiXFx0XCIgfHwgYyA9PT0gXCJcXGZcIiB8fCBjID09PSBcIlxcclwiO1xufVxuZnVuY3Rpb24gaXNBU0NJSUFscGhhKGMpIHtcbiAgICByZXR1cm4gKGMgPj0gXCJhXCIgJiYgYyA8PSBcInpcIikgfHwgKGMgPj0gXCJBXCIgJiYgYyA8PSBcIlpcIik7XG59XG5mdW5jdGlvbiBpZkVsc2VTdGF0ZSh1cHBlciwgU1VDQ0VTUywgRkFJTFVSRSkge1xuICAgIHZhciBsb3dlciA9IHVwcGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHVwcGVyID09PSBsb3dlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBsb3dlcikge1xuICAgICAgICAgICAgICAgIHQuX3N0YXRlID0gU1VDQ0VTUztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHQuX3N0YXRlID0gRkFJTFVSRTtcbiAgICAgICAgICAgICAgICB0Ll9pbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgaWYgKGMgPT09IGxvd2VyIHx8IGMgPT09IHVwcGVyKSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IFNVQ0NFU1M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IEZBSUxVUkU7XG4gICAgICAgICAgICB0Ll9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIodXBwZXIsIE5FWFRfU1RBVEUpIHtcbiAgICB2YXIgbG93ZXIgPSB1cHBlci50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAodCwgYykge1xuICAgICAgICBpZiAoYyA9PT0gbG93ZXIgfHwgYyA9PT0gdXBwZXIpIHtcbiAgICAgICAgICAgIHQuX3N0YXRlID0gTkVYVF9TVEFURTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHQuX3N0YXRlID0gMyAvKiBJblRhZ05hbWUgKi87XG4gICAgICAgICAgICB0Ll9pbmRleC0tOyAvLyBDb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBzdGF0ZUJlZm9yZUNkYXRhMSA9IGlmRWxzZVN0YXRlKFwiQ1wiLCAyNCAvKiBCZWZvcmVDZGF0YTIgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlQ2RhdGEyID0gaWZFbHNlU3RhdGUoXCJEXCIsIDI1IC8qIEJlZm9yZUNkYXRhMyAqLywgMTYgLyogSW5EZWNsYXJhdGlvbiAqLyk7XG52YXIgc3RhdGVCZWZvcmVDZGF0YTMgPSBpZkVsc2VTdGF0ZShcIkFcIiwgMjYgLyogQmVmb3JlQ2RhdGE0ICovLCAxNiAvKiBJbkRlY2xhcmF0aW9uICovKTtcbnZhciBzdGF0ZUJlZm9yZUNkYXRhNCA9IGlmRWxzZVN0YXRlKFwiVFwiLCAyNyAvKiBCZWZvcmVDZGF0YTUgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlQ2RhdGE1ID0gaWZFbHNlU3RhdGUoXCJBXCIsIDI4IC8qIEJlZm9yZUNkYXRhNiAqLywgMTYgLyogSW5EZWNsYXJhdGlvbiAqLyk7XG52YXIgc3RhdGVCZWZvcmVTY3JpcHQxID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIlJcIiwgMzUgLyogQmVmb3JlU2NyaXB0MiAqLyk7XG52YXIgc3RhdGVCZWZvcmVTY3JpcHQyID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIklcIiwgMzYgLyogQmVmb3JlU2NyaXB0MyAqLyk7XG52YXIgc3RhdGVCZWZvcmVTY3JpcHQzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIlBcIiwgMzcgLyogQmVmb3JlU2NyaXB0NCAqLyk7XG52YXIgc3RhdGVCZWZvcmVTY3JpcHQ0ID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIlRcIiwgMzggLyogQmVmb3JlU2NyaXB0NSAqLyk7XG52YXIgc3RhdGVBZnRlclNjcmlwdDEgPSBpZkVsc2VTdGF0ZShcIlJcIiwgNDAgLyogQWZ0ZXJTY3JpcHQyICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTY3JpcHQyID0gaWZFbHNlU3RhdGUoXCJJXCIsIDQxIC8qIEFmdGVyU2NyaXB0MyAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyU2NyaXB0MyA9IGlmRWxzZVN0YXRlKFwiUFwiLCA0MiAvKiBBZnRlclNjcmlwdDQgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclNjcmlwdDQgPSBpZkVsc2VTdGF0ZShcIlRcIiwgNDMgLyogQWZ0ZXJTY3JpcHQ1ICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQmVmb3JlU3R5bGUxID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIllcIiwgNDUgLyogQmVmb3JlU3R5bGUyICovKTtcbnZhciBzdGF0ZUJlZm9yZVN0eWxlMiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJMXCIsIDQ2IC8qIEJlZm9yZVN0eWxlMyAqLyk7XG52YXIgc3RhdGVCZWZvcmVTdHlsZTMgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiRVwiLCA0NyAvKiBCZWZvcmVTdHlsZTQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTdHlsZTEgPSBpZkVsc2VTdGF0ZShcIllcIiwgNDkgLyogQWZ0ZXJTdHlsZTIgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclN0eWxlMiA9IGlmRWxzZVN0YXRlKFwiTFwiLCA1MCAvKiBBZnRlclN0eWxlMyAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyU3R5bGUzID0gaWZFbHNlU3RhdGUoXCJFXCIsIDUxIC8qIEFmdGVyU3R5bGU0ICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQmVmb3JlU3BlY2lhbFQgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiSVwiLCA1NCAvKiBCZWZvcmVUaXRsZTEgKi8pO1xudmFyIHN0YXRlQmVmb3JlVGl0bGUxID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIlRcIiwgNTUgLyogQmVmb3JlVGl0bGUyICovKTtcbnZhciBzdGF0ZUJlZm9yZVRpdGxlMiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJMXCIsIDU2IC8qIEJlZm9yZVRpdGxlMyAqLyk7XG52YXIgc3RhdGVCZWZvcmVUaXRsZTMgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiRVwiLCA1NyAvKiBCZWZvcmVUaXRsZTQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTcGVjaWFsVEVuZCA9IGlmRWxzZVN0YXRlKFwiSVwiLCA1OCAvKiBBZnRlclRpdGxlMSAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyVGl0bGUxID0gaWZFbHNlU3RhdGUoXCJUXCIsIDU5IC8qIEFmdGVyVGl0bGUyICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJUaXRsZTIgPSBpZkVsc2VTdGF0ZShcIkxcIiwgNjAgLyogQWZ0ZXJUaXRsZTMgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclRpdGxlMyA9IGlmRWxzZVN0YXRlKFwiRVwiLCA2MSAvKiBBZnRlclRpdGxlNCAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUJlZm9yZUVudGl0eSA9IGlmRWxzZVN0YXRlKFwiI1wiLCA2MyAvKiBCZWZvcmVOdW1lcmljRW50aXR5ICovLCA2NCAvKiBJbk5hbWVkRW50aXR5ICovKTtcbnZhciBzdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkgPSBpZkVsc2VTdGF0ZShcIlhcIiwgNjYgLyogSW5IZXhFbnRpdHkgKi8sIDY1IC8qIEluTnVtZXJpY0VudGl0eSAqLyk7XG52YXIgVG9rZW5pemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRva2VuaXplcihvcHRpb25zLCBjYnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgc3RhdGUgdGhlIHRva2VuaXplciBpcyBpbi4gKi9cbiAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIC8qKiBUaGUgcmVhZCBidWZmZXIuICovXG4gICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgLyoqIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlY3Rpb24gdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcmVhZC4gKi9cbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICAvKiogVGhlIGluZGV4IHdpdGhpbiB0aGUgYnVmZmVyIHRoYXQgd2UgYXJlIGN1cnJlbnRseSBsb29raW5nIGF0LiAqL1xuICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEYXRhIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBwcm9jZXNzZWQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGJ1ZmZlciBvY2Nhc2lvbmFsbHkuXG4gICAgICAgICAqIGBfYnVmZmVyT2Zmc2V0YCBrZWVwcyB0cmFjayBvZiBob3cgbWFueSBjaGFyYWN0ZXJzIGhhdmUgYmVlbiByZW1vdmVkLCB0byBtYWtlIHN1cmUgcG9zaXRpb24gaW5mb3JtYXRpb24gaXMgYWNjdXJhdGUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIC8qKiBTb21lIGJlaGF2aW9yLCBlZy4gd2hlbiBkZWNvZGluZyBlbnRpdGllcywgaXMgZG9uZSB3aGlsZSB3ZSBhcmUgaW4gYW5vdGhlciBzdGF0ZS4gVGhpcyBrZWVwcyB0cmFjayBvZiB0aGUgb3RoZXIgc3RhdGUgdHlwZS4gKi9cbiAgICAgICAgdGhpcy5iYXNlU3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIC8qKiBGb3Igc3BlY2lhbCBwYXJzaW5nIGJlaGF2aW9yIGluc2lkZSBvZiBzY3JpcHQgYW5kIHN0eWxlIHRhZ3MuICovXG4gICAgICAgIHRoaXMuc3BlY2lhbCA9IDEgLyogTm9uZSAqLztcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB0b2tlbml6ZXIgaGFzIGJlZW4gcGF1c2VkLiAqL1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRva2VuaXplciBoYXMgZmluaXNoZWQgcnVubmluZyAvIGAuZW5kYCBoYXMgYmVlbiBjYWxsZWQuICovXG4gICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYnMgPSBjYnM7XG4gICAgICAgIHRoaXMueG1sTW9kZSA9ICEhKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54bWxNb2RlKTtcbiAgICAgICAgdGhpcy5kZWNvZGVFbnRpdGllcyA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZWNvZGVFbnRpdGllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdHJ1ZTtcbiAgICB9XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5iYXNlU3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIHRoaXMuc3BlY2lhbCA9IDEgLyogTm9uZSAqLztcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBpZiAodGhpcy5lbmRlZClcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uZXJyb3IoRXJyb3IoXCIud3JpdGUoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgICAgIHRoaXMuYnVmZmVyICs9IGNodW5rO1xuICAgICAgICB0aGlzLnBhcnNlKCk7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICBpZiAodGhpcy5lbmRlZClcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uZXJyb3IoRXJyb3IoXCIuZW5kKCkgYWZ0ZXIgZG9uZSFcIikpO1xuICAgICAgICBpZiAoY2h1bmspXG4gICAgICAgICAgICB0aGlzLndyaXRlKGNodW5rKTtcbiAgICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcpXG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGluZGV4IHdpdGhpbiBhbGwgb2YgdGhlIHdyaXR0ZW4gZGF0YS5cbiAgICAgKi9cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmdldEFic29sdXRlSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlck9mZnNldCArIHRoaXMuX2luZGV4O1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZVRleHQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI8XCIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+IHRoaXMuc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMiAvKiBCZWZvcmVUYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmXG4gICAgICAgICAgICBjID09PSBcIiZcIiAmJlxuICAgICAgICAgICAgKHRoaXMuc3BlY2lhbCA9PT0gMSAvKiBOb25lICovIHx8IHRoaXMuc3BlY2lhbCA9PT0gNCAvKiBUaXRsZSAqLykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+IHRoaXMuc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA2MiAvKiBCZWZvcmVFbnRpdHkgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIVE1MIG9ubHkgYWxsb3dzIEFTQ0lJIGFscGhhIGNoYXJhY3RlcnMgKGEteiBhbmQgQS1aKSBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgdGFnIG5hbWUuXG4gICAgICpcbiAgICAgKiBYTUwgYWxsb3dzIGEgbG90IG1vcmUgY2hhcmFjdGVycyBoZXJlIChAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMteG1sLyNOVC1OYW1lU3RhcnRDaGFyKS5cbiAgICAgKiBXZSBhbGxvdyBhbnl0aGluZyB0aGF0IHdvdWxkbid0IGVuZCB0aGUgdGFnLlxuICAgICAqL1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuaXNUYWdTdGFydENoYXIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gKGlzQVNDSUlBbHBoYShjKSB8fFxuICAgICAgICAgICAgKHRoaXMueG1sTW9kZSAmJiAhd2hpdGVzcGFjZShjKSAmJiBjICE9PSBcIi9cIiAmJiBjICE9PSBcIj5cIikpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZVRhZ05hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNSAvKiBCZWZvcmVDbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gXCI+XCIgfHxcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCAhPT0gMSAvKiBOb25lICovIHx8XG4gICAgICAgICAgICB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIiFcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNSAvKiBCZWZvcmVEZWNsYXJhdGlvbiAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE3IC8qIEluUHJvY2Vzc2luZ0luc3RydWN0aW9uICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuaXNUYWdTdGFydENoYXIoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPVxuICAgICAgICAgICAgICAgICF0aGlzLnhtbE1vZGUgJiYgKGMgPT09IFwic1wiIHx8IGMgPT09IFwiU1wiKVxuICAgICAgICAgICAgICAgICAgICA/IDMyIC8qIEJlZm9yZVNwZWNpYWxTICovXG4gICAgICAgICAgICAgICAgICAgIDogIXRoaXMueG1sTW9kZSAmJiAoYyA9PT0gXCJ0XCIgfHwgYyA9PT0gXCJUXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDUyIC8qIEJlZm9yZVNwZWNpYWxUICovXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9ub3BlbnRhZ25hbWVcIik7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmICh3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zcGVjaWFsICE9PSAxIC8qIE5vbmUgKi8pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNwZWNpYWwgIT09IDQgLyogVGl0bGUgKi8gJiYgKGMgPT09IFwic1wiIHx8IGMgPT09IFwiU1wiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzMgLyogQmVmb3JlU3BlY2lhbFNFbmQgKi87XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNwZWNpYWwgPT09IDQgLyogVGl0bGUgKi8gJiZcbiAgICAgICAgICAgICAgICAoYyA9PT0gXCJ0XCIgfHwgYyA9PT0gXCJUXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA1MyAvKiBCZWZvcmVTcGVjaWFsVEVuZCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuaXNUYWdTdGFydENoYXIoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMjAgLyogSW5TcGVjaWFsQ29tbWVudCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYgLyogSW5DbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25jbG9zZXRhZ1wiKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNyAvKiBBZnRlckNsb3NpbmdUYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAvLyBTa2lwIGV2ZXJ5dGhpbmcgdW50aWwgXCI+XCJcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25vcGVudGFnZW5kKCk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDQgLyogSW5TZWxmQ2xvc2luZ1RhZyAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA5IC8qIEluQXR0cmlidXRlTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJblNlbGZDbG9zaW5nVGFnID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnNlbGZjbG9zaW5ndGFnKCk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICAgICAgdGhpcy5zcGVjaWFsID0gMSAvKiBOb25lICovOyAvLyBSZXNldCBzcGVjaWFsIHN0YXRlLCBpbiBjYXNlIG9mIHNlbGYtY2xvc2luZyBzcGVjaWFsIHRhZ3NcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA4IC8qIEJlZm9yZUF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5BdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPVwiIHx8IGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmlibmFtZSh0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMCAvKiBBZnRlckF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDExIC8qIEJlZm9yZUF0dHJpYnV0ZVZhbHVlICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA4IC8qIEJlZm9yZUF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA5IC8qIEluQXR0cmlidXRlTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSAnXCInKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEyIC8qIEluQXR0cmlidXRlVmFsdWVEcSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEzIC8qIEluQXR0cmlidXRlVmFsdWVTcSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE0IC8qIEluQXR0cmlidXRlVmFsdWVOcSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBSZWNvbnN1bWUgdG9rZW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGMsIHF1b3RlKSB7XG4gICAgICAgIGlmIChjID09PSBxdW90ZSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChxdW90ZSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmIGMgPT09IFwiJlwiKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYyIC8qIEJlZm9yZUVudGl0eSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlRG91YmxlUXVvdGVzID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlKGMsICdcIicpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB0aGlzLmhhbmRsZUluQXR0cmlidXRlVmFsdWUoYywgXCInXCIpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmICh3aGl0ZXNwYWNlKGMpIHx8IGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA4IC8qIEJlZm9yZUF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICAgICAgdGhpcy5iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNjIgLyogQmVmb3JlRW50aXR5ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPVxuICAgICAgICAgICAgYyA9PT0gXCJbXCJcbiAgICAgICAgICAgICAgICA/IDIzIC8qIEJlZm9yZUNkYXRhMSAqL1xuICAgICAgICAgICAgICAgIDogYyA9PT0gXCItXCJcbiAgICAgICAgICAgICAgICAgICAgPyAxOCAvKiBCZWZvcmVDb21tZW50ICovXG4gICAgICAgICAgICAgICAgICAgIDogMTYgLyogSW5EZWNsYXJhdGlvbiAqLztcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkRlY2xhcmF0aW9uID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmRlY2xhcmF0aW9uKHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24odGhpcy5nZXRTZWN0aW9uKCkpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNvbW1lbnQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMTkgLyogSW5Db21tZW50ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE2IC8qIEluRGVjbGFyYXRpb24gKi87XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkNvbW1lbnQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCItXCIpXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIxIC8qIEFmdGVyQ29tbWVudDEgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5TcGVjaWFsQ29tbWVudCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXgpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNvbW1lbnQxID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIyIC8qIEFmdGVyQ29tbWVudDIgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE5IC8qIEluQ29tbWVudCAqLztcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyQ29tbWVudDIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSAyIHRyYWlsaW5nIGNoYXJzXG4gICAgICAgICAgICB0aGlzLmNicy5vbmNvbW1lbnQodGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCAtIDIpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMTkgLyogSW5Db21tZW50ICovO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2U6IHN0YXkgaW4gQUZURVJfQ09NTUVOVF8yIChgLS0tPmApXG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlQ2RhdGE2ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiW1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDI5IC8qIEluQ2RhdGEgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMTYgLyogSW5EZWNsYXJhdGlvbiAqLztcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkNkYXRhID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiXVwiKVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzMCAvKiBBZnRlckNkYXRhMSAqLztcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNkYXRhMSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIl1cIilcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzEgLyogQWZ0ZXJDZGF0YTIgKi87XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMjkgLyogSW5DZGF0YSAqLztcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNkYXRhMiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIDIgdHJhaWxpbmcgY2hhcnNcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEodGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCAtIDIpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gXCJdXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMjkgLyogSW5DZGF0YSAqLztcbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlOiBzdGF5IGluIEFGVEVSX0NEQVRBXzIgKGBdXV0+YClcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVTcGVjaWFsUyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcImNcIiB8fCBjID09PSBcIkNcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzNCAvKiBCZWZvcmVTY3JpcHQxICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwidFwiIHx8IGMgPT09IFwiVFwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDQ0IC8qIEJlZm9yZVN0eWxlMSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMyAvKiBJblRhZ05hbWUgKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBDb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlU3BlY2lhbFNFbmQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAodGhpcy5zcGVjaWFsID09PSAyIC8qIFNjcmlwdCAqLyAmJiAoYyA9PT0gXCJjXCIgfHwgYyA9PT0gXCJDXCIpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDM5IC8qIEFmdGVyU2NyaXB0MSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNwZWNpYWwgPT09IDMgLyogU3R5bGUgKi8gJiYgKGMgPT09IFwidFwiIHx8IGMgPT09IFwiVFwiKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA0OCAvKiBBZnRlclN0eWxlMSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVTcGVjaWFsTGFzdCA9IGZ1bmN0aW9uIChjLCBzcGVjaWFsKSB7XG4gICAgICAgIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWNpYWwgPSBzcGVjaWFsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gMyAvKiBJblRhZ05hbWUgKi87XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vIENvbnN1bWUgdGhlIHRva2VuIGFnYWluXG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJTcGVjaWFsTGFzdCA9IGZ1bmN0aW9uIChjLCBzZWN0aW9uU3RhcnRPZmZzZXQpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCA9IDEgLyogTm9uZSAqLztcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNiAvKiBJbkNsb3NpbmdUYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCAtIHNlY3Rpb25TdGFydE9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07IC8vIFJlY29uc3VtZSB0aGUgdG9rZW5cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICB9O1xuICAgIC8vIEZvciBlbnRpdGllcyB0ZXJtaW5hdGVkIHdpdGggYSBzZW1pY29sb25cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnBhcnNlRml4ZWRFbnRpdHkgPSBmdW5jdGlvbiAobWFwKSB7XG4gICAgICAgIGlmIChtYXAgPT09IHZvaWQgMCkgeyBtYXAgPSB0aGlzLnhtbE1vZGUgPyB4bWxfanNvbl8xLmRlZmF1bHQgOiBlbnRpdGllc19qc29uXzEuZGVmYXVsdDsgfVxuICAgICAgICAvLyBPZmZzZXQgPSAxXG4gICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCArIDEgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCArIDEsIHRoaXMuX2luZGV4KTtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBlbnRpdHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UGFydGlhbChtYXBbZW50aXR5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFBhcnNlcyBsZWdhY3kgZW50aXRpZXMgKHdpdGhvdXQgdHJhaWxpbmcgc2VtaWNvbG9uKVxuICAgIFRva2VuaXplci5wcm90b3R5cGUucGFyc2VMZWdhY3lFbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2VjdGlvblN0YXJ0ICsgMTtcbiAgICAgICAgLy8gVGhlIG1heCBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDZcbiAgICAgICAgdmFyIGxpbWl0ID0gTWF0aC5taW4odGhpcy5faW5kZXggLSBzdGFydCwgNik7XG4gICAgICAgIHdoaWxlIChsaW1pdCA+PSAyKSB7XG4gICAgICAgICAgICAvLyBUaGUgbWluIGxlbmd0aCBvZiBsZWdhY3kgZW50aXRpZXMgaXMgMlxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuYnVmZmVyLnN1YnN0cihzdGFydCwgbGltaXQpO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChsZWdhY3lfanNvbl8xLmRlZmF1bHQsIGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRQYXJ0aWFsKGxlZ2FjeV9qc29uXzEuZGVmYXVsdFtlbnRpdHldKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCArPSBsaW1pdCArIDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGltaXQtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluTmFtZWRFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VGaXhlZEVudGl0eSgpO1xuICAgICAgICAgICAgLy8gUmV0cnkgYXMgbGVnYWN5IGVudGl0eSBpZiBlbnRpdHkgd2Fzbid0IHBhcnNlZFxuICAgICAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlID09PSAxIC8qIFRleHQgKi8gJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCArIDEgPCB0aGlzLl9pbmRleCAmJlxuICAgICAgICAgICAgICAgICF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKSAmJiAhaXNBU0NJSUFscGhhKGMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy54bWxNb2RlIHx8IHRoaXMuc2VjdGlvblN0YXJ0ICsgMSA9PT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAoYyAhPT0gXCI9XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgYXMgbGVnYWN5IGVudGl0eSwgd2l0aG91dCBhbGxvd2luZyBhZGRpdGlvbmFsIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VGaXhlZEVudGl0eShsZWdhY3lfanNvbl8xLmRlZmF1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VMZWdhY3lFbnRpdHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmRlY29kZU51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbiAob2Zmc2V0LCBiYXNlLCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIHNlY3Rpb25TdGFydCA9IHRoaXMuc2VjdGlvblN0YXJ0ICsgb2Zmc2V0O1xuICAgICAgICBpZiAoc2VjdGlvblN0YXJ0ICE9PSB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgLy8gUGFyc2UgZW50aXR5XG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXgpO1xuICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KGVudGl0eSwgYmFzZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXRQYXJ0aWFsKGRlY29kZV9jb2RlcG9pbnRfMS5kZWZhdWx0KHBhcnNlZCkpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSBzdHJpY3QgPyB0aGlzLl9pbmRleCArIDEgOiB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluTnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVOdW1lcmljRW50aXR5KDIsIDEwLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMueG1sTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkhleEVudGl0eSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVOdW1lcmljRW50aXR5KDMsIDE2LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA8IFwiYVwiIHx8IGMgPiBcImZcIikgJiZcbiAgICAgICAgICAgIChjIDwgXCJBXCIgfHwgYyA+IFwiRlwiKSAmJlxuICAgICAgICAgICAgKGMgPCBcIjBcIiB8fCBjID4gXCI5XCIpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMueG1sTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgzLCAxNiwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgKz0gdGhpcy5faW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IDEgLyogVGV4dCAqLykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnNlY3Rpb25TdGFydCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgKz0gdGhpcy5faW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHNlY3Rpb24ganVzdCBzdGFydGVkXG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBldmVyeXRoaW5nIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5zZWN0aW9uU3RhcnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4IC09IHRoaXMuc2VjdGlvblN0YXJ0O1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuc2VjdGlvblN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBidWZmZXIsIGNhbGxpbmcgdGhlIGZ1bmN0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBTdGF0ZXMgdGhhdCBhcmUgbW9yZSBsaWtlbHkgdG8gYmUgaGl0IGFyZSBoaWdoZXIgdXAsIGFzIGEgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuXG4gICAgICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX2luZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoICYmIHRoaXMucnVubmluZykge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmJ1ZmZlci5jaGFyQXQodGhpcy5faW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlVGV4dChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxMiAvKiBJbkF0dHJpYnV0ZVZhbHVlRHEgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyhjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA5IC8qIEluQXR0cmlidXRlTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTkgLyogSW5Db21tZW50ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQ29tbWVudChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyMCAvKiBJblNwZWNpYWxDb21tZW50ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluU3BlY2lhbENvbW1lbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMyAvKiBJblRhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYgLyogSW5DbG9zaW5nVGFnTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDIgLyogQmVmb3JlVGFnTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVUYWdOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDEwIC8qIEFmdGVyQXR0cmlidXRlTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTMgLyogSW5BdHRyaWJ1dGVWYWx1ZVNxICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTEgLyogQmVmb3JlQXR0cmlidXRlVmFsdWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNSAvKiBCZWZvcmVDbG9zaW5nVGFnTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA3IC8qIEFmdGVyQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMiAvKiBCZWZvcmVTcGVjaWFsUyAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsUyhjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyMSAvKiBBZnRlckNvbW1lbnQxICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ29tbWVudDEoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTQgLyogSW5BdHRyaWJ1dGVWYWx1ZU5xICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyhjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0IC8qIEluU2VsZkNsb3NpbmdUYWcgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxNiAvKiBJbkRlY2xhcmF0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluRGVjbGFyYXRpb24oYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTUgLyogQmVmb3JlRGVjbGFyYXRpb24gKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlRGVjbGFyYXRpb24oYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjIgLyogQWZ0ZXJDb21tZW50MiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNvbW1lbnQyKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE4IC8qIEJlZm9yZUNvbW1lbnQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ29tbWVudChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMyAvKiBCZWZvcmVTcGVjaWFsU0VuZCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsU0VuZChjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1MyAvKiBCZWZvcmVTcGVjaWFsVEVuZCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJTcGVjaWFsVEVuZCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzOSAvKiBBZnRlclNjcmlwdDEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU2NyaXB0MSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MCAvKiBBZnRlclNjcmlwdDIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU2NyaXB0Mih0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MSAvKiBBZnRlclNjcmlwdDMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU2NyaXB0Myh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzNCAvKiBCZWZvcmVTY3JpcHQxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTY3JpcHQxKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDM1IC8qIEJlZm9yZVNjcmlwdDIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVNjcmlwdDIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzYgLyogQmVmb3JlU2NyaXB0MyAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU2NyaXB0Myh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzNyAvKiBCZWZvcmVTY3JpcHQ0ICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTY3JpcHQ0KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDM4IC8qIEJlZm9yZVNjcmlwdDUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbExhc3QoYywgMiAvKiBTY3JpcHQgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQyIC8qIEFmdGVyU2NyaXB0NCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJTY3JpcHQ0KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQzIC8qIEFmdGVyU2NyaXB0NSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlclNwZWNpYWxMYXN0KGMsIDYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQ0IC8qIEJlZm9yZVN0eWxlMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU3R5bGUxKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI5IC8qIEluQ2RhdGEgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5DZGF0YShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0NSAvKiBCZWZvcmVTdHlsZTIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVN0eWxlMih0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0NiAvKiBCZWZvcmVTdHlsZTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVN0eWxlMyh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0NyAvKiBCZWZvcmVTdHlsZTQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbExhc3QoYywgMyAvKiBTdHlsZSAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDggLyogQWZ0ZXJTdHlsZTEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU3R5bGUxKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQ5IC8qIEFmdGVyU3R5bGUyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclN0eWxlMih0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1MCAvKiBBZnRlclN0eWxlMyAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJTdHlsZTModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTEgLyogQWZ0ZXJTdHlsZTQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJTcGVjaWFsTGFzdChjLCA1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1MiAvKiBCZWZvcmVTcGVjaWFsVCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU3BlY2lhbFQodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTQgLyogQmVmb3JlVGl0bGUxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVUaXRsZTEodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTUgLyogQmVmb3JlVGl0bGUyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVUaXRsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTYgLyogQmVmb3JlVGl0bGUzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVUaXRsZTModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTcgLyogQmVmb3JlVGl0bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxMYXN0KGMsIDQgLyogVGl0bGUgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU4IC8qIEFmdGVyVGl0bGUxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclRpdGxlMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1OSAvKiBBZnRlclRpdGxlMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJUaXRsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjAgLyogQWZ0ZXJUaXRsZTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyVGl0bGUzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYxIC8qIEFmdGVyVGl0bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyU3BlY2lhbExhc3QoYywgNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTcgLyogSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjQgLyogSW5OYW1lZEVudGl0eSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbk5hbWVkRW50aXR5KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDIzIC8qIEJlZm9yZUNkYXRhMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlQ2RhdGExKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYyIC8qIEJlZm9yZUVudGl0eSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlRW50aXR5KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI0IC8qIEJlZm9yZUNkYXRhMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlQ2RhdGEyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI1IC8qIEJlZm9yZUNkYXRhMyAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlQ2RhdGEzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDMwIC8qIEFmdGVyQ2RhdGExICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2RhdGExKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDMxIC8qIEFmdGVyQ2RhdGEyICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2RhdGEyKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI2IC8qIEJlZm9yZUNkYXRhNCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlQ2RhdGE0KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI3IC8qIEJlZm9yZUNkYXRhNSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlQ2RhdGE1KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDI4IC8qIEJlZm9yZUNkYXRhNiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDZGF0YTYoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjYgLyogSW5IZXhFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5IZXhFbnRpdHkoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjUgLyogSW5OdW1lcmljRW50aXR5ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluTnVtZXJpY0VudGl0eShjKTtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYzIC8qIEJlZm9yZU51bWVyaWNFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmVycm9yKEVycm9yKFwidW5rbm93biBfc3RhdGVcIiksIHRoaXMuX3N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgcmVtYWluaW5nIGRhdGEsIGVtaXQgaXQgaW4gYSByZWFzb25hYmxlIHdheVxuICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNicy5vbmVuZCgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5oYW5kbGVUcmFpbGluZ0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMuc2VjdGlvblN0YXJ0KTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAyOSAvKiBJbkNkYXRhICovIHx8XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gMzAgLyogQWZ0ZXJDZGF0YTEgKi8gfHxcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID09PSAzMSAvKiBBZnRlckNkYXRhMiAqLykge1xuICAgICAgICAgICAgdGhpcy5jYnMub25jZGF0YShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTkgLyogSW5Db21tZW50ICovIHx8XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gMjEgLyogQWZ0ZXJDb21tZW50MSAqLyB8fFxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IDIyIC8qIEFmdGVyQ29tbWVudDIgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjQgLyogSW5OYW1lZEVudGl0eSAqLyAmJiAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNjUgLyogSW5OdW1lcmljRW50aXR5ICovICYmICF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY2IC8qIEluSGV4RW50aXR5ICovICYmICF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgzLCAxNiwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgIT09IDMgLyogSW5UYWdOYW1lICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gMTEgLyogQmVmb3JlQXR0cmlidXRlVmFsdWUgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxMCAvKiBBZnRlckF0dHJpYnV0ZU5hbWUgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSA5IC8qIEluQXR0cmlidXRlTmFtZSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDEzIC8qIEluQXR0cmlidXRlVmFsdWVTcSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDEyIC8qIEluQXR0cmlidXRlVmFsdWVEcSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDE0IC8qIEluQXR0cmlidXRlVmFsdWVOcSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDYgLyogSW5DbG9zaW5nVGFnTmFtZSAqLykge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgICAqIEVsc2UsIGlnbm9yZSByZW1haW5pbmcgZGF0YVxuICAgICAgICAgKiBUT0RPIGFkZCBhIHdheSB0byByZW1vdmUgY3VycmVudCB0YWdcbiAgICAgICAgICovXG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmdldFNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuZW1pdFRva2VuID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jYnNbbmFtZV0odGhpcy5nZXRTZWN0aW9uKCkpO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbWl0UGFydGlhbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5iYXNlU3RhdGUgIT09IDEgLyogVGV4dCAqLykge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJkYXRhKHZhbHVlKTsgLy8gVE9ETyBpbXBsZW1lbnQgdGhlIG5ldyBldmVudFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRva2VuaXplcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUb2tlbml6ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnNzSGFuZGxlciA9IGV4cG9ydHMuRGVmYXVsdEhhbmRsZXIgPSBleHBvcnRzLkRvbVV0aWxzID0gZXhwb3J0cy5FbGVtZW50VHlwZSA9IGV4cG9ydHMuVG9rZW5pemVyID0gZXhwb3J0cy5jcmVhdGVEb21TdHJlYW0gPSBleHBvcnRzLnBhcnNlRE9NID0gZXhwb3J0cy5wYXJzZURvY3VtZW50ID0gZXhwb3J0cy5Eb21IYW5kbGVyID0gZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG52YXIgUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9QYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJzZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBhcnNlcl8xLlBhcnNlcjsgfSB9KTtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvbUhhbmRsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVmYXVsdEhhbmRsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyOyB9IH0pO1xuLy8gSGVscGVyIG1ldGhvZHNcbi8qKlxuICogUGFyc2VzIHRoZSBkYXRhLCByZXR1cm5zIHRoZSByZXN1bHRpbmcgZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBzaG91bGQgYmUgcGFyc2VkLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHBhcnNlciBhbmQgRE9NIGJ1aWxkZXIuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBoYW5kbGVyID0gbmV3IGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgbmV3IFBhcnNlcl8xLlBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZGF0YSk7XG4gICAgcmV0dXJuIGhhbmRsZXIucm9vdDtcbn1cbmV4cG9ydHMucGFyc2VEb2N1bWVudCA9IHBhcnNlRG9jdW1lbnQ7XG4vKipcbiAqIFBhcnNlcyBkYXRhLCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByb290IG5vZGVzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgcm9vdCBub2RlcyBzdGlsbCBoYXZlIGEgYERvY3VtZW50YCBub2RlIGFzIHRoZWlyIHBhcmVudC5cbiAqIFVzZSBgcGFyc2VEb2N1bWVudGAgdG8gZ2V0IHRoZSBgRG9jdW1lbnRgIG5vZGUgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0aGF0IHNob3VsZCBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBkZXByZWNhdGVkIFVzZSBgcGFyc2VEb2N1bWVudGAgaW5zdGVhZC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VET00oZGF0YSwgb3B0aW9ucykge1xuICAgIHJldHVybiBwYXJzZURvY3VtZW50KGRhdGEsIG9wdGlvbnMpLmNoaWxkcmVuO1xufVxuZXhwb3J0cy5wYXJzZURPTSA9IHBhcnNlRE9NO1xuLyoqXG4gKiBDcmVhdGVzIGEgcGFyc2VyIGluc3RhbmNlLCB3aXRoIGFuIGF0dGFjaGVkIERPTSBoYW5kbGVyLlxuICpcbiAqIEBwYXJhbSBjYiBBIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgb25jZSBwYXJzaW5nIGhhcyBiZWVuIGNvbXBsZXRlZC5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBwYXJzZXIgYW5kIERPTSBidWlsZGVyLlxuICogQHBhcmFtIGVsZW1lbnRDYiBBbiBvcHRpb25hbCBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIGV2ZXJ5IHRpbWUgYSB0YWcgaGFzIGJlZW4gY29tcGxldGVkIGluc2lkZSBvZiB0aGUgRE9NLlxuICovXG5mdW5jdGlvbiBjcmVhdGVEb21TdHJlYW0oY2IsIG9wdGlvbnMsIGVsZW1lbnRDYikge1xuICAgIHZhciBoYW5kbGVyID0gbmV3IGRvbWhhbmRsZXJfMS5Eb21IYW5kbGVyKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpO1xuICAgIHJldHVybiBuZXcgUGFyc2VyXzEuUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5jcmVhdGVEb21TdHJlYW0gPSBjcmVhdGVEb21TdHJlYW07XG52YXIgVG9rZW5pemVyXzEgPSByZXF1aXJlKFwiLi9Ub2tlbml6ZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb2tlbml6ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9faW1wb3J0RGVmYXVsdChUb2tlbml6ZXJfMSkuZGVmYXVsdDsgfSB9KTtcbnZhciBFbGVtZW50VHlwZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIikpO1xuZXhwb3J0cy5FbGVtZW50VHlwZSA9IEVsZW1lbnRUeXBlO1xuLypcbiAqIEFsbCBvZiB0aGUgZm9sbG93aW5nIGV4cG9ydHMgZXhpc3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LlxuICogVGhleSBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZCBldmVudHVhbGx5LlxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vRmVlZEhhbmRsZXJcIiksIGV4cG9ydHMpO1xuZXhwb3J0cy5Eb21VdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZG9tdXRpbHNcIikpO1xudmFyIEZlZWRIYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9GZWVkSGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJzc0hhbmRsZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEZlZWRIYW5kbGVyXzEuRmVlZEhhbmRsZXI7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZGVjb2RlLmpzb25cIikpO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL2hlL2Jsb2IvbWFzdGVyL3NyYy9oZS5qcyNMOTQtTDExOVxudmFyIGZyb21Db2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcuZnJvbUNvZGVQb2ludCB8fFxuICAgIGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweGZmZmYpIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZV9qc29uXzEuZGVmYXVsdCkge1xuICAgICAgICBjb2RlUG9pbnQgPSBkZWNvZGVfanNvbl8xLmRlZmF1bHRbY29kZVBvaW50XTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlY29kZUNvZGVQb2ludDtcbiIsIi8qKlxuICogU3Jjc2V0IFBhcnNlclxuICpcbiAqIEJ5IEFsZXggQmVsbCB8ICBNSVQgTGljZW5zZVxuICpcbiAqIEpTIFBhcnNlciBmb3IgdGhlIHN0cmluZyB2YWx1ZSB0aGF0IGFwcGVhcnMgaW4gbWFya3VwIDxpbWcgc3Jjc2V0PVwiaGVyZVwiPlxuICpcbiAqIEByZXR1cm5zIEFycmF5IFt7dXJsOiBfLCBkOiBfLCB3OiBfLCBoOl99LCAuLi5dXG4gKlxuICogQmFzZWQgc3VwZXIgZHVwZXIgY2xvc2VseSBvbiB0aGUgcmVmZXJlbmNlIGFsZ29yaXRobSBhdDpcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2VtYmVkZGVkLWNvbnRlbnQuaHRtbCNwYXJzZS1hLXNyY3NldC1hdHRyaWJ1dGVcbiAqXG4gKiBNb3N0IGNvbW1lbnRzIGFyZSBjb3BpZWQgaW4gZGlyZWN0bHkgZnJvbSB0aGUgc3BlY1xuICogKGV4Y2VwdCBmb3IgY29tbWVudHMgaW4gcGFyZW5zKS5cbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Ly8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG5cdFx0Ly8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG5cdFx0Ly8gbGlrZSBOb2RlLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG5cdFx0cm9vdC5wYXJzZVNyY3NldCA9IGZhY3RvcnkoKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cblx0Ly8gMS4gTGV0IGlucHV0IGJlIHRoZSB2YWx1ZSBwYXNzZWQgdG8gdGhpcyBhbGdvcml0aG0uXG5cdHJldHVybiBmdW5jdGlvbiAoaW5wdXQpIHtcblxuXHRcdC8vIFVUSUxJVFkgRlVOQ1RJT05TXG5cblx0XHQvLyBNYW51YWwgaXMgZmFzdGVyIHRoYW4gUmVnRXhcblx0XHQvLyBodHRwOi8vYmpvcm4udGlwbGluZy5jb20vc3RhdGUtYW5kLXJlZ3VsYXItZXhwcmVzc2lvbnMtaW4tamF2YXNjcmlwdFxuXHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tL3doaXRlc3BhY2UtY2hhcmFjdGVyLzVcblx0XHRmdW5jdGlvbiBpc1NwYWNlKGMpIHtcblx0XHRcdHJldHVybiAoYyA9PT0gXCJcXHUwMDIwXCIgfHwgLy8gc3BhY2Vcblx0XHRcdGMgPT09IFwiXFx1MDAwOVwiIHx8IC8vIGhvcml6b250YWwgdGFiXG5cdFx0XHRjID09PSBcIlxcdTAwMEFcIiB8fCAvLyBuZXcgbGluZVxuXHRcdFx0YyA9PT0gXCJcXHUwMDBDXCIgfHwgLy8gZm9ybSBmZWVkXG5cdFx0XHRjID09PSBcIlxcdTAwMERcIik7ICAvLyBjYXJyaWFnZSByZXR1cm5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb2xsZWN0Q2hhcmFjdGVycyhyZWdFeCkge1xuXHRcdFx0dmFyIGNoYXJzLFxuXHRcdFx0XHRtYXRjaCA9IHJlZ0V4LmV4ZWMoaW5wdXQuc3Vic3RyaW5nKHBvcykpO1xuXHRcdFx0aWYgKG1hdGNoKSB7XG5cdFx0XHRcdGNoYXJzID0gbWF0Y2hbIDAgXTtcblx0XHRcdFx0cG9zICs9IGNoYXJzLmxlbmd0aDtcblx0XHRcdFx0cmV0dXJuIGNoYXJzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblxuXHRcdFx0Ly8gKERvbid0IHVzZSBcXHMsIHRvIGF2b2lkIG1hdGNoaW5nIG5vbi1icmVha2luZyBzcGFjZSlcblx0XHRcdHJlZ2V4TGVhZGluZ1NwYWNlcyA9IC9eWyBcXHRcXG5cXHJcXHUwMDBjXSsvLFxuXHRcdFx0cmVnZXhMZWFkaW5nQ29tbWFzT3JTcGFjZXMgPSAvXlssIFxcdFxcblxcclxcdTAwMGNdKy8sXG5cdFx0XHRyZWdleExlYWRpbmdOb3RTcGFjZXMgPSAvXlteIFxcdFxcblxcclxcdTAwMGNdKy8sXG5cdFx0XHRyZWdleFRyYWlsaW5nQ29tbWFzID0gL1ssXSskLyxcblx0XHRcdHJlZ2V4Tm9uTmVnYXRpdmVJbnRlZ2VyID0gL15cXGQrJC8sXG5cblx0XHRcdC8vICggUG9zaXRpdmUgb3IgbmVnYXRpdmUgb3IgdW5zaWduZWQgaW50ZWdlcnMgb3IgZGVjaW1hbHMsIHdpdGhvdXQgb3Igd2l0aG91dCBleHBvbmVudHMuXG5cdFx0XHQvLyBNdXN0IGluY2x1ZGUgYXQgbGVhc3Qgb25lIGRpZ2l0LlxuXHRcdFx0Ly8gQWNjb3JkaW5nIHRvIHNwZWMgdGVzdHMgYW55IGRlY2ltYWwgcG9pbnQgbXVzdCBiZSBmb2xsb3dlZCBieSBhIGRpZ2l0LlxuXHRcdFx0Ly8gTm8gbGVhZGluZyBwbHVzIHNpZ24gaXMgYWxsb3dlZC4pXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmZyYXN0cnVjdHVyZS5odG1sI3ZhbGlkLWZsb2F0aW5nLXBvaW50LW51bWJlclxuXHRcdFx0cmVnZXhGbG9hdGluZ1BvaW50ID0gL14tPyg/OlswLTldK3xbMC05XSpcXC5bMC05XSspKD86W2VFXVsrLV0/WzAtOV0rKT8kLyxcblxuXHRcdFx0dXJsLFxuXHRcdFx0ZGVzY3JpcHRvcnMsXG5cdFx0XHRjdXJyZW50RGVzY3JpcHRvcixcblx0XHRcdHN0YXRlLFxuXHRcdFx0YyxcblxuXHRcdFx0Ly8gMi4gTGV0IHBvc2l0aW9uIGJlIGEgcG9pbnRlciBpbnRvIGlucHV0LCBpbml0aWFsbHkgcG9pbnRpbmcgYXQgdGhlIHN0YXJ0XG5cdFx0XHQvLyAgICBvZiB0aGUgc3RyaW5nLlxuXHRcdFx0cG9zID0gMCxcblxuXHRcdFx0Ly8gMy4gTGV0IGNhbmRpZGF0ZXMgYmUgYW4gaW5pdGlhbGx5IGVtcHR5IHNvdXJjZSBzZXQuXG5cdFx0XHRjYW5kaWRhdGVzID0gW107XG5cblx0XHQvLyA0LiBTcGxpdHRpbmcgbG9vcDogQ29sbGVjdCBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgc3BhY2Vcblx0XHQvLyAgICBjaGFyYWN0ZXJzIG9yIFUrMDAyQyBDT01NQSBjaGFyYWN0ZXJzLiBJZiBhbnkgVSswMDJDIENPTU1BIGNoYXJhY3RlcnNcblx0XHQvLyAgICB3ZXJlIGNvbGxlY3RlZCwgdGhhdCBpcyBhIHBhcnNlIGVycm9yLlxuXHRcdHdoaWxlICh0cnVlKSB7XG5cdFx0XHRjb2xsZWN0Q2hhcmFjdGVycyhyZWdleExlYWRpbmdDb21tYXNPclNwYWNlcyk7XG5cblx0XHRcdC8vIDUuIElmIHBvc2l0aW9uIGlzIHBhc3QgdGhlIGVuZCBvZiBpbnB1dCwgcmV0dXJuIGNhbmRpZGF0ZXMgYW5kIGFib3J0IHRoZXNlIHN0ZXBzLlxuXHRcdFx0aWYgKHBvcyA+PSBpbnB1dExlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gY2FuZGlkYXRlczsgLy8gKHdlJ3JlIGRvbmUsIHRoaXMgaXMgdGhlIHNvbGUgcmV0dXJuIHBhdGgpXG5cdFx0XHR9XG5cblx0XHRcdC8vIDYuIENvbGxlY3QgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBzcGFjZSBjaGFyYWN0ZXJzLFxuXHRcdFx0Ly8gICAgYW5kIGxldCB0aGF0IGJlIHVybC5cblx0XHRcdHVybCA9IGNvbGxlY3RDaGFyYWN0ZXJzKHJlZ2V4TGVhZGluZ05vdFNwYWNlcyk7XG5cblx0XHRcdC8vIDcuIExldCBkZXNjcmlwdG9ycyBiZSBhIG5ldyBlbXB0eSBsaXN0LlxuXHRcdFx0ZGVzY3JpcHRvcnMgPSBbXTtcblxuXHRcdFx0Ly8gOC4gSWYgdXJsIGVuZHMgd2l0aCBhIFUrMDAyQyBDT01NQSBjaGFyYWN0ZXIgKCwpLCBmb2xsb3cgdGhlc2Ugc3Vic3RlcHM6XG5cdFx0XHQvL1x0XHQoMSkuIFJlbW92ZSBhbGwgdHJhaWxpbmcgVSswMDJDIENPTU1BIGNoYXJhY3RlcnMgZnJvbSB1cmwuIElmIHRoaXMgcmVtb3ZlZFxuXHRcdFx0Ly8gICAgICAgICBtb3JlIHRoYW4gb25lIGNoYXJhY3RlciwgdGhhdCBpcyBhIHBhcnNlIGVycm9yLlxuXHRcdFx0aWYgKHVybC5zbGljZSgtMSkgPT09IFwiLFwiKSB7XG5cdFx0XHRcdHVybCA9IHVybC5yZXBsYWNlKHJlZ2V4VHJhaWxpbmdDb21tYXMsIFwiXCIpO1xuXHRcdFx0XHQvLyAoSnVtcCBhaGVhZCB0byBzdGVwIDkgdG8gc2tpcCB0b2tlbml6YXRpb24gYW5kIGp1c3QgcHVzaCB0aGUgY2FuZGlkYXRlKS5cblx0XHRcdFx0cGFyc2VEZXNjcmlwdG9ycygpO1xuXG5cdFx0XHRcdC8vXHRPdGhlcndpc2UsIGZvbGxvdyB0aGVzZSBzdWJzdGVwczpcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRva2VuaXplKCk7XG5cdFx0XHR9IC8vIChjbG9zZSBlbHNlIG9mIHN0ZXAgOClcblxuXHRcdFx0Ly8gMTYuIFJldHVybiB0byB0aGUgc3RlcCBsYWJlbGVkIHNwbGl0dGluZyBsb29wLlxuXHRcdH0gLy8gKENsb3NlIG9mIGJpZyB3aGlsZSBsb29wLilcblxuXHRcdC8qKlxuXHRcdCAqIFRva2VuaXplcyBkZXNjcmlwdG9yIHByb3BlcnRpZXMgcHJpb3IgdG8gcGFyc2luZ1xuXHRcdCAqIFJldHVybnMgdW5kZWZpbmVkLlxuXHRcdCAqL1xuXHRcdGZ1bmN0aW9uIHRva2VuaXplKCkge1xuXG5cdFx0XHQvLyA4LjEuIERlc2NyaXB0b3IgdG9rZW5pc2VyOiBTa2lwIHdoaXRlc3BhY2Vcblx0XHRcdGNvbGxlY3RDaGFyYWN0ZXJzKHJlZ2V4TGVhZGluZ1NwYWNlcyk7XG5cblx0XHRcdC8vIDguMi4gTGV0IGN1cnJlbnQgZGVzY3JpcHRvciBiZSB0aGUgZW1wdHkgc3RyaW5nLlxuXHRcdFx0Y3VycmVudERlc2NyaXB0b3IgPSBcIlwiO1xuXG5cdFx0XHQvLyA4LjMuIExldCBzdGF0ZSBiZSBpbiBkZXNjcmlwdG9yLlxuXHRcdFx0c3RhdGUgPSBcImluIGRlc2NyaXB0b3JcIjtcblxuXHRcdFx0d2hpbGUgKHRydWUpIHtcblxuXHRcdFx0XHQvLyA4LjQuIExldCBjIGJlIHRoZSBjaGFyYWN0ZXIgYXQgcG9zaXRpb24uXG5cdFx0XHRcdGMgPSBpbnB1dC5jaGFyQXQocG9zKTtcblxuXHRcdFx0XHQvLyAgRG8gdGhlIGZvbGxvd2luZyBkZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mIHN0YXRlLlxuXHRcdFx0XHQvLyAgRm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgc3RlcCwgXCJFT0ZcIiBpcyBhIHNwZWNpYWwgY2hhcmFjdGVyIHJlcHJlc2VudGluZ1xuXHRcdFx0XHQvLyAgdGhhdCBwb3NpdGlvbiBpcyBwYXN0IHRoZSBlbmQgb2YgaW5wdXQuXG5cblx0XHRcdFx0Ly8gSW4gZGVzY3JpcHRvclxuXHRcdFx0XHRpZiAoc3RhdGUgPT09IFwiaW4gZGVzY3JpcHRvclwiKSB7XG5cdFx0XHRcdFx0Ly8gRG8gdGhlIGZvbGxvd2luZywgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBjOlxuXG5cdFx0XHRcdFx0Ly8gU3BhY2UgY2hhcmFjdGVyXG5cdFx0XHRcdFx0Ly8gSWYgY3VycmVudCBkZXNjcmlwdG9yIGlzIG5vdCBlbXB0eSwgYXBwZW5kIGN1cnJlbnQgZGVzY3JpcHRvciB0b1xuXHRcdFx0XHRcdC8vIGRlc2NyaXB0b3JzIGFuZCBsZXQgY3VycmVudCBkZXNjcmlwdG9yIGJlIHRoZSBlbXB0eSBzdHJpbmcuXG5cdFx0XHRcdFx0Ly8gU2V0IHN0YXRlIHRvIGFmdGVyIGRlc2NyaXB0b3IuXG5cdFx0XHRcdFx0aWYgKGlzU3BhY2UoYykpIHtcblx0XHRcdFx0XHRcdGlmIChjdXJyZW50RGVzY3JpcHRvcikge1xuXHRcdFx0XHRcdFx0XHRkZXNjcmlwdG9ycy5wdXNoKGN1cnJlbnREZXNjcmlwdG9yKTtcblx0XHRcdFx0XHRcdFx0Y3VycmVudERlc2NyaXB0b3IgPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHRzdGF0ZSA9IFwiYWZ0ZXIgZGVzY3JpcHRvclwiO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBVKzAwMkMgQ09NTUEgKCwpXG5cdFx0XHRcdFx0XHQvLyBBZHZhbmNlIHBvc2l0aW9uIHRvIHRoZSBuZXh0IGNoYXJhY3RlciBpbiBpbnB1dC4gSWYgY3VycmVudCBkZXNjcmlwdG9yXG5cdFx0XHRcdFx0XHQvLyBpcyBub3QgZW1wdHksIGFwcGVuZCBjdXJyZW50IGRlc2NyaXB0b3IgdG8gZGVzY3JpcHRvcnMuIEp1bXAgdG8gdGhlIHN0ZXBcblx0XHRcdFx0XHRcdC8vIGxhYmVsZWQgZGVzY3JpcHRvciBwYXJzZXIuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjID09PSBcIixcIikge1xuXHRcdFx0XHRcdFx0cG9zICs9IDE7XG5cdFx0XHRcdFx0XHRpZiAoY3VycmVudERlc2NyaXB0b3IpIHtcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRvcnMucHVzaChjdXJyZW50RGVzY3JpcHRvcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwYXJzZURlc2NyaXB0b3JzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHRcdC8vIFUrMDAyOCBMRUZUIFBBUkVOVEhFU0lTICgoKVxuXHRcdFx0XHRcdFx0Ly8gQXBwZW5kIGMgdG8gY3VycmVudCBkZXNjcmlwdG9yLiBTZXQgc3RhdGUgdG8gaW4gcGFyZW5zLlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYyA9PT0gXCJcXHUwMDI4XCIpIHtcblx0XHRcdFx0XHRcdGN1cnJlbnREZXNjcmlwdG9yID0gY3VycmVudERlc2NyaXB0b3IgKyBjO1xuXHRcdFx0XHRcdFx0c3RhdGUgPSBcImluIHBhcmVuc1wiO1xuXG5cdFx0XHRcdFx0XHQvLyBFT0Zcblx0XHRcdFx0XHRcdC8vIElmIGN1cnJlbnQgZGVzY3JpcHRvciBpcyBub3QgZW1wdHksIGFwcGVuZCBjdXJyZW50IGRlc2NyaXB0b3IgdG9cblx0XHRcdFx0XHRcdC8vIGRlc2NyaXB0b3JzLiBKdW1wIHRvIHRoZSBzdGVwIGxhYmVsZWQgZGVzY3JpcHRvciBwYXJzZXIuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRpZiAoY3VycmVudERlc2NyaXB0b3IpIHtcblx0XHRcdFx0XHRcdFx0ZGVzY3JpcHRvcnMucHVzaChjdXJyZW50RGVzY3JpcHRvcik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwYXJzZURlc2NyaXB0b3JzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHRcdC8vIEFueXRoaW5nIGVsc2Vcblx0XHRcdFx0XHRcdC8vIEFwcGVuZCBjIHRvIGN1cnJlbnQgZGVzY3JpcHRvci5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y3VycmVudERlc2NyaXB0b3IgPSBjdXJyZW50RGVzY3JpcHRvciArIGM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIChlbmQgXCJpbiBkZXNjcmlwdG9yXCJcblxuXHRcdFx0XHRcdC8vIEluIHBhcmVuc1xuXHRcdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSBcImluIHBhcmVuc1wiKSB7XG5cblx0XHRcdFx0XHQvLyBVKzAwMjkgUklHSFQgUEFSRU5USEVTSVMgKCkpXG5cdFx0XHRcdFx0Ly8gQXBwZW5kIGMgdG8gY3VycmVudCBkZXNjcmlwdG9yLiBTZXQgc3RhdGUgdG8gaW4gZGVzY3JpcHRvci5cblx0XHRcdFx0XHRpZiAoYyA9PT0gXCIpXCIpIHtcblx0XHRcdFx0XHRcdGN1cnJlbnREZXNjcmlwdG9yID0gY3VycmVudERlc2NyaXB0b3IgKyBjO1xuXHRcdFx0XHRcdFx0c3RhdGUgPSBcImluIGRlc2NyaXB0b3JcIjtcblxuXHRcdFx0XHRcdFx0Ly8gRU9GXG5cdFx0XHRcdFx0XHQvLyBBcHBlbmQgY3VycmVudCBkZXNjcmlwdG9yIHRvIGRlc2NyaXB0b3JzLiBKdW1wIHRvIHRoZSBzdGVwIGxhYmVsZWRcblx0XHRcdFx0XHRcdC8vIGRlc2NyaXB0b3IgcGFyc2VyLlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYyA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0ZGVzY3JpcHRvcnMucHVzaChjdXJyZW50RGVzY3JpcHRvcik7XG5cdFx0XHRcdFx0XHRwYXJzZURlc2NyaXB0b3JzKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHRcdC8vIEFueXRoaW5nIGVsc2Vcblx0XHRcdFx0XHRcdC8vIEFwcGVuZCBjIHRvIGN1cnJlbnQgZGVzY3JpcHRvci5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y3VycmVudERlc2NyaXB0b3IgPSBjdXJyZW50RGVzY3JpcHRvciArIGM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQWZ0ZXIgZGVzY3JpcHRvclxuXHRcdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSBcImFmdGVyIGRlc2NyaXB0b3JcIikge1xuXG5cdFx0XHRcdFx0Ly8gRG8gdGhlIGZvbGxvd2luZywgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBjOlxuXHRcdFx0XHRcdC8vIFNwYWNlIGNoYXJhY3RlcjogU3RheSBpbiB0aGlzIHN0YXRlLlxuXHRcdFx0XHRcdGlmIChpc1NwYWNlKGMpKSB7XG5cblx0XHRcdFx0XHRcdC8vIEVPRjogSnVtcCB0byB0aGUgc3RlcCBsYWJlbGVkIGRlc2NyaXB0b3IgcGFyc2VyLlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYyA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0cGFyc2VEZXNjcmlwdG9ycygpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0XHQvLyBBbnl0aGluZyBlbHNlXG5cdFx0XHRcdFx0XHQvLyBTZXQgc3RhdGUgdG8gaW4gZGVzY3JpcHRvci4gU2V0IHBvc2l0aW9uIHRvIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIgaW4gaW5wdXQuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN0YXRlID0gXCJpbiBkZXNjcmlwdG9yXCI7XG5cdFx0XHRcdFx0XHRwb3MgLT0gMTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkdmFuY2UgcG9zaXRpb24gdG8gdGhlIG5leHQgY2hhcmFjdGVyIGluIGlucHV0LlxuXHRcdFx0XHRwb3MgKz0gMTtcblxuXHRcdFx0XHQvLyBSZXBlYXQgdGhpcyBzdGVwLlxuXHRcdFx0fSAvLyAoY2xvc2Ugd2hpbGUgdHJ1ZSBsb29wKVxuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEFkZHMgZGVzY3JpcHRvciBwcm9wZXJ0aWVzIHRvIGEgY2FuZGlkYXRlLCBwdXNoZXMgdG8gdGhlIGNhbmRpZGF0ZXMgYXJyYXlcblx0XHQgKiBAcmV0dXJuIHVuZGVmaW5lZFxuXHRcdCAqL1xuXHRcdC8vIERlY2xhcmVkIG91dHNpZGUgb2YgdGhlIHdoaWxlIGxvb3Agc28gdGhhdCBpdCdzIG9ubHkgY3JlYXRlZCBvbmNlLlxuXHRcdGZ1bmN0aW9uIHBhcnNlRGVzY3JpcHRvcnMoKSB7XG5cblx0XHRcdC8vIDkuIERlc2NyaXB0b3IgcGFyc2VyOiBMZXQgZXJyb3IgYmUgbm8uXG5cdFx0XHR2YXIgcEVycm9yID0gZmFsc2UsXG5cblx0XHRcdFx0Ly8gMTAuIExldCB3aWR0aCBiZSBhYnNlbnQuXG5cdFx0XHRcdC8vIDExLiBMZXQgZGVuc2l0eSBiZSBhYnNlbnQuXG5cdFx0XHRcdC8vIDEyLiBMZXQgZnV0dXJlLWNvbXBhdC1oIGJlIGFic2VudC4gKFdlJ3JlIGltcGxlbWVudGluZyBpdCBub3cgYXMgaClcblx0XHRcdFx0dywgZCwgaCwgaSxcblx0XHRcdFx0Y2FuZGlkYXRlID0ge30sXG5cdFx0XHRcdGRlc2MsIGxhc3RDaGFyLCB2YWx1ZSwgaW50VmFsLCBmbG9hdFZhbDtcblxuXHRcdFx0Ly8gMTMuIEZvciBlYWNoIGRlc2NyaXB0b3IgaW4gZGVzY3JpcHRvcnMsIHJ1biB0aGUgYXBwcm9wcmlhdGUgc2V0IG9mIHN0ZXBzXG5cdFx0XHQvLyBmcm9tIHRoZSBmb2xsb3dpbmcgbGlzdDpcblx0XHRcdGZvciAoaSA9IDAgOyBpIDwgZGVzY3JpcHRvcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0ZGVzYyA9IGRlc2NyaXB0b3JzWyBpIF07XG5cblx0XHRcdFx0bGFzdENoYXIgPSBkZXNjWyBkZXNjLmxlbmd0aCAtIDEgXTtcblx0XHRcdFx0dmFsdWUgPSBkZXNjLnN1YnN0cmluZygwLCBkZXNjLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRpbnRWYWwgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuXHRcdFx0XHRmbG9hdFZhbCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuXG5cdFx0XHRcdC8vIElmIHRoZSBkZXNjcmlwdG9yIGNvbnNpc3RzIG9mIGEgdmFsaWQgbm9uLW5lZ2F0aXZlIGludGVnZXIgZm9sbG93ZWQgYnlcblx0XHRcdFx0Ly8gYSBVKzAwNzcgTEFUSU4gU01BTEwgTEVUVEVSIFcgY2hhcmFjdGVyXG5cdFx0XHRcdGlmIChyZWdleE5vbk5lZ2F0aXZlSW50ZWdlci50ZXN0KHZhbHVlKSAmJiAobGFzdENoYXIgPT09IFwid1wiKSkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2lkdGggYW5kIGRlbnNpdHkgYXJlIG5vdCBib3RoIGFic2VudCwgdGhlbiBsZXQgZXJyb3IgYmUgeWVzLlxuXHRcdFx0XHRcdGlmICh3IHx8IGQpIHtwRXJyb3IgPSB0cnVlO31cblxuXHRcdFx0XHRcdC8vIEFwcGx5IHRoZSBydWxlcyBmb3IgcGFyc2luZyBub24tbmVnYXRpdmUgaW50ZWdlcnMgdG8gdGhlIGRlc2NyaXB0b3IuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHJlc3VsdCBpcyB6ZXJvLCBsZXQgZXJyb3IgYmUgeWVzLlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgbGV0IHdpZHRoIGJlIHRoZSByZXN1bHQuXG5cdFx0XHRcdFx0aWYgKGludFZhbCA9PT0gMCkge3BFcnJvciA9IHRydWU7fSBlbHNlIHt3ID0gaW50VmFsO31cblxuXHRcdFx0XHRcdC8vIElmIHRoZSBkZXNjcmlwdG9yIGNvbnNpc3RzIG9mIGEgdmFsaWQgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGZvbGxvd2VkIGJ5XG5cdFx0XHRcdFx0Ly8gYSBVKzAwNzggTEFUSU4gU01BTEwgTEVUVEVSIFggY2hhcmFjdGVyXG5cdFx0XHRcdH0gZWxzZSBpZiAocmVnZXhGbG9hdGluZ1BvaW50LnRlc3QodmFsdWUpICYmIChsYXN0Q2hhciA9PT0gXCJ4XCIpKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3aWR0aCwgZGVuc2l0eSBhbmQgZnV0dXJlLWNvbXBhdC1oIGFyZSBub3QgYWxsIGFic2VudCwgdGhlbiBsZXQgZXJyb3Jcblx0XHRcdFx0XHQvLyBiZSB5ZXMuXG5cdFx0XHRcdFx0aWYgKHcgfHwgZCB8fCBoKSB7cEVycm9yID0gdHJ1ZTt9XG5cblx0XHRcdFx0XHQvLyBBcHBseSB0aGUgcnVsZXMgZm9yIHBhcnNpbmcgZmxvYXRpbmctcG9pbnQgbnVtYmVyIHZhbHVlcyB0byB0aGUgZGVzY3JpcHRvci5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcmVzdWx0IGlzIGxlc3MgdGhhbiB6ZXJvLCBsZXQgZXJyb3IgYmUgeWVzLiBPdGhlcndpc2UsIGxldCBkZW5zaXR5XG5cdFx0XHRcdFx0Ly8gYmUgdGhlIHJlc3VsdC5cblx0XHRcdFx0XHRpZiAoZmxvYXRWYWwgPCAwKSB7cEVycm9yID0gdHJ1ZTt9IGVsc2Uge2QgPSBmbG9hdFZhbDt9XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZGVzY3JpcHRvciBjb25zaXN0cyBvZiBhIHZhbGlkIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyIGZvbGxvd2VkIGJ5XG5cdFx0XHRcdFx0Ly8gYSBVKzAwNjggTEFUSU4gU01BTEwgTEVUVEVSIEggY2hhcmFjdGVyXG5cdFx0XHRcdH0gZWxzZSBpZiAocmVnZXhOb25OZWdhdGl2ZUludGVnZXIudGVzdCh2YWx1ZSkgJiYgKGxhc3RDaGFyID09PSBcImhcIikpIHtcblxuXHRcdFx0XHRcdC8vIElmIGhlaWdodCBhbmQgZGVuc2l0eSBhcmUgbm90IGJvdGggYWJzZW50LCB0aGVuIGxldCBlcnJvciBiZSB5ZXMuXG5cdFx0XHRcdFx0aWYgKGggfHwgZCkge3BFcnJvciA9IHRydWU7fVxuXG5cdFx0XHRcdFx0Ly8gQXBwbHkgdGhlIHJ1bGVzIGZvciBwYXJzaW5nIG5vbi1uZWdhdGl2ZSBpbnRlZ2VycyB0byB0aGUgZGVzY3JpcHRvci5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcmVzdWx0IGlzIHplcm8sIGxldCBlcnJvciBiZSB5ZXMuIE90aGVyd2lzZSwgbGV0IGZ1dHVyZS1jb21wYXQtaFxuXHRcdFx0XHRcdC8vIGJlIHRoZSByZXN1bHQuXG5cdFx0XHRcdFx0aWYgKGludFZhbCA9PT0gMCkge3BFcnJvciA9IHRydWU7fSBlbHNlIHtoID0gaW50VmFsO31cblxuXHRcdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UsIExldCBlcnJvciBiZSB5ZXMuXG5cdFx0XHRcdH0gZWxzZSB7cEVycm9yID0gdHJ1ZTt9XG5cdFx0XHR9IC8vIChjbG9zZSBzdGVwIDEzIGZvciBsb29wKVxuXG5cdFx0XHQvLyAxNS4gSWYgZXJyb3IgaXMgc3RpbGwgbm8sIHRoZW4gYXBwZW5kIGEgbmV3IGltYWdlIHNvdXJjZSB0byBjYW5kaWRhdGVzIHdob3NlXG5cdFx0XHQvLyBVUkwgaXMgdXJsLCBhc3NvY2lhdGVkIHdpdGggYSB3aWR0aCB3aWR0aCBpZiBub3QgYWJzZW50IGFuZCBhIHBpeGVsXG5cdFx0XHQvLyBkZW5zaXR5IGRlbnNpdHkgaWYgbm90IGFic2VudC4gT3RoZXJ3aXNlLCB0aGVyZSBpcyBhIHBhcnNlIGVycm9yLlxuXHRcdFx0aWYgKCFwRXJyb3IpIHtcblx0XHRcdFx0Y2FuZGlkYXRlLnVybCA9IHVybDtcblx0XHRcdFx0aWYgKHcpIHsgY2FuZGlkYXRlLncgPSB3O31cblx0XHRcdFx0aWYgKGQpIHsgY2FuZGlkYXRlLmQgPSBkO31cblx0XHRcdFx0aWYgKGgpIHsgY2FuZGlkYXRlLmggPSBoO31cblx0XHRcdFx0Y2FuZGlkYXRlcy5wdXNoKGNhbmRpZGF0ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5sb2cpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJJbnZhbGlkIHNyY3NldCBkZXNjcmlwdG9yIGZvdW5kIGluICdcIiArXG5cdFx0XHRcdFx0aW5wdXQgKyBcIicgYXQgJ1wiICsgZGVzYyArIFwiJy5cIik7XG5cdFx0XHR9XG5cdFx0fSAvLyAoY2xvc2UgcGFyc2VEZXNjcmlwdG9ycyBmbilcblxuXHR9XG59KSk7XG4iLCJ2YXIgeD1TdHJpbmc7XG52YXIgY3JlYXRlPWZ1bmN0aW9uKCkge3JldHVybiB7aXNDb2xvclN1cHBvcnRlZDpmYWxzZSxyZXNldDp4LGJvbGQ6eCxkaW06eCxpdGFsaWM6eCx1bmRlcmxpbmU6eCxpbnZlcnNlOngsaGlkZGVuOngsc3RyaWtldGhyb3VnaDp4LGJsYWNrOngscmVkOngsZ3JlZW46eCx5ZWxsb3c6eCxibHVlOngsbWFnZW50YTp4LGN5YW46eCx3aGl0ZTp4LGdyYXk6eCxiZ0JsYWNrOngsYmdSZWQ6eCxiZ0dyZWVuOngsYmdZZWxsb3c6eCxiZ0JsdWU6eCxiZ01hZ2VudGE6eCxiZ0N5YW46eCxiZ1doaXRlOnh9fTtcbm1vZHVsZS5leHBvcnRzPWNyZWF0ZSgpO1xubW9kdWxlLmV4cG9ydHMuY3JlYXRlQ29sb3JzID0gY3JlYXRlO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5cbmNsYXNzIEF0UnVsZSBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2F0cnVsZSdcbiAgfVxuXG4gIGFwcGVuZCguLi5jaGlsZHJlbikge1xuICAgIGlmICghdGhpcy5wcm94eU9mLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgICByZXR1cm4gc3VwZXIuYXBwZW5kKC4uLmNoaWxkcmVuKVxuICB9XG5cbiAgcHJlcGVuZCguLi5jaGlsZHJlbikge1xuICAgIGlmICghdGhpcy5wcm94eU9mLm5vZGVzKSB0aGlzLm5vZGVzID0gW11cbiAgICByZXR1cm4gc3VwZXIucHJlcGVuZCguLi5jaGlsZHJlbilcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF0UnVsZVxuQXRSdWxlLmRlZmF1bHQgPSBBdFJ1bGVcblxuQ29udGFpbmVyLnJlZ2lzdGVyQXRSdWxlKEF0UnVsZSlcbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9kZSA9IHJlcXVpcmUoJy4vbm9kZScpXG5cbmNsYXNzIENvbW1lbnQgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAnY29tbWVudCdcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1lbnRcbkNvbW1lbnQuZGVmYXVsdCA9IENvbW1lbnRcbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgeyBpc0NsZWFuLCBteSB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IENvbW1lbnQgPSByZXF1aXJlKCcuL2NvbW1lbnQnKVxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5sZXQgcGFyc2UsIFJ1bGUsIEF0UnVsZSwgUm9vdFxuXG5mdW5jdGlvbiBjbGVhblNvdXJjZShub2Rlcykge1xuICByZXR1cm4gbm9kZXMubWFwKGkgPT4ge1xuICAgIGlmIChpLm5vZGVzKSBpLm5vZGVzID0gY2xlYW5Tb3VyY2UoaS5ub2RlcylcbiAgICBkZWxldGUgaS5zb3VyY2VcbiAgICByZXR1cm4gaVxuICB9KVxufVxuXG5mdW5jdGlvbiBtYXJrRGlydHlVcChub2RlKSB7XG4gIG5vZGVbaXNDbGVhbl0gPSBmYWxzZVxuICBpZiAobm9kZS5wcm94eU9mLm5vZGVzKSB7XG4gICAgZm9yIChsZXQgaSBvZiBub2RlLnByb3h5T2Yubm9kZXMpIHtcbiAgICAgIG1hcmtEaXJ0eVVwKGkpXG4gICAgfVxuICB9XG59XG5cbmNsYXNzIENvbnRhaW5lciBleHRlbmRzIE5vZGUge1xuICBwdXNoKGNoaWxkKSB7XG4gICAgY2hpbGQucGFyZW50ID0gdGhpc1xuICAgIHRoaXMucHJveHlPZi5ub2Rlcy5wdXNoKGNoaWxkKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBlYWNoKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5T2Yubm9kZXMpIHJldHVybiB1bmRlZmluZWRcbiAgICBsZXQgaXRlcmF0b3IgPSB0aGlzLmdldEl0ZXJhdG9yKClcblxuICAgIGxldCBpbmRleCwgcmVzdWx0XG4gICAgd2hpbGUgKHRoaXMuaW5kZXhlc1tpdGVyYXRvcl0gPCB0aGlzLnByb3h5T2Yubm9kZXMubGVuZ3RoKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpdGVyYXRvcl1cbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKHRoaXMucHJveHlPZi5ub2Rlc1tpbmRleF0sIGluZGV4KVxuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIGJyZWFrXG5cbiAgICAgIHRoaXMuaW5kZXhlc1tpdGVyYXRvcl0gKz0gMVxuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmluZGV4ZXNbaXRlcmF0b3JdXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgd2FsayhjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVhY2goKGNoaWxkLCBpKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0XG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgY2hpbGQuYWRkVG9FcnJvcihlKVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gZmFsc2UgJiYgY2hpbGQud2Fsaykge1xuICAgICAgICByZXN1bHQgPSBjaGlsZC53YWxrKGNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSlcbiAgfVxuXG4gIHdhbGtEZWNscyhwcm9wLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gcHJvcFxuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWNsJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHByb3AgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiB0aGlzLndhbGsoKGNoaWxkLCBpKSA9PiB7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnZGVjbCcgJiYgcHJvcC50ZXN0KGNoaWxkLnByb3ApKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWNsJyAmJiBjaGlsZC5wcm9wID09PSBwcm9wKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgd2Fsa1J1bGVzKHNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gc2VsZWN0b3JcblxuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ3J1bGUnICYmIHNlbGVjdG9yLnRlc3QoY2hpbGQuc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy53YWxrKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJyAmJiBjaGlsZC5zZWxlY3RvciA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB3YWxrQXRSdWxlcyhuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gbmFtZVxuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdhdHJ1bGUnKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBpZiAobmFtZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdhdHJ1bGUnICYmIG5hbWUudGVzdChjaGlsZC5uYW1lKSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnYXRydWxlJyAmJiBjaGlsZC5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgd2Fsa0NvbW1lbnRzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMud2FsaygoY2hpbGQsIGkpID0+IHtcbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBhcHBlbmQoLi4uY2hpbGRyZW4pIHtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgbGV0IG5vZGVzID0gdGhpcy5ub3JtYWxpemUoY2hpbGQsIHRoaXMubGFzdClcbiAgICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHRoaXMucHJveHlPZi5ub2Rlcy5wdXNoKG5vZGUpXG4gICAgfVxuXG4gICAgdGhpcy5tYXJrRGlydHkoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHByZXBlbmQoLi4uY2hpbGRyZW4pIHtcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLnJldmVyc2UoKVxuICAgIGZvciAobGV0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBsZXQgbm9kZXMgPSB0aGlzLm5vcm1hbGl6ZShjaGlsZCwgdGhpcy5maXJzdCwgJ3ByZXBlbmQnKS5yZXZlcnNlKClcbiAgICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHRoaXMucHJveHlPZi5ub2Rlcy51bnNoaWZ0KG5vZGUpXG4gICAgICBmb3IgKGxldCBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IHRoaXMuaW5kZXhlc1tpZF0gKyBub2Rlcy5sZW5ndGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtEaXJ0eSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgY2xlYW5SYXdzKGtlZXBCZXR3ZWVuKSB7XG4gICAgc3VwZXIuY2xlYW5SYXdzKGtlZXBCZXR3ZWVuKVxuICAgIGlmICh0aGlzLm5vZGVzKSB7XG4gICAgICBmb3IgKGxldCBub2RlIG9mIHRoaXMubm9kZXMpIG5vZGUuY2xlYW5SYXdzKGtlZXBCZXR3ZWVuKVxuICAgIH1cbiAgfVxuXG4gIGluc2VydEJlZm9yZShleGlzdCwgYWRkKSB7XG4gICAgbGV0IGV4aXN0SW5kZXggPSB0aGlzLmluZGV4KGV4aXN0KVxuICAgIGxldCB0eXBlID0gZXhpc3QgPT09IDAgPyAncHJlcGVuZCcgOiBmYWxzZVxuICAgIGxldCBub2RlcyA9IHRoaXMubm9ybWFsaXplKGFkZCwgdGhpcy5wcm94eU9mLm5vZGVzW2V4aXN0SW5kZXhdLCB0eXBlKS5yZXZlcnNlKClcbiAgICBleGlzdEluZGV4ID0gdGhpcy5pbmRleChleGlzdClcbiAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB0aGlzLnByb3h5T2Yubm9kZXMuc3BsaWNlKGV4aXN0SW5kZXgsIDAsIG5vZGUpXG5cbiAgICBsZXQgaW5kZXhcbiAgICBmb3IgKGxldCBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXVxuICAgICAgaWYgKGV4aXN0SW5kZXggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IGluZGV4ICsgbm9kZXMubGVuZ3RoXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXJrRGlydHkoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGluc2VydEFmdGVyKGV4aXN0LCBhZGQpIHtcbiAgICBsZXQgZXhpc3RJbmRleCA9IHRoaXMuaW5kZXgoZXhpc3QpXG4gICAgbGV0IG5vZGVzID0gdGhpcy5ub3JtYWxpemUoYWRkLCB0aGlzLnByb3h5T2Yubm9kZXNbZXhpc3RJbmRleF0pLnJldmVyc2UoKVxuICAgIGV4aXN0SW5kZXggPSB0aGlzLmluZGV4KGV4aXN0KVxuICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHRoaXMucHJveHlPZi5ub2Rlcy5zcGxpY2UoZXhpc3RJbmRleCArIDEsIDAsIG5vZGUpXG5cbiAgICBsZXQgaW5kZXhcbiAgICBmb3IgKGxldCBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXVxuICAgICAgaWYgKGV4aXN0SW5kZXggPCBpbmRleCkge1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gaW5kZXggKyBub2Rlcy5sZW5ndGhcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm1hcmtEaXJ0eSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQpIHtcbiAgICBjaGlsZCA9IHRoaXMuaW5kZXgoY2hpbGQpXG4gICAgdGhpcy5wcm94eU9mLm5vZGVzW2NoaWxkXS5wYXJlbnQgPSB1bmRlZmluZWRcbiAgICB0aGlzLnByb3h5T2Yubm9kZXMuc3BsaWNlKGNoaWxkLCAxKVxuXG4gICAgbGV0IGluZGV4XG4gICAgZm9yIChsZXQgaWQgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF1cbiAgICAgIGlmIChpbmRleCA+PSBjaGlsZCkge1xuICAgICAgICB0aGlzLmluZGV4ZXNbaWRdID0gaW5kZXggLSAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXJrRGlydHkoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJlbW92ZUFsbCgpIHtcbiAgICBmb3IgKGxldCBub2RlIG9mIHRoaXMucHJveHlPZi5ub2Rlcykgbm9kZS5wYXJlbnQgPSB1bmRlZmluZWRcbiAgICB0aGlzLnByb3h5T2Yubm9kZXMgPSBbXVxuXG4gICAgdGhpcy5tYXJrRGlydHkoKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHJlcGxhY2VWYWx1ZXMocGF0dGVybiwgb3B0cywgY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdHNcbiAgICAgIG9wdHMgPSB7fVxuICAgIH1cblxuICAgIHRoaXMud2Fsa0RlY2xzKGRlY2wgPT4ge1xuICAgICAgaWYgKG9wdHMucHJvcHMgJiYgIW9wdHMucHJvcHMuaW5jbHVkZXMoZGVjbC5wcm9wKSkgcmV0dXJuXG4gICAgICBpZiAob3B0cy5mYXN0ICYmICFkZWNsLnZhbHVlLmluY2x1ZGVzKG9wdHMuZmFzdCkpIHJldHVyblxuXG4gICAgICBkZWNsLnZhbHVlID0gZGVjbC52YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIGNhbGxiYWNrKVxuICAgIH0pXG5cbiAgICB0aGlzLm1hcmtEaXJ0eSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZXZlcnkoY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMuZXZlcnkoY29uZGl0aW9uKVxuICB9XG5cbiAgc29tZShjb25kaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5zb21lKGNvbmRpdGlvbilcbiAgfVxuXG4gIGluZGV4KGNoaWxkKSB7XG4gICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHJldHVybiBjaGlsZFxuICAgIGlmIChjaGlsZC5wcm94eU9mKSBjaGlsZCA9IGNoaWxkLnByb3h5T2ZcbiAgICByZXR1cm4gdGhpcy5wcm94eU9mLm5vZGVzLmluZGV4T2YoY2hpbGQpXG4gIH1cblxuICBnZXQgZmlyc3QoKSB7XG4gICAgaWYgKCF0aGlzLnByb3h5T2Yubm9kZXMpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5wcm94eU9mLm5vZGVzWzBdXG4gIH1cblxuICBnZXQgbGFzdCgpIHtcbiAgICBpZiAoIXRoaXMucHJveHlPZi5ub2RlcykgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLnByb3h5T2Yubm9kZXNbdGhpcy5wcm94eU9mLm5vZGVzLmxlbmd0aCAtIDFdXG4gIH1cblxuICBub3JtYWxpemUobm9kZXMsIHNhbXBsZSkge1xuICAgIGlmICh0eXBlb2Ygbm9kZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBub2RlcyA9IGNsZWFuU291cmNlKHBhcnNlKG5vZGVzKS5ub2RlcylcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgICBub2RlcyA9IG5vZGVzLnNsaWNlKDApXG4gICAgICBmb3IgKGxldCBpIG9mIG5vZGVzKSB7XG4gICAgICAgIGlmIChpLnBhcmVudCkgaS5wYXJlbnQucmVtb3ZlQ2hpbGQoaSwgJ2lnbm9yZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2Rlcy50eXBlID09PSAncm9vdCcgJiYgdGhpcy50eXBlICE9PSAnZG9jdW1lbnQnKSB7XG4gICAgICBub2RlcyA9IG5vZGVzLm5vZGVzLnNsaWNlKDApXG4gICAgICBmb3IgKGxldCBpIG9mIG5vZGVzKSB7XG4gICAgICAgIGlmIChpLnBhcmVudCkgaS5wYXJlbnQucmVtb3ZlQ2hpbGQoaSwgJ2lnbm9yZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2Rlcy50eXBlKSB7XG4gICAgICBub2RlcyA9IFtub2Rlc11cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnByb3ApIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZXMudmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgZmllbGQgaXMgbWlzc2VkIGluIG5vZGUgY3JlYXRpb24nKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZXMudmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5vZGVzLnZhbHVlID0gU3RyaW5nKG5vZGVzLnZhbHVlKVxuICAgICAgfVxuICAgICAgbm9kZXMgPSBbbmV3IERlY2xhcmF0aW9uKG5vZGVzKV1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnNlbGVjdG9yKSB7XG4gICAgICBub2RlcyA9IFtuZXcgUnVsZShub2RlcyldXG4gICAgfSBlbHNlIGlmIChub2Rlcy5uYW1lKSB7XG4gICAgICBub2RlcyA9IFtuZXcgQXRSdWxlKG5vZGVzKV1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnRleHQpIHtcbiAgICAgIG5vZGVzID0gW25ldyBDb21tZW50KG5vZGVzKV1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG5vZGUgdHlwZSBpbiBub2RlIGNyZWF0aW9uJylcbiAgICB9XG5cbiAgICBsZXQgcHJvY2Vzc2VkID0gbm9kZXMubWFwKGkgPT4ge1xuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgIGlmICghaVtteV0pIENvbnRhaW5lci5yZWJ1aWxkKGkpXG4gICAgICBpID0gaS5wcm94eU9mXG4gICAgICBpZiAoaS5wYXJlbnQpIGkucGFyZW50LnJlbW92ZUNoaWxkKGkpXG4gICAgICBpZiAoaVtpc0NsZWFuXSkgbWFya0RpcnR5VXAoaSlcbiAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmJlZm9yZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHNhbXBsZSAmJiB0eXBlb2Ygc2FtcGxlLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGkucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmUucmVwbGFjZSgvXFxTL2csICcnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpLnBhcmVudCA9IHRoaXMucHJveHlPZlxuICAgICAgcmV0dXJuIGlcbiAgICB9KVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZFxuICB9XG5cbiAgZ2V0UHJveHlQcm9jZXNzb3IoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNldChub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICBpZiAobm9kZVtwcm9wXSA9PT0gdmFsdWUpIHJldHVybiB0cnVlXG4gICAgICAgIG5vZGVbcHJvcF0gPSB2YWx1ZVxuICAgICAgICBpZiAocHJvcCA9PT0gJ25hbWUnIHx8IHByb3AgPT09ICdwYXJhbXMnIHx8IHByb3AgPT09ICdzZWxlY3RvcicpIHtcbiAgICAgICAgICBub2RlLm1hcmtEaXJ0eSgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0sXG5cbiAgICAgIGdldChub2RlLCBwcm9wKSB7XG4gICAgICAgIGlmIChwcm9wID09PSAncHJveHlPZicpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZVxuICAgICAgICB9IGVsc2UgaWYgKCFub2RlW3Byb3BdKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGVbcHJvcF1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBwcm9wID09PSAnZWFjaCcgfHxcbiAgICAgICAgICAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnICYmIHByb3Auc3RhcnRzV2l0aCgnd2FsaycpKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBub2RlW3Byb3BdKFxuICAgICAgICAgICAgICAuLi5hcmdzLm1hcChpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoY2hpbGQsIGluZGV4KSA9PiBpKGNoaWxkLnRvUHJveHkoKSwgaW5kZXgpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wID09PSAnZXZlcnknIHx8IHByb3AgPT09ICdzb21lJykge1xuICAgICAgICAgIHJldHVybiBjYiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVtwcm9wXSgoY2hpbGQsIC4uLm90aGVyKSA9PlxuICAgICAgICAgICAgICBjYihjaGlsZC50b1Byb3h5KCksIC4uLm90aGVyKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wID09PSAncm9vdCcpIHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gbm9kZS5yb290KCkudG9Qcm94eSgpXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ25vZGVzJykge1xuICAgICAgICAgIHJldHVybiBub2RlLm5vZGVzLm1hcChpID0+IGkudG9Qcm94eSgpKVxuICAgICAgICB9IGVsc2UgaWYgKHByb3AgPT09ICdmaXJzdCcgfHwgcHJvcCA9PT0gJ2xhc3QnKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGVbcHJvcF0udG9Qcm94eSgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGVbcHJvcF1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEl0ZXJhdG9yKCkge1xuICAgIGlmICghdGhpcy5sYXN0RWFjaCkgdGhpcy5sYXN0RWFjaCA9IDBcbiAgICBpZiAoIXRoaXMuaW5kZXhlcykgdGhpcy5pbmRleGVzID0ge31cblxuICAgIHRoaXMubGFzdEVhY2ggKz0gMVxuICAgIGxldCBpdGVyYXRvciA9IHRoaXMubGFzdEVhY2hcbiAgICB0aGlzLmluZGV4ZXNbaXRlcmF0b3JdID0gMFxuXG4gICAgcmV0dXJuIGl0ZXJhdG9yXG4gIH1cbn1cblxuQ29udGFpbmVyLnJlZ2lzdGVyUGFyc2UgPSBkZXBlbmRhbnQgPT4ge1xuICBwYXJzZSA9IGRlcGVuZGFudFxufVxuXG5Db250YWluZXIucmVnaXN0ZXJSdWxlID0gZGVwZW5kYW50ID0+IHtcbiAgUnVsZSA9IGRlcGVuZGFudFxufVxuXG5Db250YWluZXIucmVnaXN0ZXJBdFJ1bGUgPSBkZXBlbmRhbnQgPT4ge1xuICBBdFJ1bGUgPSBkZXBlbmRhbnRcbn1cblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdCA9IGRlcGVuZGFudCA9PiB7XG4gIFJvb3QgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWluZXJcbkNvbnRhaW5lci5kZWZhdWx0ID0gQ29udGFpbmVyXG5cbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuQ29udGFpbmVyLnJlYnVpbGQgPSBub2RlID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgQXRSdWxlLnByb3RvdHlwZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdydWxlJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihub2RlLCBSdWxlLnByb3RvdHlwZSlcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdkZWNsJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihub2RlLCBEZWNsYXJhdGlvbi5wcm90b3R5cGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgQ29tbWVudC5wcm90b3R5cGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAncm9vdCcpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yobm9kZSwgUm9vdC5wcm90b3R5cGUpXG4gIH1cblxuICBub2RlW215XSA9IHRydWVcblxuICBpZiAobm9kZS5ub2Rlcykge1xuICAgIG5vZGUubm9kZXMuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBDb250YWluZXIucmVidWlsZChjaGlsZClcbiAgICB9KVxuICB9XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCBwaWNvID0gcmVxdWlyZSgncGljb2NvbG9ycycpXG5cbmxldCB0ZXJtaW5hbEhpZ2hsaWdodCA9IHJlcXVpcmUoJy4vdGVybWluYWwtaGlnaGxpZ2h0JylcblxuY2xhc3MgQ3NzU3ludGF4RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGxpbmUsIGNvbHVtbiwgc291cmNlLCBmaWxlLCBwbHVnaW4pIHtcbiAgICBzdXBlcihtZXNzYWdlKVxuICAgIHRoaXMubmFtZSA9ICdDc3NTeW50YXhFcnJvcidcbiAgICB0aGlzLnJlYXNvbiA9IG1lc3NhZ2VcblxuICAgIGlmIChmaWxlKSB7XG4gICAgICB0aGlzLmZpbGUgPSBmaWxlXG4gICAgfVxuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIHRoaXMuc291cmNlID0gc291cmNlXG4gICAgfVxuICAgIGlmIChwbHVnaW4pIHtcbiAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luXG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGluZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0eXBlb2YgbGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZVxuICAgICAgICB0aGlzLmNvbHVtbiA9IGNvbHVtblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZS5saW5lXG4gICAgICAgIHRoaXMuY29sdW1uID0gbGluZS5jb2x1bW5cbiAgICAgICAgdGhpcy5lbmRMaW5lID0gY29sdW1uLmxpbmVcbiAgICAgICAgdGhpcy5lbmRDb2x1bW4gPSBjb2x1bW4uY29sdW1uXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRNZXNzYWdlKClcblxuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgQ3NzU3ludGF4RXJyb3IpXG4gICAgfVxuICB9XG5cbiAgc2V0TWVzc2FnZSgpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnBsdWdpbiA/IHRoaXMucGx1Z2luICsgJzogJyA6ICcnXG4gICAgdGhpcy5tZXNzYWdlICs9IHRoaXMuZmlsZSA/IHRoaXMuZmlsZSA6ICc8Y3NzIGlucHV0PidcbiAgICBpZiAodHlwZW9mIHRoaXMubGluZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXMubWVzc2FnZSArPSAnOicgKyB0aGlzLmxpbmUgKyAnOicgKyB0aGlzLmNvbHVtblxuICAgIH1cbiAgICB0aGlzLm1lc3NhZ2UgKz0gJzogJyArIHRoaXMucmVhc29uXG4gIH1cblxuICBzaG93U291cmNlQ29kZShjb2xvcikge1xuICAgIGlmICghdGhpcy5zb3VyY2UpIHJldHVybiAnJ1xuXG4gICAgbGV0IGNzcyA9IHRoaXMuc291cmNlXG4gICAgaWYgKGNvbG9yID09IG51bGwpIGNvbG9yID0gcGljby5pc0NvbG9yU3VwcG9ydGVkXG4gICAgaWYgKHRlcm1pbmFsSGlnaGxpZ2h0KSB7XG4gICAgICBpZiAoY29sb3IpIGNzcyA9IHRlcm1pbmFsSGlnaGxpZ2h0KGNzcylcbiAgICB9XG5cbiAgICBsZXQgbGluZXMgPSBjc3Muc3BsaXQoL1xccj9cXG4vKVxuICAgIGxldCBzdGFydCA9IE1hdGgubWF4KHRoaXMubGluZSAtIDMsIDApXG4gICAgbGV0IGVuZCA9IE1hdGgubWluKHRoaXMubGluZSArIDIsIGxpbmVzLmxlbmd0aClcblxuICAgIGxldCBtYXhXaWR0aCA9IFN0cmluZyhlbmQpLmxlbmd0aFxuXG4gICAgbGV0IG1hcmssIGFzaWRlXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICBsZXQgeyBib2xkLCByZWQsIGdyYXkgfSA9IHBpY28uY3JlYXRlQ29sb3JzKHRydWUpXG4gICAgICBtYXJrID0gdGV4dCA9PiBib2xkKHJlZCh0ZXh0KSlcbiAgICAgIGFzaWRlID0gdGV4dCA9PiBncmF5KHRleHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmsgPSBhc2lkZSA9IHN0ciA9PiBzdHJcbiAgICB9XG5cbiAgICByZXR1cm4gbGluZXNcbiAgICAgIC5zbGljZShzdGFydCwgZW5kKVxuICAgICAgLm1hcCgobGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgbGV0IG51bWJlciA9IHN0YXJ0ICsgMSArIGluZGV4XG4gICAgICAgIGxldCBndXR0ZXIgPSAnICcgKyAoJyAnICsgbnVtYmVyKS5zbGljZSgtbWF4V2lkdGgpICsgJyB8ICdcbiAgICAgICAgaWYgKG51bWJlciA9PT0gdGhpcy5saW5lKSB7XG4gICAgICAgICAgbGV0IHNwYWNpbmcgPVxuICAgICAgICAgICAgYXNpZGUoZ3V0dGVyLnJlcGxhY2UoL1xcZC9nLCAnICcpKSArXG4gICAgICAgICAgICBsaW5lLnNsaWNlKDAsIHRoaXMuY29sdW1uIC0gMSkucmVwbGFjZSgvW15cXHRdL2csICcgJylcbiAgICAgICAgICByZXR1cm4gbWFyaygnPicpICsgYXNpZGUoZ3V0dGVyKSArIGxpbmUgKyAnXFxuICcgKyBzcGFjaW5nICsgbWFyaygnXicpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcgJyArIGFzaWRlKGd1dHRlcikgKyBsaW5lXG4gICAgICB9KVxuICAgICAgLmpvaW4oJ1xcbicpXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICBsZXQgY29kZSA9IHRoaXMuc2hvd1NvdXJjZUNvZGUoKVxuICAgIGlmIChjb2RlKSB7XG4gICAgICBjb2RlID0gJ1xcblxcbicgKyBjb2RlICsgJ1xcbidcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmFtZSArICc6ICcgKyB0aGlzLm1lc3NhZ2UgKyBjb2RlXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDc3NTeW50YXhFcnJvclxuQ3NzU3ludGF4RXJyb3IuZGVmYXVsdCA9IENzc1N5bnRheEVycm9yXG4iLCIndXNlIHN0cmljdCdcblxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5jbGFzcyBEZWNsYXJhdGlvbiBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIGlmIChcbiAgICAgIGRlZmF1bHRzICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2YgZGVmYXVsdHMudmFsdWUgIT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICBkZWZhdWx0cyA9IHsgLi4uZGVmYXVsdHMsIHZhbHVlOiBTdHJpbmcoZGVmYXVsdHMudmFsdWUpIH1cbiAgICB9XG4gICAgc3VwZXIoZGVmYXVsdHMpXG4gICAgdGhpcy50eXBlID0gJ2RlY2wnXG4gIH1cblxuICBnZXQgdmFyaWFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcC5zdGFydHNXaXRoKCctLScpIHx8IHRoaXMucHJvcFswXSA9PT0gJyQnXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWNsYXJhdGlvblxuRGVjbGFyYXRpb24uZGVmYXVsdCA9IERlY2xhcmF0aW9uXG4iLCIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBEb2N1bWVudCBleHRlbmRzIENvbnRhaW5lciB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzKSB7XG4gICAgLy8gdHlwZSBuZWVkcyB0byBiZSBwYXNzZWQgdG8gc3VwZXIsIG90aGVyd2lzZSBjaGlsZCByb290cyB3b24ndCBiZSBub3JtYWxpemVkIGNvcnJlY3RseVxuICAgIHN1cGVyKHsgdHlwZTogJ2RvY3VtZW50JywgLi4uZGVmYXVsdHMgfSlcblxuICAgIGlmICghdGhpcy5ub2Rlcykge1xuICAgICAgdGhpcy5ub2RlcyA9IFtdXG4gICAgfVxuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG5cbiAgICByZXR1cm4gbGF6eS5zdHJpbmdpZnkoKVxuICB9XG59XG5cbkRvY3VtZW50LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuRG9jdW1lbnQucmVnaXN0ZXJQcm9jZXNzb3IgPSBkZXBlbmRhbnQgPT4ge1xuICBQcm9jZXNzb3IgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudFxuRG9jdW1lbnQuZGVmYXVsdCA9IERvY3VtZW50XG4iLCIndXNlIHN0cmljdCdcblxubGV0IERlY2xhcmF0aW9uID0gcmVxdWlyZSgnLi9kZWNsYXJhdGlvbicpXG5sZXQgUHJldmlvdXNNYXAgPSByZXF1aXJlKCcuL3ByZXZpb3VzLW1hcCcpXG5sZXQgQ29tbWVudCA9IHJlcXVpcmUoJy4vY29tbWVudCcpXG5sZXQgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJylcbmxldCBJbnB1dCA9IHJlcXVpcmUoJy4vaW5wdXQnKVxubGV0IFJvb3QgPSByZXF1aXJlKCcuL3Jvb3QnKVxubGV0IFJ1bGUgPSByZXF1aXJlKCcuL3J1bGUnKVxuXG5mdW5jdGlvbiBmcm9tSlNPTihqc29uLCBpbnB1dHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikpIHJldHVybiBqc29uLm1hcChuID0+IGZyb21KU09OKG4pKVxuXG4gIGxldCB7IGlucHV0czogb3duSW5wdXRzLCAuLi5kZWZhdWx0cyB9ID0ganNvblxuICBpZiAob3duSW5wdXRzKSB7XG4gICAgaW5wdXRzID0gW11cbiAgICBmb3IgKGxldCBpbnB1dCBvZiBvd25JbnB1dHMpIHtcbiAgICAgIGxldCBpbnB1dEh5ZHJhdGVkID0geyAuLi5pbnB1dCwgX19wcm90b19fOiBJbnB1dC5wcm90b3R5cGUgfVxuICAgICAgaWYgKGlucHV0SHlkcmF0ZWQubWFwKSB7XG4gICAgICAgIGlucHV0SHlkcmF0ZWQubWFwID0ge1xuICAgICAgICAgIC4uLmlucHV0SHlkcmF0ZWQubWFwLFxuICAgICAgICAgIF9fcHJvdG9fXzogUHJldmlvdXNNYXAucHJvdG90eXBlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlucHV0cy5wdXNoKGlucHV0SHlkcmF0ZWQpXG4gICAgfVxuICB9XG4gIGlmIChkZWZhdWx0cy5ub2Rlcykge1xuICAgIGRlZmF1bHRzLm5vZGVzID0ganNvbi5ub2Rlcy5tYXAobiA9PiBmcm9tSlNPTihuLCBpbnB1dHMpKVxuICB9XG4gIGlmIChkZWZhdWx0cy5zb3VyY2UpIHtcbiAgICBsZXQgeyBpbnB1dElkLCAuLi5zb3VyY2UgfSA9IGRlZmF1bHRzLnNvdXJjZVxuICAgIGRlZmF1bHRzLnNvdXJjZSA9IHNvdXJjZVxuICAgIGlmIChpbnB1dElkICE9IG51bGwpIHtcbiAgICAgIGRlZmF1bHRzLnNvdXJjZS5pbnB1dCA9IGlucHV0c1tpbnB1dElkXVxuICAgIH1cbiAgfVxuICBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ3Jvb3QnKSB7XG4gICAgcmV0dXJuIG5ldyBSb290KGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdkZWNsJykge1xuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ3J1bGUnKSB7XG4gICAgcmV0dXJuIG5ldyBSdWxlKGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdjb21tZW50Jykge1xuICAgIHJldHVybiBuZXcgQ29tbWVudChkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnYXRydWxlJykge1xuICAgIHJldHVybiBuZXcgQXRSdWxlKGRlZmF1bHRzKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlIHR5cGU6ICcgKyBqc29uLnR5cGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmcm9tSlNPTlxuZnJvbUpTT04uZGVmYXVsdCA9IGZyb21KU09OXG4iLCIndXNlIHN0cmljdCdcblxubGV0IHsgU291cmNlTWFwQ29uc3VtZXIsIFNvdXJjZU1hcEdlbmVyYXRvciB9ID0gcmVxdWlyZSgnc291cmNlLW1hcC1qcycpXG5sZXQgeyBmaWxlVVJMVG9QYXRoLCBwYXRoVG9GaWxlVVJMIH0gPSByZXF1aXJlKCd1cmwnKVxubGV0IHsgcmVzb2x2ZSwgaXNBYnNvbHV0ZSB9ID0gcmVxdWlyZSgncGF0aCcpXG5sZXQgeyBuYW5vaWQgfSA9IHJlcXVpcmUoJ25hbm9pZC9ub24tc2VjdXJlJylcblxubGV0IHRlcm1pbmFsSGlnaGxpZ2h0ID0gcmVxdWlyZSgnLi90ZXJtaW5hbC1oaWdobGlnaHQnKVxubGV0IENzc1N5bnRheEVycm9yID0gcmVxdWlyZSgnLi9jc3Mtc3ludGF4LWVycm9yJylcbmxldCBQcmV2aW91c01hcCA9IHJlcXVpcmUoJy4vcHJldmlvdXMtbWFwJylcblxubGV0IGZyb21PZmZzZXRDYWNoZSA9IFN5bWJvbCgnZnJvbU9mZnNldENhY2hlJylcblxubGV0IHNvdXJjZU1hcEF2YWlsYWJsZSA9IEJvb2xlYW4oU291cmNlTWFwQ29uc3VtZXIgJiYgU291cmNlTWFwR2VuZXJhdG9yKVxubGV0IHBhdGhBdmFpbGFibGUgPSBCb29sZWFuKHJlc29sdmUgJiYgaXNBYnNvbHV0ZSlcblxuY2xhc3MgSW5wdXQge1xuICBjb25zdHJ1Y3Rvcihjc3MsIG9wdHMgPSB7fSkge1xuICAgIGlmIChcbiAgICAgIGNzcyA9PT0gbnVsbCB8fFxuICAgICAgdHlwZW9mIGNzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICh0eXBlb2YgY3NzID09PSAnb2JqZWN0JyAmJiAhY3NzLnRvU3RyaW5nKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQb3N0Q1NTIHJlY2VpdmVkICR7Y3NzfSBpbnN0ZWFkIG9mIENTUyBzdHJpbmdgKVxuICAgIH1cblxuICAgIHRoaXMuY3NzID0gY3NzLnRvU3RyaW5nKClcblxuICAgIGlmICh0aGlzLmNzc1swXSA9PT0gJ1xcdUZFRkYnIHx8IHRoaXMuY3NzWzBdID09PSAnXFx1RkZGRScpIHtcbiAgICAgIHRoaXMuaGFzQk9NID0gdHJ1ZVxuICAgICAgdGhpcy5jc3MgPSB0aGlzLmNzcy5zbGljZSgxKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhc0JPTSA9IGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZnJvbSkge1xuICAgICAgaWYgKFxuICAgICAgICAhcGF0aEF2YWlsYWJsZSB8fFxuICAgICAgICAvXlxcdys6XFwvXFwvLy50ZXN0KG9wdHMuZnJvbSkgfHxcbiAgICAgICAgaXNBYnNvbHV0ZShvcHRzLmZyb20pXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5maWxlID0gb3B0cy5mcm9tXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZpbGUgPSByZXNvbHZlKG9wdHMuZnJvbSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF0aEF2YWlsYWJsZSAmJiBzb3VyY2VNYXBBdmFpbGFibGUpIHtcbiAgICAgIGxldCBtYXAgPSBuZXcgUHJldmlvdXNNYXAodGhpcy5jc3MsIG9wdHMpXG4gICAgICBpZiAobWFwLnRleHQpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXBcbiAgICAgICAgbGV0IGZpbGUgPSBtYXAuY29uc3VtZXIoKS5maWxlXG4gICAgICAgIGlmICghdGhpcy5maWxlICYmIGZpbGUpIHRoaXMuZmlsZSA9IHRoaXMubWFwUmVzb2x2ZShmaWxlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5maWxlKSB7XG4gICAgICB0aGlzLmlkID0gJzxpbnB1dCBjc3MgJyArIG5hbm9pZCg2KSArICc+J1xuICAgIH1cbiAgICBpZiAodGhpcy5tYXApIHRoaXMubWFwLmZpbGUgPSB0aGlzLmZyb21cbiAgfVxuXG4gIGZyb21PZmZzZXQob2Zmc2V0KSB7XG4gICAgbGV0IGxhc3RMaW5lLCBsaW5lVG9JbmRleFxuICAgIGlmICghdGhpc1tmcm9tT2Zmc2V0Q2FjaGVdKSB7XG4gICAgICBsZXQgbGluZXMgPSB0aGlzLmNzcy5zcGxpdCgnXFxuJylcbiAgICAgIGxpbmVUb0luZGV4ID0gbmV3IEFycmF5KGxpbmVzLmxlbmd0aClcbiAgICAgIGxldCBwcmV2SW5kZXggPSAwXG5cbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxpbmVUb0luZGV4W2ldID0gcHJldkluZGV4XG4gICAgICAgIHByZXZJbmRleCArPSBsaW5lc1tpXS5sZW5ndGggKyAxXG4gICAgICB9XG5cbiAgICAgIHRoaXNbZnJvbU9mZnNldENhY2hlXSA9IGxpbmVUb0luZGV4XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVUb0luZGV4ID0gdGhpc1tmcm9tT2Zmc2V0Q2FjaGVdXG4gICAgfVxuICAgIGxhc3RMaW5lID0gbGluZVRvSW5kZXhbbGluZVRvSW5kZXgubGVuZ3RoIC0gMV1cblxuICAgIGxldCBtaW4gPSAwXG4gICAgaWYgKG9mZnNldCA+PSBsYXN0TGluZSkge1xuICAgICAgbWluID0gbGluZVRvSW5kZXgubGVuZ3RoIC0gMVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbWF4ID0gbGluZVRvSW5kZXgubGVuZ3RoIC0gMlxuICAgICAgbGV0IG1pZFxuICAgICAgd2hpbGUgKG1pbiA8IG1heCkge1xuICAgICAgICBtaWQgPSBtaW4gKyAoKG1heCAtIG1pbikgPj4gMSlcbiAgICAgICAgaWYgKG9mZnNldCA8IGxpbmVUb0luZGV4W21pZF0pIHtcbiAgICAgICAgICBtYXggPSBtaWQgLSAxXG4gICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID49IGxpbmVUb0luZGV4W21pZCArIDFdKSB7XG4gICAgICAgICAgbWluID0gbWlkICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pbiA9IG1pZFxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG1pbiArIDEsXG4gICAgICBjb2w6IG9mZnNldCAtIGxpbmVUb0luZGV4W21pbl0gKyAxXG4gICAgfVxuICB9XG5cbiAgZXJyb3IobWVzc2FnZSwgbGluZSwgY29sdW1uLCBvcHRzID0ge30pIHtcbiAgICBsZXQgcmVzdWx0LCBlbmRMaW5lLCBlbmRDb2x1bW5cblxuICAgIGlmIChsaW5lICYmIHR5cGVvZiBsaW5lID09PSAnb2JqZWN0Jykge1xuICAgICAgbGV0IHN0YXJ0ID0gbGluZVxuICAgICAgbGV0IGVuZCA9IGNvbHVtblxuICAgICAgaWYgKHR5cGVvZiBsaW5lLm9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZnJvbU9mZnNldChzdGFydC5vZmZzZXQpXG4gICAgICAgIGxpbmUgPSBwb3MubGluZVxuICAgICAgICBjb2x1bW4gPSBwb3MuY29sXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lID0gc3RhcnQubGluZVxuICAgICAgICBjb2x1bW4gPSBzdGFydC5jb2x1bW5cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZW5kLm9mZnNldCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZnJvbU9mZnNldChlbmQub2Zmc2V0KVxuICAgICAgICBlbmRMaW5lID0gcG9zLmxpbmVcbiAgICAgICAgZW5kQ29sdW1uID0gcG9zLmNvbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kTGluZSA9IGVuZC5saW5lXG4gICAgICAgIGVuZENvbHVtbiA9IGVuZC5jb2x1bW5cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFjb2x1bW4pIHtcbiAgICAgIGxldCBwb3MgPSB0aGlzLmZyb21PZmZzZXQobGluZSlcbiAgICAgIGxpbmUgPSBwb3MubGluZVxuICAgICAgY29sdW1uID0gcG9zLmNvbFxuICAgIH1cblxuICAgIGxldCBvcmlnaW4gPSB0aGlzLm9yaWdpbihsaW5lLCBjb2x1bW4sIGVuZExpbmUsIGVuZENvbHVtbilcbiAgICBpZiAob3JpZ2luKSB7XG4gICAgICByZXN1bHQgPSBuZXcgQ3NzU3ludGF4RXJyb3IoXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIG9yaWdpbi5lbmRMaW5lID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IG9yaWdpbi5saW5lXG4gICAgICAgICAgOiB7IGxpbmU6IG9yaWdpbi5saW5lLCBjb2x1bW46IG9yaWdpbi5jb2x1bW4gfSxcbiAgICAgICAgb3JpZ2luLmVuZExpbmUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gb3JpZ2luLmNvbHVtblxuICAgICAgICAgIDogeyBsaW5lOiBvcmlnaW4uZW5kTGluZSwgY29sdW1uOiBvcmlnaW4uZW5kQ29sdW1uIH0sXG4gICAgICAgIG9yaWdpbi5zb3VyY2UsXG4gICAgICAgIG9yaWdpbi5maWxlLFxuICAgICAgICBvcHRzLnBsdWdpblxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBuZXcgQ3NzU3ludGF4RXJyb3IoXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGVuZExpbmUgPT09IHVuZGVmaW5lZCA/IGxpbmUgOiB7IGxpbmUsIGNvbHVtbiB9LFxuICAgICAgICBlbmRMaW5lID09PSB1bmRlZmluZWQgPyBjb2x1bW4gOiB7IGxpbmU6IGVuZExpbmUsIGNvbHVtbjogZW5kQ29sdW1uIH0sXG4gICAgICAgIHRoaXMuY3NzLFxuICAgICAgICB0aGlzLmZpbGUsXG4gICAgICAgIG9wdHMucGx1Z2luXG4gICAgICApXG4gICAgfVxuXG4gICAgcmVzdWx0LmlucHV0ID0geyBsaW5lLCBjb2x1bW4sIGVuZExpbmUsIGVuZENvbHVtbiwgc291cmNlOiB0aGlzLmNzcyB9XG4gICAgaWYgKHRoaXMuZmlsZSkge1xuICAgICAgaWYgKHBhdGhUb0ZpbGVVUkwpIHtcbiAgICAgICAgcmVzdWx0LmlucHV0LnVybCA9IHBhdGhUb0ZpbGVVUkwodGhpcy5maWxlKS50b1N0cmluZygpXG4gICAgICB9XG4gICAgICByZXN1bHQuaW5wdXQuZmlsZSA9IHRoaXMuZmlsZVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIG9yaWdpbihsaW5lLCBjb2x1bW4sIGVuZExpbmUsIGVuZENvbHVtbikge1xuICAgIGlmICghdGhpcy5tYXApIHJldHVybiBmYWxzZVxuICAgIGxldCBjb25zdW1lciA9IHRoaXMubWFwLmNvbnN1bWVyKClcblxuICAgIGxldCBmcm9tID0gY29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7IGxpbmUsIGNvbHVtbiB9KVxuICAgIGlmICghZnJvbS5zb3VyY2UpIHJldHVybiBmYWxzZVxuXG4gICAgbGV0IHRvXG4gICAgaWYgKHR5cGVvZiBlbmRMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgdG8gPSBjb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHsgbGluZTogZW5kTGluZSwgY29sdW1uOiBlbmRDb2x1bW4gfSlcbiAgICB9XG5cbiAgICBsZXQgZnJvbVVybFxuXG4gICAgaWYgKGlzQWJzb2x1dGUoZnJvbS5zb3VyY2UpKSB7XG4gICAgICBmcm9tVXJsID0gcGF0aFRvRmlsZVVSTChmcm9tLnNvdXJjZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZnJvbVVybCA9IG5ldyBVUkwoXG4gICAgICAgIGZyb20uc291cmNlLFxuICAgICAgICB0aGlzLm1hcC5jb25zdW1lcigpLnNvdXJjZVJvb3QgfHwgcGF0aFRvRmlsZVVSTCh0aGlzLm1hcC5tYXBGaWxlKVxuICAgICAgKVxuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICB1cmw6IGZyb21VcmwudG9TdHJpbmcoKSxcbiAgICAgIGxpbmU6IGZyb20ubGluZSxcbiAgICAgIGNvbHVtbjogZnJvbS5jb2x1bW4sXG4gICAgICBlbmRMaW5lOiB0byAmJiB0by5saW5lLFxuICAgICAgZW5kQ29sdW1uOiB0byAmJiB0by5jb2x1bW5cbiAgICB9XG5cbiAgICBpZiAoZnJvbVVybC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgICAgaWYgKGZpbGVVUkxUb1BhdGgpIHtcbiAgICAgICAgcmVzdWx0LmZpbGUgPSBmaWxlVVJMVG9QYXRoKGZyb21VcmwpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZmlsZTogcHJvdG9jb2wgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIFBvc3RDU1MgYnVpbGRgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBzb3VyY2UgPSBjb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKGZyb20uc291cmNlKVxuICAgIGlmIChzb3VyY2UpIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2VcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIG1hcFJlc29sdmUoZmlsZSkge1xuICAgIGlmICgvXlxcdys6XFwvXFwvLy50ZXN0KGZpbGUpKSB7XG4gICAgICByZXR1cm4gZmlsZVxuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZSh0aGlzLm1hcC5jb25zdW1lcigpLnNvdXJjZVJvb3QgfHwgdGhpcy5tYXAucm9vdCB8fCAnLicsIGZpbGUpXG4gIH1cblxuICBnZXQgZnJvbSgpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlIHx8IHRoaXMuaWRcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBsZXQganNvbiA9IHt9XG4gICAgZm9yIChsZXQgbmFtZSBvZiBbJ2hhc0JPTScsICdjc3MnLCAnZmlsZScsICdpZCddKSB7XG4gICAgICBpZiAodGhpc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgIGpzb25bbmFtZV0gPSB0aGlzW25hbWVdXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm1hcCkge1xuICAgICAganNvbi5tYXAgPSB7IC4uLnRoaXMubWFwIH1cbiAgICAgIGlmIChqc29uLm1hcC5jb25zdW1lckNhY2hlKSB7XG4gICAgICAgIGpzb24ubWFwLmNvbnN1bWVyQ2FjaGUgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGpzb25cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElucHV0XG5JbnB1dC5kZWZhdWx0ID0gSW5wdXRcblxuaWYgKHRlcm1pbmFsSGlnaGxpZ2h0ICYmIHRlcm1pbmFsSGlnaGxpZ2h0LnJlZ2lzdGVySW5wdXQpIHtcbiAgdGVybWluYWxIaWdobGlnaHQucmVnaXN0ZXJJbnB1dChJbnB1dClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgeyBpc0NsZWFuLCBteSB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcbmxldCBNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL21hcC1nZW5lcmF0b3InKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgRG9jdW1lbnQgPSByZXF1aXJlKCcuL2RvY3VtZW50JylcbmxldCB3YXJuT25jZSA9IHJlcXVpcmUoJy4vd2Fybi1vbmNlJylcbmxldCBSZXN1bHQgPSByZXF1aXJlKCcuL3Jlc3VsdCcpXG5sZXQgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmxldCBSb290ID0gcmVxdWlyZSgnLi9yb290JylcblxuY29uc3QgVFlQRV9UT19DTEFTU19OQU1FID0ge1xuICBkb2N1bWVudDogJ0RvY3VtZW50JyxcbiAgcm9vdDogJ1Jvb3QnLFxuICBhdHJ1bGU6ICdBdFJ1bGUnLFxuICBydWxlOiAnUnVsZScsXG4gIGRlY2w6ICdEZWNsYXJhdGlvbicsXG4gIGNvbW1lbnQ6ICdDb21tZW50J1xufVxuXG5jb25zdCBQTFVHSU5fUFJPUFMgPSB7XG4gIHBvc3Rjc3NQbHVnaW46IHRydWUsXG4gIHByZXBhcmU6IHRydWUsXG4gIE9uY2U6IHRydWUsXG4gIERvY3VtZW50OiB0cnVlLFxuICBSb290OiB0cnVlLFxuICBEZWNsYXJhdGlvbjogdHJ1ZSxcbiAgUnVsZTogdHJ1ZSxcbiAgQXRSdWxlOiB0cnVlLFxuICBDb21tZW50OiB0cnVlLFxuICBEZWNsYXJhdGlvbkV4aXQ6IHRydWUsXG4gIFJ1bGVFeGl0OiB0cnVlLFxuICBBdFJ1bGVFeGl0OiB0cnVlLFxuICBDb21tZW50RXhpdDogdHJ1ZSxcbiAgUm9vdEV4aXQ6IHRydWUsXG4gIERvY3VtZW50RXhpdDogdHJ1ZSxcbiAgT25jZUV4aXQ6IHRydWVcbn1cblxuY29uc3QgTk9UX1ZJU0lUT1JTID0ge1xuICBwb3N0Y3NzUGx1Z2luOiB0cnVlLFxuICBwcmVwYXJlOiB0cnVlLFxuICBPbmNlOiB0cnVlXG59XG5cbmNvbnN0IENISUxEUkVOID0gMFxuXG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRzKG5vZGUpIHtcbiAgbGV0IGtleSA9IGZhbHNlXG4gIGxldCB0eXBlID0gVFlQRV9UT19DTEFTU19OQU1FW25vZGUudHlwZV1cbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAga2V5ID0gbm9kZS5wcm9wLnRvTG93ZXJDYXNlKClcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdhdHJ1bGUnKSB7XG4gICAga2V5ID0gbm9kZS5uYW1lLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGlmIChrZXkgJiYgbm9kZS5hcHBlbmQpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdHlwZSxcbiAgICAgIHR5cGUgKyAnLScgKyBrZXksXG4gICAgICBDSElMRFJFTixcbiAgICAgIHR5cGUgKyAnRXhpdCcsXG4gICAgICB0eXBlICsgJ0V4aXQtJyArIGtleVxuICAgIF1cbiAgfSBlbHNlIGlmIChrZXkpIHtcbiAgICByZXR1cm4gW3R5cGUsIHR5cGUgKyAnLScgKyBrZXksIHR5cGUgKyAnRXhpdCcsIHR5cGUgKyAnRXhpdC0nICsga2V5XVxuICB9IGVsc2UgaWYgKG5vZGUuYXBwZW5kKSB7XG4gICAgcmV0dXJuIFt0eXBlLCBDSElMRFJFTiwgdHlwZSArICdFeGl0J11cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW3R5cGUsIHR5cGUgKyAnRXhpdCddXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9TdGFjayhub2RlKSB7XG4gIGxldCBldmVudHNcbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2RvY3VtZW50Jykge1xuICAgIGV2ZW50cyA9IFsnRG9jdW1lbnQnLCBDSElMRFJFTiwgJ0RvY3VtZW50RXhpdCddXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAncm9vdCcpIHtcbiAgICBldmVudHMgPSBbJ1Jvb3QnLCBDSElMRFJFTiwgJ1Jvb3RFeGl0J11cbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBnZXRFdmVudHMobm9kZSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbm9kZSxcbiAgICBldmVudHMsXG4gICAgZXZlbnRJbmRleDogMCxcbiAgICB2aXNpdG9yczogW10sXG4gICAgdmlzaXRvckluZGV4OiAwLFxuICAgIGl0ZXJhdG9yOiAwXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5NYXJrcyhub2RlKSB7XG4gIG5vZGVbaXNDbGVhbl0gPSBmYWxzZVxuICBpZiAobm9kZS5ub2Rlcykgbm9kZS5ub2Rlcy5mb3JFYWNoKGkgPT4gY2xlYW5NYXJrcyhpKSlcbiAgcmV0dXJuIG5vZGVcbn1cblxubGV0IHBvc3Rjc3MgPSB7fVxuXG5jbGFzcyBMYXp5UmVzdWx0IHtcbiAgY29uc3RydWN0b3IocHJvY2Vzc29yLCBjc3MsIG9wdHMpIHtcbiAgICB0aGlzLnN0cmluZ2lmaWVkID0gZmFsc2VcbiAgICB0aGlzLnByb2Nlc3NlZCA9IGZhbHNlXG5cbiAgICBsZXQgcm9vdFxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjc3MgPT09ICdvYmplY3QnICYmXG4gICAgICBjc3MgIT09IG51bGwgJiZcbiAgICAgIChjc3MudHlwZSA9PT0gJ3Jvb3QnIHx8IGNzcy50eXBlID09PSAnZG9jdW1lbnQnKVxuICAgICkge1xuICAgICAgcm9vdCA9IGNsZWFuTWFya3MoY3NzKVxuICAgIH0gZWxzZSBpZiAoY3NzIGluc3RhbmNlb2YgTGF6eVJlc3VsdCB8fCBjc3MgaW5zdGFuY2VvZiBSZXN1bHQpIHtcbiAgICAgIHJvb3QgPSBjbGVhbk1hcmtzKGNzcy5yb290KVxuICAgICAgaWYgKGNzcy5tYXApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzLm1hcCA9PT0gJ3VuZGVmaW5lZCcpIG9wdHMubWFwID0ge31cbiAgICAgICAgaWYgKCFvcHRzLm1hcC5pbmxpbmUpIG9wdHMubWFwLmlubGluZSA9IGZhbHNlXG4gICAgICAgIG9wdHMubWFwLnByZXYgPSBjc3MubWFwXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXJzZXIgPSBwYXJzZVxuICAgICAgaWYgKG9wdHMuc3ludGF4KSBwYXJzZXIgPSBvcHRzLnN5bnRheC5wYXJzZVxuICAgICAgaWYgKG9wdHMucGFyc2VyKSBwYXJzZXIgPSBvcHRzLnBhcnNlclxuICAgICAgaWYgKHBhcnNlci5wYXJzZSkgcGFyc2VyID0gcGFyc2VyLnBhcnNlXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJvb3QgPSBwYXJzZXIoY3NzLCBvcHRzKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzZWQgPSB0cnVlXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvclxuICAgICAgfVxuXG4gICAgICBpZiAocm9vdCAmJiAhcm9vdFtteV0pIHtcbiAgICAgICAgLyogYzggaWdub3JlIG5leHQgMiAqL1xuICAgICAgICBDb250YWluZXIucmVidWlsZChyb290KVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJlc3VsdChwcm9jZXNzb3IsIHJvb3QsIG9wdHMpXG4gICAgdGhpcy5oZWxwZXJzID0geyAuLi5wb3N0Y3NzLCByZXN1bHQ6IHRoaXMucmVzdWx0LCBwb3N0Y3NzIH1cbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLnByb2Nlc3Nvci5wbHVnaW5zLm1hcChwbHVnaW4gPT4ge1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdvYmplY3QnICYmIHBsdWdpbi5wcmVwYXJlKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnBsdWdpbiwgLi4ucGx1Z2luLnByZXBhcmUodGhpcy5yZXN1bHQpIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwbHVnaW5cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnTGF6eVJlc3VsdCdcbiAgfVxuXG4gIGdldCBwcm9jZXNzb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LnByb2Nlc3NvclxuICB9XG5cbiAgZ2V0IG9wdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm9wdHNcbiAgfVxuXG4gIGdldCBjc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCkuY3NzXG4gIH1cblxuICBnZXQgY29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKS5jb250ZW50XG4gIH1cblxuICBnZXQgbWFwKCkge1xuICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpLm1hcFxuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3luYygpLnJvb3RcbiAgfVxuXG4gIGdldCBtZXNzYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5zeW5jKCkubWVzc2FnZXNcbiAgfVxuXG4gIHdhcm5pbmdzKCkge1xuICAgIHJldHVybiB0aGlzLnN5bmMoKS53YXJuaW5ncygpXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jc3NcbiAgfVxuXG4gIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoJ2Zyb20nIGluIHRoaXMub3B0cykpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgJ1dpdGhvdXQgYGZyb21gIG9wdGlvbiBQb3N0Q1NTIGNvdWxkIGdlbmVyYXRlIHdyb25nIHNvdXJjZSBtYXAgJyArXG4gICAgICAgICAgICAnYW5kIHdpbGwgbm90IGZpbmQgQnJvd3NlcnNsaXN0IGNvbmZpZy4gU2V0IGl0IHRvIENTUyBmaWxlIHBhdGggJyArXG4gICAgICAgICAgICAnb3IgdG8gYHVuZGVmaW5lZGAgdG8gcHJldmVudCB0aGlzIHdhcm5pbmcuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFzeW5jKCkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgfVxuXG4gIGNhdGNoKG9uUmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gdGhpcy5hc3luYygpLmNhdGNoKG9uUmVqZWN0ZWQpXG4gIH1cblxuICBmaW5hbGx5KG9uRmluYWxseSkge1xuICAgIHJldHVybiB0aGlzLmFzeW5jKCkudGhlbihvbkZpbmFsbHksIG9uRmluYWxseSlcbiAgfVxuXG4gIGFzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5lcnJvcilcbiAgICBpZiAodGhpcy5wcm9jZXNzZWQpIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5yZXN1bHQpXG4gICAgaWYgKCF0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRoaXMucnVuQXN5bmMoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzaW5nXG4gIH1cblxuICBzeW5jKCkge1xuICAgIGlmICh0aGlzLmVycm9yKSB0aHJvdyB0aGlzLmVycm9yXG4gICAgaWYgKHRoaXMucHJvY2Vzc2VkKSByZXR1cm4gdGhpcy5yZXN1bHRcbiAgICB0aGlzLnByb2Nlc3NlZCA9IHRydWVcblxuICAgIGlmICh0aGlzLnByb2Nlc3NpbmcpIHtcbiAgICAgIHRocm93IHRoaXMuZ2V0QXN5bmNFcnJvcigpXG4gICAgfVxuXG4gICAgZm9yIChsZXQgcGx1Z2luIG9mIHRoaXMucGx1Z2lucykge1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLnJ1bk9uUm9vdChwbHVnaW4pXG4gICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIHRocm93IHRoaXMuZ2V0QXN5bmNFcnJvcigpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wcmVwYXJlVmlzaXRvcnMoKVxuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVyKSB7XG4gICAgICBsZXQgcm9vdCA9IHRoaXMucmVzdWx0LnJvb3RcbiAgICAgIHdoaWxlICghcm9vdFtpc0NsZWFuXSkge1xuICAgICAgICByb290W2lzQ2xlYW5dID0gdHJ1ZVxuICAgICAgICB0aGlzLndhbGtTeW5jKHJvb3QpXG4gICAgICB9XG4gICAgICBpZiAodGhpcy5saXN0ZW5lcnMuT25jZUV4aXQpIHtcbiAgICAgICAgaWYgKHJvb3QudHlwZSA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgIGZvciAobGV0IHN1YlJvb3Qgb2Ygcm9vdC5ub2Rlcykge1xuICAgICAgICAgICAgdGhpcy52aXNpdFN5bmModGhpcy5saXN0ZW5lcnMuT25jZUV4aXQsIHN1YlJvb3QpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudmlzaXRTeW5jKHRoaXMubGlzdGVuZXJzLk9uY2VFeGl0LCByb290KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0XG4gIH1cblxuICBzdHJpbmdpZnkoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3JcbiAgICBpZiAodGhpcy5zdHJpbmdpZmllZCkgcmV0dXJuIHRoaXMucmVzdWx0XG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IHRydWVcblxuICAgIHRoaXMuc3luYygpXG5cbiAgICBsZXQgb3B0cyA9IHRoaXMucmVzdWx0Lm9wdHNcbiAgICBsZXQgc3RyID0gc3RyaW5naWZ5XG4gICAgaWYgKG9wdHMuc3ludGF4KSBzdHIgPSBvcHRzLnN5bnRheC5zdHJpbmdpZnlcbiAgICBpZiAob3B0cy5zdHJpbmdpZmllcikgc3RyID0gb3B0cy5zdHJpbmdpZmllclxuICAgIGlmIChzdHIuc3RyaW5naWZ5KSBzdHIgPSBzdHIuc3RyaW5naWZ5XG5cbiAgICBsZXQgbWFwID0gbmV3IE1hcEdlbmVyYXRvcihzdHIsIHRoaXMucmVzdWx0LnJvb3QsIHRoaXMucmVzdWx0Lm9wdHMpXG4gICAgbGV0IGRhdGEgPSBtYXAuZ2VuZXJhdGUoKVxuICAgIHRoaXMucmVzdWx0LmNzcyA9IGRhdGFbMF1cbiAgICB0aGlzLnJlc3VsdC5tYXAgPSBkYXRhWzFdXG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRcbiAgfVxuXG4gIHdhbGtTeW5jKG5vZGUpIHtcbiAgICBub2RlW2lzQ2xlYW5dID0gdHJ1ZVxuICAgIGxldCBldmVudHMgPSBnZXRFdmVudHMobm9kZSlcbiAgICBmb3IgKGxldCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgIGlmIChldmVudCA9PT0gQ0hJTERSRU4pIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZXMpIHtcbiAgICAgICAgICBub2RlLmVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgaWYgKCFjaGlsZFtpc0NsZWFuXSkgdGhpcy53YWxrU3luYyhjaGlsZClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdmlzaXRvcnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudF1cbiAgICAgICAgaWYgKHZpc2l0b3JzKSB7XG4gICAgICAgICAgaWYgKHRoaXMudmlzaXRTeW5jKHZpc2l0b3JzLCBub2RlLnRvUHJveHkoKSkpIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmlzaXRTeW5jKHZpc2l0b3JzLCBub2RlKSB7XG4gICAgZm9yIChsZXQgW3BsdWdpbiwgdmlzaXRvcl0gb2YgdmlzaXRvcnMpIHtcbiAgICAgIHRoaXMucmVzdWx0Lmxhc3RQbHVnaW4gPSBwbHVnaW5cbiAgICAgIGxldCBwcm9taXNlXG4gICAgICB0cnkge1xuICAgICAgICBwcm9taXNlID0gdmlzaXRvcihub2RlLCB0aGlzLmhlbHBlcnMpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3IoZSwgbm9kZS5wcm94eU9mKVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUudHlwZSAhPT0gJ3Jvb3QnICYmIG5vZGUudHlwZSAhPT0gJ2RvY3VtZW50JyAmJiAhbm9kZS5wYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5nZXRBc3luY0Vycm9yKClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBydW5PblJvb3QocGx1Z2luKSB7XG4gICAgdGhpcy5yZXN1bHQubGFzdFBsdWdpbiA9IHBsdWdpblxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ29iamVjdCcgJiYgcGx1Z2luLk9uY2UpIHtcbiAgICAgICAgaWYgKHRoaXMucmVzdWx0LnJvb3QudHlwZSA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgIGxldCByb290cyA9IHRoaXMucmVzdWx0LnJvb3Qubm9kZXMubWFwKHJvb3QgPT5cbiAgICAgICAgICAgIHBsdWdpbi5PbmNlKHJvb3QsIHRoaXMuaGVscGVycylcbiAgICAgICAgICApXG5cbiAgICAgICAgICBpZiAoaXNQcm9taXNlKHJvb3RzWzBdKSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJvb3RzKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByb290c1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsdWdpbi5PbmNlKHRoaXMucmVzdWx0LnJvb3QsIHRoaXMuaGVscGVycylcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gcGx1Z2luKHRoaXMucmVzdWx0LnJvb3QsIHRoaXMucmVzdWx0KVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGdldEFzeW5jRXJyb3IoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVc2UgcHJvY2Vzcyhjc3MpLnRoZW4oY2IpIHRvIHdvcmsgd2l0aCBhc3luYyBwbHVnaW5zJylcbiAgfVxuXG4gIGhhbmRsZUVycm9yKGVycm9yLCBub2RlKSB7XG4gICAgbGV0IHBsdWdpbiA9IHRoaXMucmVzdWx0Lmxhc3RQbHVnaW5cbiAgICB0cnkge1xuICAgICAgaWYgKG5vZGUpIG5vZGUuYWRkVG9FcnJvcihlcnJvcilcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvclxuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdDc3NTeW50YXhFcnJvcicgJiYgIWVycm9yLnBsdWdpbikge1xuICAgICAgICBlcnJvci5wbHVnaW4gPSBwbHVnaW4ucG9zdGNzc1BsdWdpblxuICAgICAgICBlcnJvci5zZXRNZXNzYWdlKClcbiAgICAgIH0gZWxzZSBpZiAocGx1Z2luLnBvc3Rjc3NWZXJzaW9uKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgbGV0IHBsdWdpbk5hbWUgPSBwbHVnaW4ucG9zdGNzc1BsdWdpblxuICAgICAgICAgIGxldCBwbHVnaW5WZXIgPSBwbHVnaW4ucG9zdGNzc1ZlcnNpb25cbiAgICAgICAgICBsZXQgcnVudGltZVZlciA9IHRoaXMucmVzdWx0LnByb2Nlc3Nvci52ZXJzaW9uXG4gICAgICAgICAgbGV0IGEgPSBwbHVnaW5WZXIuc3BsaXQoJy4nKVxuICAgICAgICAgIGxldCBiID0gcnVudGltZVZlci5zcGxpdCgnLicpXG5cbiAgICAgICAgICBpZiAoYVswXSAhPT0gYlswXSB8fCBwYXJzZUludChhWzFdKSA+IHBhcnNlSW50KGJbMV0pKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgJ1Vua25vd24gZXJyb3IgZnJvbSBQb3N0Q1NTIHBsdWdpbi4gWW91ciBjdXJyZW50IFBvc3RDU1MgJyArXG4gICAgICAgICAgICAgICAgJ3ZlcnNpb24gaXMgJyArXG4gICAgICAgICAgICAgICAgcnVudGltZVZlciArXG4gICAgICAgICAgICAgICAgJywgYnV0ICcgK1xuICAgICAgICAgICAgICAgIHBsdWdpbk5hbWUgK1xuICAgICAgICAgICAgICAgICcgdXNlcyAnICtcbiAgICAgICAgICAgICAgICBwbHVnaW5WZXIgK1xuICAgICAgICAgICAgICAgICcuIFBlcmhhcHMgdGhpcyBpcyB0aGUgc291cmNlIG9mIHRoZSBlcnJvciBiZWxvdy4nXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAzICovXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcikgY29uc29sZS5lcnJvcihlcnIpXG4gICAgfVxuICAgIHJldHVybiBlcnJvclxuICB9XG5cbiAgYXN5bmMgcnVuQXN5bmMoKSB7XG4gICAgdGhpcy5wbHVnaW4gPSAwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwbHVnaW4gPSB0aGlzLnBsdWdpbnNbaV1cbiAgICAgIGxldCBwcm9taXNlID0gdGhpcy5ydW5PblJvb3QocGx1Z2luKVxuICAgICAgaWYgKGlzUHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHByb21pc2VcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKGVycm9yKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wcmVwYXJlVmlzaXRvcnMoKVxuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVyKSB7XG4gICAgICBsZXQgcm9vdCA9IHRoaXMucmVzdWx0LnJvb3RcbiAgICAgIHdoaWxlICghcm9vdFtpc0NsZWFuXSkge1xuICAgICAgICByb290W2lzQ2xlYW5dID0gdHJ1ZVxuICAgICAgICBsZXQgc3RhY2sgPSBbdG9TdGFjayhyb290KV1cbiAgICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBsZXQgcHJvbWlzZSA9IHRoaXMudmlzaXRUaWNrKHN0YWNrKVxuICAgICAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IHByb21pc2VcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgbGV0IG5vZGUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5ub2RlXG4gICAgICAgICAgICAgIHRocm93IHRoaXMuaGFuZGxlRXJyb3IoZSwgbm9kZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubGlzdGVuZXJzLk9uY2VFeGl0KSB7XG4gICAgICAgIGZvciAobGV0IFtwbHVnaW4sIHZpc2l0b3JdIG9mIHRoaXMubGlzdGVuZXJzLk9uY2VFeGl0KSB7XG4gICAgICAgICAgdGhpcy5yZXN1bHQubGFzdFBsdWdpbiA9IHBsdWdpblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAocm9vdC50eXBlID09PSAnZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICAgIGxldCByb290cyA9IHJvb3Qubm9kZXMubWFwKHN1YlJvb3QgPT5cbiAgICAgICAgICAgICAgICB2aXNpdG9yKHN1YlJvb3QsIHRoaXMuaGVscGVycylcbiAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHJvb3RzKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYXdhaXQgdmlzaXRvcihyb290LCB0aGlzLmhlbHBlcnMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5oYW5kbGVFcnJvcihlKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucHJvY2Vzc2VkID0gdHJ1ZVxuICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpXG4gIH1cblxuICBwcmVwYXJlVmlzaXRvcnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSB7fVxuICAgIGxldCBhZGQgPSAocGx1Z2luLCB0eXBlLCBjYikgPT4ge1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXSkgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSBbXVxuICAgICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0ucHVzaChbcGx1Z2luLCBjYl0pXG4gICAgfVxuICAgIGZvciAobGV0IHBsdWdpbiBvZiB0aGlzLnBsdWdpbnMpIHtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGxldCBldmVudCBpbiBwbHVnaW4pIHtcbiAgICAgICAgICBpZiAoIVBMVUdJTl9QUk9QU1tldmVudF0gJiYgL15bQS1aXS8udGVzdChldmVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYFVua25vd24gZXZlbnQgJHtldmVudH0gaW4gJHtwbHVnaW4ucG9zdGNzc1BsdWdpbn0uIGAgK1xuICAgICAgICAgICAgICAgIGBUcnkgdG8gdXBkYXRlIFBvc3RDU1MgKCR7dGhpcy5wcm9jZXNzb3IudmVyc2lvbn0gbm93KS5gXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghTk9UX1ZJU0lUT1JTW2V2ZW50XSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW5bZXZlbnRdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICBmb3IgKGxldCBmaWx0ZXIgaW4gcGx1Z2luW2V2ZW50XSkge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIgPT09ICcqJykge1xuICAgICAgICAgICAgICAgICAgYWRkKHBsdWdpbiwgZXZlbnQsIHBsdWdpbltldmVudF1bZmlsdGVyXSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYWRkKFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50ICsgJy0nICsgZmlsdGVyLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbltldmVudF1bZmlsdGVyXVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luW2V2ZW50XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBhZGQocGx1Z2luLCBldmVudCwgcGx1Z2luW2V2ZW50XSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5oYXNMaXN0ZW5lciA9IE9iamVjdC5rZXlzKHRoaXMubGlzdGVuZXJzKS5sZW5ndGggPiAwXG4gIH1cblxuICB2aXNpdFRpY2soc3RhY2spIHtcbiAgICBsZXQgdmlzaXQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXVxuICAgIGxldCB7IG5vZGUsIHZpc2l0b3JzIH0gPSB2aXNpdFxuXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ3Jvb3QnICYmIG5vZGUudHlwZSAhPT0gJ2RvY3VtZW50JyAmJiAhbm9kZS5wYXJlbnQpIHtcbiAgICAgIHN0YWNrLnBvcCgpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodmlzaXRvcnMubGVuZ3RoID4gMCAmJiB2aXNpdC52aXNpdG9ySW5kZXggPCB2aXNpdG9ycy5sZW5ndGgpIHtcbiAgICAgIGxldCBbcGx1Z2luLCB2aXNpdG9yXSA9IHZpc2l0b3JzW3Zpc2l0LnZpc2l0b3JJbmRleF1cbiAgICAgIHZpc2l0LnZpc2l0b3JJbmRleCArPSAxXG4gICAgICBpZiAodmlzaXQudmlzaXRvckluZGV4ID09PSB2aXNpdG9ycy5sZW5ndGgpIHtcbiAgICAgICAgdmlzaXQudmlzaXRvcnMgPSBbXVxuICAgICAgICB2aXNpdC52aXNpdG9ySW5kZXggPSAwXG4gICAgICB9XG4gICAgICB0aGlzLnJlc3VsdC5sYXN0UGx1Z2luID0gcGx1Z2luXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdmlzaXRvcihub2RlLnRvUHJveHkoKSwgdGhpcy5oZWxwZXJzKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyB0aGlzLmhhbmRsZUVycm9yKGUsIG5vZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZpc2l0Lml0ZXJhdG9yICE9PSAwKSB7XG4gICAgICBsZXQgaXRlcmF0b3IgPSB2aXNpdC5pdGVyYXRvclxuICAgICAgbGV0IGNoaWxkXG4gICAgICB3aGlsZSAoKGNoaWxkID0gbm9kZS5ub2Rlc1tub2RlLmluZGV4ZXNbaXRlcmF0b3JdXSkpIHtcbiAgICAgICAgbm9kZS5pbmRleGVzW2l0ZXJhdG9yXSArPSAxXG4gICAgICAgIGlmICghY2hpbGRbaXNDbGVhbl0pIHtcbiAgICAgICAgICBjaGlsZFtpc0NsZWFuXSA9IHRydWVcbiAgICAgICAgICBzdGFjay5wdXNoKHRvU3RhY2soY2hpbGQpKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2aXNpdC5pdGVyYXRvciA9IDBcbiAgICAgIGRlbGV0ZSBub2RlLmluZGV4ZXNbaXRlcmF0b3JdXG4gICAgfVxuXG4gICAgbGV0IGV2ZW50cyA9IHZpc2l0LmV2ZW50c1xuICAgIHdoaWxlICh2aXNpdC5ldmVudEluZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgbGV0IGV2ZW50ID0gZXZlbnRzW3Zpc2l0LmV2ZW50SW5kZXhdXG4gICAgICB2aXNpdC5ldmVudEluZGV4ICs9IDFcbiAgICAgIGlmIChldmVudCA9PT0gQ0hJTERSRU4pIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZXMgJiYgbm9kZS5ub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICBub2RlW2lzQ2xlYW5dID0gdHJ1ZVxuICAgICAgICAgIHZpc2l0Lml0ZXJhdG9yID0gbm9kZS5nZXRJdGVyYXRvcigpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICB2aXNpdC52aXNpdG9ycyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50XVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gICAgc3RhY2sucG9wKClcbiAgfVxufVxuXG5MYXp5UmVzdWx0LnJlZ2lzdGVyUG9zdGNzcyA9IGRlcGVuZGFudCA9PiB7XG4gIHBvc3Rjc3MgPSBkZXBlbmRhbnRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMYXp5UmVzdWx0XG5MYXp5UmVzdWx0LmRlZmF1bHQgPSBMYXp5UmVzdWx0XG5cblJvb3QucmVnaXN0ZXJMYXp5UmVzdWx0KExhenlSZXN1bHQpXG5Eb2N1bWVudC5yZWdpc3RlckxhenlSZXN1bHQoTGF6eVJlc3VsdClcbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgbGlzdCA9IHtcbiAgc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3JzLCBsYXN0KSB7XG4gICAgbGV0IGFycmF5ID0gW11cbiAgICBsZXQgY3VycmVudCA9ICcnXG4gICAgbGV0IHNwbGl0ID0gZmFsc2VcblxuICAgIGxldCBmdW5jID0gMFxuICAgIGxldCBpblF1b3RlID0gZmFsc2VcbiAgICBsZXQgcHJldlF1b3RlID0gJydcbiAgICBsZXQgZXNjYXBlID0gZmFsc2VcblxuICAgIGZvciAobGV0IGxldHRlciBvZiBzdHJpbmcpIHtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgZXNjYXBlID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnXFxcXCcpIHtcbiAgICAgICAgZXNjYXBlID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChpblF1b3RlKSB7XG4gICAgICAgIGlmIChsZXR0ZXIgPT09IHByZXZRdW90ZSkge1xuICAgICAgICAgIGluUXVvdGUgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJ1wiJyB8fCBsZXR0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICAgIGluUXVvdGUgPSB0cnVlXG4gICAgICAgIHByZXZRdW90ZSA9IGxldHRlclxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICcoJykge1xuICAgICAgICBmdW5jICs9IDFcbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnKScpIHtcbiAgICAgICAgaWYgKGZ1bmMgPiAwKSBmdW5jIC09IDFcbiAgICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gMCkge1xuICAgICAgICBpZiAoc2VwYXJhdG9ycy5pbmNsdWRlcyhsZXR0ZXIpKSBzcGxpdCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgIGlmIChjdXJyZW50ICE9PSAnJykgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSlcbiAgICAgICAgY3VycmVudCA9ICcnXG4gICAgICAgIHNwbGl0ID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgKz0gbGV0dGVyXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxhc3QgfHwgY3VycmVudCAhPT0gJycpIGFycmF5LnB1c2goY3VycmVudC50cmltKCkpXG4gICAgcmV0dXJuIGFycmF5XG4gIH0sXG5cbiAgc3BhY2Uoc3RyaW5nKSB7XG4gICAgbGV0IHNwYWNlcyA9IFsnICcsICdcXG4nLCAnXFx0J11cbiAgICByZXR1cm4gbGlzdC5zcGxpdChzdHJpbmcsIHNwYWNlcylcbiAgfSxcblxuICBjb21tYShzdHJpbmcpIHtcbiAgICByZXR1cm4gbGlzdC5zcGxpdChzdHJpbmcsIFsnLCddLCB0cnVlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdFxubGlzdC5kZWZhdWx0ID0gbGlzdFxuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCB7IFNvdXJjZU1hcENvbnN1bWVyLCBTb3VyY2VNYXBHZW5lcmF0b3IgfSA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAtanMnKVxubGV0IHsgZGlybmFtZSwgcmVzb2x2ZSwgcmVsYXRpdmUsIHNlcCB9ID0gcmVxdWlyZSgncGF0aCcpXG5sZXQgeyBwYXRoVG9GaWxlVVJMIH0gPSByZXF1aXJlKCd1cmwnKVxuXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcblxubGV0IHNvdXJjZU1hcEF2YWlsYWJsZSA9IEJvb2xlYW4oU291cmNlTWFwQ29uc3VtZXIgJiYgU291cmNlTWFwR2VuZXJhdG9yKVxubGV0IHBhdGhBdmFpbGFibGUgPSBCb29sZWFuKGRpcm5hbWUgJiYgcmVzb2x2ZSAmJiByZWxhdGl2ZSAmJiBzZXApXG5cbmNsYXNzIE1hcEdlbmVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKHN0cmluZ2lmeSwgcm9vdCwgb3B0cywgY3NzU3RyaW5nKSB7XG4gICAgdGhpcy5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbiAgICB0aGlzLm1hcE9wdHMgPSBvcHRzLm1hcCB8fCB7fVxuICAgIHRoaXMucm9vdCA9IHJvb3RcbiAgICB0aGlzLm9wdHMgPSBvcHRzXG4gICAgdGhpcy5jc3MgPSBjc3NTdHJpbmdcbiAgICB0aGlzLnVzZXNGaWxlVXJscyA9ICF0aGlzLm1hcE9wdHMuZnJvbSAmJiB0aGlzLm1hcE9wdHMuYWJzb2x1dGVcbiAgfVxuXG4gIGlzTWFwKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLm1hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiAhIXRoaXMub3B0cy5tYXBcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5sZW5ndGggPiAwXG4gIH1cblxuICBwcmV2aW91cygpIHtcbiAgICBpZiAoIXRoaXMucHJldmlvdXNNYXBzKSB7XG4gICAgICB0aGlzLnByZXZpb3VzTWFwcyA9IFtdXG4gICAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICAgIHRoaXMucm9vdC53YWxrKG5vZGUgPT4ge1xuICAgICAgICAgIGlmIChub2RlLnNvdXJjZSAmJiBub2RlLnNvdXJjZS5pbnB1dC5tYXApIHtcbiAgICAgICAgICAgIGxldCBtYXAgPSBub2RlLnNvdXJjZS5pbnB1dC5tYXBcbiAgICAgICAgICAgIGlmICghdGhpcy5wcmV2aW91c01hcHMuaW5jbHVkZXMobWFwKSkge1xuICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzTWFwcy5wdXNoKG1hcClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgaW5wdXQgPSBuZXcgSW5wdXQodGhpcy5jc3MsIHRoaXMub3B0cylcbiAgICAgICAgaWYgKGlucHV0Lm1hcCkgdGhpcy5wcmV2aW91c01hcHMucHVzaChpbnB1dC5tYXApXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXNNYXBzXG4gIH1cblxuICBpc0lubGluZSgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMubWFwT3B0cy5pbmxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLmlubGluZVxuICAgIH1cblxuICAgIGxldCBhbm5vdGF0aW9uID0gdGhpcy5tYXBPcHRzLmFubm90YXRpb25cbiAgICBpZiAodHlwZW9mIGFubm90YXRpb24gIT09ICd1bmRlZmluZWQnICYmIGFubm90YXRpb24gIT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0aGlzLnByZXZpb3VzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoaSA9PiBpLmlubGluZSlcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlzU291cmNlc0NvbnRlbnQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm1hcE9wdHMuc291cmNlc0NvbnRlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLnNvdXJjZXNDb250ZW50XG4gICAgfVxuICAgIGlmICh0aGlzLnByZXZpb3VzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoaSA9PiBpLndpdGhDb250ZW50KCkpXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBjbGVhckFubm90YXRpb24oKSB7XG4gICAgaWYgKHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uID09PSBmYWxzZSkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICBsZXQgbm9kZVxuICAgICAgZm9yIChsZXQgaSA9IHRoaXMucm9vdC5ub2Rlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBub2RlID0gdGhpcy5yb290Lm5vZGVzW2ldXG4gICAgICAgIGlmIChub2RlLnR5cGUgIT09ICdjb21tZW50JykgY29udGludWVcbiAgICAgICAgaWYgKG5vZGUudGV4dC5pbmRleE9mKCcjIHNvdXJjZU1hcHBpbmdVUkw9JykgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnJvb3QucmVtb3ZlQ2hpbGQoaSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5jc3MpIHtcbiAgICAgIHRoaXMuY3NzID0gdGhpcy5jc3MucmVwbGFjZSgvKFxcbik/XFwvXFwqI1tcXFNcXHNdKj9cXCpcXC8kL2dtLCAnJylcbiAgICB9XG4gIH1cblxuICBzZXRTb3VyY2VzQ29udGVudCgpIHtcbiAgICBsZXQgYWxyZWFkeSA9IHt9XG4gICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgdGhpcy5yb290LndhbGsobm9kZSA9PiB7XG4gICAgICAgIGlmIChub2RlLnNvdXJjZSkge1xuICAgICAgICAgIGxldCBmcm9tID0gbm9kZS5zb3VyY2UuaW5wdXQuZnJvbVxuICAgICAgICAgIGlmIChmcm9tICYmICFhbHJlYWR5W2Zyb21dKSB7XG4gICAgICAgICAgICBhbHJlYWR5W2Zyb21dID0gdHJ1ZVxuICAgICAgICAgICAgbGV0IGZyb21VcmwgPSB0aGlzLnVzZXNGaWxlVXJsc1xuICAgICAgICAgICAgICA/IHRoaXMudG9GaWxlVXJsKGZyb20pXG4gICAgICAgICAgICAgIDogdGhpcy50b1VybCh0aGlzLnBhdGgoZnJvbSkpXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRTb3VyY2VDb250ZW50KGZyb21VcmwsIG5vZGUuc291cmNlLmlucHV0LmNzcylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmICh0aGlzLmNzcykge1xuICAgICAgbGV0IGZyb20gPSB0aGlzLm9wdHMuZnJvbVxuICAgICAgICA/IHRoaXMudG9VcmwodGhpcy5wYXRoKHRoaXMub3B0cy5mcm9tKSlcbiAgICAgICAgOiAnPG5vIHNvdXJjZT4nXG4gICAgICB0aGlzLm1hcC5zZXRTb3VyY2VDb250ZW50KGZyb20sIHRoaXMuY3NzKVxuICAgIH1cbiAgfVxuXG4gIGFwcGx5UHJldk1hcHMoKSB7XG4gICAgZm9yIChsZXQgcHJldiBvZiB0aGlzLnByZXZpb3VzKCkpIHtcbiAgICAgIGxldCBmcm9tID0gdGhpcy50b1VybCh0aGlzLnBhdGgocHJldi5maWxlKSlcbiAgICAgIGxldCByb290ID0gcHJldi5yb290IHx8IGRpcm5hbWUocHJldi5maWxlKVxuICAgICAgbGV0IG1hcFxuXG4gICAgICBpZiAodGhpcy5tYXBPcHRzLnNvdXJjZXNDb250ZW50ID09PSBmYWxzZSkge1xuICAgICAgICBtYXAgPSBuZXcgU291cmNlTWFwQ29uc3VtZXIocHJldi50ZXh0KVxuICAgICAgICBpZiAobWFwLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gbWFwLnNvdXJjZXNDb250ZW50Lm1hcCgoKSA9PiBudWxsKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXAgPSBwcmV2LmNvbnN1bWVyKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXAuYXBwbHlTb3VyY2VNYXAobWFwLCBmcm9tLCB0aGlzLnRvVXJsKHRoaXMucGF0aChyb290KSkpXG4gICAgfVxuICB9XG5cbiAgaXNBbm5vdGF0aW9uKCkge1xuICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXBPcHRzLmFubm90YXRpb25cbiAgICB9XG4gICAgaWYgKHRoaXMucHJldmlvdXMoKS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aGlzLnByZXZpb3VzKCkuc29tZShpID0+IGkuYW5ub3RhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHRvQmFzZTY0KHN0cikge1xuICAgIGlmIChCdWZmZXIpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKVxuICAgIH1cbiAgfVxuXG4gIGFkZEFubm90YXRpb24oKSB7XG4gICAgbGV0IGNvbnRlbnRcblxuICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIGNvbnRlbnQgPVxuICAgICAgICAnZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwnICsgdGhpcy50b0Jhc2U2NCh0aGlzLm1hcC50b1N0cmluZygpKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgY29udGVudCA9IHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbih0aGlzLm9wdHMudG8sIHRoaXMucm9vdClcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHRoaXMub3V0cHV0RmlsZSgpICsgJy5tYXAnXG4gICAgfVxuICAgIGxldCBlb2wgPSAnXFxuJ1xuICAgIGlmICh0aGlzLmNzcy5pbmNsdWRlcygnXFxyXFxuJykpIGVvbCA9ICdcXHJcXG4nXG5cbiAgICB0aGlzLmNzcyArPSBlb2wgKyAnLyojIHNvdXJjZU1hcHBpbmdVUkw9JyArIGNvbnRlbnQgKyAnICovJ1xuICB9XG5cbiAgb3V0cHV0RmlsZSgpIHtcbiAgICBpZiAodGhpcy5vcHRzLnRvKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXRoKHRoaXMub3B0cy50bylcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0cy5mcm9tKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXRoKHRoaXMub3B0cy5mcm9tKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3RvLmNzcydcbiAgICB9XG4gIH1cblxuICBnZW5lcmF0ZU1hcCgpIHtcbiAgICBpZiAodGhpcy5yb290KSB7XG4gICAgICB0aGlzLmdlbmVyYXRlU3RyaW5nKClcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJldmlvdXMoKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxldCBwcmV2ID0gdGhpcy5wcmV2aW91cygpWzBdLmNvbnN1bWVyKClcbiAgICAgIHByZXYuZmlsZSA9IHRoaXMub3V0cHV0RmlsZSgpXG4gICAgICB0aGlzLm1hcCA9IFNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwKHByZXYpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFwID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7IGZpbGU6IHRoaXMub3V0cHV0RmlsZSgpIH0pXG4gICAgICB0aGlzLm1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgc291cmNlOiB0aGlzLm9wdHMuZnJvbVxuICAgICAgICAgID8gdGhpcy50b1VybCh0aGlzLnBhdGgodGhpcy5vcHRzLmZyb20pKVxuICAgICAgICAgIDogJzxubyBzb3VyY2U+JyxcbiAgICAgICAgZ2VuZXJhdGVkOiB7IGxpbmU6IDEsIGNvbHVtbjogMCB9LFxuICAgICAgICBvcmlnaW5hbDogeyBsaW5lOiAxLCBjb2x1bW46IDAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NvdXJjZXNDb250ZW50KCkpIHRoaXMuc2V0U291cmNlc0NvbnRlbnQoKVxuICAgIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5wcmV2aW91cygpLmxlbmd0aCA+IDApIHRoaXMuYXBwbHlQcmV2TWFwcygpXG4gICAgaWYgKHRoaXMuaXNBbm5vdGF0aW9uKCkpIHRoaXMuYWRkQW5ub3RhdGlvbigpXG5cbiAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XG4gICAgICByZXR1cm4gW3RoaXMuY3NzXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW3RoaXMuY3NzLCB0aGlzLm1hcF1cbiAgICB9XG4gIH1cblxuICBwYXRoKGZpbGUpIHtcbiAgICBpZiAoZmlsZS5pbmRleE9mKCc8JykgPT09IDApIHJldHVybiBmaWxlXG4gICAgaWYgKC9eXFx3KzpcXC9cXC8vLnRlc3QoZmlsZSkpIHJldHVybiBmaWxlXG4gICAgaWYgKHRoaXMubWFwT3B0cy5hYnNvbHV0ZSkgcmV0dXJuIGZpbGVcblxuICAgIGxldCBmcm9tID0gdGhpcy5vcHRzLnRvID8gZGlybmFtZSh0aGlzLm9wdHMudG8pIDogJy4nXG5cbiAgICBpZiAodHlwZW9mIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgZnJvbSA9IGRpcm5hbWUocmVzb2x2ZShmcm9tLCB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbikpXG4gICAgfVxuXG4gICAgZmlsZSA9IHJlbGF0aXZlKGZyb20sIGZpbGUpXG4gICAgcmV0dXJuIGZpbGVcbiAgfVxuXG4gIHRvVXJsKHBhdGgpIHtcbiAgICBpZiAoc2VwID09PSAnXFxcXCcpIHtcbiAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcXFwvZywgJy8nKVxuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlVVJJKHBhdGgpLnJlcGxhY2UoL1sjP10vZywgZW5jb2RlVVJJQ29tcG9uZW50KVxuICB9XG5cbiAgdG9GaWxlVXJsKHBhdGgpIHtcbiAgICBpZiAocGF0aFRvRmlsZVVSTCkge1xuICAgICAgcmV0dXJuIHBhdGhUb0ZpbGVVUkwocGF0aCkudG9TdHJpbmcoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgbWFwLmFic29sdXRlYCBvcHRpb24gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIFBvc3RDU1MgYnVpbGQnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgc291cmNlUGF0aChub2RlKSB7XG4gICAgaWYgKHRoaXMubWFwT3B0cy5mcm9tKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1VybCh0aGlzLm1hcE9wdHMuZnJvbSlcbiAgICB9IGVsc2UgaWYgKHRoaXMudXNlc0ZpbGVVcmxzKSB7XG4gICAgICByZXR1cm4gdGhpcy50b0ZpbGVVcmwobm9kZS5zb3VyY2UuaW5wdXQuZnJvbSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudG9VcmwodGhpcy5wYXRoKG5vZGUuc291cmNlLmlucHV0LmZyb20pKVxuICAgIH1cbiAgfVxuXG4gIGdlbmVyYXRlU3RyaW5nKCkge1xuICAgIHRoaXMuY3NzID0gJydcbiAgICB0aGlzLm1hcCA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoeyBmaWxlOiB0aGlzLm91dHB1dEZpbGUoKSB9KVxuXG4gICAgbGV0IGxpbmUgPSAxXG4gICAgbGV0IGNvbHVtbiA9IDFcblxuICAgIGxldCBub1NvdXJjZSA9ICc8bm8gc291cmNlPidcbiAgICBsZXQgbWFwcGluZyA9IHtcbiAgICAgIHNvdXJjZTogJycsXG4gICAgICBnZW5lcmF0ZWQ6IHsgbGluZTogMCwgY29sdW1uOiAwIH0sXG4gICAgICBvcmlnaW5hbDogeyBsaW5lOiAwLCBjb2x1bW46IDAgfVxuICAgIH1cblxuICAgIGxldCBsaW5lcywgbGFzdFxuICAgIHRoaXMuc3RyaW5naWZ5KHRoaXMucm9vdCwgKHN0ciwgbm9kZSwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5jc3MgKz0gc3RyXG5cbiAgICAgIGlmIChub2RlICYmIHR5cGUgIT09ICdlbmQnKSB7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkLmxpbmUgPSBsaW5lXG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkLmNvbHVtbiA9IGNvbHVtbiAtIDFcbiAgICAgICAgaWYgKG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLnN0YXJ0KSB7XG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB0aGlzLnNvdXJjZVBhdGgobm9kZSlcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsLmxpbmUgPSBub2RlLnNvdXJjZS5zdGFydC5saW5lXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbC5jb2x1bW4gPSBub2RlLnNvdXJjZS5zdGFydC5jb2x1bW4gLSAxXG4gICAgICAgICAgdGhpcy5tYXAuYWRkTWFwcGluZyhtYXBwaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gbm9Tb3VyY2VcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsLmxpbmUgPSAxXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbC5jb2x1bW4gPSAwXG4gICAgICAgICAgdGhpcy5tYXAuYWRkTWFwcGluZyhtYXBwaW5nKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpbmVzID0gc3RyLm1hdGNoKC9cXG4vZylcbiAgICAgIGlmIChsaW5lcykge1xuICAgICAgICBsaW5lICs9IGxpbmVzLmxlbmd0aFxuICAgICAgICBsYXN0ID0gc3RyLmxhc3RJbmRleE9mKCdcXG4nKVxuICAgICAgICBjb2x1bW4gPSBzdHIubGVuZ3RoIC0gbGFzdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uICs9IHN0ci5sZW5ndGhcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgJiYgdHlwZSAhPT0gJ3N0YXJ0Jykge1xuICAgICAgICBsZXQgcCA9IG5vZGUucGFyZW50IHx8IHsgcmF3czoge30gfVxuICAgICAgICBpZiAobm9kZS50eXBlICE9PSAnZGVjbCcgfHwgbm9kZSAhPT0gcC5sYXN0IHx8IHAucmF3cy5zZW1pY29sb24pIHtcbiAgICAgICAgICBpZiAobm9kZS5zb3VyY2UgJiYgbm9kZS5zb3VyY2UuZW5kKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHRoaXMuc291cmNlUGF0aChub2RlKVxuICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbC5saW5lID0gbm9kZS5zb3VyY2UuZW5kLmxpbmVcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWwuY29sdW1uID0gbm9kZS5zb3VyY2UuZW5kLmNvbHVtbiAtIDFcbiAgICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkLmxpbmUgPSBsaW5lXG4gICAgICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZC5jb2x1bW4gPSBjb2x1bW4gLSAyXG4gICAgICAgICAgICB0aGlzLm1hcC5hZGRNYXBwaW5nKG1hcHBpbmcpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gbm9Tb3VyY2VcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWwubGluZSA9IDFcbiAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWwuY29sdW1uID0gMFxuICAgICAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWQubGluZSA9IGxpbmVcbiAgICAgICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkLmNvbHVtbiA9IGNvbHVtbiAtIDFcbiAgICAgICAgICAgIHRoaXMubWFwLmFkZE1hcHBpbmcobWFwcGluZylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZ2VuZXJhdGUoKSB7XG4gICAgdGhpcy5jbGVhckFubm90YXRpb24oKVxuICAgIGlmIChwYXRoQXZhaWxhYmxlICYmIHNvdXJjZU1hcEF2YWlsYWJsZSAmJiB0aGlzLmlzTWFwKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlTWFwKClcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlc3VsdCA9ICcnXG4gICAgICB0aGlzLnN0cmluZ2lmeSh0aGlzLnJvb3QsIGkgPT4ge1xuICAgICAgICByZXN1bHQgKz0gaVxuICAgICAgfSlcbiAgICAgIHJldHVybiBbcmVzdWx0XVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcEdlbmVyYXRvclxuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCBNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL21hcC1nZW5lcmF0b3InKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcbmxldCB3YXJuT25jZSA9IHJlcXVpcmUoJy4vd2Fybi1vbmNlJylcbmxldCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgUmVzdWx0ID0gcmVxdWlyZSgnLi9yZXN1bHQnKVxuXG5jbGFzcyBOb1dvcmtSZXN1bHQge1xuICBjb25zdHJ1Y3Rvcihwcm9jZXNzb3IsIGNzcywgb3B0cykge1xuICAgIGNzcyA9IGNzcy50b1N0cmluZygpXG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IGZhbHNlXG5cbiAgICB0aGlzLl9wcm9jZXNzb3IgPSBwcm9jZXNzb3JcbiAgICB0aGlzLl9jc3MgPSBjc3NcbiAgICB0aGlzLl9vcHRzID0gb3B0c1xuICAgIHRoaXMuX21hcCA9IHVuZGVmaW5lZFxuICAgIGxldCByb290XG5cbiAgICBsZXQgc3RyID0gc3RyaW5naWZ5XG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgUmVzdWx0KHRoaXMuX3Byb2Nlc3Nvciwgcm9vdCwgdGhpcy5fb3B0cylcbiAgICB0aGlzLnJlc3VsdC5jc3MgPSBjc3NcblxuICAgIGxldCBzZWxmID0gdGhpc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnJlc3VsdCwgJ3Jvb3QnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJvb3RcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgbGV0IG1hcCA9IG5ldyBNYXBHZW5lcmF0b3Ioc3RyLCByb290LCB0aGlzLl9vcHRzLCBjc3MpXG4gICAgaWYgKG1hcC5pc01hcCgpKSB7XG4gICAgICBsZXQgW2dlbmVyYXRlZENTUywgZ2VuZXJhdGVkTWFwXSA9IG1hcC5nZW5lcmF0ZSgpXG4gICAgICBpZiAoZ2VuZXJhdGVkQ1NTKSB7XG4gICAgICAgIHRoaXMucmVzdWx0LmNzcyA9IGdlbmVyYXRlZENTU1xuICAgICAgfVxuICAgICAgaWYgKGdlbmVyYXRlZE1hcCkge1xuICAgICAgICB0aGlzLnJlc3VsdC5tYXAgPSBnZW5lcmF0ZWRNYXBcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdOb1dvcmtSZXN1bHQnXG4gIH1cblxuICBnZXQgcHJvY2Vzc29yKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5wcm9jZXNzb3JcbiAgfVxuXG4gIGdldCBvcHRzKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5vcHRzXG4gIH1cblxuICBnZXQgY3NzKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5jc3NcbiAgfVxuXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5jc3NcbiAgfVxuXG4gIGdldCBtYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0Lm1hcFxuICB9XG5cbiAgZ2V0IHJvb3QoKSB7XG4gICAgaWYgKHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290XG4gICAgfVxuXG4gICAgbGV0IHJvb3RcbiAgICBsZXQgcGFyc2VyID0gcGFyc2VcblxuICAgIHRyeSB7XG4gICAgICByb290ID0gcGFyc2VyKHRoaXMuX2NzcywgdGhpcy5fb3B0cylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHRocm93IHRoaXMuZXJyb3JcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcm9vdCA9IHJvb3RcbiAgICAgIHJldHVybiByb290XG4gICAgfVxuICB9XG5cbiAgZ2V0IG1lc3NhZ2VzKCkge1xuICAgIHJldHVybiBbXVxuICB9XG5cbiAgd2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3NzXG4gIH1cblxuICB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKCdmcm9tJyBpbiB0aGlzLl9vcHRzKSkge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAnV2l0aG91dCBgZnJvbWAgb3B0aW9uIFBvc3RDU1MgY291bGQgZ2VuZXJhdGUgd3Jvbmcgc291cmNlIG1hcCAnICtcbiAgICAgICAgICAgICdhbmQgd2lsbCBub3QgZmluZCBCcm93c2Vyc2xpc3QgY29uZmlnLiBTZXQgaXQgdG8gQ1NTIGZpbGUgcGF0aCAnICtcbiAgICAgICAgICAgICdvciB0byBgdW5kZWZpbmVkYCB0byBwcmV2ZW50IHRoaXMgd2FybmluZy4nXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gIH1cblxuICBjYXRjaChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS5jYXRjaChvblJlamVjdGVkKVxuICB9XG5cbiAgZmluYWxseShvbkZpbmFsbHkpIHtcbiAgICByZXR1cm4gdGhpcy5hc3luYygpLnRoZW4ob25GaW5hbGx5LCBvbkZpbmFsbHkpXG4gIH1cblxuICBhc3luYygpIHtcbiAgICBpZiAodGhpcy5lcnJvcikgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMuZXJyb3IpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnJlc3VsdClcbiAgfVxuXG4gIHN5bmMoKSB7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3JcbiAgICByZXR1cm4gdGhpcy5yZXN1bHRcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vV29ya1Jlc3VsdFxuTm9Xb3JrUmVzdWx0LmRlZmF1bHQgPSBOb1dvcmtSZXN1bHRcbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgeyBpc0NsZWFuLCBteSB9ID0gcmVxdWlyZSgnLi9zeW1ib2xzJylcbmxldCBDc3NTeW50YXhFcnJvciA9IHJlcXVpcmUoJy4vY3NzLXN5bnRheC1lcnJvcicpXG5sZXQgU3RyaW5naWZpZXIgPSByZXF1aXJlKCcuL3N0cmluZ2lmaWVyJylcbmxldCBzdHJpbmdpZnkgPSByZXF1aXJlKCcuL3N0cmluZ2lmeScpXG5cbmZ1bmN0aW9uIGNsb25lTm9kZShvYmosIHBhcmVudCkge1xuICBsZXQgY2xvbmVkID0gbmV3IG9iai5jb25zdHJ1Y3RvcigpXG5cbiAgZm9yIChsZXQgaSBpbiBvYmopIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSB7XG4gICAgICAvKiBjOCBpZ25vcmUgbmV4dCAyICovXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoaSA9PT0gJ3Byb3h5Q2FjaGUnKSBjb250aW51ZVxuICAgIGxldCB2YWx1ZSA9IG9ialtpXVxuICAgIGxldCB0eXBlID0gdHlwZW9mIHZhbHVlXG5cbiAgICBpZiAoaSA9PT0gJ3BhcmVudCcgJiYgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwYXJlbnQpIGNsb25lZFtpXSA9IHBhcmVudFxuICAgIH0gZWxzZSBpZiAoaSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgIGNsb25lZFtpXSA9IHZhbHVlXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY2xvbmVkW2ldID0gdmFsdWUubWFwKGogPT4gY2xvbmVOb2RlKGosIGNsb25lZCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkgdmFsdWUgPSBjbG9uZU5vZGUodmFsdWUpXG4gICAgICBjbG9uZWRbaV0gPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZWRcbn1cblxuY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzID0ge30pIHtcbiAgICB0aGlzLnJhd3MgPSB7fVxuICAgIHRoaXNbaXNDbGVhbl0gPSBmYWxzZVxuICAgIHRoaXNbbXldID0gdHJ1ZVxuXG4gICAgZm9yIChsZXQgbmFtZSBpbiBkZWZhdWx0cykge1xuICAgICAgaWYgKG5hbWUgPT09ICdub2RlcycpIHtcbiAgICAgICAgdGhpcy5ub2RlcyA9IFtdXG4gICAgICAgIGZvciAobGV0IG5vZGUgb2YgZGVmYXVsdHNbbmFtZV0pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5vZGUuY2xvbmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKG5vZGUuY2xvbmUoKSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQobm9kZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbbmFtZV0gPSBkZWZhdWx0c1tuYW1lXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2UsIG9wdHMgPSB7fSkge1xuICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgbGV0IHsgc3RhcnQsIGVuZCB9ID0gdGhpcy5yYW5nZUJ5KG9wdHMpXG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2UuaW5wdXQuZXJyb3IoXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIHsgbGluZTogc3RhcnQubGluZSwgY29sdW1uOiBzdGFydC5jb2x1bW4gfSxcbiAgICAgICAgeyBsaW5lOiBlbmQubGluZSwgY29sdW1uOiBlbmQuY29sdW1uIH0sXG4gICAgICAgIG9wdHNcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDc3NTeW50YXhFcnJvcihtZXNzYWdlKVxuICB9XG5cbiAgd2FybihyZXN1bHQsIHRleHQsIG9wdHMpIHtcbiAgICBsZXQgZGF0YSA9IHsgbm9kZTogdGhpcyB9XG4gICAgZm9yIChsZXQgaSBpbiBvcHRzKSBkYXRhW2ldID0gb3B0c1tpXVxuICAgIHJldHVybiByZXN1bHQud2Fybih0ZXh0LCBkYXRhKVxuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcylcbiAgICB9XG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdG9TdHJpbmcoc3RyaW5naWZpZXIgPSBzdHJpbmdpZnkpIHtcbiAgICBpZiAoc3RyaW5naWZpZXIuc3RyaW5naWZ5KSBzdHJpbmdpZmllciA9IHN0cmluZ2lmaWVyLnN0cmluZ2lmeVxuICAgIGxldCByZXN1bHQgPSAnJ1xuICAgIHN0cmluZ2lmaWVyKHRoaXMsIGkgPT4ge1xuICAgICAgcmVzdWx0ICs9IGlcbiAgICB9KVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGFzc2lnbihvdmVycmlkZXMgPSB7fSkge1xuICAgIGZvciAobGV0IG5hbWUgaW4gb3ZlcnJpZGVzKSB7XG4gICAgICB0aGlzW25hbWVdID0gb3ZlcnJpZGVzW25hbWVdXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBjbG9uZShvdmVycmlkZXMgPSB7fSkge1xuICAgIGxldCBjbG9uZWQgPSBjbG9uZU5vZGUodGhpcylcbiAgICBmb3IgKGxldCBuYW1lIGluIG92ZXJyaWRlcykge1xuICAgICAgY2xvbmVkW25hbWVdID0gb3ZlcnJpZGVzW25hbWVdXG4gICAgfVxuICAgIHJldHVybiBjbG9uZWRcbiAgfVxuXG4gIGNsb25lQmVmb3JlKG92ZXJyaWRlcyA9IHt9KSB7XG4gICAgbGV0IGNsb25lZCA9IHRoaXMuY2xvbmUob3ZlcnJpZGVzKVxuICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBjbG9uZWQpXG4gICAgcmV0dXJuIGNsb25lZFxuICB9XG5cbiAgY2xvbmVBZnRlcihvdmVycmlkZXMgPSB7fSkge1xuICAgIGxldCBjbG9uZWQgPSB0aGlzLmNsb25lKG92ZXJyaWRlcylcbiAgICB0aGlzLnBhcmVudC5pbnNlcnRBZnRlcih0aGlzLCBjbG9uZWQpXG4gICAgcmV0dXJuIGNsb25lZFxuICB9XG5cbiAgcmVwbGFjZVdpdGgoLi4ubm9kZXMpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGxldCBib29rbWFyayA9IHRoaXNcbiAgICAgIGxldCBmb3VuZFNlbGYgPSBmYWxzZVxuICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcykge1xuICAgICAgICAgIGZvdW5kU2VsZiA9IHRydWVcbiAgICAgICAgfSBlbHNlIGlmIChmb3VuZFNlbGYpIHtcbiAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRBZnRlcihib29rbWFyaywgbm9kZSlcbiAgICAgICAgICBib29rbWFyayA9IG5vZGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBhcmVudC5pbnNlcnRCZWZvcmUoYm9va21hcmssIG5vZGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3VuZFNlbGYpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiB1bmRlZmluZWRcbiAgICBsZXQgaW5kZXggPSB0aGlzLnBhcmVudC5pbmRleCh0aGlzKVxuICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCArIDFdXG4gIH1cblxuICBwcmV2KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHJldHVybiB1bmRlZmluZWRcbiAgICBsZXQgaW5kZXggPSB0aGlzLnBhcmVudC5pbmRleCh0aGlzKVxuICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCAtIDFdXG4gIH1cblxuICBiZWZvcmUoYWRkKSB7XG4gICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIGFkZClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYWZ0ZXIoYWRkKSB7XG4gICAgdGhpcy5wYXJlbnQuaW5zZXJ0QWZ0ZXIodGhpcywgYWRkKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICByb290KCkge1xuICAgIGxldCByZXN1bHQgPSB0aGlzXG4gICAgd2hpbGUgKHJlc3VsdC5wYXJlbnQgJiYgcmVzdWx0LnBhcmVudC50eXBlICE9PSAnZG9jdW1lbnQnKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucGFyZW50XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHJhdyhwcm9wLCBkZWZhdWx0VHlwZSkge1xuICAgIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoKVxuICAgIHJldHVybiBzdHIucmF3KHRoaXMsIHByb3AsIGRlZmF1bHRUeXBlKVxuICB9XG5cbiAgY2xlYW5SYXdzKGtlZXBCZXR3ZWVuKSB7XG4gICAgZGVsZXRlIHRoaXMucmF3cy5iZWZvcmVcbiAgICBkZWxldGUgdGhpcy5yYXdzLmFmdGVyXG4gICAgaWYgKCFrZWVwQmV0d2VlbikgZGVsZXRlIHRoaXMucmF3cy5iZXR3ZWVuXG4gIH1cblxuICB0b0pTT04oXywgaW5wdXRzKSB7XG4gICAgbGV0IGZpeGVkID0ge31cbiAgICBsZXQgZW1pdElucHV0cyA9IGlucHV0cyA9PSBudWxsXG4gICAgaW5wdXRzID0gaW5wdXRzIHx8IG5ldyBNYXAoKVxuICAgIGxldCBpbnB1dHNOZXh0SW5kZXggPSAwXG5cbiAgICBmb3IgKGxldCBuYW1lIGluIHRoaXMpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMsIG5hbWUpKSB7XG4gICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDIgKi9cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSAncGFyZW50JyB8fCBuYW1lID09PSAncHJveHlDYWNoZScpIGNvbnRpbnVlXG4gICAgICBsZXQgdmFsdWUgPSB0aGlzW25hbWVdXG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBmaXhlZFtuYW1lXSA9IHZhbHVlLm1hcChpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIGkudG9KU09OKSB7XG4gICAgICAgICAgICByZXR1cm4gaS50b0pTT04obnVsbCwgaW5wdXRzKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS50b0pTT04pIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZS50b0pTT04obnVsbCwgaW5wdXRzKVxuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnc291cmNlJykge1xuICAgICAgICBsZXQgaW5wdXRJZCA9IGlucHV0cy5nZXQodmFsdWUuaW5wdXQpXG4gICAgICAgIGlmIChpbnB1dElkID09IG51bGwpIHtcbiAgICAgICAgICBpbnB1dElkID0gaW5wdXRzTmV4dEluZGV4XG4gICAgICAgICAgaW5wdXRzLnNldCh2YWx1ZS5pbnB1dCwgaW5wdXRzTmV4dEluZGV4KVxuICAgICAgICAgIGlucHV0c05leHRJbmRleCsrXG4gICAgICAgIH1cbiAgICAgICAgZml4ZWRbbmFtZV0gPSB7XG4gICAgICAgICAgaW5wdXRJZCxcbiAgICAgICAgICBzdGFydDogdmFsdWUuc3RhcnQsXG4gICAgICAgICAgZW5kOiB2YWx1ZS5lbmRcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbWl0SW5wdXRzKSB7XG4gICAgICBmaXhlZC5pbnB1dHMgPSBbLi4uaW5wdXRzLmtleXMoKV0ubWFwKGlucHV0ID0+IGlucHV0LnRvSlNPTigpKVxuICAgIH1cblxuICAgIHJldHVybiBmaXhlZFxuICB9XG5cbiAgcG9zaXRpb25JbnNpZGUoaW5kZXgpIHtcbiAgICBsZXQgc3RyaW5nID0gdGhpcy50b1N0cmluZygpXG4gICAgbGV0IGNvbHVtbiA9IHRoaXMuc291cmNlLnN0YXJ0LmNvbHVtblxuICAgIGxldCBsaW5lID0gdGhpcy5zb3VyY2Uuc3RhcnQubGluZVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSsrKSB7XG4gICAgICBpZiAoc3RyaW5nW2ldID09PSAnXFxuJykge1xuICAgICAgICBjb2x1bW4gPSAxXG4gICAgICAgIGxpbmUgKz0gMVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uICs9IDFcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBsaW5lLCBjb2x1bW4gfVxuICB9XG5cbiAgcG9zaXRpb25CeShvcHRzKSB7XG4gICAgbGV0IHBvcyA9IHRoaXMuc291cmNlLnN0YXJ0XG4gICAgaWYgKG9wdHMuaW5kZXgpIHtcbiAgICAgIHBvcyA9IHRoaXMucG9zaXRpb25JbnNpZGUob3B0cy5pbmRleClcbiAgICB9IGVsc2UgaWYgKG9wdHMud29yZCkge1xuICAgICAgbGV0IGluZGV4ID0gdGhpcy50b1N0cmluZygpLmluZGV4T2Yob3B0cy53b3JkKVxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkgcG9zID0gdGhpcy5wb3NpdGlvbkluc2lkZShpbmRleClcbiAgICB9XG4gICAgcmV0dXJuIHBvc1xuICB9XG5cbiAgcmFuZ2VCeShvcHRzKSB7XG4gICAgbGV0IHN0YXJ0ID0ge1xuICAgICAgbGluZTogdGhpcy5zb3VyY2Uuc3RhcnQubGluZSxcbiAgICAgIGNvbHVtbjogdGhpcy5zb3VyY2Uuc3RhcnQuY29sdW1uXG4gICAgfVxuICAgIGxldCBlbmQgPSB0aGlzLnNvdXJjZS5lbmRcbiAgICAgID8ge1xuICAgICAgICAgIGxpbmU6IHRoaXMuc291cmNlLmVuZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogdGhpcy5zb3VyY2UuZW5kLmNvbHVtbiArIDFcbiAgICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgICAgbGluZTogc3RhcnQubGluZSxcbiAgICAgICAgICBjb2x1bW46IHN0YXJ0LmNvbHVtbiArIDFcbiAgICAgICAgfVxuXG4gICAgaWYgKG9wdHMud29yZCkge1xuICAgICAgbGV0IGluZGV4ID0gdGhpcy50b1N0cmluZygpLmluZGV4T2Yob3B0cy53b3JkKVxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBzdGFydCA9IHRoaXMucG9zaXRpb25JbnNpZGUoaW5kZXgpXG4gICAgICAgIGVuZCA9IHRoaXMucG9zaXRpb25JbnNpZGUoaW5kZXggKyBvcHRzLndvcmQubGVuZ3RoKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0cy5zdGFydCkge1xuICAgICAgICBzdGFydCA9IHtcbiAgICAgICAgICBsaW5lOiBvcHRzLnN0YXJ0LmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBvcHRzLnN0YXJ0LmNvbHVtblxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdHMuaW5kZXgpIHtcbiAgICAgICAgc3RhcnQgPSB0aGlzLnBvc2l0aW9uSW5zaWRlKG9wdHMuaW5kZXgpXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRzLmVuZCkge1xuICAgICAgICBlbmQgPSB7XG4gICAgICAgICAgbGluZTogb3B0cy5lbmQubGluZSxcbiAgICAgICAgICBjb2x1bW46IG9wdHMuZW5kLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9wdHMuZW5kSW5kZXgpIHtcbiAgICAgICAgZW5kID0gdGhpcy5wb3NpdGlvbkluc2lkZShvcHRzLmVuZEluZGV4KVxuICAgICAgfSBlbHNlIGlmIChvcHRzLmluZGV4KSB7XG4gICAgICAgIGVuZCA9IHRoaXMucG9zaXRpb25JbnNpZGUob3B0cy5pbmRleCArIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgZW5kLmxpbmUgPCBzdGFydC5saW5lIHx8XG4gICAgICAoZW5kLmxpbmUgPT09IHN0YXJ0LmxpbmUgJiYgZW5kLmNvbHVtbiA8PSBzdGFydC5jb2x1bW4pXG4gICAgKSB7XG4gICAgICBlbmQgPSB7IGxpbmU6IHN0YXJ0LmxpbmUsIGNvbHVtbjogc3RhcnQuY29sdW1uICsgMSB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9XG4gIH1cblxuICBnZXRQcm94eVByb2Nlc3NvcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2V0KG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIGlmIChub2RlW3Byb3BdID09PSB2YWx1ZSkgcmV0dXJuIHRydWVcbiAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wID09PSAncHJvcCcgfHxcbiAgICAgICAgICBwcm9wID09PSAndmFsdWUnIHx8XG4gICAgICAgICAgcHJvcCA9PT0gJ25hbWUnIHx8XG4gICAgICAgICAgcHJvcCA9PT0gJ3BhcmFtcycgfHxcbiAgICAgICAgICBwcm9wID09PSAnaW1wb3J0YW50JyB8fFxuICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgcHJvcCA9PT0gJ3RleHQnXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUubWFya0RpcnR5KClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSxcblxuICAgICAgZ2V0KG5vZGUsIHByb3ApIHtcbiAgICAgICAgaWYgKHByb3AgPT09ICdwcm94eU9mJykge1xuICAgICAgICAgIHJldHVybiBub2RlXG4gICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gJ3Jvb3QnKSB7XG4gICAgICAgICAgcmV0dXJuICgpID0+IG5vZGUucm9vdCgpLnRvUHJveHkoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBub2RlW3Byb3BdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0b1Byb3h5KCkge1xuICAgIGlmICghdGhpcy5wcm94eUNhY2hlKSB7XG4gICAgICB0aGlzLnByb3h5Q2FjaGUgPSBuZXcgUHJveHkodGhpcywgdGhpcy5nZXRQcm94eVByb2Nlc3NvcigpKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm94eUNhY2hlXG4gIH1cblxuICBhZGRUb0Vycm9yKGVycm9yKSB7XG4gICAgZXJyb3IucG9zdGNzc05vZGUgPSB0aGlzXG4gICAgaWYgKGVycm9yLnN0YWNrICYmIHRoaXMuc291cmNlICYmIC9cXG5cXHN7NH1hdCAvLnRlc3QoZXJyb3Iuc3RhY2spKSB7XG4gICAgICBsZXQgcyA9IHRoaXMuc291cmNlXG4gICAgICBlcnJvci5zdGFjayA9IGVycm9yLnN0YWNrLnJlcGxhY2UoXG4gICAgICAgIC9cXG5cXHN7NH1hdCAvLFxuICAgICAgICBgJCYke3MuaW5wdXQuZnJvbX06JHtzLnN0YXJ0LmxpbmV9OiR7cy5zdGFydC5jb2x1bW59JCZgXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBlcnJvclxuICB9XG5cbiAgbWFya0RpcnR5KCkge1xuICAgIGlmICh0aGlzW2lzQ2xlYW5dKSB7XG4gICAgICB0aGlzW2lzQ2xlYW5dID0gZmFsc2VcbiAgICAgIGxldCBuZXh0ID0gdGhpc1xuICAgICAgd2hpbGUgKChuZXh0ID0gbmV4dC5wYXJlbnQpKSB7XG4gICAgICAgIG5leHRbaXNDbGVhbl0gPSBmYWxzZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldCBwcm94eU9mKCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBOb2RlXG5Ob2RlLmRlZmF1bHQgPSBOb2RlXG4iLCIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcbmxldCBQYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcblxuZnVuY3Rpb24gcGFyc2UoY3NzLCBvcHRzKSB7XG4gIGxldCBpbnB1dCA9IG5ldyBJbnB1dChjc3MsIG9wdHMpXG4gIGxldCBwYXJzZXIgPSBuZXcgUGFyc2VyKGlucHV0KVxuICB0cnkge1xuICAgIHBhcnNlci5wYXJzZSgpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGUubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJyAmJiBvcHRzICYmIG9wdHMuZnJvbSkge1xuICAgICAgICBpZiAoL1xcLnNjc3MkL2kudGVzdChvcHRzLmZyb20pKSB7XG4gICAgICAgICAgZS5tZXNzYWdlICs9XG4gICAgICAgICAgICAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNDU1Mgd2l0aCAnICtcbiAgICAgICAgICAgICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArXG4gICAgICAgICAgICAndHJ5IGFnYWluIHdpdGggdGhlIHBvc3Rjc3Mtc2NzcyBwYXJzZXInXG4gICAgICAgIH0gZWxzZSBpZiAoL1xcLnNhc3MvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgU2FzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1zYXNzIHBhcnNlcidcbiAgICAgICAgfSBlbHNlIGlmICgvXFwubGVzcyQvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz1cbiAgICAgICAgICAgICdcXG5Zb3UgdHJpZWQgdG8gcGFyc2UgTGVzcyB3aXRoICcgK1xuICAgICAgICAgICAgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICtcbiAgICAgICAgICAgICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1sZXNzIHBhcnNlcidcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBlXG4gIH1cblxuICByZXR1cm4gcGFyc2VyLnJvb3Rcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxucGFyc2UuZGVmYXVsdCA9IHBhcnNlXG5cbkNvbnRhaW5lci5yZWdpc3RlclBhcnNlKHBhcnNlKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IHRva2VuaXplciA9IHJlcXVpcmUoJy4vdG9rZW5pemUnKVxubGV0IENvbW1lbnQgPSByZXF1aXJlKCcuL2NvbW1lbnQnKVxubGV0IEF0UnVsZSA9IHJlcXVpcmUoJy4vYXQtcnVsZScpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5sZXQgUnVsZSA9IHJlcXVpcmUoJy4vcnVsZScpXG5cbmNvbnN0IFNBRkVfQ09NTUVOVF9ORUlHSEJPUiA9IHtcbiAgZW1wdHk6IHRydWUsXG4gIHNwYWNlOiB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbmRMYXN0V2l0aFBvc2l0aW9uKHRva2Vucykge1xuICBmb3IgKGxldCBpID0gdG9rZW5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHRva2VuID0gdG9rZW5zW2ldXG4gICAgbGV0IHBvcyA9IHRva2VuWzNdIHx8IHRva2VuWzJdXG4gICAgaWYgKHBvcykgcmV0dXJuIHBvc1xuICB9XG59XG5cbmNsYXNzIFBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0XG5cbiAgICB0aGlzLnJvb3QgPSBuZXcgUm9vdCgpXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5yb290XG4gICAgdGhpcy5zcGFjZXMgPSAnJ1xuICAgIHRoaXMuc2VtaWNvbG9uID0gZmFsc2VcbiAgICB0aGlzLmN1c3RvbVByb3BlcnR5ID0gZmFsc2VcblxuICAgIHRoaXMuY3JlYXRlVG9rZW5pemVyKClcbiAgICB0aGlzLnJvb3Quc291cmNlID0geyBpbnB1dCwgc3RhcnQ6IHsgb2Zmc2V0OiAwLCBsaW5lOiAxLCBjb2x1bW46IDEgfSB9XG4gIH1cblxuICBjcmVhdGVUb2tlbml6ZXIoKSB7XG4gICAgdGhpcy50b2tlbml6ZXIgPSB0b2tlbml6ZXIodGhpcy5pbnB1dClcbiAgfVxuXG4gIHBhcnNlKCkge1xuICAgIGxldCB0b2tlblxuICAgIHdoaWxlICghdGhpcy50b2tlbml6ZXIuZW5kT2ZGaWxlKCkpIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIubmV4dFRva2VuKClcblxuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgdGhpcy5zcGFjZXMgKz0gdG9rZW5bMV1cbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJzsnOlxuICAgICAgICAgIHRoaXMuZnJlZVNlbWljb2xvbih0b2tlbilcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgIHRoaXMuZW5kKHRva2VuKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgdGhpcy5jb21tZW50KHRva2VuKVxuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSAnYXQtd29yZCc6XG4gICAgICAgICAgdGhpcy5hdHJ1bGUodG9rZW4pXG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICB0aGlzLmVtcHR5UnVsZSh0b2tlbilcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5vdGhlcih0b2tlbilcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmVuZEZpbGUoKVxuICB9XG5cbiAgY29tbWVudCh0b2tlbikge1xuICAgIGxldCBub2RlID0gbmV3IENvbW1lbnQoKVxuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlblsyXSlcbiAgICBub2RlLnNvdXJjZS5lbmQgPSB0aGlzLmdldFBvc2l0aW9uKHRva2VuWzNdIHx8IHRva2VuWzJdKVxuXG4gICAgbGV0IHRleHQgPSB0b2tlblsxXS5zbGljZSgyLCAtMilcbiAgICBpZiAoL15cXHMqJC8udGVzdCh0ZXh0KSkge1xuICAgICAgbm9kZS50ZXh0ID0gJydcbiAgICAgIG5vZGUucmF3cy5sZWZ0ID0gdGV4dFxuICAgICAgbm9kZS5yYXdzLnJpZ2h0ID0gJydcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG1hdGNoID0gdGV4dC5tYXRjaCgvXihcXHMqKShbXl0qXFxTKShcXHMqKSQvKVxuICAgICAgbm9kZS50ZXh0ID0gbWF0Y2hbMl1cbiAgICAgIG5vZGUucmF3cy5sZWZ0ID0gbWF0Y2hbMV1cbiAgICAgIG5vZGUucmF3cy5yaWdodCA9IG1hdGNoWzNdXG4gICAgfVxuICB9XG5cbiAgZW1wdHlSdWxlKHRva2VuKSB7XG4gICAgbGV0IG5vZGUgPSBuZXcgUnVsZSgpXG4gICAgdGhpcy5pbml0KG5vZGUsIHRva2VuWzJdKVxuICAgIG5vZGUuc2VsZWN0b3IgPSAnJ1xuICAgIG5vZGUucmF3cy5iZXR3ZWVuID0gJydcbiAgICB0aGlzLmN1cnJlbnQgPSBub2RlXG4gIH1cblxuICBvdGhlcihzdGFydCkge1xuICAgIGxldCBlbmQgPSBmYWxzZVxuICAgIGxldCB0eXBlID0gbnVsbFxuICAgIGxldCBjb2xvbiA9IGZhbHNlXG4gICAgbGV0IGJyYWNrZXQgPSBudWxsXG4gICAgbGV0IGJyYWNrZXRzID0gW11cbiAgICBsZXQgY3VzdG9tUHJvcGVydHkgPSBzdGFydFsxXS5zdGFydHNXaXRoKCctLScpXG5cbiAgICBsZXQgdG9rZW5zID0gW11cbiAgICBsZXQgdG9rZW4gPSBzdGFydFxuICAgIHdoaWxlICh0b2tlbikge1xuICAgICAgdHlwZSA9IHRva2VuWzBdXG4gICAgICB0b2tlbnMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHR5cGUgPT09ICcoJyB8fCB0eXBlID09PSAnWycpIHtcbiAgICAgICAgaWYgKCFicmFja2V0KSBicmFja2V0ID0gdG9rZW5cbiAgICAgICAgYnJhY2tldHMucHVzaCh0eXBlID09PSAnKCcgPyAnKScgOiAnXScpXG4gICAgICB9IGVsc2UgaWYgKGN1c3RvbVByb3BlcnR5ICYmIGNvbG9uICYmIHR5cGUgPT09ICd7Jykge1xuICAgICAgICBpZiAoIWJyYWNrZXQpIGJyYWNrZXQgPSB0b2tlblxuICAgICAgICBicmFja2V0cy5wdXNoKCd9JylcbiAgICAgIH0gZWxzZSBpZiAoYnJhY2tldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnOycpIHtcbiAgICAgICAgICBpZiAoY29sb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVjbCh0b2tlbnMsIGN1c3RvbVByb3BlcnR5KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd7Jykge1xuICAgICAgICAgIHRoaXMucnVsZSh0b2tlbnMpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ30nKSB7XG4gICAgICAgICAgdGhpcy50b2tlbml6ZXIuYmFjayh0b2tlbnMucG9wKCkpXG4gICAgICAgICAgZW5kID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJzonKSB7XG4gICAgICAgICAgY29sb24gPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gYnJhY2tldHNbYnJhY2tldHMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgYnJhY2tldHMucG9wKClcbiAgICAgICAgaWYgKGJyYWNrZXRzLmxlbmd0aCA9PT0gMCkgYnJhY2tldCA9IG51bGxcbiAgICAgIH1cblxuICAgICAgdG9rZW4gPSB0aGlzLnRva2VuaXplci5uZXh0VG9rZW4oKVxuICAgIH1cblxuICAgIGlmICh0aGlzLnRva2VuaXplci5lbmRPZkZpbGUoKSkgZW5kID0gdHJ1ZVxuICAgIGlmIChicmFja2V0cy5sZW5ndGggPiAwKSB0aGlzLnVuY2xvc2VkQnJhY2tldChicmFja2V0KVxuXG4gICAgaWYgKGVuZCAmJiBjb2xvbikge1xuICAgICAgaWYgKCFjdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgIHRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXVswXVxuICAgICAgICAgIGlmICh0b2tlbiAhPT0gJ3NwYWNlJyAmJiB0b2tlbiAhPT0gJ2NvbW1lbnQnKSBicmVha1xuICAgICAgICAgIHRoaXMudG9rZW5pemVyLmJhY2sodG9rZW5zLnBvcCgpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmRlY2wodG9rZW5zLCBjdXN0b21Qcm9wZXJ0eSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51bmtub3duV29yZCh0b2tlbnMpXG4gICAgfVxuICB9XG5cbiAgcnVsZSh0b2tlbnMpIHtcbiAgICB0b2tlbnMucG9wKClcblxuICAgIGxldCBub2RlID0gbmV3IFJ1bGUoKVxuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlbnNbMF1bMl0pXG5cbiAgICBub2RlLnJhd3MuYmV0d2VlbiA9IHRoaXMuc3BhY2VzQW5kQ29tbWVudHNGcm9tRW5kKHRva2VucylcbiAgICB0aGlzLnJhdyhub2RlLCAnc2VsZWN0b3InLCB0b2tlbnMpXG4gICAgdGhpcy5jdXJyZW50ID0gbm9kZVxuICB9XG5cbiAgZGVjbCh0b2tlbnMsIGN1c3RvbVByb3BlcnR5KSB7XG4gICAgbGV0IG5vZGUgPSBuZXcgRGVjbGFyYXRpb24oKVxuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlbnNbMF1bMl0pXG5cbiAgICBsZXQgbGFzdCA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV1cbiAgICBpZiAobGFzdFswXSA9PT0gJzsnKSB7XG4gICAgICB0aGlzLnNlbWljb2xvbiA9IHRydWVcbiAgICAgIHRva2Vucy5wb3AoKVxuICAgIH1cblxuICAgIG5vZGUuc291cmNlLmVuZCA9IHRoaXMuZ2V0UG9zaXRpb24oXG4gICAgICBsYXN0WzNdIHx8IGxhc3RbMl0gfHwgZmluZExhc3RXaXRoUG9zaXRpb24odG9rZW5zKVxuICAgIClcblxuICAgIHdoaWxlICh0b2tlbnNbMF1bMF0gIT09ICd3b3JkJykge1xuICAgICAgaWYgKHRva2Vucy5sZW5ndGggPT09IDEpIHRoaXMudW5rbm93bldvcmQodG9rZW5zKVxuICAgICAgbm9kZS5yYXdzLmJlZm9yZSArPSB0b2tlbnMuc2hpZnQoKVsxXVxuICAgIH1cbiAgICBub2RlLnNvdXJjZS5zdGFydCA9IHRoaXMuZ2V0UG9zaXRpb24odG9rZW5zWzBdWzJdKVxuXG4gICAgbm9kZS5wcm9wID0gJydcbiAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgbGV0IHR5cGUgPSB0b2tlbnNbMF1bMF1cbiAgICAgIGlmICh0eXBlID09PSAnOicgfHwgdHlwZSA9PT0gJ3NwYWNlJyB8fCB0eXBlID09PSAnY29tbWVudCcpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIG5vZGUucHJvcCArPSB0b2tlbnMuc2hpZnQoKVsxXVxuICAgIH1cblxuICAgIG5vZGUucmF3cy5iZXR3ZWVuID0gJydcblxuICAgIGxldCB0b2tlblxuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICB0b2tlbiA9IHRva2Vucy5zaGlmdCgpXG5cbiAgICAgIGlmICh0b2tlblswXSA9PT0gJzonKSB7XG4gICAgICAgIG5vZGUucmF3cy5iZXR3ZWVuICs9IHRva2VuWzFdXG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodG9rZW5bMF0gPT09ICd3b3JkJyAmJiAvXFx3Ly50ZXN0KHRva2VuWzFdKSkge1xuICAgICAgICAgIHRoaXMudW5rbm93bldvcmQoW3Rva2VuXSlcbiAgICAgICAgfVxuICAgICAgICBub2RlLnJhd3MuYmV0d2VlbiArPSB0b2tlblsxXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLnByb3BbMF0gPT09ICdfJyB8fCBub2RlLnByb3BbMF0gPT09ICcqJykge1xuICAgICAgbm9kZS5yYXdzLmJlZm9yZSArPSBub2RlLnByb3BbMF1cbiAgICAgIG5vZGUucHJvcCA9IG5vZGUucHJvcC5zbGljZSgxKVxuICAgIH1cblxuICAgIGxldCBmaXJzdFNwYWNlcyA9IFtdXG4gICAgbGV0IG5leHRcbiAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgbmV4dCA9IHRva2Vuc1swXVswXVxuICAgICAgaWYgKG5leHQgIT09ICdzcGFjZScgJiYgbmV4dCAhPT0gJ2NvbW1lbnQnKSBicmVha1xuICAgICAgZmlyc3RTcGFjZXMucHVzaCh0b2tlbnMuc2hpZnQoKSlcbiAgICB9XG5cbiAgICB0aGlzLnByZWNoZWNrTWlzc2VkU2VtaWNvbG9uKHRva2VucylcblxuICAgIGZvciAobGV0IGkgPSB0b2tlbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldXG4gICAgICBpZiAodG9rZW5bMV0udG9Mb3dlckNhc2UoKSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIG5vZGUuaW1wb3J0YW50ID0gdHJ1ZVxuICAgICAgICBsZXQgc3RyaW5nID0gdGhpcy5zdHJpbmdGcm9tKHRva2VucywgaSlcbiAgICAgICAgc3RyaW5nID0gdGhpcy5zcGFjZXNGcm9tRW5kKHRva2VucykgKyBzdHJpbmdcbiAgICAgICAgaWYgKHN0cmluZyAhPT0gJyAhaW1wb3J0YW50Jykgbm9kZS5yYXdzLmltcG9ydGFudCA9IHN0cmluZ1xuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIGlmICh0b2tlblsxXS50b0xvd2VyQ2FzZSgpID09PSAnaW1wb3J0YW50Jykge1xuICAgICAgICBsZXQgY2FjaGUgPSB0b2tlbnMuc2xpY2UoMClcbiAgICAgICAgbGV0IHN0ciA9ICcnXG4gICAgICAgIGZvciAobGV0IGogPSBpOyBqID4gMDsgai0tKSB7XG4gICAgICAgICAgbGV0IHR5cGUgPSBjYWNoZVtqXVswXVxuICAgICAgICAgIGlmIChzdHIudHJpbSgpLmluZGV4T2YoJyEnKSA9PT0gMCAmJiB0eXBlICE9PSAnc3BhY2UnKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdHIgPSBjYWNoZS5wb3AoKVsxXSArIHN0clxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHIudHJpbSgpLmluZGV4T2YoJyEnKSA9PT0gMCkge1xuICAgICAgICAgIG5vZGUuaW1wb3J0YW50ID0gdHJ1ZVxuICAgICAgICAgIG5vZGUucmF3cy5pbXBvcnRhbnQgPSBzdHJcbiAgICAgICAgICB0b2tlbnMgPSBjYWNoZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlblswXSAhPT0gJ3NwYWNlJyAmJiB0b2tlblswXSAhPT0gJ2NvbW1lbnQnKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGhhc1dvcmQgPSB0b2tlbnMuc29tZShpID0+IGlbMF0gIT09ICdzcGFjZScgJiYgaVswXSAhPT0gJ2NvbW1lbnQnKVxuXG4gICAgaWYgKGhhc1dvcmQpIHtcbiAgICAgIG5vZGUucmF3cy5iZXR3ZWVuICs9IGZpcnN0U3BhY2VzLm1hcChpID0+IGlbMV0pLmpvaW4oJycpXG4gICAgICBmaXJzdFNwYWNlcyA9IFtdXG4gICAgfVxuICAgIHRoaXMucmF3KG5vZGUsICd2YWx1ZScsIGZpcnN0U3BhY2VzLmNvbmNhdCh0b2tlbnMpLCBjdXN0b21Qcm9wZXJ0eSlcblxuICAgIGlmIChub2RlLnZhbHVlLmluY2x1ZGVzKCc6JykgJiYgIWN1c3RvbVByb3BlcnR5KSB7XG4gICAgICB0aGlzLmNoZWNrTWlzc2VkU2VtaWNvbG9uKHRva2VucylcbiAgICB9XG4gIH1cblxuICBhdHJ1bGUodG9rZW4pIHtcbiAgICBsZXQgbm9kZSA9IG5ldyBBdFJ1bGUoKVxuICAgIG5vZGUubmFtZSA9IHRva2VuWzFdLnNsaWNlKDEpXG4gICAgaWYgKG5vZGUubmFtZSA9PT0gJycpIHtcbiAgICAgIHRoaXMudW5uYW1lZEF0cnVsZShub2RlLCB0b2tlbilcbiAgICB9XG4gICAgdGhpcy5pbml0KG5vZGUsIHRva2VuWzJdKVxuXG4gICAgbGV0IHR5cGVcbiAgICBsZXQgcHJldlxuICAgIGxldCBzaGlmdFxuICAgIGxldCBsYXN0ID0gZmFsc2VcbiAgICBsZXQgb3BlbiA9IGZhbHNlXG4gICAgbGV0IHBhcmFtcyA9IFtdXG4gICAgbGV0IGJyYWNrZXRzID0gW11cblxuICAgIHdoaWxlICghdGhpcy50b2tlbml6ZXIuZW5kT2ZGaWxlKCkpIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIubmV4dFRva2VuKClcbiAgICAgIHR5cGUgPSB0b2tlblswXVxuXG4gICAgICBpZiAodHlwZSA9PT0gJygnIHx8IHR5cGUgPT09ICdbJykge1xuICAgICAgICBicmFja2V0cy5wdXNoKHR5cGUgPT09ICcoJyA/ICcpJyA6ICddJylcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3snICYmIGJyYWNrZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYnJhY2tldHMucHVzaCgnfScpXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IGJyYWNrZXRzW2JyYWNrZXRzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgIGJyYWNrZXRzLnBvcCgpXG4gICAgICB9XG5cbiAgICAgIGlmIChicmFja2V0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICc7Jykge1xuICAgICAgICAgIG5vZGUuc291cmNlLmVuZCA9IHRoaXMuZ2V0UG9zaXRpb24odG9rZW5bMl0pXG4gICAgICAgICAgdGhpcy5zZW1pY29sb24gPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAneycpIHtcbiAgICAgICAgICBvcGVuID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ30nKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzaGlmdCA9IHBhcmFtcy5sZW5ndGggLSAxXG4gICAgICAgICAgICBwcmV2ID0gcGFyYW1zW3NoaWZ0XVxuICAgICAgICAgICAgd2hpbGUgKHByZXYgJiYgcHJldlswXSA9PT0gJ3NwYWNlJykge1xuICAgICAgICAgICAgICBwcmV2ID0gcGFyYW1zWy0tc2hpZnRdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICBub2RlLnNvdXJjZS5lbmQgPSB0aGlzLmdldFBvc2l0aW9uKHByZXZbM10gfHwgcHJldlsyXSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lbmQodG9rZW4pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJhbXMucHVzaCh0b2tlbilcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2godG9rZW4pXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRva2VuaXplci5lbmRPZkZpbGUoKSkge1xuICAgICAgICBsYXN0ID0gdHJ1ZVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIG5vZGUucmF3cy5iZXR3ZWVuID0gdGhpcy5zcGFjZXNBbmRDb21tZW50c0Zyb21FbmQocGFyYW1zKVxuICAgIGlmIChwYXJhbXMubGVuZ3RoKSB7XG4gICAgICBub2RlLnJhd3MuYWZ0ZXJOYW1lID0gdGhpcy5zcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydChwYXJhbXMpXG4gICAgICB0aGlzLnJhdyhub2RlLCAncGFyYW1zJywgcGFyYW1zKVxuICAgICAgaWYgKGxhc3QpIHtcbiAgICAgICAgdG9rZW4gPSBwYXJhbXNbcGFyYW1zLmxlbmd0aCAtIDFdXG4gICAgICAgIG5vZGUuc291cmNlLmVuZCA9IHRoaXMuZ2V0UG9zaXRpb24odG9rZW5bM10gfHwgdG9rZW5bMl0pXG4gICAgICAgIHRoaXMuc3BhY2VzID0gbm9kZS5yYXdzLmJldHdlZW5cbiAgICAgICAgbm9kZS5yYXdzLmJldHdlZW4gPSAnJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLnJhd3MuYWZ0ZXJOYW1lID0gJydcbiAgICAgIG5vZGUucGFyYW1zID0gJydcbiAgICB9XG5cbiAgICBpZiAob3Blbikge1xuICAgICAgbm9kZS5ub2RlcyA9IFtdXG4gICAgICB0aGlzLmN1cnJlbnQgPSBub2RlXG4gICAgfVxuICB9XG5cbiAgZW5kKHRva2VuKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudC5ub2RlcyAmJiB0aGlzLmN1cnJlbnQubm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmN1cnJlbnQucmF3cy5zZW1pY29sb24gPSB0aGlzLnNlbWljb2xvblxuICAgIH1cbiAgICB0aGlzLnNlbWljb2xvbiA9IGZhbHNlXG5cbiAgICB0aGlzLmN1cnJlbnQucmF3cy5hZnRlciA9ICh0aGlzLmN1cnJlbnQucmF3cy5hZnRlciB8fCAnJykgKyB0aGlzLnNwYWNlc1xuICAgIHRoaXMuc3BhY2VzID0gJydcblxuICAgIGlmICh0aGlzLmN1cnJlbnQucGFyZW50KSB7XG4gICAgICB0aGlzLmN1cnJlbnQuc291cmNlLmVuZCA9IHRoaXMuZ2V0UG9zaXRpb24odG9rZW5bMl0pXG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLmN1cnJlbnQucGFyZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudW5leHBlY3RlZENsb3NlKHRva2VuKVxuICAgIH1cbiAgfVxuXG4gIGVuZEZpbGUoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudC5wYXJlbnQpIHRoaXMudW5jbG9zZWRCbG9jaygpXG4gICAgaWYgKHRoaXMuY3VycmVudC5ub2RlcyAmJiB0aGlzLmN1cnJlbnQubm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmN1cnJlbnQucmF3cy5zZW1pY29sb24gPSB0aGlzLnNlbWljb2xvblxuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQucmF3cy5hZnRlciA9ICh0aGlzLmN1cnJlbnQucmF3cy5hZnRlciB8fCAnJykgKyB0aGlzLnNwYWNlc1xuICB9XG5cbiAgZnJlZVNlbWljb2xvbih0b2tlbikge1xuICAgIHRoaXMuc3BhY2VzICs9IHRva2VuWzFdXG4gICAgaWYgKHRoaXMuY3VycmVudC5ub2Rlcykge1xuICAgICAgbGV0IHByZXYgPSB0aGlzLmN1cnJlbnQubm9kZXNbdGhpcy5jdXJyZW50Lm5vZGVzLmxlbmd0aCAtIDFdXG4gICAgICBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09ICdydWxlJyAmJiAhcHJldi5yYXdzLm93blNlbWljb2xvbikge1xuICAgICAgICBwcmV2LnJhd3Mub3duU2VtaWNvbG9uID0gdGhpcy5zcGFjZXNcbiAgICAgICAgdGhpcy5zcGFjZXMgPSAnJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEhlbHBlcnNcblxuICBnZXRQb3NpdGlvbihvZmZzZXQpIHtcbiAgICBsZXQgcG9zID0gdGhpcy5pbnB1dC5mcm9tT2Zmc2V0KG9mZnNldClcbiAgICByZXR1cm4ge1xuICAgICAgb2Zmc2V0LFxuICAgICAgbGluZTogcG9zLmxpbmUsXG4gICAgICBjb2x1bW46IHBvcy5jb2xcbiAgICB9XG4gIH1cblxuICBpbml0KG5vZGUsIG9mZnNldCkge1xuICAgIHRoaXMuY3VycmVudC5wdXNoKG5vZGUpXG4gICAgbm9kZS5zb3VyY2UgPSB7XG4gICAgICBzdGFydDogdGhpcy5nZXRQb3NpdGlvbihvZmZzZXQpLFxuICAgICAgaW5wdXQ6IHRoaXMuaW5wdXRcbiAgICB9XG4gICAgbm9kZS5yYXdzLmJlZm9yZSA9IHRoaXMuc3BhY2VzXG4gICAgdGhpcy5zcGFjZXMgPSAnJ1xuICAgIGlmIChub2RlLnR5cGUgIT09ICdjb21tZW50JykgdGhpcy5zZW1pY29sb24gPSBmYWxzZVxuICB9XG5cbiAgcmF3KG5vZGUsIHByb3AsIHRva2VucywgY3VzdG9tUHJvcGVydHkpIHtcbiAgICBsZXQgdG9rZW4sIHR5cGVcbiAgICBsZXQgbGVuZ3RoID0gdG9rZW5zLmxlbmd0aFxuICAgIGxldCB2YWx1ZSA9ICcnXG4gICAgbGV0IGNsZWFuID0gdHJ1ZVxuICAgIGxldCBuZXh0LCBwcmV2XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXVxuICAgICAgdHlwZSA9IHRva2VuWzBdXG4gICAgICBpZiAodHlwZSA9PT0gJ3NwYWNlJyAmJiBpID09PSBsZW5ndGggLSAxICYmICFjdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICBjbGVhbiA9IGZhbHNlXG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb21tZW50Jykge1xuICAgICAgICBwcmV2ID0gdG9rZW5zW2kgLSAxXSA/IHRva2Vuc1tpIC0gMV1bMF0gOiAnZW1wdHknXG4gICAgICAgIG5leHQgPSB0b2tlbnNbaSArIDFdID8gdG9rZW5zW2kgKyAxXVswXSA6ICdlbXB0eSdcbiAgICAgICAgaWYgKCFTQUZFX0NPTU1FTlRfTkVJR0hCT1JbcHJldl0gJiYgIVNBRkVfQ09NTUVOVF9ORUlHSEJPUltuZXh0XSkge1xuICAgICAgICAgIGlmICh2YWx1ZS5zbGljZSgtMSkgPT09ICcsJykge1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSArPSB0b2tlblsxXVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhbiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlICs9IHRva2VuWzFdXG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY2xlYW4pIHtcbiAgICAgIGxldCByYXcgPSB0b2tlbnMucmVkdWNlKChhbGwsIGkpID0+IGFsbCArIGlbMV0sICcnKVxuICAgICAgbm9kZS5yYXdzW3Byb3BdID0geyB2YWx1ZSwgcmF3IH1cbiAgICB9XG4gICAgbm9kZVtwcm9wXSA9IHZhbHVlXG4gIH1cblxuICBzcGFjZXNBbmRDb21tZW50c0Zyb21FbmQodG9rZW5zKSB7XG4gICAgbGV0IGxhc3RUb2tlblR5cGVcbiAgICBsZXQgc3BhY2VzID0gJydcbiAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgbGFzdFRva2VuVHlwZSA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV1bMF1cbiAgICAgIGlmIChsYXN0VG9rZW5UeXBlICE9PSAnc3BhY2UnICYmIGxhc3RUb2tlblR5cGUgIT09ICdjb21tZW50JykgYnJlYWtcbiAgICAgIHNwYWNlcyA9IHRva2Vucy5wb3AoKVsxXSArIHNwYWNlc1xuICAgIH1cbiAgICByZXR1cm4gc3BhY2VzXG4gIH1cblxuICBzcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydCh0b2tlbnMpIHtcbiAgICBsZXQgbmV4dFxuICAgIGxldCBzcGFjZXMgPSAnJ1xuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICBuZXh0ID0gdG9rZW5zWzBdWzBdXG4gICAgICBpZiAobmV4dCAhPT0gJ3NwYWNlJyAmJiBuZXh0ICE9PSAnY29tbWVudCcpIGJyZWFrXG4gICAgICBzcGFjZXMgKz0gdG9rZW5zLnNoaWZ0KClbMV1cbiAgICB9XG4gICAgcmV0dXJuIHNwYWNlc1xuICB9XG5cbiAgc3BhY2VzRnJvbUVuZCh0b2tlbnMpIHtcbiAgICBsZXQgbGFzdFRva2VuVHlwZVxuICAgIGxldCBzcGFjZXMgPSAnJ1xuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICBsYXN0VG9rZW5UeXBlID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXVswXVxuICAgICAgaWYgKGxhc3RUb2tlblR5cGUgIT09ICdzcGFjZScpIGJyZWFrXG4gICAgICBzcGFjZXMgPSB0b2tlbnMucG9wKClbMV0gKyBzcGFjZXNcbiAgICB9XG4gICAgcmV0dXJuIHNwYWNlc1xuICB9XG5cbiAgc3RyaW5nRnJvbSh0b2tlbnMsIGZyb20pIHtcbiAgICBsZXQgcmVzdWx0ID0gJydcbiAgICBmb3IgKGxldCBpID0gZnJvbTsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0ICs9IHRva2Vuc1tpXVsxXVxuICAgIH1cbiAgICB0b2tlbnMuc3BsaWNlKGZyb20sIHRva2Vucy5sZW5ndGggLSBmcm9tKVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGNvbG9uKHRva2Vucykge1xuICAgIGxldCBicmFja2V0cyA9IDBcbiAgICBsZXQgdG9rZW4sIHR5cGUsIHByZXZcbiAgICBmb3IgKGxldCBbaSwgZWxlbWVudF0gb2YgdG9rZW5zLmVudHJpZXMoKSkge1xuICAgICAgdG9rZW4gPSBlbGVtZW50XG4gICAgICB0eXBlID0gdG9rZW5bMF1cblxuICAgICAgaWYgKHR5cGUgPT09ICcoJykge1xuICAgICAgICBicmFja2V0cyArPSAxXG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJyknKSB7XG4gICAgICAgIGJyYWNrZXRzIC09IDFcbiAgICAgIH1cbiAgICAgIGlmIChicmFja2V0cyA9PT0gMCAmJiB0eXBlID09PSAnOicpIHtcbiAgICAgICAgaWYgKCFwcmV2KSB7XG4gICAgICAgICAgdGhpcy5kb3VibGVDb2xvbih0b2tlbilcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2WzBdID09PSAnd29yZCcgJiYgcHJldlsxXSA9PT0gJ3Byb2dpZCcpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJldiA9IHRva2VuXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gRXJyb3JzXG5cbiAgdW5jbG9zZWRCcmFja2V0KGJyYWNrZXQpIHtcbiAgICB0aHJvdyB0aGlzLmlucHV0LmVycm9yKFxuICAgICAgJ1VuY2xvc2VkIGJyYWNrZXQnLFxuICAgICAgeyBvZmZzZXQ6IGJyYWNrZXRbMl0gfSxcbiAgICAgIHsgb2Zmc2V0OiBicmFja2V0WzJdICsgMSB9XG4gICAgKVxuICB9XG5cbiAgdW5rbm93bldvcmQodG9rZW5zKSB7XG4gICAgdGhyb3cgdGhpcy5pbnB1dC5lcnJvcihcbiAgICAgICdVbmtub3duIHdvcmQnLFxuICAgICAgeyBvZmZzZXQ6IHRva2Vuc1swXVsyXSB9LFxuICAgICAgeyBvZmZzZXQ6IHRva2Vuc1swXVsyXSArIHRva2Vuc1swXVsxXS5sZW5ndGggfVxuICAgIClcbiAgfVxuXG4gIHVuZXhwZWN0ZWRDbG9zZSh0b2tlbikge1xuICAgIHRocm93IHRoaXMuaW5wdXQuZXJyb3IoXG4gICAgICAnVW5leHBlY3RlZCB9JyxcbiAgICAgIHsgb2Zmc2V0OiB0b2tlblsyXSB9LFxuICAgICAgeyBvZmZzZXQ6IHRva2VuWzJdICsgMSB9XG4gICAgKVxuICB9XG5cbiAgdW5jbG9zZWRCbG9jaygpIHtcbiAgICBsZXQgcG9zID0gdGhpcy5jdXJyZW50LnNvdXJjZS5zdGFydFxuICAgIHRocm93IHRoaXMuaW5wdXQuZXJyb3IoJ1VuY2xvc2VkIGJsb2NrJywgcG9zLmxpbmUsIHBvcy5jb2x1bW4pXG4gIH1cblxuICBkb3VibGVDb2xvbih0b2tlbikge1xuICAgIHRocm93IHRoaXMuaW5wdXQuZXJyb3IoXG4gICAgICAnRG91YmxlIGNvbG9uJyxcbiAgICAgIHsgb2Zmc2V0OiB0b2tlblsyXSB9LFxuICAgICAgeyBvZmZzZXQ6IHRva2VuWzJdICsgdG9rZW5bMV0ubGVuZ3RoIH1cbiAgICApXG4gIH1cblxuICB1bm5hbWVkQXRydWxlKG5vZGUsIHRva2VuKSB7XG4gICAgdGhyb3cgdGhpcy5pbnB1dC5lcnJvcihcbiAgICAgICdBdC1ydWxlIHdpdGhvdXQgbmFtZScsXG4gICAgICB7IG9mZnNldDogdG9rZW5bMl0gfSxcbiAgICAgIHsgb2Zmc2V0OiB0b2tlblsyXSArIHRva2VuWzFdLmxlbmd0aCB9XG4gICAgKVxuICB9XG5cbiAgcHJlY2hlY2tNaXNzZWRTZW1pY29sb24oLyogdG9rZW5zICovKSB7XG4gICAgLy8gSG9vayBmb3IgU2FmZSBQYXJzZXJcbiAgfVxuXG4gIGNoZWNrTWlzc2VkU2VtaWNvbG9uKHRva2Vucykge1xuICAgIGxldCBjb2xvbiA9IHRoaXMuY29sb24odG9rZW5zKVxuICAgIGlmIChjb2xvbiA9PT0gZmFsc2UpIHJldHVyblxuXG4gICAgbGV0IGZvdW5kZWQgPSAwXG4gICAgbGV0IHRva2VuXG4gICAgZm9yIChsZXQgaiA9IGNvbG9uIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2pdXG4gICAgICBpZiAodG9rZW5bMF0gIT09ICdzcGFjZScpIHtcbiAgICAgICAgZm91bmRlZCArPSAxXG4gICAgICAgIGlmIChmb3VuZGVkID09PSAyKSBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiB0aGUgdG9rZW4gaXMgYSB3b3JkLCBlLmcuIGAhaW1wb3J0YW50YCwgYHJlZGAgb3IgYW55IG90aGVyIHZhbGlkIHByb3BlcnR5J3MgdmFsdWUuXG4gICAgLy8gVGhlbiB3ZSBuZWVkIHRvIHJldHVybiB0aGUgY29sb24gYWZ0ZXIgdGhhdCB3b3JkIHRva2VuLiBbM10gaXMgdGhlIFwiZW5kXCIgY29sb24gb2YgdGhhdCB3b3JkLlxuICAgIC8vIEFuZCBiZWNhdXNlIHdlIG5lZWQgaXQgYWZ0ZXIgdGhhdCBvbmUgd2UgZG8gKzEgdG8gZ2V0IHRoZSBuZXh0IG9uZS5cbiAgICB0aHJvdyB0aGlzLmlucHV0LmVycm9yKFxuICAgICAgJ01pc3NlZCBzZW1pY29sb24nLFxuICAgICAgdG9rZW5bMF0gPT09ICd3b3JkJyA/IHRva2VuWzNdICsgMSA6IHRva2VuWzJdXG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyXG4iLCIndXNlIHN0cmljdCdcblxubGV0IENzc1N5bnRheEVycm9yID0gcmVxdWlyZSgnLi9jc3Mtc3ludGF4LWVycm9yJylcbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IExhenlSZXN1bHQgPSByZXF1aXJlKCcuL2xhenktcmVzdWx0JylcbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgUHJvY2Vzc29yID0gcmVxdWlyZSgnLi9wcm9jZXNzb3InKVxubGV0IHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5JylcbmxldCBmcm9tSlNPTiA9IHJlcXVpcmUoJy4vZnJvbUpTT04nKVxubGV0IERvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2N1bWVudCcpXG5sZXQgV2FybmluZyA9IHJlcXVpcmUoJy4vd2FybmluZycpXG5sZXQgQ29tbWVudCA9IHJlcXVpcmUoJy4vY29tbWVudCcpXG5sZXQgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJylcbmxldCBSZXN1bHQgPSByZXF1aXJlKCcuL3Jlc3VsdC5qcycpXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcbmxldCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxubGV0IGxpc3QgPSByZXF1aXJlKCcuL2xpc3QnKVxubGV0IFJ1bGUgPSByZXF1aXJlKCcuL3J1bGUnKVxubGV0IFJvb3QgPSByZXF1aXJlKCcuL3Jvb3QnKVxubGV0IE5vZGUgPSByZXF1aXJlKCcuL25vZGUnKVxuXG5mdW5jdGlvbiBwb3N0Y3NzKC4uLnBsdWdpbnMpIHtcbiAgaWYgKHBsdWdpbnMubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkocGx1Z2luc1swXSkpIHtcbiAgICBwbHVnaW5zID0gcGx1Z2luc1swXVxuICB9XG4gIHJldHVybiBuZXcgUHJvY2Vzc29yKHBsdWdpbnMpXG59XG5cbnBvc3Rjc3MucGx1Z2luID0gZnVuY3Rpb24gcGx1Z2luKG5hbWUsIGluaXRpYWxpemVyKSB7XG4gIGxldCB3YXJuaW5nUHJpbnRlZCA9IGZhbHNlXG4gIGZ1bmN0aW9uIGNyZWF0b3IoLi4uYXJncykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuICYmICF3YXJuaW5nUHJpbnRlZCkge1xuICAgICAgd2FybmluZ1ByaW50ZWQgPSB0cnVlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBuYW1lICtcbiAgICAgICAgICAnOiBwb3N0Y3NzLnBsdWdpbiB3YXMgZGVwcmVjYXRlZC4gTWlncmF0aW9uIGd1aWRlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2V2aWxtYXJ0aWFucy5jb20vY2hyb25pY2xlcy9wb3N0Y3NzLTgtcGx1Z2luLW1pZ3JhdGlvbidcbiAgICAgIClcbiAgICAgIGlmIChwcm9jZXNzLmVudi5MQU5HICYmIHByb2Nlc3MuZW52LkxBTkcuc3RhcnRzV2l0aCgnY24nKSkge1xuICAgICAgICAvKiBjOCBpZ25vcmUgbmV4dCA3ICovXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBuYW1lICtcbiAgICAgICAgICAgICc6IOmHjOmdoiBwb3N0Y3NzLnBsdWdpbiDooqvlvIPnlKguIOi/geenu+aMh+WNlzpcXG4nICtcbiAgICAgICAgICAgICdodHRwczovL3d3dy53M2N0ZWNoLmNvbS90b3BpYy8yMjI2J1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICAgIGxldCB0cmFuc2Zvcm1lciA9IGluaXRpYWxpemVyKC4uLmFyZ3MpXG4gICAgdHJhbnNmb3JtZXIucG9zdGNzc1BsdWdpbiA9IG5hbWVcbiAgICB0cmFuc2Zvcm1lci5wb3N0Y3NzVmVyc2lvbiA9IG5ldyBQcm9jZXNzb3IoKS52ZXJzaW9uXG4gICAgcmV0dXJuIHRyYW5zZm9ybWVyXG4gIH1cblxuICBsZXQgY2FjaGVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0b3IsICdwb3N0Y3NzJywge1xuICAgIGdldCgpIHtcbiAgICAgIGlmICghY2FjaGUpIGNhY2hlID0gY3JlYXRvcigpXG4gICAgICByZXR1cm4gY2FjaGVcbiAgICB9XG4gIH0pXG5cbiAgY3JlYXRvci5wcm9jZXNzID0gZnVuY3Rpb24gKGNzcywgcHJvY2Vzc09wdHMsIHBsdWdpbk9wdHMpIHtcbiAgICByZXR1cm4gcG9zdGNzcyhbY3JlYXRvcihwbHVnaW5PcHRzKV0pLnByb2Nlc3MoY3NzLCBwcm9jZXNzT3B0cylcbiAgfVxuXG4gIHJldHVybiBjcmVhdG9yXG59XG5cbnBvc3Rjc3Muc3RyaW5naWZ5ID0gc3RyaW5naWZ5XG5wb3N0Y3NzLnBhcnNlID0gcGFyc2VcbnBvc3Rjc3MuZnJvbUpTT04gPSBmcm9tSlNPTlxucG9zdGNzcy5saXN0ID0gbGlzdFxuXG5wb3N0Y3NzLmNvbW1lbnQgPSBkZWZhdWx0cyA9PiBuZXcgQ29tbWVudChkZWZhdWx0cylcbnBvc3Rjc3MuYXRSdWxlID0gZGVmYXVsdHMgPT4gbmV3IEF0UnVsZShkZWZhdWx0cylcbnBvc3Rjc3MuZGVjbCA9IGRlZmF1bHRzID0+IG5ldyBEZWNsYXJhdGlvbihkZWZhdWx0cylcbnBvc3Rjc3MucnVsZSA9IGRlZmF1bHRzID0+IG5ldyBSdWxlKGRlZmF1bHRzKVxucG9zdGNzcy5yb290ID0gZGVmYXVsdHMgPT4gbmV3IFJvb3QoZGVmYXVsdHMpXG5wb3N0Y3NzLmRvY3VtZW50ID0gZGVmYXVsdHMgPT4gbmV3IERvY3VtZW50KGRlZmF1bHRzKVxuXG5wb3N0Y3NzLkNzc1N5bnRheEVycm9yID0gQ3NzU3ludGF4RXJyb3JcbnBvc3Rjc3MuRGVjbGFyYXRpb24gPSBEZWNsYXJhdGlvblxucG9zdGNzcy5Db250YWluZXIgPSBDb250YWluZXJcbnBvc3Rjc3MuUHJvY2Vzc29yID0gUHJvY2Vzc29yXG5wb3N0Y3NzLkRvY3VtZW50ID0gRG9jdW1lbnRcbnBvc3Rjc3MuQ29tbWVudCA9IENvbW1lbnRcbnBvc3Rjc3MuV2FybmluZyA9IFdhcm5pbmdcbnBvc3Rjc3MuQXRSdWxlID0gQXRSdWxlXG5wb3N0Y3NzLlJlc3VsdCA9IFJlc3VsdFxucG9zdGNzcy5JbnB1dCA9IElucHV0XG5wb3N0Y3NzLlJ1bGUgPSBSdWxlXG5wb3N0Y3NzLlJvb3QgPSBSb290XG5wb3N0Y3NzLk5vZGUgPSBOb2RlXG5cbkxhenlSZXN1bHQucmVnaXN0ZXJQb3N0Y3NzKHBvc3Rjc3MpXG5cbm1vZHVsZS5leHBvcnRzID0gcG9zdGNzc1xucG9zdGNzcy5kZWZhdWx0ID0gcG9zdGNzc1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCB7IFNvdXJjZU1hcENvbnN1bWVyLCBTb3VyY2VNYXBHZW5lcmF0b3IgfSA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAtanMnKVxubGV0IHsgZXhpc3RzU3luYywgcmVhZEZpbGVTeW5jIH0gPSByZXF1aXJlKCdmcycpXG5sZXQgeyBkaXJuYW1lLCBqb2luIH0gPSByZXF1aXJlKCdwYXRoJylcblxuZnVuY3Rpb24gZnJvbUJhc2U2NChzdHIpIHtcbiAgaWYgKEJ1ZmZlcikge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIsICdiYXNlNjQnKS50b1N0cmluZygpXG4gIH0gZWxzZSB7XG4gICAgLyogYzggaWdub3JlIG5leHQgMiAqL1xuICAgIHJldHVybiB3aW5kb3cuYXRvYihzdHIpXG4gIH1cbn1cblxuY2xhc3MgUHJldmlvdXNNYXAge1xuICBjb25zdHJ1Y3Rvcihjc3MsIG9wdHMpIHtcbiAgICBpZiAob3B0cy5tYXAgPT09IGZhbHNlKSByZXR1cm5cbiAgICB0aGlzLmxvYWRBbm5vdGF0aW9uKGNzcylcbiAgICB0aGlzLmlubGluZSA9IHRoaXMuc3RhcnRXaXRoKHRoaXMuYW5ub3RhdGlvbiwgJ2RhdGE6JylcblxuICAgIGxldCBwcmV2ID0gb3B0cy5tYXAgPyBvcHRzLm1hcC5wcmV2IDogdW5kZWZpbmVkXG4gICAgbGV0IHRleHQgPSB0aGlzLmxvYWRNYXAob3B0cy5mcm9tLCBwcmV2KVxuICAgIGlmICghdGhpcy5tYXBGaWxlICYmIG9wdHMuZnJvbSkge1xuICAgICAgdGhpcy5tYXBGaWxlID0gb3B0cy5mcm9tXG4gICAgfVxuICAgIGlmICh0aGlzLm1hcEZpbGUpIHRoaXMucm9vdCA9IGRpcm5hbWUodGhpcy5tYXBGaWxlKVxuICAgIGlmICh0ZXh0KSB0aGlzLnRleHQgPSB0ZXh0XG4gIH1cblxuICBjb25zdW1lcigpIHtcbiAgICBpZiAoIXRoaXMuY29uc3VtZXJDYWNoZSkge1xuICAgICAgdGhpcy5jb25zdW1lckNhY2hlID0gbmV3IFNvdXJjZU1hcENvbnN1bWVyKHRoaXMudGV4dClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29uc3VtZXJDYWNoZVxuICB9XG5cbiAgd2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuICEhKFxuICAgICAgdGhpcy5jb25zdW1lcigpLnNvdXJjZXNDb250ZW50ICYmXG4gICAgICB0aGlzLmNvbnN1bWVyKCkuc291cmNlc0NvbnRlbnQubGVuZ3RoID4gMFxuICAgIClcbiAgfVxuXG4gIHN0YXJ0V2l0aChzdHJpbmcsIHN0YXJ0KSB7XG4gICAgaWYgKCFzdHJpbmcpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIHN0YXJ0Lmxlbmd0aCkgPT09IHN0YXJ0XG4gIH1cblxuICBnZXRBbm5vdGF0aW9uVVJMKHNvdXJjZU1hcFN0cmluZykge1xuICAgIHJldHVybiBzb3VyY2VNYXBTdHJpbmcucmVwbGFjZSgvXlxcL1xcKlxccyojIHNvdXJjZU1hcHBpbmdVUkw9LywgJycpLnRyaW0oKVxuICB9XG5cbiAgbG9hZEFubm90YXRpb24oY3NzKSB7XG4gICAgbGV0IGNvbW1lbnRzID0gY3NzLm1hdGNoKC9cXC9cXCpcXHMqIyBzb3VyY2VNYXBwaW5nVVJMPS9nbSlcbiAgICBpZiAoIWNvbW1lbnRzKSByZXR1cm5cblxuICAgIC8vIHNvdXJjZU1hcHBpbmdVUkxzIGZyb20gY29tbWVudHMsIHN0cmluZ3MsIGV0Yy5cbiAgICBsZXQgc3RhcnQgPSBjc3MubGFzdEluZGV4T2YoY29tbWVudHMucG9wKCkpXG4gICAgbGV0IGVuZCA9IGNzcy5pbmRleE9mKCcqLycsIHN0YXJ0KVxuXG4gICAgaWYgKHN0YXJ0ID4gLTEgJiYgZW5kID4gLTEpIHtcbiAgICAgIC8vIExvY2F0ZSB0aGUgbGFzdCBzb3VyY2VNYXBwaW5nVVJMIHRvIGF2b2lkIHBpY2tpblxuICAgICAgdGhpcy5hbm5vdGF0aW9uID0gdGhpcy5nZXRBbm5vdGF0aW9uVVJMKGNzcy5zdWJzdHJpbmcoc3RhcnQsIGVuZCkpXG4gICAgfVxuICB9XG5cbiAgZGVjb2RlSW5saW5lKHRleHQpIHtcbiAgICBsZXQgYmFzZUNoYXJzZXRVcmkgPSAvXmRhdGE6YXBwbGljYXRpb25cXC9qc29uO2NoYXJzZXQ9dXRmLT84O2Jhc2U2NCwvXG4gICAgbGV0IGJhc2VVcmkgPSAvXmRhdGE6YXBwbGljYXRpb25cXC9qc29uO2Jhc2U2NCwvXG4gICAgbGV0IGNoYXJzZXRVcmkgPSAvXmRhdGE6YXBwbGljYXRpb25cXC9qc29uO2NoYXJzZXQ9dXRmLT84LC9cbiAgICBsZXQgdXJpID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvbiwvXG5cbiAgICBpZiAoY2hhcnNldFVyaS50ZXN0KHRleHQpIHx8IHVyaS50ZXN0KHRleHQpKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHRleHQuc3Vic3RyKFJlZ0V4cC5sYXN0TWF0Y2gubGVuZ3RoKSlcbiAgICB9XG5cbiAgICBpZiAoYmFzZUNoYXJzZXRVcmkudGVzdCh0ZXh0KSB8fCBiYXNlVXJpLnRlc3QodGV4dCkpIHtcbiAgICAgIHJldHVybiBmcm9tQmFzZTY0KHRleHQuc3Vic3RyKFJlZ0V4cC5sYXN0TWF0Y2gubGVuZ3RoKSlcbiAgICB9XG5cbiAgICBsZXQgZW5jb2RpbmcgPSB0ZXh0Lm1hdGNoKC9kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjsoW14sXSspLC8pWzFdXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzb3VyY2UgbWFwIGVuY29kaW5nICcgKyBlbmNvZGluZylcbiAgfVxuXG4gIGxvYWRGaWxlKHBhdGgpIHtcbiAgICB0aGlzLnJvb3QgPSBkaXJuYW1lKHBhdGgpXG4gICAgaWYgKGV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICAgIHRoaXMubWFwRmlsZSA9IHBhdGhcbiAgICAgIHJldHVybiByZWFkRmlsZVN5bmMocGF0aCwgJ3V0Zi04JykudG9TdHJpbmcoKS50cmltKClcbiAgICB9XG4gIH1cblxuICBsb2FkTWFwKGZpbGUsIHByZXYpIHtcbiAgICBpZiAocHJldiA9PT0gZmFsc2UpIHJldHVybiBmYWxzZVxuXG4gICAgaWYgKHByZXYpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJldiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHByZXZcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHByZXYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgbGV0IHByZXZQYXRoID0gcHJldihmaWxlKVxuICAgICAgICBpZiAocHJldlBhdGgpIHtcbiAgICAgICAgICBsZXQgbWFwID0gdGhpcy5sb2FkRmlsZShwcmV2UGF0aClcbiAgICAgICAgICBpZiAoIW1hcCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAnVW5hYmxlIHRvIGxvYWQgcHJldmlvdXMgc291cmNlIG1hcDogJyArIHByZXZQYXRoLnRvU3RyaW5nKClcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1hcFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByZXYgaW5zdGFuY2VvZiBTb3VyY2VNYXBDb25zdW1lcikge1xuICAgICAgICByZXR1cm4gU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAocHJldikudG9TdHJpbmcoKVxuICAgICAgfSBlbHNlIGlmIChwcmV2IGluc3RhbmNlb2YgU291cmNlTWFwR2VuZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiBwcmV2LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc01hcChwcmV2KSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocHJldilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVW5zdXBwb3J0ZWQgcHJldmlvdXMgc291cmNlIG1hcCBmb3JtYXQ6ICcgKyBwcmV2LnRvU3RyaW5nKClcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5pbmxpbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlY29kZUlubGluZSh0aGlzLmFubm90YXRpb24pXG4gICAgfSBlbHNlIGlmICh0aGlzLmFubm90YXRpb24pIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmFubm90YXRpb25cbiAgICAgIGlmIChmaWxlKSBtYXAgPSBqb2luKGRpcm5hbWUoZmlsZSksIG1hcClcbiAgICAgIHJldHVybiB0aGlzLmxvYWRGaWxlKG1hcClcbiAgICB9XG4gIH1cblxuICBpc01hcChtYXApIHtcbiAgICBpZiAodHlwZW9mIG1hcCAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2YgbWFwLm1hcHBpbmdzID09PSAnc3RyaW5nJyB8fFxuICAgICAgdHlwZW9mIG1hcC5fbWFwcGluZ3MgPT09ICdzdHJpbmcnIHx8XG4gICAgICBBcnJheS5pc0FycmF5KG1hcC5zZWN0aW9ucylcbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcmV2aW91c01hcFxuUHJldmlvdXNNYXAuZGVmYXVsdCA9IFByZXZpb3VzTWFwXG4iLCIndXNlIHN0cmljdCdcblxubGV0IE5vV29ya1Jlc3VsdCA9IHJlcXVpcmUoJy4vbm8td29yay1yZXN1bHQnKVxubGV0IExhenlSZXN1bHQgPSByZXF1aXJlKCcuL2xhenktcmVzdWx0JylcbmxldCBEb2N1bWVudCA9IHJlcXVpcmUoJy4vZG9jdW1lbnQnKVxubGV0IFJvb3QgPSByZXF1aXJlKCcuL3Jvb3QnKVxuXG5jbGFzcyBQcm9jZXNzb3Ige1xuICBjb25zdHJ1Y3RvcihwbHVnaW5zID0gW10pIHtcbiAgICB0aGlzLnZlcnNpb24gPSAnOC40LjE4J1xuICAgIHRoaXMucGx1Z2lucyA9IHRoaXMubm9ybWFsaXplKHBsdWdpbnMpXG4gIH1cblxuICB1c2UocGx1Z2luKSB7XG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5wbHVnaW5zLmNvbmNhdCh0aGlzLm5vcm1hbGl6ZShbcGx1Z2luXSkpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHByb2Nlc3MoY3NzLCBvcHRzID0ge30pIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLnBsdWdpbnMubGVuZ3RoID09PSAwICYmXG4gICAgICB0eXBlb2Ygb3B0cy5wYXJzZXIgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICB0eXBlb2Ygb3B0cy5zdHJpbmdpZmllciA9PT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBvcHRzLnN5bnRheCA9PT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIHJldHVybiBuZXcgTm9Xb3JrUmVzdWx0KHRoaXMsIGNzcywgb3B0cylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBMYXp5UmVzdWx0KHRoaXMsIGNzcywgb3B0cylcbiAgICB9XG4gIH1cblxuICBub3JtYWxpemUocGx1Z2lucykge1xuICAgIGxldCBub3JtYWxpemVkID0gW11cbiAgICBmb3IgKGxldCBpIG9mIHBsdWdpbnMpIHtcbiAgICAgIGlmIChpLnBvc3Rjc3MgPT09IHRydWUpIHtcbiAgICAgICAgaSA9IGkoKVxuICAgICAgfSBlbHNlIGlmIChpLnBvc3Rjc3MpIHtcbiAgICAgICAgaSA9IGkucG9zdGNzc1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoaS5wbHVnaW5zKSkge1xuICAgICAgICBub3JtYWxpemVkID0gbm9ybWFsaXplZC5jb25jYXQoaS5wbHVnaW5zKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgaS5wb3N0Y3NzUGx1Z2luKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQucHVzaChpKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBub3JtYWxpemVkLnB1c2goaSlcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIChpLnBhcnNlIHx8IGkuc3RyaW5naWZ5KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdQb3N0Q1NTIHN5bnRheGVzIGNhbm5vdCBiZSB1c2VkIGFzIHBsdWdpbnMuIEluc3RlYWQsIHBsZWFzZSB1c2UgJyArXG4gICAgICAgICAgICAgICdvbmUgb2YgdGhlIHN5bnRheC9wYXJzZXIvc3RyaW5naWZpZXIgb3B0aW9ucyBhcyBvdXRsaW5lZCAnICtcbiAgICAgICAgICAgICAgJ2luIHlvdXIgUG9zdENTUyBydW5uZXIgZG9jdW1lbnRhdGlvbi4nXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaSArICcgaXMgbm90IGEgUG9zdENTUyBwbHVnaW4nKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9ybWFsaXplZFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvY2Vzc29yXG5Qcm9jZXNzb3IuZGVmYXVsdCA9IFByb2Nlc3NvclxuXG5Sb290LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbkRvY3VtZW50LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbiIsIid1c2Ugc3RyaWN0J1xuXG5sZXQgV2FybmluZyA9IHJlcXVpcmUoJy4vd2FybmluZycpXG5cbmNsYXNzIFJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKHByb2Nlc3Nvciwgcm9vdCwgb3B0cykge1xuICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yXG4gICAgdGhpcy5tZXNzYWdlcyA9IFtdXG4gICAgdGhpcy5yb290ID0gcm9vdFxuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgICB0aGlzLmNzcyA9IHVuZGVmaW5lZFxuICAgIHRoaXMubWFwID0gdW5kZWZpbmVkXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5jc3NcbiAgfVxuXG4gIHdhcm4odGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKCFvcHRzLnBsdWdpbikge1xuICAgICAgaWYgKHRoaXMubGFzdFBsdWdpbiAmJiB0aGlzLmxhc3RQbHVnaW4ucG9zdGNzc1BsdWdpbikge1xuICAgICAgICBvcHRzLnBsdWdpbiA9IHRoaXMubGFzdFBsdWdpbi5wb3N0Y3NzUGx1Z2luXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHdhcm5pbmcgPSBuZXcgV2FybmluZyh0ZXh0LCBvcHRzKVxuICAgIHRoaXMubWVzc2FnZXMucHVzaCh3YXJuaW5nKVxuXG4gICAgcmV0dXJuIHdhcm5pbmdcbiAgfVxuXG4gIHdhcm5pbmdzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VzLmZpbHRlcihpID0+IGkudHlwZSA9PT0gJ3dhcm5pbmcnKVxuICB9XG5cbiAgZ2V0IGNvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bHRcblJlc3VsdC5kZWZhdWx0ID0gUmVzdWx0XG4iLCIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBSb290IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAncm9vdCdcbiAgICBpZiAoIXRoaXMubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQsIGlnbm9yZSkge1xuICAgIGxldCBpbmRleCA9IHRoaXMuaW5kZXgoY2hpbGQpXG5cbiAgICBpZiAoIWlnbm9yZSAmJiBpbmRleCA9PT0gMCAmJiB0aGlzLm5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRoaXMubm9kZXNbMV0ucmF3cy5iZWZvcmUgPSB0aGlzLm5vZGVzW2luZGV4XS5yYXdzLmJlZm9yZVxuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5yZW1vdmVDaGlsZChjaGlsZClcbiAgfVxuXG4gIG5vcm1hbGl6ZShjaGlsZCwgc2FtcGxlLCB0eXBlKSB7XG4gICAgbGV0IG5vZGVzID0gc3VwZXIubm9ybWFsaXplKGNoaWxkKVxuXG4gICAgaWYgKHNhbXBsZSkge1xuICAgICAgaWYgKHR5cGUgPT09ICdwcmVwZW5kJykge1xuICAgICAgICBpZiAodGhpcy5ub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgc2FtcGxlLnJhd3MuYmVmb3JlID0gdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBzYW1wbGUucmF3cy5iZWZvcmVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmZpcnN0ICE9PSBzYW1wbGUpIHtcbiAgICAgICAgZm9yIChsZXQgbm9kZSBvZiBub2Rlcykge1xuICAgICAgICAgIG5vZGUucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2Rlc1xuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KClcbiAgfVxufVxuXG5Sb290LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuUm9vdC5yZWdpc3RlclByb2Nlc3NvciA9IGRlcGVuZGFudCA9PiB7XG4gIFByb2Nlc3NvciA9IGRlcGVuZGFudFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3RcblJvb3QuZGVmYXVsdCA9IFJvb3RcblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdChSb290KVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmxldCBDb250YWluZXIgPSByZXF1aXJlKCcuL2NvbnRhaW5lcicpXG5sZXQgbGlzdCA9IHJlcXVpcmUoJy4vbGlzdCcpXG5cbmNsYXNzIFJ1bGUgZXh0ZW5kcyBDb250YWluZXIge1xuICBjb25zdHJ1Y3RvcihkZWZhdWx0cykge1xuICAgIHN1cGVyKGRlZmF1bHRzKVxuICAgIHRoaXMudHlwZSA9ICdydWxlJ1xuICAgIGlmICghdGhpcy5ub2RlcykgdGhpcy5ub2RlcyA9IFtdXG4gIH1cblxuICBnZXQgc2VsZWN0b3JzKCkge1xuICAgIHJldHVybiBsaXN0LmNvbW1hKHRoaXMuc2VsZWN0b3IpXG4gIH1cblxuICBzZXQgc2VsZWN0b3JzKHZhbHVlcykge1xuICAgIGxldCBtYXRjaCA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yLm1hdGNoKC8sXFxzKi8pIDogbnVsbFxuICAgIGxldCBzZXAgPSBtYXRjaCA/IG1hdGNoWzBdIDogJywnICsgdGhpcy5yYXcoJ2JldHdlZW4nLCAnYmVmb3JlT3BlbicpXG4gICAgdGhpcy5zZWxlY3RvciA9IHZhbHVlcy5qb2luKHNlcClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bGVcblJ1bGUuZGVmYXVsdCA9IFJ1bGVcblxuQ29udGFpbmVyLnJlZ2lzdGVyUnVsZShSdWxlKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IERFRkFVTFRfUkFXID0ge1xuICBjb2xvbjogJzogJyxcbiAgaW5kZW50OiAnICAgICcsXG4gIGJlZm9yZURlY2w6ICdcXG4nLFxuICBiZWZvcmVSdWxlOiAnXFxuJyxcbiAgYmVmb3JlT3BlbjogJyAnLFxuICBiZWZvcmVDbG9zZTogJ1xcbicsXG4gIGJlZm9yZUNvbW1lbnQ6ICdcXG4nLFxuICBhZnRlcjogJ1xcbicsXG4gIGVtcHR5Qm9keTogJycsXG4gIGNvbW1lbnRMZWZ0OiAnICcsXG4gIGNvbW1lbnRSaWdodDogJyAnLFxuICBzZW1pY29sb246IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufVxuXG5jbGFzcyBTdHJpbmdpZmllciB7XG4gIGNvbnN0cnVjdG9yKGJ1aWxkZXIpIHtcbiAgICB0aGlzLmJ1aWxkZXIgPSBidWlsZGVyXG4gIH1cblxuICBzdHJpbmdpZnkobm9kZSwgc2VtaWNvbG9uKSB7XG4gICAgLyogYzggaWdub3JlIHN0YXJ0ICovXG4gICAgaWYgKCF0aGlzW25vZGUudHlwZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1Vua25vd24gQVNUIG5vZGUgdHlwZSAnICtcbiAgICAgICAgICBub2RlLnR5cGUgK1xuICAgICAgICAgICcuICcgK1xuICAgICAgICAgICdNYXliZSB5b3UgbmVlZCB0byBjaGFuZ2UgUG9zdENTUyBzdHJpbmdpZmllci4nXG4gICAgICApXG4gICAgfVxuICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXG4gICAgdGhpc1tub2RlLnR5cGVdKG5vZGUsIHNlbWljb2xvbilcbiAgfVxuXG4gIGRvY3VtZW50KG5vZGUpIHtcbiAgICB0aGlzLmJvZHkobm9kZSlcbiAgfVxuXG4gIHJvb3Qobm9kZSkge1xuICAgIHRoaXMuYm9keShub2RlKVxuICAgIGlmIChub2RlLnJhd3MuYWZ0ZXIpIHRoaXMuYnVpbGRlcihub2RlLnJhd3MuYWZ0ZXIpXG4gIH1cblxuICBjb21tZW50KG5vZGUpIHtcbiAgICBsZXQgbGVmdCA9IHRoaXMucmF3KG5vZGUsICdsZWZ0JywgJ2NvbW1lbnRMZWZ0JylcbiAgICBsZXQgcmlnaHQgPSB0aGlzLnJhdyhub2RlLCAncmlnaHQnLCAnY29tbWVudFJpZ2h0JylcbiAgICB0aGlzLmJ1aWxkZXIoJy8qJyArIGxlZnQgKyBub2RlLnRleHQgKyByaWdodCArICcqLycsIG5vZGUpXG4gIH1cblxuICBkZWNsKG5vZGUsIHNlbWljb2xvbikge1xuICAgIGxldCBiZXR3ZWVuID0gdGhpcy5yYXcobm9kZSwgJ2JldHdlZW4nLCAnY29sb24nKVxuICAgIGxldCBzdHJpbmcgPSBub2RlLnByb3AgKyBiZXR3ZWVuICsgdGhpcy5yYXdWYWx1ZShub2RlLCAndmFsdWUnKVxuXG4gICAgaWYgKG5vZGUuaW1wb3J0YW50KSB7XG4gICAgICBzdHJpbmcgKz0gbm9kZS5yYXdzLmltcG9ydGFudCB8fCAnICFpbXBvcnRhbnQnXG4gICAgfVxuXG4gICAgaWYgKHNlbWljb2xvbikgc3RyaW5nICs9ICc7J1xuICAgIHRoaXMuYnVpbGRlcihzdHJpbmcsIG5vZGUpXG4gIH1cblxuICBydWxlKG5vZGUpIHtcbiAgICB0aGlzLmJsb2NrKG5vZGUsIHRoaXMucmF3VmFsdWUobm9kZSwgJ3NlbGVjdG9yJykpXG4gICAgaWYgKG5vZGUucmF3cy5vd25TZW1pY29sb24pIHtcbiAgICAgIHRoaXMuYnVpbGRlcihub2RlLnJhd3Mub3duU2VtaWNvbG9uLCBub2RlLCAnZW5kJylcbiAgICB9XG4gIH1cblxuICBhdHJ1bGUobm9kZSwgc2VtaWNvbG9uKSB7XG4gICAgbGV0IG5hbWUgPSAnQCcgKyBub2RlLm5hbWVcbiAgICBsZXQgcGFyYW1zID0gbm9kZS5wYXJhbXMgPyB0aGlzLnJhd1ZhbHVlKG5vZGUsICdwYXJhbXMnKSA6ICcnXG5cbiAgICBpZiAodHlwZW9mIG5vZGUucmF3cy5hZnRlck5hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBuYW1lICs9IG5vZGUucmF3cy5hZnRlck5hbWVcbiAgICB9IGVsc2UgaWYgKHBhcmFtcykge1xuICAgICAgbmFtZSArPSAnICdcbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2Rlcykge1xuICAgICAgdGhpcy5ibG9jayhub2RlLCBuYW1lICsgcGFyYW1zKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZW5kID0gKG5vZGUucmF3cy5iZXR3ZWVuIHx8ICcnKSArIChzZW1pY29sb24gPyAnOycgOiAnJylcbiAgICAgIHRoaXMuYnVpbGRlcihuYW1lICsgcGFyYW1zICsgZW5kLCBub2RlKVxuICAgIH1cbiAgfVxuXG4gIGJvZHkobm9kZSkge1xuICAgIGxldCBsYXN0ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxXG4gICAgd2hpbGUgKGxhc3QgPiAwKSB7XG4gICAgICBpZiAobm9kZS5ub2Rlc1tsYXN0XS50eXBlICE9PSAnY29tbWVudCcpIGJyZWFrXG4gICAgICBsYXN0IC09IDFcbiAgICB9XG5cbiAgICBsZXQgc2VtaWNvbG9uID0gdGhpcy5yYXcobm9kZSwgJ3NlbWljb2xvbicpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY2hpbGQgPSBub2RlLm5vZGVzW2ldXG4gICAgICBsZXQgYmVmb3JlID0gdGhpcy5yYXcoY2hpbGQsICdiZWZvcmUnKVxuICAgICAgaWYgKGJlZm9yZSkgdGhpcy5idWlsZGVyKGJlZm9yZSlcbiAgICAgIHRoaXMuc3RyaW5naWZ5KGNoaWxkLCBsYXN0ICE9PSBpIHx8IHNlbWljb2xvbilcbiAgICB9XG4gIH1cblxuICBibG9jayhub2RlLCBzdGFydCkge1xuICAgIGxldCBiZXR3ZWVuID0gdGhpcy5yYXcobm9kZSwgJ2JldHdlZW4nLCAnYmVmb3JlT3BlbicpXG4gICAgdGhpcy5idWlsZGVyKHN0YXJ0ICsgYmV0d2VlbiArICd7Jywgbm9kZSwgJ3N0YXJ0JylcblxuICAgIGxldCBhZnRlclxuICAgIGlmIChub2RlLm5vZGVzICYmIG5vZGUubm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmJvZHkobm9kZSlcbiAgICAgIGFmdGVyID0gdGhpcy5yYXcobm9kZSwgJ2FmdGVyJylcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXIgPSB0aGlzLnJhdyhub2RlLCAnYWZ0ZXInLCAnZW1wdHlCb2R5JylcbiAgICB9XG5cbiAgICBpZiAoYWZ0ZXIpIHRoaXMuYnVpbGRlcihhZnRlcilcbiAgICB0aGlzLmJ1aWxkZXIoJ30nLCBub2RlLCAnZW5kJylcbiAgfVxuXG4gIHJhdyhub2RlLCBvd24sIGRldGVjdCkge1xuICAgIGxldCB2YWx1ZVxuICAgIGlmICghZGV0ZWN0KSBkZXRlY3QgPSBvd25cblxuICAgIC8vIEFscmVhZHkgaGFkXG4gICAgaWYgKG93bikge1xuICAgICAgdmFsdWUgPSBub2RlLnJhd3Nbb3duXVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIGxldCBwYXJlbnQgPSBub2RlLnBhcmVudFxuXG4gICAgaWYgKGRldGVjdCA9PT0gJ2JlZm9yZScpIHtcbiAgICAgIC8vIEhhY2sgZm9yIGZpcnN0IHJ1bGUgaW4gQ1NTXG4gICAgICBpZiAoIXBhcmVudCB8fCAocGFyZW50LnR5cGUgPT09ICdyb290JyAmJiBwYXJlbnQuZmlyc3QgPT09IG5vZGUpKSB7XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfVxuXG4gICAgICAvLyBgcm9vdGAgbm9kZXMgaW4gYGRvY3VtZW50YCBzaG91bGQgdXNlIG9ubHkgdGhlaXIgb3duIHJhd3NcbiAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09ICdkb2N1bWVudCcpIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmxvYXRpbmcgY2hpbGQgd2l0aG91dCBwYXJlbnRcbiAgICBpZiAoIXBhcmVudCkgcmV0dXJuIERFRkFVTFRfUkFXW2RldGVjdF1cblxuICAgIC8vIERldGVjdCBzdHlsZSBieSBvdGhlciBub2Rlc1xuICAgIGxldCByb290ID0gbm9kZS5yb290KClcbiAgICBpZiAoIXJvb3QucmF3Q2FjaGUpIHJvb3QucmF3Q2FjaGUgPSB7fVxuICAgIGlmICh0eXBlb2Ygcm9vdC5yYXdDYWNoZVtkZXRlY3RdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHJvb3QucmF3Q2FjaGVbZGV0ZWN0XVxuICAgIH1cblxuICAgIGlmIChkZXRlY3QgPT09ICdiZWZvcmUnIHx8IGRldGVjdCA9PT0gJ2FmdGVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuYmVmb3JlQWZ0ZXIobm9kZSwgZGV0ZWN0KVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbWV0aG9kID0gJ3JhdycgKyBjYXBpdGFsaXplKGRldGVjdClcbiAgICAgIGlmICh0aGlzW21ldGhvZF0pIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzW21ldGhvZF0ocm9vdCwgbm9kZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Qud2FsayhpID0+IHtcbiAgICAgICAgICB2YWx1ZSA9IGkucmF3c1tvd25dXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB2YWx1ZSA9IERFRkFVTFRfUkFXW2RldGVjdF1cblxuICAgIHJvb3QucmF3Q2FjaGVbZGV0ZWN0XSA9IHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICByYXdTZW1pY29sb24ocm9vdCkge1xuICAgIGxldCB2YWx1ZVxuICAgIHJvb3Qud2FsayhpID0+IHtcbiAgICAgIGlmIChpLm5vZGVzICYmIGkubm9kZXMubGVuZ3RoICYmIGkubGFzdC50eXBlID09PSAnZGVjbCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3Muc2VtaWNvbG9uXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgcmF3RW1wdHlCb2R5KHJvb3QpIHtcbiAgICBsZXQgdmFsdWVcbiAgICByb290LndhbGsoaSA9PiB7XG4gICAgICBpZiAoaS5ub2RlcyAmJiBpLm5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IGkucmF3cy5hZnRlclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHJhd0luZGVudChyb290KSB7XG4gICAgaWYgKHJvb3QucmF3cy5pbmRlbnQpIHJldHVybiByb290LnJhd3MuaW5kZW50XG4gICAgbGV0IHZhbHVlXG4gICAgcm9vdC53YWxrKGkgPT4ge1xuICAgICAgbGV0IHAgPSBpLnBhcmVudFxuICAgICAgaWYgKHAgJiYgcCAhPT0gcm9vdCAmJiBwLnBhcmVudCAmJiBwLnBhcmVudCA9PT0gcm9vdCkge1xuICAgICAgICBpZiAodHlwZW9mIGkucmF3cy5iZWZvcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgbGV0IHBhcnRzID0gaS5yYXdzLmJlZm9yZS5zcGxpdCgnXFxuJylcbiAgICAgICAgICB2YWx1ZSA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFMvZywgJycpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgcmF3QmVmb3JlQ29tbWVudChyb290LCBub2RlKSB7XG4gICAgbGV0IHZhbHVlXG4gICAgcm9vdC53YWxrQ29tbWVudHMoaSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGkucmF3cy5iZWZvcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhbHVlID0gaS5yYXdzLmJlZm9yZVxuICAgICAgICBpZiAodmFsdWUuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcbl0rJC8sICcnKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5yYXcobm9kZSwgbnVsbCwgJ2JlZm9yZURlY2wnKVxuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxTL2csICcnKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHJhd0JlZm9yZURlY2wocm9vdCwgbm9kZSkge1xuICAgIGxldCB2YWx1ZVxuICAgIHJvb3Qud2Fsa0RlY2xzKGkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YWx1ZSA9IGkucmF3cy5iZWZvcmVcbiAgICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW15cXG5dKyQvLCAnJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVSdWxlJylcbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcUy9nLCAnJylcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICByYXdCZWZvcmVSdWxlKHJvb3QpIHtcbiAgICBsZXQgdmFsdWVcbiAgICByb290LndhbGsoaSA9PiB7XG4gICAgICBpZiAoaS5ub2RlcyAmJiAoaS5wYXJlbnQgIT09IHJvb3QgfHwgcm9vdC5maXJzdCAhPT0gaSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gaS5yYXdzLmJlZm9yZVxuICAgICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW15cXG5dKyQvLCAnJylcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICh2YWx1ZSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFMvZywgJycpXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICByYXdCZWZvcmVDbG9zZShyb290KSB7XG4gICAgbGV0IHZhbHVlXG4gICAgcm9vdC53YWxrKGkgPT4ge1xuICAgICAgaWYgKGkubm9kZXMgJiYgaS5ub2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmFmdGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gaS5yYXdzLmFmdGVyXG4gICAgICAgICAgaWYgKHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcbl0rJC8sICcnKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgaWYgKHZhbHVlKSB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcUy9nLCAnJylcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHJhd0JlZm9yZU9wZW4ocm9vdCkge1xuICAgIGxldCB2YWx1ZVxuICAgIHJvb3Qud2FsayhpID0+IHtcbiAgICAgIGlmIChpLnR5cGUgIT09ICdkZWNsJykge1xuICAgICAgICB2YWx1ZSA9IGkucmF3cy5iZXR3ZWVuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgcmF3Q29sb24ocm9vdCkge1xuICAgIGxldCB2YWx1ZVxuICAgIHJvb3Qud2Fsa0RlY2xzKGkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmV0d2VlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3MuYmV0d2Vlbi5yZXBsYWNlKC9bXlxcczpdL2csICcnKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgYmVmb3JlQWZ0ZXIobm9kZSwgZGV0ZWN0KSB7XG4gICAgbGV0IHZhbHVlXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ2RlY2wnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVEZWNsJylcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbW1lbnQnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVDb21tZW50JylcbiAgICB9IGVsc2UgaWYgKGRldGVjdCA9PT0gJ2JlZm9yZScpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5yYXcobm9kZSwgbnVsbCwgJ2JlZm9yZVJ1bGUnKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVDbG9zZScpXG4gICAgfVxuXG4gICAgbGV0IGJ1ZiA9IG5vZGUucGFyZW50XG4gICAgbGV0IGRlcHRoID0gMFxuICAgIHdoaWxlIChidWYgJiYgYnVmLnR5cGUgIT09ICdyb290Jykge1xuICAgICAgZGVwdGggKz0gMVxuICAgICAgYnVmID0gYnVmLnBhcmVudFxuICAgIH1cblxuICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgIGxldCBpbmRlbnQgPSB0aGlzLnJhdyhub2RlLCBudWxsLCAnaW5kZW50JylcbiAgICAgIGlmIChpbmRlbnQubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IHN0ZXAgPSAwOyBzdGVwIDwgZGVwdGg7IHN0ZXArKykgdmFsdWUgKz0gaW5kZW50XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICByYXdWYWx1ZShub2RlLCBwcm9wKSB7XG4gICAgbGV0IHZhbHVlID0gbm9kZVtwcm9wXVxuICAgIGxldCByYXcgPSBub2RlLnJhd3NbcHJvcF1cbiAgICBpZiAocmF3ICYmIHJhdy52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiByYXcucmF3XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmdpZmllclxuU3RyaW5naWZpZXIuZGVmYXVsdCA9IFN0cmluZ2lmaWVyXG4iLCIndXNlIHN0cmljdCdcblxubGV0IFN0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9zdHJpbmdpZmllcicpXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBidWlsZGVyKSB7XG4gIGxldCBzdHIgPSBuZXcgU3RyaW5naWZpZXIoYnVpbGRlcilcbiAgc3RyLnN0cmluZ2lmeShub2RlKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeVxuc3RyaW5naWZ5LmRlZmF1bHQgPSBzdHJpbmdpZnlcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cy5pc0NsZWFuID0gU3ltYm9sKCdpc0NsZWFuJylcblxubW9kdWxlLmV4cG9ydHMubXkgPSBTeW1ib2woJ215JylcbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBTSU5HTEVfUVVPVEUgPSBcIidcIi5jaGFyQ29kZUF0KDApXG5jb25zdCBET1VCTEVfUVVPVEUgPSAnXCInLmNoYXJDb2RlQXQoMClcbmNvbnN0IEJBQ0tTTEFTSCA9ICdcXFxcJy5jaGFyQ29kZUF0KDApXG5jb25zdCBTTEFTSCA9ICcvJy5jaGFyQ29kZUF0KDApXG5jb25zdCBORVdMSU5FID0gJ1xcbicuY2hhckNvZGVBdCgwKVxuY29uc3QgU1BBQ0UgPSAnICcuY2hhckNvZGVBdCgwKVxuY29uc3QgRkVFRCA9ICdcXGYnLmNoYXJDb2RlQXQoMClcbmNvbnN0IFRBQiA9ICdcXHQnLmNoYXJDb2RlQXQoMClcbmNvbnN0IENSID0gJ1xccicuY2hhckNvZGVBdCgwKVxuY29uc3QgT1BFTl9TUVVBUkUgPSAnWycuY2hhckNvZGVBdCgwKVxuY29uc3QgQ0xPU0VfU1FVQVJFID0gJ10nLmNoYXJDb2RlQXQoMClcbmNvbnN0IE9QRU5fUEFSRU5USEVTRVMgPSAnKCcuY2hhckNvZGVBdCgwKVxuY29uc3QgQ0xPU0VfUEFSRU5USEVTRVMgPSAnKScuY2hhckNvZGVBdCgwKVxuY29uc3QgT1BFTl9DVVJMWSA9ICd7Jy5jaGFyQ29kZUF0KDApXG5jb25zdCBDTE9TRV9DVVJMWSA9ICd9Jy5jaGFyQ29kZUF0KDApXG5jb25zdCBTRU1JQ09MT04gPSAnOycuY2hhckNvZGVBdCgwKVxuY29uc3QgQVNURVJJU0sgPSAnKicuY2hhckNvZGVBdCgwKVxuY29uc3QgQ09MT04gPSAnOicuY2hhckNvZGVBdCgwKVxuY29uc3QgQVQgPSAnQCcuY2hhckNvZGVBdCgwKVxuXG5jb25zdCBSRV9BVF9FTkQgPSAvW1xcdFxcblxcZlxcciBcIiMnKCkvO1tcXFxcXFxde31dL2dcbmNvbnN0IFJFX1dPUkRfRU5EID0gL1tcXHRcXG5cXGZcXHIgIVwiIycoKTo7QFtcXFxcXFxde31dfFxcLyg/PVxcKikvZ1xuY29uc3QgUkVfQkFEX0JSQUNLRVQgPSAvLltcXG5cIicoL1xcXFxdL1xuY29uc3QgUkVfSEVYX0VTQ0FQRSA9IC9bXFxkYS1mXS9pXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdG9rZW5pemVyKGlucHV0LCBvcHRpb25zID0ge30pIHtcbiAgbGV0IGNzcyA9IGlucHV0LmNzcy52YWx1ZU9mKClcbiAgbGV0IGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlRXJyb3JzXG5cbiAgbGV0IGNvZGUsIG5leHQsIHF1b3RlLCBjb250ZW50LCBlc2NhcGVcbiAgbGV0IGVzY2FwZWQsIGVzY2FwZVBvcywgcHJldiwgbiwgY3VycmVudFRva2VuXG5cbiAgbGV0IGxlbmd0aCA9IGNzcy5sZW5ndGhcbiAgbGV0IHBvcyA9IDBcbiAgbGV0IGJ1ZmZlciA9IFtdXG4gIGxldCByZXR1cm5lZCA9IFtdXG5cbiAgZnVuY3Rpb24gcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHBvc1xuICB9XG5cbiAgZnVuY3Rpb24gdW5jbG9zZWQod2hhdCkge1xuICAgIHRocm93IGlucHV0LmVycm9yKCdVbmNsb3NlZCAnICsgd2hhdCwgcG9zKVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kT2ZGaWxlKCkge1xuICAgIHJldHVybiByZXR1cm5lZC5sZW5ndGggPT09IDAgJiYgcG9zID49IGxlbmd0aFxuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFRva2VuKG9wdHMpIHtcbiAgICBpZiAocmV0dXJuZWQubGVuZ3RoKSByZXR1cm4gcmV0dXJuZWQucG9wKClcbiAgICBpZiAocG9zID49IGxlbmd0aCkgcmV0dXJuXG5cbiAgICBsZXQgaWdub3JlVW5jbG9zZWQgPSBvcHRzID8gb3B0cy5pZ25vcmVVbmNsb3NlZCA6IGZhbHNlXG5cbiAgICBjb2RlID0gY3NzLmNoYXJDb2RlQXQocG9zKVxuXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIE5FV0xJTkU6XG4gICAgICBjYXNlIFNQQUNFOlxuICAgICAgY2FzZSBUQUI6XG4gICAgICBjYXNlIENSOlxuICAgICAgY2FzZSBGRUVEOiB7XG4gICAgICAgIG5leHQgPSBwb3NcbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5leHQgKz0gMVxuICAgICAgICAgIGNvZGUgPSBjc3MuY2hhckNvZGVBdChuZXh0KVxuICAgICAgICB9IHdoaWxlIChcbiAgICAgICAgICBjb2RlID09PSBTUEFDRSB8fFxuICAgICAgICAgIGNvZGUgPT09IE5FV0xJTkUgfHxcbiAgICAgICAgICBjb2RlID09PSBUQUIgfHxcbiAgICAgICAgICBjb2RlID09PSBDUiB8fFxuICAgICAgICAgIGNvZGUgPT09IEZFRURcbiAgICAgICAgKVxuXG4gICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnc3BhY2UnLCBjc3Muc2xpY2UocG9zLCBuZXh0KV1cbiAgICAgICAgcG9zID0gbmV4dCAtIDFcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBPUEVOX1NRVUFSRTpcbiAgICAgIGNhc2UgQ0xPU0VfU1FVQVJFOlxuICAgICAgY2FzZSBPUEVOX0NVUkxZOlxuICAgICAgY2FzZSBDTE9TRV9DVVJMWTpcbiAgICAgIGNhc2UgQ09MT046XG4gICAgICBjYXNlIFNFTUlDT0xPTjpcbiAgICAgIGNhc2UgQ0xPU0VfUEFSRU5USEVTRVM6IHtcbiAgICAgICAgbGV0IGNvbnRyb2xDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbY29udHJvbENoYXIsIGNvbnRyb2xDaGFyLCBwb3NdXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgT1BFTl9QQVJFTlRIRVNFUzoge1xuICAgICAgICBwcmV2ID0gYnVmZmVyLmxlbmd0aCA/IGJ1ZmZlci5wb3AoKVsxXSA6ICcnXG4gICAgICAgIG4gPSBjc3MuY2hhckNvZGVBdChwb3MgKyAxKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJldiA9PT0gJ3VybCcgJiZcbiAgICAgICAgICBuICE9PSBTSU5HTEVfUVVPVEUgJiZcbiAgICAgICAgICBuICE9PSBET1VCTEVfUVVPVEUgJiZcbiAgICAgICAgICBuICE9PSBTUEFDRSAmJlxuICAgICAgICAgIG4gIT09IE5FV0xJTkUgJiZcbiAgICAgICAgICBuICE9PSBUQUIgJiZcbiAgICAgICAgICBuICE9PSBGRUVEICYmXG4gICAgICAgICAgbiAhPT0gQ1JcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmV4dCA9IHBvc1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZVxuICAgICAgICAgICAgbmV4dCA9IGNzcy5pbmRleE9mKCcpJywgbmV4dCArIDEpXG4gICAgICAgICAgICBpZiAobmV4dCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgaWYgKGlnbm9yZSB8fCBpZ25vcmVVbmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIG5leHQgPSBwb3NcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVuY2xvc2VkKCdicmFja2V0JylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXNjYXBlUG9zID0gbmV4dFxuICAgICAgICAgICAgd2hpbGUgKGNzcy5jaGFyQ29kZUF0KGVzY2FwZVBvcyAtIDEpID09PSBCQUNLU0xBU0gpIHtcbiAgICAgICAgICAgICAgZXNjYXBlUG9zIC09IDFcbiAgICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoZXNjYXBlZClcblxuICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnYnJhY2tldHMnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIHBvcywgbmV4dF1cblxuICAgICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0ID0gY3NzLmluZGV4T2YoJyknLCBwb3MgKyAxKVxuICAgICAgICAgIGNvbnRlbnQgPSBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSlcblxuICAgICAgICAgIGlmIChuZXh0ID09PSAtMSB8fCBSRV9CQURfQlJBQ0tFVC50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICBjdXJyZW50VG9rZW4gPSBbJygnLCAnKCcsIHBvc11cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFRva2VuID0gWydicmFja2V0cycsIGNvbnRlbnQsIHBvcywgbmV4dF1cbiAgICAgICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlIFNJTkdMRV9RVU9URTpcbiAgICAgIGNhc2UgRE9VQkxFX1FVT1RFOiB7XG4gICAgICAgIHF1b3RlID0gY29kZSA9PT0gU0lOR0xFX1FVT1RFID8gXCInXCIgOiAnXCInXG4gICAgICAgIG5leHQgPSBwb3NcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZVxuICAgICAgICAgIG5leHQgPSBjc3MuaW5kZXhPZihxdW90ZSwgbmV4dCArIDEpXG4gICAgICAgICAgaWYgKG5leHQgPT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoaWdub3JlIHx8IGlnbm9yZVVuY2xvc2VkKSB7XG4gICAgICAgICAgICAgIG5leHQgPSBwb3MgKyAxXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bmNsb3NlZCgnc3RyaW5nJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZXNjYXBlUG9zID0gbmV4dFxuICAgICAgICAgIHdoaWxlIChjc3MuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gQkFDS1NMQVNIKSB7XG4gICAgICAgICAgICBlc2NhcGVQb3MgLT0gMVxuICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkXG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChlc2NhcGVkKVxuXG4gICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnc3RyaW5nJywgY3NzLnNsaWNlKHBvcywgbmV4dCArIDEpLCBwb3MsIG5leHRdXG4gICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSBBVDoge1xuICAgICAgICBSRV9BVF9FTkQubGFzdEluZGV4ID0gcG9zICsgMVxuICAgICAgICBSRV9BVF9FTkQudGVzdChjc3MpXG4gICAgICAgIGlmIChSRV9BVF9FTkQubGFzdEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgbmV4dCA9IGNzcy5sZW5ndGggLSAxXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IFJFX0FUX0VORC5sYXN0SW5kZXggLSAyXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ2F0LXdvcmQnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIHBvcywgbmV4dF1cblxuICAgICAgICBwb3MgPSBuZXh0XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgQkFDS1NMQVNIOiB7XG4gICAgICAgIG5leHQgPSBwb3NcbiAgICAgICAgZXNjYXBlID0gdHJ1ZVxuICAgICAgICB3aGlsZSAoY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpID09PSBCQUNLU0xBU0gpIHtcbiAgICAgICAgICBuZXh0ICs9IDFcbiAgICAgICAgICBlc2NhcGUgPSAhZXNjYXBlXG4gICAgICAgIH1cbiAgICAgICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KG5leHQgKyAxKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgZXNjYXBlICYmXG4gICAgICAgICAgY29kZSAhPT0gU0xBU0ggJiZcbiAgICAgICAgICBjb2RlICE9PSBTUEFDRSAmJlxuICAgICAgICAgIGNvZGUgIT09IE5FV0xJTkUgJiZcbiAgICAgICAgICBjb2RlICE9PSBUQUIgJiZcbiAgICAgICAgICBjb2RlICE9PSBDUiAmJlxuICAgICAgICAgIGNvZGUgIT09IEZFRURcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmV4dCArPSAxXG4gICAgICAgICAgaWYgKFJFX0hFWF9FU0NBUEUudGVzdChjc3MuY2hhckF0KG5leHQpKSkge1xuICAgICAgICAgICAgd2hpbGUgKFJFX0hFWF9FU0NBUEUudGVzdChjc3MuY2hhckF0KG5leHQgKyAxKSkpIHtcbiAgICAgICAgICAgICAgbmV4dCArPSAxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpID09PSBTUEFDRSkge1xuICAgICAgICAgICAgICBuZXh0ICs9IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ3dvcmQnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIHBvcywgbmV4dF1cblxuICAgICAgICBwb3MgPSBuZXh0XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKGNvZGUgPT09IFNMQVNIICYmIGNzcy5jaGFyQ29kZUF0KHBvcyArIDEpID09PSBBU1RFUklTSykge1xuICAgICAgICAgIG5leHQgPSBjc3MuaW5kZXhPZignKi8nLCBwb3MgKyAyKSArIDFcbiAgICAgICAgICBpZiAobmV4dCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGlnbm9yZSB8fCBpZ25vcmVVbmNsb3NlZCkge1xuICAgICAgICAgICAgICBuZXh0ID0gY3NzLmxlbmd0aFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdW5jbG9zZWQoJ2NvbW1lbnQnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnY29tbWVudCcsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgcG9zLCBuZXh0XVxuICAgICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSRV9XT1JEX0VORC5sYXN0SW5kZXggPSBwb3MgKyAxXG4gICAgICAgICAgUkVfV09SRF9FTkQudGVzdChjc3MpXG4gICAgICAgICAgaWYgKFJFX1dPUkRfRU5ELmxhc3RJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgbmV4dCA9IGNzcy5sZW5ndGggLSAxXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQgPSBSRV9XT1JEX0VORC5sYXN0SW5kZXggLSAyXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFRva2VuID0gWyd3b3JkJywgY3NzLnNsaWNlKHBvcywgbmV4dCArIDEpLCBwb3MsIG5leHRdXG4gICAgICAgICAgYnVmZmVyLnB1c2goY3VycmVudFRva2VuKVxuICAgICAgICAgIHBvcyA9IG5leHRcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgcG9zKytcbiAgICByZXR1cm4gY3VycmVudFRva2VuXG4gIH1cblxuICBmdW5jdGlvbiBiYWNrKHRva2VuKSB7XG4gICAgcmV0dXJuZWQucHVzaCh0b2tlbilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYmFjayxcbiAgICBuZXh0VG9rZW4sXG4gICAgZW5kT2ZGaWxlLFxuICAgIHBvc2l0aW9uXG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbid1c2Ugc3RyaWN0J1xuXG5sZXQgcHJpbnRlZCA9IHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2Fybk9uY2UobWVzc2FnZSkge1xuICBpZiAocHJpbnRlZFttZXNzYWdlXSkgcmV0dXJuXG4gIHByaW50ZWRbbWVzc2FnZV0gPSB0cnVlXG5cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4pIHtcbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmNsYXNzIFdhcm5pbmcge1xuICBjb25zdHJ1Y3Rvcih0ZXh0LCBvcHRzID0ge30pIHtcbiAgICB0aGlzLnR5cGUgPSAnd2FybmluZydcbiAgICB0aGlzLnRleHQgPSB0ZXh0XG5cbiAgICBpZiAob3B0cy5ub2RlICYmIG9wdHMubm9kZS5zb3VyY2UpIHtcbiAgICAgIGxldCByYW5nZSA9IG9wdHMubm9kZS5yYW5nZUJ5KG9wdHMpXG4gICAgICB0aGlzLmxpbmUgPSByYW5nZS5zdGFydC5saW5lXG4gICAgICB0aGlzLmNvbHVtbiA9IHJhbmdlLnN0YXJ0LmNvbHVtblxuICAgICAgdGhpcy5lbmRMaW5lID0gcmFuZ2UuZW5kLmxpbmVcbiAgICAgIHRoaXMuZW5kQ29sdW1uID0gcmFuZ2UuZW5kLmNvbHVtblxuICAgIH1cblxuICAgIGZvciAobGV0IG9wdCBpbiBvcHRzKSB0aGlzW29wdF0gPSBvcHRzW29wdF1cbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vZGUuZXJyb3IodGhpcy50ZXh0LCB7XG4gICAgICAgIHBsdWdpbjogdGhpcy5wbHVnaW4sXG4gICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICB3b3JkOiB0aGlzLndvcmRcbiAgICAgIH0pLm1lc3NhZ2VcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wbHVnaW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnBsdWdpbiArICc6ICcgKyB0aGlzLnRleHRcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXh0XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXYXJuaW5nXG5XYXJuaW5nLmRlZmF1bHQgPSBXYXJuaW5nXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuXG4gICAgaWYgKHJvb3QuUHViU3ViKSB7XG4gICAgICAgIFB1YlN1YiA9IHJvb3QuUHViU3ViO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJQdWJTdWIgYWxyZWFkeSBsb2FkZWQsIHVzaW5nIGV4aXN0aW5nIHZlcnNpb25cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG4gICAgICAgIGZhY3RvcnkoUHViU3ViKTtcbiAgICB9XG4gICAgLy8gQ29tbW9uSlMgYW5kIE5vZGUuanMgbW9kdWxlIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMSxcbiAgICAgICAgQUxMX1NVQlNDUklCSU5HX01TRyA9ICcqJztcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBtZXNzYWdlcywgbWF0Y2hlZE1lc3NhZ2UgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocyBpbiBzdWJzY3JpYmVycyl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdWJzY3JpYmVycywgcykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UobWVzc2FnZSwgQUxMX1NVQlNDUklCSU5HX01TRywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoIG1lc3NhZ2UgKSB7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKTtcblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICl7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBoYXNEaXJlY3RTdWJzY3JpYmVyc0Zvcih0b3BpYykgfHwgaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoQUxMX1NVQlNDUklCSU5HX01TRyksXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICB3aGlsZSAoICFmb3VuZCAmJiBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG4gICAgICAgICAgICBmb3VuZCA9IGhhc0RpcmVjdFN1YnNjcmliZXJzRm9yKHRvcGljKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBzeW5jLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgdmFyIGRlbGl2ZXIgPSBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICksXG4gICAgICAgICAgICBoYXNTdWJzY3JpYmVycyA9IG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApO1xuXG4gICAgICAgIGlmICggIWhhc1N1YnNjcmliZXJzICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHN5bmMgPT09IHRydWUgKXtcbiAgICAgICAgICAgIGRlbGl2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGRlbGl2ZXIsIDAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2UsIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaCA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBmYWxzZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG1lc3NhZ2VzLCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcblxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICBQdWJTdWIuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24oIGZ1bmMgKXtcbiAgICAgICAgcmV0dXJuIFB1YlN1Yi5zdWJzY3JpYmUoQUxMX1NVQlNDUklCSU5HX01TRywgZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICogQHJldHVybiB7IGludCB9XG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgIENvdW50IHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjb3VudFN1YnNjcmlwdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsgQXJyYXkgfVxuICAgICovXG4gICAgUHViU3ViLmNvdW50U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNvdW50U3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHRva2VuIGluIG1lc3NhZ2VzW21dKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgICBHZXRzIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBnZXRTdWJzY3JpcHRpb25zXG4gICAgKi9cbiAgICBQdWJTdWIuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCB0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsImNvbnN0IGh0bWxwYXJzZXIgPSByZXF1aXJlKCdodG1scGFyc2VyMicpO1xuY29uc3QgZXNjYXBlU3RyaW5nUmVnZXhwID0gcmVxdWlyZSgnZXNjYXBlLXN0cmluZy1yZWdleHAnKTtcbmNvbnN0IHsgaXNQbGFpbk9iamVjdCB9ID0gcmVxdWlyZSgnaXMtcGxhaW4tb2JqZWN0Jyk7XG5jb25zdCBkZWVwbWVyZ2UgPSByZXF1aXJlKCdkZWVwbWVyZ2UnKTtcbmNvbnN0IHBhcnNlU3Jjc2V0ID0gcmVxdWlyZSgncGFyc2Utc3Jjc2V0Jyk7XG5jb25zdCB7IHBhcnNlOiBwb3N0Y3NzUGFyc2UgfSA9IHJlcXVpcmUoJ3Bvc3Rjc3MnKTtcbi8vIFRhZ3MgdGhhdCBjYW4gY29uY2VpdmFibHkgcmVwcmVzZW50IHN0YW5kLWFsb25lIG1lZGlhLlxuY29uc3QgbWVkaWFUYWdzID0gW1xuICAnaW1nJywgJ2F1ZGlvJywgJ3ZpZGVvJywgJ3BpY3R1cmUnLCAnc3ZnJyxcbiAgJ29iamVjdCcsICdtYXAnLCAnaWZyYW1lJywgJ2VtYmVkJ1xuXTtcbi8vIFRhZ3MgdGhhdCBhcmUgaW5oZXJlbnRseSB2dWxuZXJhYmxlIHRvIGJlaW5nIHVzZWQgaW4gWFNTIGF0dGFja3MuXG5jb25zdCB2dWxuZXJhYmxlVGFncyA9IFsgJ3NjcmlwdCcsICdzdHlsZScgXTtcblxuZnVuY3Rpb24gZWFjaChvYmosIGNiKSB7XG4gIGlmIChvYmopIHtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgY2Iob2JqW2tleV0sIGtleSk7XG4gICAgfSk7XG4gIH1cbn1cblxuLy8gQXZvaWQgZmFsc2UgcG9zaXRpdmVzIHdpdGggLl9fcHJvdG9fXywgLmhhc093blByb3BlcnR5LCBldGMuXG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbi8vIFJldHVybnMgdGhvc2UgZWxlbWVudHMgb2YgYGFgIGZvciB3aGljaCBgY2IoYSlgIHJldHVybnMgdHJ1dGh5XG5mdW5jdGlvbiBmaWx0ZXIoYSwgY2IpIHtcbiAgY29uc3QgbiA9IFtdO1xuICBlYWNoKGEsIGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoY2IodikpIHtcbiAgICAgIG4ucHVzaCh2KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iamVjdChvYmopIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcyhvYmosIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNyY3NldChwYXJzZWRTcmNzZXQpIHtcbiAgcmV0dXJuIHBhcnNlZFNyY3NldC5tYXAoZnVuY3Rpb24ocGFydCkge1xuICAgIGlmICghcGFydC51cmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVVJMIG1pc3NpbmcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgcGFydC51cmwgK1xuICAgICAgKHBhcnQudyA/IGAgJHtwYXJ0Lnd9d2AgOiAnJykgK1xuICAgICAgKHBhcnQuaCA/IGAgJHtwYXJ0Lmh9aGAgOiAnJykgK1xuICAgICAgKHBhcnQuZCA/IGAgJHtwYXJ0LmR9eGAgOiAnJylcbiAgICApO1xuICB9KS5qb2luKCcsICcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNhbml0aXplSHRtbDtcblxuLy8gQSB2YWxpZCBhdHRyaWJ1dGUgbmFtZS5cbi8vIFdlIHVzZSBhIHRvbGVyYW50IGRlZmluaXRpb24gYmFzZWQgb24gdGhlIHNldCBvZiBzdHJpbmdzIGRlZmluZWQgYnlcbi8vIGh0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjYmVmb3JlLWF0dHJpYnV0ZS1uYW1lLXN0YXRlXG4vLyBhbmQgaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNhdHRyaWJ1dGUtbmFtZS1zdGF0ZSAuXG4vLyBUaGUgY2hhcmFjdGVycyBhY2NlcHRlZCBhcmUgb25lcyB3aGljaCBjYW4gYmUgYXBwZW5kZWQgdG8gdGhlIGF0dHJpYnV0ZVxuLy8gbmFtZSBidWZmZXIgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcGFyc2UgZXJyb3I6XG4vLyAgICogdW5leHBlY3RlZC1lcXVhbHMtc2lnbi1iZWZvcmUtYXR0cmlidXRlLW5hbWVcbi8vICAgKiB1bmV4cGVjdGVkLW51bGwtY2hhcmFjdGVyXG4vLyAgICogdW5leHBlY3RlZC1jaGFyYWN0ZXItaW4tYXR0cmlidXRlLW5hbWVcbi8vIFdlIGV4Y2x1ZGUgdGhlIGVtcHR5IHN0cmluZyBiZWNhdXNlIGl0J3MgaW1wb3NzaWJsZSB0byBnZXQgdG8gdGhlIGFmdGVyXG4vLyBhdHRyaWJ1dGUgbmFtZSBzdGF0ZSB3aXRoIGFuIGVtcHR5IGF0dHJpYnV0ZSBuYW1lIGJ1ZmZlci5cbmNvbnN0IFZBTElEX0hUTUxfQVRUUklCVVRFX05BTUUgPSAvXlteXFwwXFx0XFxuXFxmXFxyIC88PT5dKyQvO1xuXG4vLyBJZ25vcmUgdGhlIF9yZWN1cnNpbmcgZmxhZzsgaXQncyB0aGVyZSBmb3IgcmVjdXJzaXZlXG4vLyBpbnZvY2F0aW9uIGFzIGEgZ3VhcmQgYWdhaW5zdCB0aGlzIGV4cGxvaXQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmI1NS9odG1scGFyc2VyMi9pc3N1ZXMvMTA1XG5cbmZ1bmN0aW9uIHNhbml0aXplSHRtbChodG1sLCBvcHRpb25zLCBfcmVjdXJzaW5nKSB7XG4gIGlmIChodG1sID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0gJyc7XG4gIC8vIFVzZWQgZm9yIGhvdCBzd2FwcGluZyB0aGUgcmVzdWx0IHZhcmlhYmxlIHdpdGggYW4gZW1wdHkgc3RyaW5nIGluIG9yZGVyIHRvIFwiY2FwdHVyZVwiIHRoZSB0ZXh0IHdyaXR0ZW4gdG8gaXQuXG4gIGxldCB0ZW1wUmVzdWx0ID0gJyc7XG5cbiAgZnVuY3Rpb24gRnJhbWUodGFnLCBhdHRyaWJzKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy50YWcgPSB0YWc7XG4gICAgdGhpcy5hdHRyaWJzID0gYXR0cmlicyB8fCB7fTtcbiAgICB0aGlzLnRhZ1Bvc2l0aW9uID0gcmVzdWx0Lmxlbmd0aDtcbiAgICB0aGlzLnRleHQgPSAnJzsgLy8gTm9kZSBpbm5lciB0ZXh0XG4gICAgdGhpcy5tZWRpYUNoaWxkcmVuID0gW107XG5cbiAgICB0aGlzLnVwZGF0ZVBhcmVudE5vZGVUZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudEZyYW1lID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIHBhcmVudEZyYW1lLnRleHQgKz0gdGhhdC50ZXh0O1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnVwZGF0ZVBhcmVudE5vZGVNZWRpYUNoaWxkcmVuID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoICYmIG1lZGlhVGFncy5pbmNsdWRlcyh0aGlzLnRhZykpIHtcbiAgICAgICAgY29uc3QgcGFyZW50RnJhbWUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgcGFyZW50RnJhbWUubWVkaWFDaGlsZHJlbi5wdXNoKHRoaXMudGFnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHNhbml0aXplSHRtbC5kZWZhdWx0cywgb3B0aW9ucyk7XG4gIG9wdGlvbnMucGFyc2VyID0gT2JqZWN0LmFzc2lnbih7fSwgaHRtbFBhcnNlckRlZmF1bHRzLCBvcHRpb25zLnBhcnNlcik7XG5cbiAgLy8gdnVsbmVyYWJsZVRhZ3NcbiAgdnVsbmVyYWJsZVRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgaWYgKFxuICAgICAgb3B0aW9ucy5hbGxvd2VkVGFncyAhPT0gZmFsc2UgJiYgKG9wdGlvbnMuYWxsb3dlZFRhZ3MgfHwgW10pLmluZGV4T2YodGFnKSA+IC0xICYmXG4gICAgICAhb3B0aW9ucy5hbGxvd1Z1bG5lcmFibGVUYWdzXG4gICAgKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFxcblxcbuKaoO+4jyBZb3VyIFxcYGFsbG93ZWRUYWdzXFxgIG9wdGlvbiBpbmNsdWRlcywgXFxgJHt0YWd9XFxgLCB3aGljaCBpcyBpbmhlcmVudGx5XFxudnVsbmVyYWJsZSB0byBYU1MgYXR0YWNrcy4gUGxlYXNlIHJlbW92ZSBpdCBmcm9tIFxcYGFsbG93ZWRUYWdzXFxgLlxcbk9yLCB0byBkaXNhYmxlIHRoaXMgd2FybmluZywgYWRkIHRoZSBcXGBhbGxvd1Z1bG5lcmFibGVUYWdzXFxgIG9wdGlvblxcbmFuZCBlbnN1cmUgeW91IGFyZSBhY2NvdW50aW5nIGZvciB0aGlzIHJpc2suXFxuXFxuYCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBUYWdzIHRoYXQgY29udGFpbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBIVE1MLCBvciB3aGVyZSBkaXNjYXJkaW5nXG4gIC8vIHRoZSB0ZXh0IHdoZW4gdGhlIHRhZyBpcyBkaXNhbGxvd2VkIG1ha2VzIHNlbnNlIGZvciBvdGhlciByZWFzb25zLlxuICAvLyBJZiB3ZSBhcmUgbm90IGFsbG93aW5nIHRoZXNlIHRhZ3MsIHdlIHNob3VsZCBkcm9wIHRoZWlyIGNvbnRlbnQgdG9vLlxuICAvLyBGb3Igb3RoZXIgdGFncyB5b3Ugd291bGQgZHJvcCB0aGUgdGFnIGJ1dCBrZWVwIGl0cyBjb250ZW50LlxuICBjb25zdCBub25UZXh0VGFnc0FycmF5ID0gb3B0aW9ucy5ub25UZXh0VGFncyB8fCBbXG4gICAgJ3NjcmlwdCcsXG4gICAgJ3N0eWxlJyxcbiAgICAndGV4dGFyZWEnLFxuICAgICdvcHRpb24nXG4gIF07XG4gIGxldCBhbGxvd2VkQXR0cmlidXRlc01hcDtcbiAgbGV0IGFsbG93ZWRBdHRyaWJ1dGVzR2xvYk1hcDtcbiAgaWYgKG9wdGlvbnMuYWxsb3dlZEF0dHJpYnV0ZXMpIHtcbiAgICBhbGxvd2VkQXR0cmlidXRlc01hcCA9IHt9O1xuICAgIGFsbG93ZWRBdHRyaWJ1dGVzR2xvYk1hcCA9IHt9O1xuICAgIGVhY2gob3B0aW9ucy5hbGxvd2VkQXR0cmlidXRlcywgZnVuY3Rpb24oYXR0cmlidXRlcywgdGFnKSB7XG4gICAgICBhbGxvd2VkQXR0cmlidXRlc01hcFt0YWddID0gW107XG4gICAgICBjb25zdCBnbG9iUmVnZXggPSBbXTtcbiAgICAgIGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnICYmIG9iai5pbmRleE9mKCcqJykgPj0gMCkge1xuICAgICAgICAgIGdsb2JSZWdleC5wdXNoKGVzY2FwZVN0cmluZ1JlZ2V4cChvYmopLnJlcGxhY2UoL1xcXFxcXCovZywgJy4qJykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFsbG93ZWRBdHRyaWJ1dGVzTWFwW3RhZ10ucHVzaChvYmopO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChnbG9iUmVnZXgubGVuZ3RoKSB7XG4gICAgICAgIGFsbG93ZWRBdHRyaWJ1dGVzR2xvYk1hcFt0YWddID0gbmV3IFJlZ0V4cCgnXignICsgZ2xvYlJlZ2V4LmpvaW4oJ3wnKSArICcpJCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGFsbG93ZWRDbGFzc2VzTWFwID0ge307XG4gIGNvbnN0IGFsbG93ZWRDbGFzc2VzR2xvYk1hcCA9IHt9O1xuICBjb25zdCBhbGxvd2VkQ2xhc3Nlc1JlZ2V4TWFwID0ge307XG4gIGVhY2gob3B0aW9ucy5hbGxvd2VkQ2xhc3NlcywgZnVuY3Rpb24oY2xhc3NlcywgdGFnKSB7XG4gICAgLy8gSW1wbGljaXRseSBhbGxvd3MgdGhlIGNsYXNzIGF0dHJpYnV0ZVxuICAgIGlmIChhbGxvd2VkQXR0cmlidXRlc01hcCkge1xuICAgICAgaWYgKCFoYXMoYWxsb3dlZEF0dHJpYnV0ZXNNYXAsIHRhZykpIHtcbiAgICAgICAgYWxsb3dlZEF0dHJpYnV0ZXNNYXBbdGFnXSA9IFtdO1xuICAgICAgfVxuICAgICAgYWxsb3dlZEF0dHJpYnV0ZXNNYXBbdGFnXS5wdXNoKCdjbGFzcycpO1xuICAgIH1cblxuICAgIGFsbG93ZWRDbGFzc2VzTWFwW3RhZ10gPSBbXTtcbiAgICBhbGxvd2VkQ2xhc3Nlc1JlZ2V4TWFwW3RhZ10gPSBbXTtcbiAgICBjb25zdCBnbG9iUmVnZXggPSBbXTtcbiAgICBjbGFzc2VzLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycgJiYgb2JqLmluZGV4T2YoJyonKSA+PSAwKSB7XG4gICAgICAgIGdsb2JSZWdleC5wdXNoKGVzY2FwZVN0cmluZ1JlZ2V4cChvYmopLnJlcGxhY2UoL1xcXFxcXCovZywgJy4qJykpO1xuICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgYWxsb3dlZENsYXNzZXNSZWdleE1hcFt0YWddLnB1c2gob2JqKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsbG93ZWRDbGFzc2VzTWFwW3RhZ10ucHVzaChvYmopO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChnbG9iUmVnZXgubGVuZ3RoKSB7XG4gICAgICBhbGxvd2VkQ2xhc3Nlc0dsb2JNYXBbdGFnXSA9IG5ldyBSZWdFeHAoJ14oJyArIGdsb2JSZWdleC5qb2luKCd8JykgKyAnKSQnKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHRyYW5zZm9ybVRhZ3NNYXAgPSB7fTtcbiAgbGV0IHRyYW5zZm9ybVRhZ3NBbGw7XG4gIGVhY2gob3B0aW9ucy50cmFuc2Zvcm1UYWdzLCBmdW5jdGlvbih0cmFuc2Zvcm0sIHRhZykge1xuICAgIGxldCB0cmFuc0Z1bjtcbiAgICBpZiAodHlwZW9mIHRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdHJhbnNGdW4gPSB0cmFuc2Zvcm07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdHJhbnNmb3JtID09PSAnc3RyaW5nJykge1xuICAgICAgdHJhbnNGdW4gPSBzYW5pdGl6ZUh0bWwuc2ltcGxlVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICcqJykge1xuICAgICAgdHJhbnNmb3JtVGFnc0FsbCA9IHRyYW5zRnVuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2Zvcm1UYWdzTWFwW3RhZ10gPSB0cmFuc0Z1bjtcbiAgICB9XG4gIH0pO1xuXG4gIGxldCBkZXB0aDtcbiAgbGV0IHN0YWNrO1xuICBsZXQgc2tpcE1hcDtcbiAgbGV0IHRyYW5zZm9ybU1hcDtcbiAgbGV0IHNraXBUZXh0O1xuICBsZXQgc2tpcFRleHREZXB0aDtcbiAgbGV0IGFkZGVkVGV4dCA9IGZhbHNlO1xuXG4gIGluaXRpYWxpemVTdGF0ZSgpO1xuXG4gIGNvbnN0IHBhcnNlciA9IG5ldyBodG1scGFyc2VyLlBhcnNlcih7XG4gICAgb25vcGVudGFnOiBmdW5jdGlvbihuYW1lLCBhdHRyaWJzKSB7XG4gICAgICAvLyBJZiBgZW5mb3JjZUh0bWxCb3VuZGFyeWAgaXMgYHRydWVgIGFuZCB0aGlzIGhhcyBmb3VuZCB0aGUgb3BlbmluZ1xuICAgICAgLy8gYGh0bWxgIHRhZywgcmVzZXQgdGhlIHN0YXRlLlxuICAgICAgaWYgKG9wdGlvbnMuZW5mb3JjZUh0bWxCb3VuZGFyeSAmJiBuYW1lID09PSAnaHRtbCcpIHtcbiAgICAgICAgaW5pdGlhbGl6ZVN0YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChza2lwVGV4dCkge1xuICAgICAgICBza2lwVGV4dERlcHRoKys7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZyYW1lID0gbmV3IEZyYW1lKG5hbWUsIGF0dHJpYnMpO1xuICAgICAgc3RhY2sucHVzaChmcmFtZSk7XG5cbiAgICAgIGxldCBza2lwID0gZmFsc2U7XG4gICAgICBjb25zdCBoYXNUZXh0ID0gISFmcmFtZS50ZXh0O1xuICAgICAgbGV0IHRyYW5zZm9ybWVkVGFnO1xuICAgICAgaWYgKGhhcyh0cmFuc2Zvcm1UYWdzTWFwLCBuYW1lKSkge1xuICAgICAgICB0cmFuc2Zvcm1lZFRhZyA9IHRyYW5zZm9ybVRhZ3NNYXBbbmFtZV0obmFtZSwgYXR0cmlicyk7XG5cbiAgICAgICAgZnJhbWUuYXR0cmlicyA9IGF0dHJpYnMgPSB0cmFuc2Zvcm1lZFRhZy5hdHRyaWJzO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1lZFRhZy50ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmcmFtZS5pbm5lclRleHQgPSB0cmFuc2Zvcm1lZFRhZy50ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgIT09IHRyYW5zZm9ybWVkVGFnLnRhZ05hbWUpIHtcbiAgICAgICAgICBmcmFtZS5uYW1lID0gbmFtZSA9IHRyYW5zZm9ybWVkVGFnLnRhZ05hbWU7XG4gICAgICAgICAgdHJhbnNmb3JtTWFwW2RlcHRoXSA9IHRyYW5zZm9ybWVkVGFnLnRhZ05hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2Zvcm1UYWdzQWxsKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkVGFnID0gdHJhbnNmb3JtVGFnc0FsbChuYW1lLCBhdHRyaWJzKTtcblxuICAgICAgICBmcmFtZS5hdHRyaWJzID0gYXR0cmlicyA9IHRyYW5zZm9ybWVkVGFnLmF0dHJpYnM7XG4gICAgICAgIGlmIChuYW1lICE9PSB0cmFuc2Zvcm1lZFRhZy50YWdOYW1lKSB7XG4gICAgICAgICAgZnJhbWUubmFtZSA9IG5hbWUgPSB0cmFuc2Zvcm1lZFRhZy50YWdOYW1lO1xuICAgICAgICAgIHRyYW5zZm9ybU1hcFtkZXB0aF0gPSB0cmFuc2Zvcm1lZFRhZy50YWdOYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgob3B0aW9ucy5hbGxvd2VkVGFncyAhPT0gZmFsc2UgJiYgKG9wdGlvbnMuYWxsb3dlZFRhZ3MgfHwgW10pLmluZGV4T2YobmFtZSkgPT09IC0xKSB8fCAob3B0aW9ucy5kaXNhbGxvd2VkVGFnc01vZGUgPT09ICdyZWN1cnNpdmVFc2NhcGUnICYmICFpc0VtcHR5T2JqZWN0KHNraXBNYXApKSB8fCAob3B0aW9ucy5uZXN0aW5nTGltaXQgIT0gbnVsbCAmJiBkZXB0aCA+PSBvcHRpb25zLm5lc3RpbmdMaW1pdCkpIHtcbiAgICAgICAgc2tpcCA9IHRydWU7XG4gICAgICAgIHNraXBNYXBbZGVwdGhdID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWxsb3dlZFRhZ3NNb2RlID09PSAnZGlzY2FyZCcpIHtcbiAgICAgICAgICBpZiAobm9uVGV4dFRhZ3NBcnJheS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgc2tpcFRleHQgPSB0cnVlO1xuICAgICAgICAgICAgc2tpcFRleHREZXB0aCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNraXBNYXBbZGVwdGhdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGRlcHRoKys7XG4gICAgICBpZiAoc2tpcCkge1xuICAgICAgICBpZiAob3B0aW9ucy5kaXNhbGxvd2VkVGFnc01vZGUgPT09ICdkaXNjYXJkJykge1xuICAgICAgICAgIC8vIFdlIHdhbnQgdGhlIGNvbnRlbnRzIGJ1dCBub3QgdGhpcyB0YWdcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gJzwnICsgbmFtZTtcblxuICAgICAgaWYgKG5hbWUgPT09ICdzY3JpcHQnKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmFsbG93ZWRTY3JpcHRIb3N0bmFtZXMgfHwgb3B0aW9ucy5hbGxvd2VkU2NyaXB0RG9tYWlucykge1xuICAgICAgICAgIGZyYW1lLmlubmVyVGV4dCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZXNNYXAgfHwgaGFzKGFsbG93ZWRBdHRyaWJ1dGVzTWFwLCBuYW1lKSB8fCBhbGxvd2VkQXR0cmlidXRlc01hcFsnKiddKSB7XG4gICAgICAgIGVhY2goYXR0cmlicywgZnVuY3Rpb24odmFsdWUsIGEpIHtcbiAgICAgICAgICBpZiAoIVZBTElEX0hUTUxfQVRUUklCVVRFX05BTUUudGVzdChhKSkge1xuICAgICAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBwYXJ0IG9mIGFuIGF0dHJpYnV0ZSBuYW1lIGluIHRoZSBvdXRwdXQgZnJvbSBiZWluZ1xuICAgICAgICAgICAgLy8gaW50ZXJwcmV0ZWQgYXMgdGhlIGVuZCBvZiBhbiBhdHRyaWJ1dGUsIG9yIGVuZCBvZiBhIHRhZy5cbiAgICAgICAgICAgIGRlbGV0ZSBmcmFtZS5hdHRyaWJzW2FdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGVjayBhbGxvd2VkQXR0cmlidXRlc01hcCBmb3IgdGhlIGVsZW1lbnQgYW5kIGF0dHJpYnV0ZSBhbmQgbW9kaWZ5IHRoZSB2YWx1ZVxuICAgICAgICAgIC8vIGFzIG5lY2Vzc2FyeSBpZiB0aGVyZSBhcmUgc3BlY2lmaWMgdmFsdWVzIGRlZmluZWQuXG4gICAgICAgICAgbGV0IHBhc3NlZEFsbG93ZWRBdHRyaWJ1dGVzTWFwQ2hlY2sgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGVzTWFwIHx8XG4gICAgICAgICAgICAoaGFzKGFsbG93ZWRBdHRyaWJ1dGVzTWFwLCBuYW1lKSAmJiBhbGxvd2VkQXR0cmlidXRlc01hcFtuYW1lXS5pbmRleE9mKGEpICE9PSAtMSkgfHxcbiAgICAgICAgICAgIChhbGxvd2VkQXR0cmlidXRlc01hcFsnKiddICYmIGFsbG93ZWRBdHRyaWJ1dGVzTWFwWycqJ10uaW5kZXhPZihhKSAhPT0gLTEpIHx8XG4gICAgICAgICAgICAoaGFzKGFsbG93ZWRBdHRyaWJ1dGVzR2xvYk1hcCwgbmFtZSkgJiYgYWxsb3dlZEF0dHJpYnV0ZXNHbG9iTWFwW25hbWVdLnRlc3QoYSkpIHx8XG4gICAgICAgICAgICAoYWxsb3dlZEF0dHJpYnV0ZXNHbG9iTWFwWycqJ10gJiYgYWxsb3dlZEF0dHJpYnV0ZXNHbG9iTWFwWycqJ10udGVzdChhKSkpIHtcbiAgICAgICAgICAgIHBhc3NlZEFsbG93ZWRBdHRyaWJ1dGVzTWFwQ2hlY2sgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYWxsb3dlZEF0dHJpYnV0ZXNNYXAgJiYgYWxsb3dlZEF0dHJpYnV0ZXNNYXBbbmFtZV0pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiBhbGxvd2VkQXR0cmlidXRlc01hcFtuYW1lXSkge1xuICAgICAgICAgICAgICBpZiAoaXNQbGFpbk9iamVjdChvKSAmJiBvLm5hbWUgJiYgKG8ubmFtZSA9PT0gYSkpIHtcbiAgICAgICAgICAgICAgICBwYXNzZWRBbGxvd2VkQXR0cmlidXRlc01hcENoZWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoby5tdWx0aXBsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgLy8gdmVyaWZ5IHRoZSB2YWx1ZXMgdGhhdCBhcmUgYWxsb3dlZFxuICAgICAgICAgICAgICAgICAgY29uc3Qgc3BsaXRTdHJBcnJheSA9IHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc3BsaXRTdHJBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoby52YWx1ZXMuaW5kZXhPZihzKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHM7XG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlICs9ICcgJyArIHM7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLnZhbHVlcy5pbmRleE9mKHZhbHVlKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAvLyB2ZXJpZmllZCBhbiBhbGxvd2VkIHZhbHVlIG1hdGNoZXMgdGhlIGVudGlyZSBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhc3NlZEFsbG93ZWRBdHRyaWJ1dGVzTWFwQ2hlY2spIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFsbG93ZWRTY2hlbWVzQXBwbGllZFRvQXR0cmlidXRlcy5pbmRleE9mKGEpICE9PSAtMSkge1xuICAgICAgICAgICAgICBpZiAobmF1Z2h0eUhyZWYobmFtZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGZyYW1lLmF0dHJpYnNbYV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnc2NyaXB0JyAmJiBhID09PSAnc3JjJykge1xuXG4gICAgICAgICAgICAgIGxldCBhbGxvd2VkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlVXJsKHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFsbG93ZWRTY3JpcHRIb3N0bmFtZXMgfHwgb3B0aW9ucy5hbGxvd2VkU2NyaXB0RG9tYWlucykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZEhvc3RuYW1lID0gKG9wdGlvbnMuYWxsb3dlZFNjcmlwdEhvc3RuYW1lcyB8fCBbXSkuZmluZChmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvc3RuYW1lID09PSBwYXJzZWQudXJsLmhvc3RuYW1lO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkRG9tYWluID0gKG9wdGlvbnMuYWxsb3dlZFNjcmlwdERvbWFpbnMgfHwgW10pLmZpbmQoZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQudXJsLmhvc3RuYW1lID09PSBkb21haW4gfHwgcGFyc2VkLnVybC5ob3N0bmFtZS5lbmRzV2l0aChgLiR7ZG9tYWlufWApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBhbGxvd2VkID0gYWxsb3dlZEhvc3RuYW1lIHx8IGFsbG93ZWREb21haW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKCFhbGxvd2VkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGZyYW1lLmF0dHJpYnNbYV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaWZyYW1lJyAmJiBhID09PSAnc3JjJykge1xuICAgICAgICAgICAgICBsZXQgYWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VVcmwodmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC5pc1JlbGF0aXZlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHZhbHVlIG9mIGFsbG93SWZyYW1lUmVsYXRpdmVVcmxzIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgIC8vIHVubGVzcyBhbGxvd2VkSWZyYW1lSG9zdG5hbWVzIG9yIGFsbG93ZWRJZnJhbWVEb21haW5zIHNwZWNpZmllZFxuICAgICAgICAgICAgICAgICAgYWxsb3dlZCA9IGhhcyhvcHRpb25zLCAnYWxsb3dJZnJhbWVSZWxhdGl2ZVVybHMnKVxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuYWxsb3dJZnJhbWVSZWxhdGl2ZVVybHNcbiAgICAgICAgICAgICAgICAgICAgOiAoIW9wdGlvbnMuYWxsb3dlZElmcmFtZUhvc3RuYW1lcyAmJiAhb3B0aW9ucy5hbGxvd2VkSWZyYW1lRG9tYWlucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmFsbG93ZWRJZnJhbWVIb3N0bmFtZXMgfHwgb3B0aW9ucy5hbGxvd2VkSWZyYW1lRG9tYWlucykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZEhvc3RuYW1lID0gKG9wdGlvbnMuYWxsb3dlZElmcmFtZUhvc3RuYW1lcyB8fCBbXSkuZmluZChmdW5jdGlvbiAoaG9zdG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvc3RuYW1lID09PSBwYXJzZWQudXJsLmhvc3RuYW1lO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkRG9tYWluID0gKG9wdGlvbnMuYWxsb3dlZElmcmFtZURvbWFpbnMgfHwgW10pLmZpbmQoZnVuY3Rpb24oZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQudXJsLmhvc3RuYW1lID09PSBkb21haW4gfHwgcGFyc2VkLnVybC5ob3N0bmFtZS5lbmRzV2l0aChgLiR7ZG9tYWlufWApO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBhbGxvd2VkID0gYWxsb3dlZEhvc3RuYW1lIHx8IGFsbG93ZWREb21haW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gVW5wYXJzZWFibGUgaWZyYW1lIHNyY1xuICAgICAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZnJhbWUuYXR0cmlic1thXTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhID09PSAnc3Jjc2V0Jykge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBwYXJzZWQgPSBwYXJzZVNyY3NldCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgcGFyc2VkLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChuYXVnaHR5SHJlZignc3Jjc2V0JywgdmFsdWUudXJsKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5ldmlsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSBmaWx0ZXIocGFyc2VkLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gIXYuZXZpbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoIXBhcnNlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmcmFtZS5hdHRyaWJzW2FdO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0cmluZ2lmeVNyY3NldChmaWx0ZXIocGFyc2VkLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdi5ldmlsO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgZnJhbWUuYXR0cmlic1thXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFVucGFyc2VhYmxlIHNyY3NldFxuICAgICAgICAgICAgICAgIGRlbGV0ZSBmcmFtZS5hdHRyaWJzW2FdO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGEgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFNwZWNpZmljQ2xhc3NlcyA9IGFsbG93ZWRDbGFzc2VzTWFwW25hbWVdO1xuICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkV2lsZGNhcmRDbGFzc2VzID0gYWxsb3dlZENsYXNzZXNNYXBbJyonXTtcbiAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFNwZWNpZmljQ2xhc3Nlc0dsb2IgPSBhbGxvd2VkQ2xhc3Nlc0dsb2JNYXBbbmFtZV07XG4gICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRTcGVjaWZpY0NsYXNzZXNSZWdleCA9IGFsbG93ZWRDbGFzc2VzUmVnZXhNYXBbbmFtZV07XG4gICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRXaWxkY2FyZENsYXNzZXNHbG9iID0gYWxsb3dlZENsYXNzZXNHbG9iTWFwWycqJ107XG4gICAgICAgICAgICAgIGNvbnN0IGFsbG93ZWRDbGFzc2VzR2xvYnMgPSBbXG4gICAgICAgICAgICAgICAgYWxsb3dlZFNwZWNpZmljQ2xhc3Nlc0dsb2IsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFdpbGRjYXJkQ2xhc3Nlc0dsb2JcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIC5jb25jYXQoYWxsb3dlZFNwZWNpZmljQ2xhc3Nlc1JlZ2V4KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoYWxsb3dlZFNwZWNpZmljQ2xhc3NlcyAmJiBhbGxvd2VkV2lsZGNhcmRDbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmaWx0ZXJDbGFzc2VzKHZhbHVlLCBkZWVwbWVyZ2UoYWxsb3dlZFNwZWNpZmljQ2xhc3NlcywgYWxsb3dlZFdpbGRjYXJkQ2xhc3NlcyksIGFsbG93ZWRDbGFzc2VzR2xvYnMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZmlsdGVyQ2xhc3Nlcyh2YWx1ZSwgYWxsb3dlZFNwZWNpZmljQ2xhc3NlcyB8fCBhbGxvd2VkV2lsZGNhcmRDbGFzc2VzLCBhbGxvd2VkQ2xhc3Nlc0dsb2JzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIXZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBmcmFtZS5hdHRyaWJzW2FdO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGEgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBhYnN0cmFjdFN5bnRheFRyZWUgPSBwb3N0Y3NzUGFyc2UobmFtZSArICcgeycgKyB2YWx1ZSArICd9Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRBU1QgPSBmaWx0ZXJDc3MoYWJzdHJhY3RTeW50YXhUcmVlLCBvcHRpb25zLmFsbG93ZWRTdHlsZXMpO1xuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBzdHJpbmdpZnlTdHlsZUF0dHJpYnV0ZXMoZmlsdGVyZWRBU1QpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIGZyYW1lLmF0dHJpYnNbYV07XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGZyYW1lLmF0dHJpYnNbYV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gJyAnICsgYTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9ICc9XCInICsgZXNjYXBlSHRtbCh2YWx1ZSwgdHJ1ZSkgKyAnXCInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZnJhbWUuYXR0cmlic1thXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuc2VsZkNsb3NpbmcuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgcmVzdWx0ICs9ICcgLz4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ICs9ICc+JztcbiAgICAgICAgaWYgKGZyYW1lLmlubmVyVGV4dCAmJiAhaGFzVGV4dCAmJiAhb3B0aW9ucy50ZXh0RmlsdGVyKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGVzY2FwZUh0bWwoZnJhbWUuaW5uZXJUZXh0KTtcbiAgICAgICAgICBhZGRlZFRleHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2tpcCkge1xuICAgICAgICByZXN1bHQgPSB0ZW1wUmVzdWx0ICsgZXNjYXBlSHRtbChyZXN1bHQpO1xuICAgICAgICB0ZW1wUmVzdWx0ID0gJyc7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbnRleHQ6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIGlmIChza2lwVGV4dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBsYXN0RnJhbWUgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIGxldCB0YWc7XG5cbiAgICAgIGlmIChsYXN0RnJhbWUpIHtcbiAgICAgICAgdGFnID0gbGFzdEZyYW1lLnRhZztcbiAgICAgICAgLy8gSWYgaW5uZXIgdGV4dCB3YXMgc2V0IGJ5IHRyYW5zZm9ybSBmdW5jdGlvbiB0aGVuIGxldCdzIHVzZSBpdFxuICAgICAgICB0ZXh0ID0gbGFzdEZyYW1lLmlubmVyVGV4dCAhPT0gdW5kZWZpbmVkID8gbGFzdEZyYW1lLmlubmVyVGV4dCA6IHRleHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRpc2FsbG93ZWRUYWdzTW9kZSA9PT0gJ2Rpc2NhcmQnICYmICgodGFnID09PSAnc2NyaXB0JykgfHwgKHRhZyA9PT0gJ3N0eWxlJykpKSB7XG4gICAgICAgIC8vIGh0bWxwYXJzZXIyIGdpdmVzIHVzIHRoZXNlIGFzLWlzLiBFc2NhcGluZyB0aGVtIHJ1aW5zIHRoZSBjb250ZW50LiBBbGxvd2luZ1xuICAgICAgICAvLyBzY3JpcHQgdGFncyBpcywgYnkgZGVmaW5pdGlvbiwgZ2FtZSBvdmVyIGZvciBYU1MgcHJvdGVjdGlvbiwgc28gaWYgdGhhdCdzXG4gICAgICAgIC8vIHlvdXIgY29uY2VybiwgZG9uJ3QgYWxsb3cgdGhlbS4gVGhlIHNhbWUgaXMgZXNzZW50aWFsbHkgdHJ1ZSBmb3Igc3R5bGUgdGFnc1xuICAgICAgICAvLyB3aGljaCBoYXZlIHRoZWlyIG93biBjb2xsZWN0aW9uIG9mIFhTUyB2ZWN0b3JzLlxuICAgICAgICByZXN1bHQgKz0gdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVzY2FwZWQgPSBlc2NhcGVIdG1sKHRleHQsIGZhbHNlKTtcbiAgICAgICAgaWYgKG9wdGlvbnMudGV4dEZpbHRlciAmJiAhYWRkZWRUZXh0KSB7XG4gICAgICAgICAgcmVzdWx0ICs9IG9wdGlvbnMudGV4dEZpbHRlcihlc2NhcGVkLCB0YWcpO1xuICAgICAgICB9IGVsc2UgaWYgKCFhZGRlZFRleHQpIHtcbiAgICAgICAgICByZXN1bHQgKz0gZXNjYXBlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmcmFtZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICBmcmFtZS50ZXh0ICs9IHRleHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbmNsb3NldGFnOiBmdW5jdGlvbihuYW1lKSB7XG5cbiAgICAgIGlmIChza2lwVGV4dCkge1xuICAgICAgICBza2lwVGV4dERlcHRoLS07XG4gICAgICAgIGlmICghc2tpcFRleHREZXB0aCkge1xuICAgICAgICAgIHNraXBUZXh0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZyYW1lID0gc3RhY2sucG9wKCk7XG4gICAgICBpZiAoIWZyYW1lKSB7XG4gICAgICAgIC8vIERvIG5vdCBjcmFzaCBvbiBiYWQgbWFya3VwXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGZyYW1lLnRhZyAhPT0gbmFtZSkge1xuICAgICAgICAvLyBBbm90aGVyIGNhc2Ugb2YgYmFkIG1hcmt1cC5cbiAgICAgICAgLy8gUHVzaCB0byBzdGFjaywgc28gdGhhdCBpdCB3aWxsIGJlIHVzZWQgaW4gZnV0dXJlIGNsb3NpbmcgdGFncy5cbiAgICAgICAgc3RhY2sucHVzaChmcmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2tpcFRleHQgPSBvcHRpb25zLmVuZm9yY2VIdG1sQm91bmRhcnkgPyBuYW1lID09PSAnaHRtbCcgOiBmYWxzZTtcbiAgICAgIGRlcHRoLS07XG4gICAgICBjb25zdCBza2lwID0gc2tpcE1hcFtkZXB0aF07XG4gICAgICBpZiAoc2tpcCkge1xuICAgICAgICBkZWxldGUgc2tpcE1hcFtkZXB0aF07XG4gICAgICAgIGlmIChvcHRpb25zLmRpc2FsbG93ZWRUYWdzTW9kZSA9PT0gJ2Rpc2NhcmQnKSB7XG4gICAgICAgICAgZnJhbWUudXBkYXRlUGFyZW50Tm9kZVRleHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2Zvcm1NYXBbZGVwdGhdKSB7XG4gICAgICAgIG5hbWUgPSB0cmFuc2Zvcm1NYXBbZGVwdGhdO1xuICAgICAgICBkZWxldGUgdHJhbnNmb3JtTWFwW2RlcHRoXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuZXhjbHVzaXZlRmlsdGVyICYmIG9wdGlvbnMuZXhjbHVzaXZlRmlsdGVyKGZyYW1lKSkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc3Vic3RyKDAsIGZyYW1lLnRhZ1Bvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmcmFtZS51cGRhdGVQYXJlbnROb2RlTWVkaWFDaGlsZHJlbigpO1xuICAgICAgZnJhbWUudXBkYXRlUGFyZW50Tm9kZVRleHQoKTtcblxuICAgICAgaWYgKG9wdGlvbnMuc2VsZkNsb3NpbmcuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gQWxyZWFkeSBvdXRwdXQgLz5cbiAgICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgICByZXN1bHQgPSB0ZW1wUmVzdWx0O1xuICAgICAgICAgIHRlbXBSZXN1bHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSAnPC8nICsgbmFtZSArICc+JztcbiAgICAgIGlmIChza2lwKSB7XG4gICAgICAgIHJlc3VsdCA9IHRlbXBSZXN1bHQgKyBlc2NhcGVIdG1sKHJlc3VsdCk7XG4gICAgICAgIHRlbXBSZXN1bHQgPSAnJztcbiAgICAgIH1cbiAgICAgIGFkZGVkVGV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfSwgb3B0aW9ucy5wYXJzZXIpO1xuICBwYXJzZXIud3JpdGUoaHRtbCk7XG4gIHBhcnNlci5lbmQoKTtcblxuICByZXR1cm4gcmVzdWx0O1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVTdGF0ZSgpIHtcbiAgICByZXN1bHQgPSAnJztcbiAgICBkZXB0aCA9IDA7XG4gICAgc3RhY2sgPSBbXTtcbiAgICBza2lwTWFwID0ge307XG4gICAgdHJhbnNmb3JtTWFwID0ge307XG4gICAgc2tpcFRleHQgPSBmYWxzZTtcbiAgICBza2lwVGV4dERlcHRoID0gMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVzY2FwZUh0bWwocywgcXVvdGUpIHtcbiAgICBpZiAodHlwZW9mIChzKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHMgPSBzICsgJyc7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnBhcnNlci5kZWNvZGVFbnRpdGllcykge1xuICAgICAgcyA9IHMucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICAgICAgaWYgKHF1b3RlKSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVE9ETzogdGhpcyBpcyBpbmFkZXF1YXRlIGJlY2F1c2UgaXQgd2lsbCBwYXNzIGAmMDtgLiBUaGlzIGFwcHJvYWNoXG4gICAgLy8gd2lsbCBub3Qgd29yaywgZWFjaCAmIG11c3QgYmUgY29uc2lkZXJlZCB3aXRoIHJlZ2FyZCB0byB3aGV0aGVyIGl0XG4gICAgLy8gaXMgZm9sbG93ZWQgYnkgYSAxMDAlIHN5bnRhY3RpY2FsbHkgdmFsaWQgZW50aXR5IG9yIG5vdCwgYW5kIGVzY2FwZWRcbiAgICAvLyBpZiBpdCBpcyBub3QuIElmIHRoaXMgYm90aGVycyB5b3UsIGRvbid0IHNldCBwYXJzZXIuZGVjb2RlRW50aXRpZXNcbiAgICAvLyB0byBmYWxzZS4gKFRoZSBkZWZhdWx0IGlzIHRydWUuKVxuICAgIHMgPSBzLnJlcGxhY2UoLyYoPyFbYS16QS1aMC05I117MSwyMH07KS9nLCAnJmFtcDsnKSAvLyBNYXRjaCBhbXBlcnNhbmRzIG5vdCBwYXJ0IG9mIGV4aXN0aW5nIEhUTUwgZW50aXR5XG4gICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICAgIGlmIChxdW90ZSkge1xuICAgICAgcyA9IHMucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgIH1cbiAgICByZXR1cm4gcztcbiAgfVxuXG4gIGZ1bmN0aW9uIG5hdWdodHlIcmVmKG5hbWUsIGhyZWYpIHtcbiAgICAvLyBCcm93c2VycyBpZ25vcmUgY2hhcmFjdGVyIGNvZGVzIG9mIDMyIChzcGFjZSkgYW5kIGJlbG93IGluIGEgc3VycHJpc2luZ1xuICAgIC8vIG51bWJlciBvZiBzaXR1YXRpb25zLiBTdGFydCByZWFkaW5nIGhlcmU6XG4gICAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXQjRW1iZWRkZWRfdGFiXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICBocmVmID0gaHJlZi5yZXBsYWNlKC9bXFx4MDAtXFx4MjBdKy9nLCAnJyk7XG4gICAgLy8gQ2xvYmJlciBhbnkgY29tbWVudHMgaW4gVVJMcywgd2hpY2ggdGhlIGJyb3dzZXIgbWlnaHRcbiAgICAvLyBpbnRlcnByZXQgaW5zaWRlIGFuIFhNTCBkYXRhIGlzbGFuZCwgYWxsb3dpbmdcbiAgICAvLyBhIGphdmFzY3JpcHQ6IFVSTCB0byBiZSBzbnVjayB0aHJvdWdoXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IGZpcnN0SW5kZXggPSBocmVmLmluZGV4T2YoJzwhLS0nKTtcbiAgICAgIGlmIChmaXJzdEluZGV4ID09PSAtMSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGhyZWYuaW5kZXhPZignLS0+JywgZmlyc3RJbmRleCArIDQpO1xuICAgICAgaWYgKGxhc3RJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBocmVmID0gaHJlZi5zdWJzdHJpbmcoMCwgZmlyc3RJbmRleCkgKyBocmVmLnN1YnN0cmluZyhsYXN0SW5kZXggKyAzKTtcbiAgICB9XG4gICAgLy8gQ2FzZSBpbnNlbnNpdGl2ZSBzbyB3ZSBkb24ndCBnZXQgZmFrZWQgb3V0IGJ5IEpBVkFTQ1JJUFQgIzFcbiAgICAvLyBBbGxvdyBtb3JlIGNoYXJhY3RlcnMgYWZ0ZXIgdGhlIGZpcnN0IHNvIHdlIGRvbid0IGdldCBmYWtlZFxuICAgIC8vIG91dCBieSBjZXJ0YWluIHNjaGVtZXMgYnJvd3NlcnMgYWNjZXB0XG4gICAgY29uc3QgbWF0Y2hlcyA9IGhyZWYubWF0Y2goL14oW2EtekEtWl1bYS16QS1aMC05LlxcLStdKik6Lyk7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAvLyBQcm90b2NvbC1yZWxhdGl2ZSBVUkwgc3RhcnRpbmcgd2l0aCBhbnkgY29tYmluYXRpb24gb2YgJy8nIGFuZCAnXFwnXG4gICAgICBpZiAoaHJlZi5tYXRjaCgvXlsvXFxcXF17Mn0vKSkge1xuICAgICAgICByZXR1cm4gIW9wdGlvbnMuYWxsb3dQcm90b2NvbFJlbGF0aXZlO1xuICAgICAgfVxuXG4gICAgICAvLyBObyBzY2hlbWVcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc2NoZW1lID0gbWF0Y2hlc1sxXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgaWYgKGhhcyhvcHRpb25zLmFsbG93ZWRTY2hlbWVzQnlUYWcsIG5hbWUpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucy5hbGxvd2VkU2NoZW1lc0J5VGFnW25hbWVdLmluZGV4T2Yoc2NoZW1lKSA9PT0gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuICFvcHRpb25zLmFsbG93ZWRTY2hlbWVzIHx8IG9wdGlvbnMuYWxsb3dlZFNjaGVtZXMuaW5kZXhPZihzY2hlbWUpID09PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVXJsKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eKFxcdys6KT9cXHMqW1xcXFwvXVxccypbXFxcXC9dLywgJyQxLy8nKTtcbiAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgncmVsYXRpdmU6JykpIHtcbiAgICAgIC8vIEFuIGF0dGVtcHQgdG8gZXhwbG9pdCBvdXIgd29ya2Fyb3VuZCBmb3IgYmFzZSBVUkxzIGJlaW5nXG4gICAgICAvLyBtYW5kYXRvcnkgZm9yIHJlbGF0aXZlIFVSTCB2YWxpZGF0aW9uIGluIHRoZSBXSEFUV0dcbiAgICAgIC8vIFVSTCBwYXJzZXIsIHJlamVjdCBpdFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZWxhdGl2ZTogZXhwbG9pdCBhdHRlbXB0Jyk7XG4gICAgfVxuICAgIC8vIG5hdWdodHlIcmVmIGlzIGluIGNoYXJnZSBvZiB3aGV0aGVyIHByb3RvY29sIHJlbGF0aXZlIFVSTHNcbiAgICAvLyBhcmUgY29vbC4gSGVyZSB3ZSBhcmUgY29uY2VybmVkIGp1c3Qgd2l0aCBhbGxvd2VkIGhvc3RuYW1lcyBhbmRcbiAgICAvLyB3aGV0aGVyIHRvIGFsbG93IHJlbGF0aXZlIFVSTHMuXG4gICAgLy9cbiAgICAvLyBCdWlsZCBhIHBsYWNlaG9sZGVyIFwiYmFzZSBVUkxcIiBhZ2FpbnN0IHdoaWNoIGFueSByZWFzb25hYmxlXG4gICAgLy8gcmVsYXRpdmUgVVJMIG1heSBiZSBwYXJzZWQgc3VjY2Vzc2Z1bGx5XG4gICAgbGV0IGJhc2UgPSAncmVsYXRpdmU6Ly9yZWxhdGl2ZS1zaXRlJztcbiAgICBmb3IgKGxldCBpID0gMDsgKGkgPCAxMDApOyBpKyspIHtcbiAgICAgIGJhc2UgKz0gYC8ke2l9YDtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKHZhbHVlLCBiYXNlKTtcblxuICAgIGNvbnN0IGlzUmVsYXRpdmVVcmwgPSBwYXJzZWQgJiYgcGFyc2VkLmhvc3RuYW1lID09PSAncmVsYXRpdmUtc2l0ZScgJiYgcGFyc2VkLnByb3RvY29sID09PSAncmVsYXRpdmU6JztcbiAgICByZXR1cm4ge1xuICAgICAgaXNSZWxhdGl2ZVVybCxcbiAgICAgIHVybDogcGFyc2VkXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRmlsdGVycyB1c2VyIGlucHV0IGNzcyBwcm9wZXJ0aWVzIGJ5IGFsbG93bGlzdGVkIHJlZ2V4IGF0dHJpYnV0ZXMuXG4gICAqIE1vZGlmaWVzIHRoZSBhYnN0cmFjdFN5bnRheFRyZWUgb2JqZWN0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWJzdHJhY3RTeW50YXhUcmVlICAtIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBDU1MgYXR0cmlidXRlcy5cbiAgICogQHByb3BlcnR5IHthcnJheVtEZWNsYXJhdGlvbl19IGFic3RyYWN0U3ludGF4VHJlZS5ub2Rlc1swXSAtIEVhY2ggb2JqZWN0IGNvaW50YWlucyBwcm9wIGFuZCB2YWx1ZSBrZXksIGkuZSB7IHByb3A6ICdjb2xvcicsIHZhbHVlOiAncmVkJyB9LlxuICAgKiBAcGFyYW0ge29iamVjdH0gYWxsb3dlZFN0eWxlcyAgICAgICAtIEtleXMgYXJlIHByb3BlcnRpZXMgKGkuZSBjb2xvciksIHZhbHVlIGlzIGxpc3Qgb2YgcGVybWl0dGVkIHJlZ2V4IHJ1bGVzIChpLmUgL2dyZWVuL2kpLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgICAgICAtIFRoZSBtb2RpZmllZCB0cmVlLlxuICAgKi9cbiAgZnVuY3Rpb24gZmlsdGVyQ3NzKGFic3RyYWN0U3ludGF4VHJlZSwgYWxsb3dlZFN0eWxlcykge1xuICAgIGlmICghYWxsb3dlZFN0eWxlcykge1xuICAgICAgcmV0dXJuIGFic3RyYWN0U3ludGF4VHJlZTtcbiAgICB9XG5cbiAgICBjb25zdCBhc3RSdWxlcyA9IGFic3RyYWN0U3ludGF4VHJlZS5ub2Rlc1swXTtcbiAgICBsZXQgc2VsZWN0ZWRSdWxlO1xuXG4gICAgLy8gTWVyZ2UgZ2xvYmFsIGFuZCB0YWctc3BlY2lmaWMgc3R5bGVzIGludG8gbmV3IEFTVC5cbiAgICBpZiAoYWxsb3dlZFN0eWxlc1thc3RSdWxlcy5zZWxlY3Rvcl0gJiYgYWxsb3dlZFN0eWxlc1snKiddKSB7XG4gICAgICBzZWxlY3RlZFJ1bGUgPSBkZWVwbWVyZ2UoXG4gICAgICAgIGFsbG93ZWRTdHlsZXNbYXN0UnVsZXMuc2VsZWN0b3JdLFxuICAgICAgICBhbGxvd2VkU3R5bGVzWycqJ11cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkUnVsZSA9IGFsbG93ZWRTdHlsZXNbYXN0UnVsZXMuc2VsZWN0b3JdIHx8IGFsbG93ZWRTdHlsZXNbJyonXTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWRSdWxlKSB7XG4gICAgICBhYnN0cmFjdFN5bnRheFRyZWUubm9kZXNbMF0ubm9kZXMgPSBhc3RSdWxlcy5ub2Rlcy5yZWR1Y2UoZmlsdGVyRGVjbGFyYXRpb25zKHNlbGVjdGVkUnVsZSksIFtdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWJzdHJhY3RTeW50YXhUcmVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIHRoZSBzdHlsZSBhdHRyaWJ1dGVzIGZyb20gYW4gQWJzdHJhY3RTeW50YXhUcmVlIGFuZCBmb3JtYXRzIHRob3NlXG4gICAqIHZhbHVlcyBpbiB0aGUgaW5saW5lIHN0eWxlIGF0dHJpYnV0ZSBmb3JtYXQuXG4gICAqXG4gICAqIEBwYXJhbSAge0Fic3RyYWN0U3ludGF4VHJlZX0gZmlsdGVyZWRBU1RcbiAgICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgICAtIEV4YW1wbGU6IFwiY29sb3I6eWVsbG93O3RleHQtYWxpZ246Y2VudGVyICFpbXBvcnRhbnQ7Zm9udC1mYW1pbHk6aGVsdmV0aWNhO1wiXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdpZnlTdHlsZUF0dHJpYnV0ZXMoZmlsdGVyZWRBU1QpIHtcbiAgICByZXR1cm4gZmlsdGVyZWRBU1Qubm9kZXNbMF0ubm9kZXNcbiAgICAgIC5yZWR1Y2UoZnVuY3Rpb24oZXh0cmFjdGVkQXR0cmlidXRlcywgYXR0ck9iamVjdCkge1xuICAgICAgICBleHRyYWN0ZWRBdHRyaWJ1dGVzLnB1c2goXG4gICAgICAgICAgYCR7YXR0ck9iamVjdC5wcm9wfToke2F0dHJPYmplY3QudmFsdWV9JHthdHRyT2JqZWN0LmltcG9ydGFudCA/ICcgIWltcG9ydGFudCcgOiAnJ31gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBleHRyYWN0ZWRBdHRyaWJ1dGVzO1xuICAgICAgfSwgW10pXG4gICAgICAuam9pbignOycpO1xuICB9XG5cbiAgLyoqXG4gICAgKiBGaWx0ZXJzIHRoZSBleGlzdGluZyBhdHRyaWJ1dGVzIGZvciB0aGUgZ2l2ZW4gcHJvcGVydHkuIERpc2NhcmRzIGFueSBhdHRyaWJ1dGVzXG4gICAgKiB3aGljaCBkb24ndCBtYXRjaCB0aGUgYWxsb3dsaXN0LlxuICAgICpcbiAgICAqIEBwYXJhbSAge29iamVjdH0gc2VsZWN0ZWRSdWxlICAgICAgICAgICAgIC0gRXhhbXBsZTogeyBjb2xvcjogcmVkLCBmb250LWZhbWlseTogaGVsdmV0aWNhIH1cbiAgICAqIEBwYXJhbSAge2FycmF5fSBhbGxvd2VkRGVjbGFyYXRpb25zTGlzdCAgIC0gTGlzdCBvZiBkZWNsYXJhdGlvbnMgd2hpY2ggcGFzcyB0aGUgYWxsb3dsaXN0LlxuICAgICogQHBhcmFtICB7b2JqZWN0fSBhdHRyaWJ1dGVPYmplY3QgICAgICAgICAgLSBPYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IGNzcyBwcm9wZXJ0eS5cbiAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBhdHRyaWJ1dGVPYmplY3QudHlwZSAgIC0gVHlwaWNhbGx5ICdkZWNsYXJhdGlvbicuXG4gICAgKiBAcHJvcGVydHkge3N0cmluZ30gYXR0cmlidXRlT2JqZWN0LnByb3AgICAtIFRoZSBDU1MgcHJvcGVydHksIGkuZSAnY29sb3InLlxuICAgICogQHByb3BlcnR5IHtzdHJpbmd9IGF0dHJpYnV0ZU9iamVjdC52YWx1ZSAgLSBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSB0byB0aGUgY3NzIHByb3BlcnR5LCBpLmUgJ3JlZCcuXG4gICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gICAgICAgICAgICAgICAgICAgICAgICAtIFdoZW4gdXNlZCBpbiBBcnJheS5yZWR1Y2UsIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIERlY2xhcmF0aW9uIG9iamVjdHNcbiAgICAqL1xuICBmdW5jdGlvbiBmaWx0ZXJEZWNsYXJhdGlvbnMoc2VsZWN0ZWRSdWxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhbGxvd2VkRGVjbGFyYXRpb25zTGlzdCwgYXR0cmlidXRlT2JqZWN0KSB7XG4gICAgICAvLyBJZiB0aGlzIHByb3BlcnR5IGlzIGFsbG93bGlzdGVkLi4uXG4gICAgICBpZiAoaGFzKHNlbGVjdGVkUnVsZSwgYXR0cmlidXRlT2JqZWN0LnByb3ApKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZXNSZWdleCA9IHNlbGVjdGVkUnVsZVthdHRyaWJ1dGVPYmplY3QucHJvcF0uc29tZShmdW5jdGlvbihyZWd1bGFyRXhwcmVzc2lvbikge1xuICAgICAgICAgIHJldHVybiByZWd1bGFyRXhwcmVzc2lvbi50ZXN0KGF0dHJpYnV0ZU9iamVjdC52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYXRjaGVzUmVnZXgpIHtcbiAgICAgICAgICBhbGxvd2VkRGVjbGFyYXRpb25zTGlzdC5wdXNoKGF0dHJpYnV0ZU9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxvd2VkRGVjbGFyYXRpb25zTGlzdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsdGVyQ2xhc3NlcyhjbGFzc2VzLCBhbGxvd2VkLCBhbGxvd2VkR2xvYnMpIHtcbiAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgIC8vIFRoZSBjbGFzcyBhdHRyaWJ1dGUgaXMgYWxsb3dlZCB3aXRob3V0IGZpbHRlcmluZyBvbiB0aGlzIHRhZ1xuICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgfVxuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KC9cXHMrLyk7XG4gICAgcmV0dXJuIGNsYXNzZXMuZmlsdGVyKGZ1bmN0aW9uKGNsc3MpIHtcbiAgICAgIHJldHVybiBhbGxvd2VkLmluZGV4T2YoY2xzcykgIT09IC0xIHx8IGFsbG93ZWRHbG9icy5zb21lKGZ1bmN0aW9uKGdsb2IpIHtcbiAgICAgICAgcmV0dXJuIGdsb2IudGVzdChjbHNzKTtcbiAgICAgIH0pO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxufVxuXG4vLyBEZWZhdWx0cyBhcmUgYWNjZXNzaWJsZSB0byB5b3Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGVtIGFzIGEgc3RhcnRpbmcgcG9pbnRcbi8vIHByb2dyYW1tYXRpY2FsbHkgaWYgeW91IHdpc2hcblxuY29uc3QgaHRtbFBhcnNlckRlZmF1bHRzID0ge1xuICBkZWNvZGVFbnRpdGllczogdHJ1ZVxufTtcbnNhbml0aXplSHRtbC5kZWZhdWx0cyA9IHtcbiAgYWxsb3dlZFRhZ3M6IFtcbiAgICAvLyBTZWN0aW9ucyBkZXJpdmVkIGZyb20gTUROIGVsZW1lbnQgY2F0ZWdvcmllcyBhbmQgbGltaXRlZCB0byB0aGUgbW9yZVxuICAgIC8vIGJlbmlnbiBjYXRlZ29yaWVzLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudFxuICAgIC8vIENvbnRlbnQgc2VjdGlvbmluZ1xuICAgICdhZGRyZXNzJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnZm9vdGVyJywgJ2hlYWRlcicsXG4gICAgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hncm91cCcsXG4gICAgJ21haW4nLCAnbmF2JywgJ3NlY3Rpb24nLFxuICAgIC8vIFRleHQgY29udGVudFxuICAgICdibG9ja3F1b3RlJywgJ2RkJywgJ2RpdicsICdkbCcsICdkdCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsXG4gICAgJ2hyJywgJ2xpJywgJ21haW4nLCAnb2wnLCAncCcsICdwcmUnLCAndWwnLFxuICAgIC8vIElubGluZSB0ZXh0IHNlbWFudGljc1xuICAgICdhJywgJ2FiYnInLCAnYicsICdiZGknLCAnYmRvJywgJ2JyJywgJ2NpdGUnLCAnY29kZScsICdkYXRhJywgJ2RmbicsXG4gICAgJ2VtJywgJ2knLCAna2JkJywgJ21hcmsnLCAncScsXG4gICAgJ3JiJywgJ3JwJywgJ3J0JywgJ3J0YycsICdydWJ5JyxcbiAgICAncycsICdzYW1wJywgJ3NtYWxsJywgJ3NwYW4nLCAnc3Ryb25nJywgJ3N1YicsICdzdXAnLCAndGltZScsICd1JywgJ3ZhcicsICd3YnInLFxuICAgIC8vIFRhYmxlIGNvbnRlbnRcbiAgICAnY2FwdGlvbicsICdjb2wnLCAnY29sZ3JvdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGZvb3QnLCAndGgnLFxuICAgICd0aGVhZCcsICd0cidcbiAgXSxcbiAgZGlzYWxsb3dlZFRhZ3NNb2RlOiAnZGlzY2FyZCcsXG4gIGFsbG93ZWRBdHRyaWJ1dGVzOiB7XG4gICAgYTogWyAnaHJlZicsICduYW1lJywgJ3RhcmdldCcgXSxcbiAgICAvLyBXZSBkb24ndCBjdXJyZW50bHkgYWxsb3cgaW1nIGl0c2VsZiBieSBkZWZhdWx0LCBidXRcbiAgICAvLyB0aGVzZSBhdHRyaWJ1dGVzIHdvdWxkIG1ha2Ugc2Vuc2UgaWYgd2UgZGlkLlxuICAgIGltZzogWyAnc3JjJywgJ3NyY3NldCcsICdhbHQnLCAndGl0bGUnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2xvYWRpbmcnIF1cbiAgfSxcbiAgLy8gTG90cyBvZiB0aGVzZSB3b24ndCBjb21lIHVwIGJ5IGRlZmF1bHQgYmVjYXVzZSB3ZSBkb24ndCBhbGxvdyB0aGVtXG4gIHNlbGZDbG9zaW5nOiBbICdpbWcnLCAnYnInLCAnaHInLCAnYXJlYScsICdiYXNlJywgJ2Jhc2Vmb250JywgJ2lucHV0JywgJ2xpbmsnLCAnbWV0YScgXSxcbiAgLy8gVVJMIHNjaGVtZXMgd2UgcGVybWl0XG4gIGFsbG93ZWRTY2hlbWVzOiBbICdodHRwJywgJ2h0dHBzJywgJ2Z0cCcsICdtYWlsdG8nLCAndGVsJyBdLFxuICBhbGxvd2VkU2NoZW1lc0J5VGFnOiB7fSxcbiAgYWxsb3dlZFNjaGVtZXNBcHBsaWVkVG9BdHRyaWJ1dGVzOiBbICdocmVmJywgJ3NyYycsICdjaXRlJyBdLFxuICBhbGxvd1Byb3RvY29sUmVsYXRpdmU6IHRydWUsXG4gIGVuZm9yY2VIdG1sQm91bmRhcnk6IGZhbHNlXG59O1xuXG5zYW5pdGl6ZUh0bWwuc2ltcGxlVHJhbnNmb3JtID0gZnVuY3Rpb24obmV3VGFnTmFtZSwgbmV3QXR0cmlicywgbWVyZ2UpIHtcbiAgbWVyZ2UgPSAobWVyZ2UgPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVyZ2U7XG4gIG5ld0F0dHJpYnMgPSBuZXdBdHRyaWJzIHx8IHt9O1xuXG4gIHJldHVybiBmdW5jdGlvbih0YWdOYW1lLCBhdHRyaWJzKSB7XG4gICAgbGV0IGF0dHJpYjtcbiAgICBpZiAobWVyZ2UpIHtcbiAgICAgIGZvciAoYXR0cmliIGluIG5ld0F0dHJpYnMpIHtcbiAgICAgICAgYXR0cmlic1thdHRyaWJdID0gbmV3QXR0cmlic1thdHRyaWJdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhdHRyaWJzID0gbmV3QXR0cmlicztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGFnTmFtZTogbmV3VGFnTmFtZSxcbiAgICAgIGF0dHJpYnM6IGF0dHJpYnNcbiAgICB9O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLyohXG4gKiBpcy1wbGFpbi1vYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLXBsYWluLW9iamVjdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNywgSm9uIFNjaGxpbmtlcnQuXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIHZhciBjdG9yLHByb3Q7XG5cbiAgaWYgKGlzT2JqZWN0KG8pID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuICBjdG9yID0gby5jb25zdHJ1Y3RvcjtcbiAgaWYgKGN0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIHByb3RvdHlwZVxuICBwcm90ID0gY3Rvci5wcm90b3R5cGU7XG4gIGlmIChpc09iamVjdChwcm90KSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBjb25zdHJ1Y3RvciBkb2VzIG5vdCBoYXZlIGFuIE9iamVjdC1zcGVjaWZpYyBtZXRob2RcbiAgaWYgKHByb3QuaGFzT3duUHJvcGVydHkoJ2lzUHJvdG90eXBlT2YnKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBNb3N0IGxpa2VseSBhIHBsYWluIE9iamVjdFxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJsZXQgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbmxldCBjdXN0b21BbHBoYWJldCA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUgPSAyMSkgPT4ge1xuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgbGV0IGkgPSBzaXplXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWQgKz0gYWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGgpIHwgMF1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG4gIH1cbn1cbmxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGxldCBpZCA9ICcnXG4gIGxldCBpID0gc2l6ZVxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWQgKz0gdXJsQWxwaGFiZXRbKE1hdGgucmFuZG9tKCkgKiA2NCkgfCAwXVxuICB9XG4gIHJldHVybiBpZFxufVxubW9kdWxlLmV4cG9ydHMgPSB7IG5hbm9pZCwgY3VzdG9tQWxwaGFiZXQgfVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hbGwuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hbGwuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Zvcm0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb3JtLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC1wcm9qZWN0cy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LXByb2plY3RzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uZXctcHJvamVjdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25ldy1wcm9qZWN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uZXctdG9kb0l0ZW0uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uZXctdG9kb0l0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25ldy1jaGVja2xpc3RJdGVtLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmV3LWNoZWNrbGlzdEl0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Nob3ctcHJvamVjdC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Nob3ctcHJvamVjdC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2hvdy10b2RvSXRlbS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Nob3ctdG9kb0l0ZW0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2VkaXQuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9lZGl0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImV4cG9ydCBjb25zdCBJTklUSUFMSVpFID0gJ2luaXRpYWxpemUnO1xuZXhwb3J0IGNvbnN0IERBVEFfSU5JVElBTElaRUQgPSAnZGF0YUluaXRpYWxpemVkJztcblxuZXhwb3J0IGNvbnN0IEJBQ0sgPSAnYmFjayc7XG5leHBvcnQgY29uc3QgSU5ERVggPSB0eXBlID0+IGBpbmRleC4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBORVcgPSB0eXBlID0+IGBuZXcuJHt0eXBlfWA7XG5leHBvcnQgY29uc3QgQ1JFQVRFID0gdHlwZSA9PiBgY3JlYXRlLiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IENSRUFURV9DT0xMRUNUSU9OX0lURU1TID0gKHR5cGUsIGlkLCBjb2xsZWN0aW9uVHlwZSkgPT4gYGNyZWF0ZS5jb2xsZWN0aW9uLiR7Y29sbGVjdGlvblR5cGV9LiR7dHlwZX0uJHtpZH1gO1xuZXhwb3J0IGNvbnN0IFNIT1cgPSB0eXBlID0+IGBzaG93LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEhJREUgPSB0eXBlID0+IGBoaWRlLiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9FRElUX0FUVFJJQlVURSA9ICdlZGl0LmF0dHJpYnV0ZSc7XG5leHBvcnQgY29uc3QgRURJVF9BVFRSSUJVVEUgPSB0eXBlID0+IGBlZGl0LmF0dHJpYnV0ZS4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBBTllfRURJVF9CRUxPTkcgPSAnZWRpdC5iZWxvbmcnO1xuZXhwb3J0IGNvbnN0IEVESVRfQkVMT05HID0gdHlwZSA9PiBgZWRpdC5iZWxvbmcuJHt0eXBlfWA7XG5leHBvcnQgY29uc3QgREVTVFJPWSA9IHR5cGUgPT4gYGRlc3Ryb3kuJHt0eXBlfWA7XG5cbmV4cG9ydCBjb25zdCBDT0xMRUNUSU9OX0lURU1TX0NSRUFURUQgPSBjb2xsZWN0aW9uVHlwZSA9PiBgY3JlYXRlZC5jb2xsZWN0aW9uLiR7Y29sbGVjdGlvblR5cGV9YDtcblxuZXhwb3J0IGNvbnN0IFZBTElEQVRJT05fRVJST1IgPSAnZXJyb3IudmFsaWRhdGlvbic7XG5cbmV4cG9ydCBjb25zdCBVUERBVEUgPSAodHlwZSwgaWQpID0+IGB1cGRhdGUuJHt0eXBlfS4ke2lkfWA7XG5leHBvcnQgY29uc3QgVVBEQVRFX1NUQVRVUyA9ICh0eXBlLCBpZCkgPT4gYHVwZGF0ZS4ke3R5cGV9LnN0YXR1cy4ke2lkfWA7XG5leHBvcnQgY29uc3QgVVBEQVRFX1BSSU9SSVRZID0gKHR5cGUsIGlkKSA9PiBgdXBkYXRlLiR7dHlwZX0ucHJpb3JpdHkuJHtpZH1gO1xuZXhwb3J0IGNvbnN0IFVQREFURV9CRUxPTkcgPSAodHlwZSwgaWQsIGJlbG9uZ1R5cGUpID0+IGB1cGRhdGUuJHt0eXBlfS5iZWxvbmcuJHtiZWxvbmdUeXBlfS4ke2lkfWA7XG5cbmV4cG9ydCBjb25zdCBBTllfVVBEQVRFRCA9ICd1cGRhdGVkJztcbmV4cG9ydCBjb25zdCBEQVRBX1VQREFURUQgPSAndXBkYXRlZC5kYXRhJztcbmV4cG9ydCBjb25zdCBJVEVNX1VQREFURUQgPSAodHlwZSwgaWQpID0+IGB1cGRhdGVkLmRhdGEuaXRlbS4ke3R5cGV9LiR7aWR9YDtcbmV4cG9ydCBjb25zdCBMSVNUX1VQREFURUQgPSB0eXBlID0+IGB1cGRhdGVkLmRhdGEubGlzdC4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBCRUxPTkdfVVBEQVRFRCA9IHR5cGUgPT4gYHVwZGF0ZWQuJHt0eXBlfS5iZWxvbmdgO1xuZXhwb3J0IGNvbnN0IENPTExFQ1RJT05fVVBEQVRFRCA9IHR5cGUgPT4gYHVwZGF0ZWQuJHt0eXBlfS5jb2xsZWN0aW9uYDtcblxuZXhwb3J0IGNvbnN0IFBBR0VfUkVOREVSRUQgPSAncmVuZGVyZWQucGFnZSc7XG5leHBvcnQgY29uc3QgVklFV19SRU5ERVJFRCA9ICdyZW5kZXJlZC52aWV3JztcbmV4cG9ydCBjb25zdCBBTllfSU5ERVhfUkVOREVSRUQgPSAncmVuZGVyZWQudmlldy5pbmRleCc7XG5leHBvcnQgY29uc3QgSU5ERVhfUkVOREVSRUQgPSB0eXBlID0+IGByZW5kZXJlZC52aWV3LmluZGV4LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9ORVdfUkVOREVSRUQgPSAncmVuZGVyZWQudmlldy5uZXcnO1xuZXhwb3J0IGNvbnN0IE5FV19SRU5ERVJFRCA9IHR5cGUgPT4gYHJlbmRlcmVkLnZpZXcubmV3LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9ORVdfQ09MTEVDVElPTl9JVEVNX1JFTkRFUkVEID0gJ3JlbmRlcmVkLnZpZXcuY29sbGVjdGlvbi5uZXcnO1xuZXhwb3J0IGNvbnN0IE5FV19DT0xMRUNUSU9OX0lURU1fUkVOREVSRUQgPSB0eXBlID0+IGByZW5kZXJlZC52aWV3LmNvbGxlY3Rpb24ubmV3LiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9TSE9XX1JFTkRFUkVEID0gJ3JlbmRlcmVkLnZpZXcuc2hvdyc7XG5leHBvcnQgY29uc3QgU0hPV19SRU5ERVJFRCA9IHR5cGUgPT4gYHJlbmRlcmVkLnZpZXcuc2hvdy4ke3R5cGV9YDtcbmV4cG9ydCBjb25zdCBBTllfRURJVF9BVFRSSUJVVEVfUkVOREVSRUQgPSAncmVuZGVyZWQudmlldy5lZGl0LmF0dHJpYnV0ZSc7XG5leHBvcnQgY29uc3QgRURJVF9BVFRSSUJVVEVfUkVOREVSRUQgPSB0eXBlID0+IGByZW5kZXJlZC52aWV3LmVkaXQuYXR0cmlidXRlLiR7dHlwZX1gO1xuZXhwb3J0IGNvbnN0IEFOWV9FRElUX0JFTE9OR19SRU5ERVJFRCA9ICdyZW5kZXJlZC52aWV3LmVkaXQuYmVsb25nJztcbmV4cG9ydCBjb25zdCBFRElUX0JFTE9OR19SRU5ERVJFRCA9IHR5cGUgPT4gYHJlbmRlcmVkLnZpZXcuZWRpdC5iZWxvbmcuJHt0eXBlfWA7XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYoIWxvY2FsU3RvcmFnZS5kYXRhKSByZXR1cm47XG4gIGNvbnN0IEpTT05EYXRhID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZGF0YSksXG4gICAgICAgIGRhdGEgPSB7fTtcbiAgZm9yKGNvbnN0IGtleSBpbiBKU09ORGF0YSlcbiAgICBkYXRhW2tleV0gPSBKU09OLnBhcnNlKEpTT05EYXRhW2tleV0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVEYXRhKGRhdGEpIHtcbiAgY29uc3QgSlNPTkRhdGEgPSB7fTtcbiAgZm9yKGNvbnN0IGtleSBpbiBkYXRhKVxuICAgIEpTT05EYXRhW2tleV0gPSBKU09OLnN0cmluZ2lmeShkYXRhW2tleV0pO1xuICBsb2NhbFN0b3JhZ2UuZGF0YSA9IEpTT04uc3RyaW5naWZ5KEpTT05EYXRhKTtcbn1cbiIsImltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IElOREVYLCBJTkRFWF9SRU5ERVJFRCwgUEFHRV9SRU5ERVJFRCB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSwgYXBwbGljYXRpb25TZXR0aW5ncyBhcyBzZXR0aW5ncyB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcblxuUHViU3ViLnN1YnNjcmliZShJTkRFWCgncHJvamVjdCcpLCBpbmRleFByb2plY3RzVmlldylcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluZGV4UHJvamVjdHNWaWV3KCkge1xuICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9XG4gIGA8ZGl2IGNsYXNzPVwiaW50cm9cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJpbnRyby1oZWFkaW5nXCI+XG4gICAgICAgIDxoMT5BY3Rpb25hbGl0eTwvaDE+XG4gICAgICAgIDxoMj5Zb3VyIG9uZS1zdG9wIHRvLWRvIGFwcDwvaDI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJuZXdcIiBkYXRhLXR5cGU9XCJ0b2RvSXRlbVwiIGRhdGEtcHJvamVjdC1pZD1cIjBcIj5cbiAgICAgICAgQWRkIGEgTmV3IFRvLURvXG4gICAgICA8L2J1dHRvbj5cbiAgIDwvZGl2PlxuICAgPGRpdiBjbGFzcz1cInByb2plY3RzLWhlYWRpbmdcIj5cbiAgICAgIDxoMj5NeSBQcm9qZWN0czwvaDI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwibmV3IHN5bWJvbFwiIGRhdGEtdHlwZT1cInByb2plY3RcIj4rPC9idXR0b24+XG4gICA8L2Rpdj5gO1xuXG4gIF9yZW5kZXJQcm9qZWN0cygpO1xuICBQdWJTdWIucHVibGlzaChQQUdFX1JFTkRFUkVELCBpbmRleFByb2plY3RzVmlldyk7XG4gIFB1YlN1Yi5wdWJsaXNoKElOREVYX1JFTkRFUkVEKCdwcm9qZWN0JykpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyUHJvamVjdHMoKSB7XG4gIHJlbmRlckRhdGEucHJvamVjdHNMaXN0LnByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgY29uc3QgcHJvamVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBwcm9qZWN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0JywgJ3Nob3cnKTtcbiAgICBwcm9qZWN0RWxlbWVudC5kYXRhc2V0LnR5cGUgPSBwcm9qZWN0LnR5cGU7XG4gICAgcHJvamVjdEVsZW1lbnQuZGF0YXNldC5pZCA9IHByb2plY3QuaWQ7XG4gICAgcHJvamVjdEVsZW1lbnQuZGF0YXNldC50b2RvSXRlbXNGdWxsID0gJyc7XG4gICAgcHJvamVjdEVsZW1lbnQuaW5uZXJIVE1MID0gYDxoMz4ke3Byb2plY3QudGl0bGV9PC9oMz5gO1xuICAgIGlmKHByb2plY3QuaWQpIHByb2plY3RFbGVtZW50LmlubmVySFRNTCArPSBcbiAgICBgPGJ1dHRvbiBjbGFzcz1cImRlc3Ryb3lcIiBcbiAgICAgICAgICAgICBkYXRhLXR5cGU9XCIke3Byb2plY3QudHlwZX1cIiBkYXRhLWlkPVwiJHtwcm9qZWN0LmlkfVwiPlxuICAgICAgICBEZWxldGVcbiAgICAgPC9idXR0b24+YDtcblxuICAgIGNvbnN0IHByZXZpZXdJdGVtcyA9IFxuICAgICAgcmVuZGVyRGF0YS50b2RvSXRlbXNMaXN0XG4gICAgICAgICAgICAgICAgLndpdGhJZHMocHJvamVjdC50b2RvSXRlbXMsIHsgY29uZGl0aW9uczogeyBzdGF0dXM6IHNldHRpbmdzLnN0YXR1c2VzWzBdIH0gfSk7XG4gICAgY29uc3QgZWxlbWVudFR5cGUgPSBwcmV2aWV3SXRlbXMubGVuZ3RoID8gJ3VsJyA6ICdkaXYnO1xuICAgIHByb2plY3RFbGVtZW50LmlubmVySFRNTCArPVxuICAgIGA8JHtlbGVtZW50VHlwZX0gY2xhc3M9XCJwcm9qZWN0LXByZXZpZXcgc3RhdHVzLSR7cHJldmlld0l0ZW1zLmxlbmd0aCA/IDAgOiAxfVwiPlxuICAgICAgICAke3ByZXZpZXdJdGVtcy5sZW5ndGggPyBcbiAgICAgICAgICBwcmV2aWV3SXRlbXMuc2xpY2UoMCwgc2V0dGluZ3MucHJldmlld051bSkubWFwKHRvZG9JdGVtID0+XG4gICAgICAgICAgICBgPGxpPiR7dG9kb0l0ZW0udGl0bGV9PC9saT5gKS5qb2luKCcnKVxuICAgICAgICA6ICdFdmVyeXRoaW5nIGRvbmUhJyB9XG4gICAgIDwvJHtlbGVtZW50VHlwZX0+YFxuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQocHJvamVjdEVsZW1lbnQpO1xuICB9KVxufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgSU5JVElBTElaRSwgREFUQV9JTklUSUFMSVpFRCwgQU5ZX1VQREFURUQgfSBmcm9tICcuL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcbmltcG9ydCAqIGFzIGxvY2FsU3RvcmFnZVByb3ZpZGVyIGZyb20gJy4vc3RvcmFnZS1wcm92aWRlcnMvbG9jYWwtc3RvcmFnZS1wcm92aWRlcic7XG5cblB1YlN1Yi5zdWJzY3JpYmUoSU5JVElBTElaRSwgaW5pdGlhbGl6ZURhdGFGbihsb2NhbFN0b3JhZ2VQcm92aWRlci5nZXREYXRhKSk7XG5mdW5jdGlvbiBpbml0aWFsaXplRGF0YUZuKGdldERhdGFGbiA9IGxvY2FsU3RvcmFnZVByb3ZpZGVyLmdldERhdGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHN0b3JhZ2VEYXRhID0gZ2V0RGF0YUZuKCkgfHwgXG4gICAgeyBwcm9qZWN0c0xpc3Q6IFt7IGlkOiAwLCB0aXRsZTogJ015IFRvLURvcycsIHRvZG9JdGVtczogWzFdIH1dLCBcbiAgICAgIHRvZG9JdGVtc0xpc3Q6IFt7IGlkOiAxLCB0aXRsZTogJ1NhbXBsZSBUby1EbycsIHByaW9yaXR5OiAnTG93Jywgc3RhdHVzOiAnSW5jb21wbGV0ZScgfV0sIFxuICAgICAgY2hlY2tsaXN0SXRlbXNMaXN0OiBbXSB9O1xuICAgIFB1YlN1Yi5wdWJsaXNoKERBVEFfSU5JVElBTElaRUQsIHN0b3JhZ2VEYXRhKTtcbiAgfVxufVxuXG5QdWJTdWIuc3Vic2NyaWJlKEFOWV9VUERBVEVELCBzYXZlRGF0YUZuKGxvY2FsU3RvcmFnZVByb3ZpZGVyLnNhdmVEYXRhKSk7XG5mdW5jdGlvbiBzYXZlRGF0YUZuKHNhdmVEYXRhRm4gPSBsb2NhbFN0b3JhZ2VQcm92aWRlci5zYXZlRGF0YSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY29uc3Qgc3RvcmFnZURhdGEgPSB7fTtcbiAgICBmb3IoY29uc3Qga2V5IGluIGFwcGxpY2F0aW9uRGF0YSkgXG4gICAgICBzdG9yYWdlRGF0YVtrZXldID0gYXBwbGljYXRpb25EYXRhW2tleV0udG9TdG9yYWdlKCk7XG4gICAgc2F2ZURhdGFGbihzdG9yYWdlRGF0YSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuLi9hcHBsaWNhdGlvbic7XG5pbXBvcnQgY2hlY2ttYXJrIGZyb20gJy4uLy4uL2ltYWdlcy9jaGVjay5zdmcnO1xuaW1wb3J0IGRpc2FibGVkQ2hlY2ttYXJrIGZyb20gJy4uLy4uL2ltYWdlcy9jaGVjay1ncmF5LnN2Zyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckJvZHkoKSB7XG4gIGRvY3VtZW50LmJvZHkuc3R5bGUgPSBgbWluLWhlaWdodDogJHt3aW5kb3cuc2Nyb2xsWSArIHdpbmRvdy5pbm5lckhlaWdodH1weGA7XG4gIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlZGl0YWJsZUF0dHJpYnV0ZShvYmosIGF0dHJpYnV0ZSwgYXR0cmlidXRlVHlwZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHNlcGFyYXRlRWRpdCA9IHNldHRpbmdzLnNlcGFyYXRlRWRpdEF0dHJCdXR0b25bb2JqLnR5cGVdLmluY2x1ZGVzKGF0dHJpYnV0ZSksXG4gICAgICAgIGF0dHJUZXh0ID0gb3B0aW9ucy5hdHRyaWJ1dGVUZXh0IHx8IG9ialthdHRyaWJ1dGVdIHx8ICdOb25lJztcblxuICBjb25zdCBlZGl0YWJsZUF0dHJpYnV0ZUhUTUwgPVxuICBgPGRpdiBjbGFzcz1cImF0dHJpYnV0ZVwiIGRhdGEtdHlwZT1cIiR7b2JqLnR5cGV9XCIgZGF0YS1pZD1cIiR7b2JqLmlkfVwiIGRhdGEtYXR0cmlidXRlPVwiJHthdHRyaWJ1dGV9XCI+XG4gICAgICA8c3BhbiBjbGFzcz1cImVsZW1lbnQtdGV4dFwiPiR7b3B0aW9ucy5lbGVtZW50VGV4dCB8fCAnJ308L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cImF0dHItdGV4dFwiPiR7c2VwYXJhdGVFZGl0ID8gYXR0clRleHQgOiAnJ308L3NwYW4+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC1hdHRyaWJ1dGUgbGlua1wiIGRhdGEtdHlwZT1cIiR7b2JqLnR5cGV9XCIgZGF0YS1pZD1cIiR7b2JqLmlkfVwiXG4gICAgICAgICAgICAgIGRhdGEtYXR0cmlidXRlPVwiJHthdHRyaWJ1dGV9XCIgZGF0YS1hdHRyaWJ1dGUtdHlwZT1cIiR7YXR0cmlidXRlVHlwZX1cIlxuICAgICAgICAgICAgICBkYXRhLWF0dHJpYnV0ZS12YWx1ZT1cIiR7b2JqW2F0dHJpYnV0ZV0gfHwgJyd9XCI+XG4gICAgICAgICR7c2VwYXJhdGVFZGl0ID8gJ0VkaXQnIDogYXR0clRleHR9XG4gICAgICA8L2J1dHRvbj5cbiAgIDwvZGl2PmA7XG4gIHJldHVybiBlZGl0YWJsZUF0dHJpYnV0ZUhUTUw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJEaXNhYmxlZChub2RlID0gZG9jdW1lbnQuYm9keSwgZGlzYWJsZWQgPSB0cnVlKSB7XG4gIFsuLi5ub2RlLmNoaWxkcmVuXS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICBpZihkaXNhYmxlZCkge1xuICAgICAgY2hpbGQuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgIGNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2VuYWJsZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGNoaWxkLmNsYXNzTGlzdC5hZGQoJ2VuYWJsZWQnKTtcbiAgICB9XG4gIH0pO1xuICBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbixpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0saW5wdXRbdHlwZT1cInJhZGlvXCJdJylcbiAgICAgIC5mb3JFYWNoKHNlbGVjdGFibGUgPT4gc2VsZWN0YWJsZS5kaXNhYmxlZCA9IGRpc2FibGVkKTtcbiAgbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2snKVxuICAgICAgLmZvckVhY2goY2hlY2sgPT4gY2hlY2suc3JjID0gZGlzYWJsZWQgPyBkaXNhYmxlZENoZWNrbWFyayA6IGNoZWNrbWFyayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWJlckxpc3QobGlzdCkge1xuICByZXR1cm4gbGlzdC5zcGxpdCgnICcpLmZpbHRlcihpdGVtID0+IGl0ZW0pLm1hcChOdW1iZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZ1swXS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNuYWtlQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgvKD89W0EtWl0pLykubWFwKHdvcmQgPT4gd29yZC50b0xvd2VyQ2FzZSgpKS5qb2luKCctJyk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBJTkRFWCwgSU5ERVhfUkVOREVSRUQsIFNIT1csIEhJREUgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuaW1wb3J0IHsgYXBwbGljYXRpb25EYXRhIGFzIHJlbmRlckRhdGEsIGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuLi9hcHBsaWNhdGlvbic7XG5pbXBvcnQgeyBwYXJzZU51bWJlckxpc3QgfSBmcm9tICcuL3ZpZXctaGVscGVycyc7XG5cblB1YlN1Yi5zdWJzY3JpYmUoSU5ERVgoJ3RvZG9JdGVtJyksIGluZGV4VG9kb0l0ZW1zVmlldyk7XG5mdW5jdGlvbiBpbmRleFRvZG9JdGVtc1ZpZXcoXywgZGF0YSkge1xuICBjb25zdCB0b2RvSXRlbXNGdWxsQXJyID0gcGFyc2VOdW1iZXJMaXN0KGRhdGEuZnVsbCk7XG4gIGNvbnN0IHByZXZUb2RvSXRlbXNJbmRleEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kby1pdGVtcy1pbmRleCcpO1xuICBwcmV2VG9kb0l0ZW1zSW5kZXhFbGVtZW50Py5yZW1vdmUoKTtcbiAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgKz0gYDxkaXYgY2xhc3M9XCJ0b2RvLWl0ZW1zLWluZGV4IHRvZG8taXRlbXNcIiBkYXRhLWZ1bGw9XCIke2RhdGEuZnVsbH1cIj48L2Rpdj5gO1xuICByZW5kZXJEYXRhLnRvZG9JdGVtc0xpc3Qud2l0aElkcyhkYXRhLmlkcylcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBzZXR0aW5ncy5zdGF0dXNlcy5pbmRleE9mKGEuc3RhdHVzKSAtIHNldHRpbmdzLnN0YXR1c2VzLmluZGV4T2YoYi5zdGF0dXMpKVxuICAgICAgICAgICAgLmZvckVhY2godG9kb0l0ZW0gPT5cbiAgICAgICAgICAgICAgICBQdWJTdWIucHVibGlzaChTSE9XKCd0b2RvSXRlbScpLCB7IGlkOiB0b2RvSXRlbS5pZCwgZnVsbDogdG9kb0l0ZW1zRnVsbEFyci5pbmNsdWRlcyh0b2RvSXRlbS5pZCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb25nVHlwZTogZGF0YS5iZWxvbmdUeXBlLCBwYXJlbnRFbGVtZW50U2VsZWN0b3I6ICcudG9kby1pdGVtcycgfSkpO1xuICBQdWJTdWIucHVibGlzaChJTkRFWF9SRU5ERVJFRCgndG9kb0l0ZW0nKSk7XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoU0hPVygndG9kb0l0ZW1GdWxsJyksIHVwZGF0ZVRvZG9JdGVtc0Z1bGwpO1xuUHViU3ViLnN1YnNjcmliZShISURFKCd0b2RvSXRlbUZ1bGwnKSwgdXBkYXRlVG9kb0l0ZW1zRnVsbCk7XG5mdW5jdGlvbiB1cGRhdGVUb2RvSXRlbXNGdWxsKG1zZywgZGF0YSkge1xuICBjb25zdCBpZCA9IHJlbmRlckRhdGEudG9kb0l0ZW1zTGlzdC53aXRoSWQoK2RhdGEuaWQpLmJlbG9uZ3NbZGF0YS5iZWxvbmdUeXBlXSxcbiAgICAgICAgb2xkVG9kb0l0ZW1zRnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWl0ZW1zJykuZGF0YXNldC5mdWxsLFxuICAgICAgICB0b2RvSXRlbXNGdWxsID0gbXNnLmluY2x1ZGVzKCdzaG93JykgP1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVG9kb0l0ZW1zRnVsbCArIGAgJHtkYXRhLmlkfWBcbiAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlTnVtYmVyTGlzdChvbGRUb2RvSXRlbXNGdWxsKS5maWx0ZXIoaWQgPT4gaWQgIT09ICtkYXRhLmlkKS5qb2luKCcgJyk7XG4gIFB1YlN1Yi5wdWJsaXNoKFNIT1coZGF0YS5iZWxvbmdUeXBlKSwgeyBpZCwgdG9kb0l0ZW1zRnVsbCB9KVxufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgSU5ERVgsIElOREVYX1JFTkRFUkVELCBTSE9XIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCB7IGFwcGxpY2F0aW9uRGF0YSBhcyByZW5kZXJEYXRhIH0gZnJvbSAnLi4vYXBwbGljYXRpb24nO1xuXG5QdWJTdWIuc3Vic2NyaWJlKElOREVYKCdjaGVja2xpc3RJdGVtJyksIGluZGV4Q2hlY2tsaXN0SXRlbXNWaWV3KTtcbmZ1bmN0aW9uIGluZGV4Q2hlY2tsaXN0SXRlbXNWaWV3KF8sIGRhdGEpIHtcbiAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YS5wYXJlbnRFbGVtZW50U2VsZWN0b3IgfHwgJ2JvZHknKSxcbiAgICAgICAgcHJldkNoZWNrbGlzdEl0ZW1zSW5kZXhFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNoZWNrbGlzdC1pdGVtcy1pbmRleCcpO1xuICBwcmV2Q2hlY2tsaXN0SXRlbXNJbmRleEVsZW1lbnQ/LnJlbW92ZSgpO1xuICBwYXJlbnRFbGVtZW50LmlubmVySFRNTCArPSBcbiAgYDxkaXYgY2xhc3M9XCJjaGVja2xpc3QtaXRlbXMtaW5kZXhcIj5cbiAgICA8aDM+Q2hlY2tsaXN0PC9oMz5cbiAgICAgPG9sIGNsYXNzPVwiY2hlY2tsaXN0LWl0ZW1zXCI+PC9vbD5cbiAgICAgPGZvcm0gZGF0YS10eXBlPVwiJHtkYXRhLmJlbG9uZ1R5cGV9XCIgZGF0YS1pZD1cIiR7ZGF0YS5iZWxvbmdJZH1cIiBkYXRhLWNvbGxlY3Rpb24tdHlwZT1cImNoZWNrbGlzdEl0ZW1cIj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJhY2sgaGlkZGVuXCI+4oaQPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJuZXcgbGlua1wiIGRhdGEtdHlwZT1cImNoZWNrbGlzdEl0ZW1cIlxuICAgICAgICAgICAgICAgIGRhdGEtYmVsb25nLXR5cGU9XCIke2RhdGEuYmVsb25nVHlwZX1cIiBkYXRhLWJlbG9uZy1pZD1cIiR7ZGF0YS5iZWxvbmdJZH1cIj5cbiAgICAgICAgICBBZGQgYSBDaGVja2xpc3QgSXRlbVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1Ym1pdCBoaWRkZW5cIj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAgPC9mb3JtPlxuICA8L2Rpdj5gO1xuICBfcmVuZGVyQ2hlY2tsaXN0SXRlbXMoZGF0YS5pZHMsIGRhdGEuYmVsb25nVHlwZSk7XG4gIFB1YlN1Yi5wdWJsaXNoKElOREVYX1JFTkRFUkVEKCdjaGVja2xpc3RJdGVtJykpO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyQ2hlY2tsaXN0SXRlbXMoaWRzLCBiZWxvbmdUeXBlKSB7XG4gIHJlbmRlckRhdGEuY2hlY2tsaXN0SXRlbXNMaXN0LndpdGhJZHMoaWRzKVxuICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+ICthW2JlbG9uZ1R5cGUgKyAnSW5kZXgnXSAtICtiW2JlbG9uZ1R5cGUgKyAnSW5kZXgnXSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGNoZWNrbGlzdEl0ZW0gPT4ge1xuICAgICAgICAgICAgICBQdWJTdWIucHVibGlzaChTSE9XKCdjaGVja2xpc3RJdGVtJyksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiBjaGVja2xpc3RJdGVtLmlkLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50VHlwZTogJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbGVtZW50U2VsZWN0b3I6ICcuY2hlY2tsaXN0LWl0ZW1zJyB9KTtcbiAgICAgICAgICAgIH0pO1xufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgTkVXLCBORVdfUkVOREVSRUQgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuaW1wb3J0IHsgcmVuZGVyRGlzYWJsZWQgfSBmcm9tICcuL3ZpZXctaGVscGVycyc7XG5pbXBvcnQgcGVuY2lsIGZyb20gJy4uLy4uL2ltYWdlcy9wZW5jaWwuc3ZnJztcblxuUHViU3ViLnN1YnNjcmliZShORVcoJ3Byb2plY3QnKSwgbmV3UHJvamVjdFZpZXcpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3UHJvamVjdFZpZXcoKSB7XG4gIHJlbmRlckRpc2FibGVkKCk7XG4gIFxuICBjb25zdCBuZXdQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ld1tkYXRhLXR5cGU9XCJwcm9qZWN0XCJdJyk7XG4gIGNvbnN0IGZvcm1IVE1MID0gXG4gIGA8Zm9ybSBjbGFzcz1cIm5ldy1mb3JtIGVuYWJsZWRcIiBkYXRhLXR5cGU9XCJwcm9qZWN0XCI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYmFjayBzeW1ib2xcIj7ihpA8L2J1dHRvbj5cbiAgICAgIDxsYWJlbCBmb3I9XCJ0aXRsZVwiPk5ldyBQcm9qZWN0PC9sYWJlbD5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ0aXRsZVwiIGlkPVwidGl0bGVcIj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJzdWJtaXQgc3ltYm9sXCI+PGltZyBzcmM9XCIke3BlbmNpbH1cIiBhbHQ9XCJTdWJtaXRcIj48L2J1dHRvbj5cbiAgIDwvZm9ybT5gO1xuXG4gIG5ld1Byb2plY3RCdXR0b24uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGZvcm1IVE1MKTtcbiAgbmV3UHJvamVjdEJ1dHRvbi5yZW1vdmUoKTtcbiAgUHViU3ViLnB1Ymxpc2goTkVXX1JFTkRFUkVEKCdwcm9qZWN0JykpO1xufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgTkVXLCBORVdfUkVOREVSRUQgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuaW1wb3J0IHsgYXBwbGljYXRpb25EYXRhIGFzIHJlbmRlckRhdGEsIGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuLi9hcHBsaWNhdGlvbic7XG5pbXBvcnQgeyByZW5kZXJEaXNhYmxlZCB9IGZyb20gJy4vdmlldy1oZWxwZXJzJztcblxuUHViU3ViLnN1YnNjcmliZShORVcoJ3RvZG9JdGVtJyksIG5ld1RvZG9JdGVtVmlldyk7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdUb2RvSXRlbVZpZXcoXywgZGF0YSkge1xuICByZW5kZXJEaXNhYmxlZCgpO1xuICBcbiAgY29uc3QgbmV3VG9kb0l0ZW1CdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmV3W2RhdGEtdHlwZT1cInRvZG9JdGVtXCJdJyk7XG4gIGNvbnN0IGZvcm1IVE1MID1cbiAgYDxmb3JtIGNsYXNzPVwibmV3LWZvcm0gZW5hYmxlZFwiIGRhdGEtdHlwZT1cInRvZG9JdGVtXCI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYmFja1wiPkJhY2s8L2J1dHRvbj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwidGl0bGVcIj5OZXcgVG8tRG88L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGl0bGVcIiBpZD1cInRpdGxlXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZHVlRGF0ZVwiPkR1ZSBEYXRlPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIG5hbWU9XCJkdWVEYXRlXCIgaWQ9XCJkdWVEYXRlXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZGVzY3JpcHRpb25cIiBjbGFzcz1cInRleHRhcmVhLWxhYmVsXCI+RGVzY3JpcHRpb248L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgbmFtZT1cImRlc2NyaXB0aW9uXCIgaWQ9XCJkZXNjcmlwdGlvblwiPjwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwibm90ZXNcIiBjbGFzcz1cInRleHRhcmVhLWxhYmVsXCI+Tm90ZXM8L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgbmFtZT1cIm5vdGVzXCIgaWQ9XCJub3Rlc1wiPjwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiYmVsb25nc1twcm9qZWN0XVwiPlByb2plY3Q8L2xhYmVsPlxuICAgICAgICA8c2VsZWN0IG5hbWU9XCJiZWxvbmdzW3Byb2plY3RdXCIgaWQ9XCJiZWxvbmdzW3Byb2plY3RdXCI+XG4gICAgICAgICAgJHtyZW5kZXJEYXRhLnByb2plY3RzTGlzdC5wcm9qZWN0cy5tYXAocHJvamVjdCA9PiBcbiAgICAgICAgICAgIGA8b3B0aW9uIHZhbHVlPVwiJHtwcm9qZWN0LmlkfVwiICR7cHJvamVjdC5pZCA9PSArZGF0YS5wcm9qZWN0SWQgPyAnc2VsZWN0ZWQnIDogJyd9PlxuICAgICAgICAgICAgICAke3Byb2plY3QudGl0bGV9XG4gICAgICAgICAgICA8L29wdGlvbj5gKVxuICAgICAgICAgIC5qb2luKCdcXG4nKX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmaWVsZFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwicHJpb3JpdHlcIj5Qcmlvcml0eTwvbGFiZWw+XG4gICAgICAgIDxzZWxlY3QgbmFtZT1cInByaW9yaXR5XCIgaWQ9XCJwcmlvcml0eVwiPlxuICAgICAgICAgICR7c2V0dGluZ3MucHJpb3JpdGllcy5tYXAocHJpb3JpdHkgPT4gXG4gICAgICAgICAgICBgPG9wdGlvbiB2YWx1ZT1cIiR7cHJpb3JpdHl9XCI+JHtwcmlvcml0eX08L29wdGlvbj5gKS5qb2luKCdcXG4nKX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cInN0YXR1c1wiIGlkPVwic3RhdHVzXCIgdmFsdWU9XCIke3NldHRpbmdzLnN0YXR1c2VzWzBdfVwiPlxuICAgICAgPGgzPkNoZWNrbGlzdDwvaDM+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwibmV3IGxpbmtcIiBkYXRhLWJlbG9uZy10eXBlPVwidG9kb0l0ZW1cIiBkYXRhLXR5cGU9XCJjaGVja2xpc3RJdGVtXCIgZGF0YS1pbmRleD1cIjFcIj5BZGQgYSBDaGVja2xpc3QgSXRlbTwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1Ym1pdFwiPlN1Ym1pdDwvYnV0dG9uPlxuICAgPC9mb3JtPmA7XG5cbiAgbmV3VG9kb0l0ZW1CdXR0b24uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGZvcm1IVE1MKTtcbiAgbmV3VG9kb0l0ZW1CdXR0b24ucmVtb3ZlKCk7XG4gIFB1YlN1Yi5wdWJsaXNoKE5FV19SRU5ERVJFRCgndG9kb0l0ZW0nKSk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBORVcsIE5FV19SRU5ERVJFRCwgTkVXX0NPTExFQ1RJT05fSVRFTV9SRU5ERVJFRCwgSElERSB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSwgYXBwbGljYXRpb25TZXR0aW5ncyBhcyBzZXR0aW5ncyB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IHJlbmRlckRpc2FibGVkLCBzbmFrZUNhc2UgfSBmcm9tICcuL3ZpZXctaGVscGVycydcblxuUHViU3ViLnN1YnNjcmliZShORVcoJ2NoZWNrbGlzdEl0ZW0nKSwgbmV3Q2hlY2tsaXN0SXRlbVZpZXcpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3Q2hlY2tsaXN0SXRlbVZpZXcoXywgeyBiZWxvbmdUeXBlLCBiZWxvbmdJZCB9KSB7XG4gIGlmKGJlbG9uZ0lkKSByZW5kZXJEaXNhYmxlZCgpO1xuXG4gIGNvbnN0IG5ld0NoZWNrbGlzdEl0ZW1CdXR0b25TZWxlY3RvciA9IGAke2JlbG9uZ0lkID8gYC4ke3NuYWtlQ2FzZShiZWxvbmdUeXBlKX1bZGF0YS1pZD1cIiR7YmVsb25nSWR9XCJdIGAgOiAnJ30ubmV3W2RhdGEtdHlwZT1cImNoZWNrbGlzdEl0ZW1cIl1gLFxuICAgICAgICBuZXdDaGVja2xpc3RJdGVtQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuZXdDaGVja2xpc3RJdGVtQnV0dG9uU2VsZWN0b3IpLFxuICAgICAgICBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnQgPSBuZXdDaGVja2xpc3RJdGVtQnV0dG9uLmNsb3Nlc3QoJ2Zvcm0nKSxcbiAgICAgICAgYmFja0J1dHRvbiA9IGNoZWNrbGlzdEl0ZW1Gb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuYmFjaycpLFxuICAgICAgICBzdWJtaXRCdXR0b24gPSBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnN1Ym1pdCcpO1xuXG4gIHJlbmRlckRpc2FibGVkKGNoZWNrbGlzdEl0ZW1Gb3JtRWxlbWVudCwgZmFsc2UpO1xuICBbYmFja0J1dHRvbiwgc3VibWl0QnV0dG9uXS5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24/LmNsYXNzTGlzdD8ucmVtb3ZlKCdoaWRkZW4nKSk7XG5cbiAgY29uc3QgaW5kZXggPSAxICsgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNoZWNrbGlzdC1pdGVtLmZpZWxkJykubGVuZ3RoICsgXG4gICAgICAgICAgICAgICAgKGJlbG9uZ0lkID8gcmVuZGVyRGF0YVtiZWxvbmdUeXBlICsgJ3NMaXN0J10ud2l0aElkKGJlbG9uZ0lkKS5jaGVja2xpc3RJdGVtcy5sZW5ndGggOiAwKSxcbiAgICAgICAgYXR0cldyYXBwZXIgPSBhdHRyaWJ1dGUgPT4gYGNoZWNrbGlzdEl0ZW1zQ29sbGVjdGlvbkRhdGFbJHtpbmRleH1dWyR7YXR0cmlidXRlfV1gO1xuICBcbiAgY29uc3QgY2hlY2tsaXN0SXRlbUZpZWxkSFRNTCA9IFxuICBgPGRpdiBjbGFzcz1cImZpZWxkIGVuYWJsZWQgY2hlY2tsaXN0LWl0ZW1cIiBkYXRhLXR5cGU9XCJjaGVja2xpc3RJdGVtXCIgZGF0YS1pbmRleD1cIiR7aW5kZXh9XCI+XG4gICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIke2F0dHJXcmFwcGVyKGJlbG9uZ1R5cGUgKyAnSW5kZXgnKX1cIiBpZD1cIiR7YXR0cldyYXBwZXIoYmVsb25nVHlwZSArICdJbmRleCcpfVwiIHZhbHVlPVwiJHtpbmRleH1cIj5cbiAgICAgIDxsYWJlbCBmb3I9XCIke2F0dHJXcmFwcGVyKCd0aXRsZScpfVwiPiR7aW5kZXh9LjwvbGFiZWw+XG4gICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiJHthdHRyV3JhcHBlcigndGl0bGUnKX1cIiBpZD1cIiR7YXR0cldyYXBwZXIoJ3RpdGxlJyl9XCI+XG4gICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIke2F0dHJXcmFwcGVyKCdzdGF0dXMnKX1cIiBpZD1cIiR7YXR0cldyYXBwZXIoJ3N0YXR1cycpfVwiIHZhbHVlPVwiJHtzZXR0aW5ncy5zdGF0dXNlc1swXX1cIj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJoaWRlIHN5bWJvbFwiIGRhdGEtdHlwZT1cIm5ldy1jaGVja2xpc3RJdGVtXCIgZGF0YS1pbmRleD1cIiR7aW5kZXh9XCIgXG4gICAgICAgICAgICAgIGRhdGEtYmVsb25nLXR5cGU9XCIke2JlbG9uZ1R5cGV9XCIgJHtiZWxvbmdJZCA/IGBkYXRhLWJlbG9uZy1pZD0ke2JlbG9uZ0lkfWAgOiAnJ30+WDwvYnV0dG9uPlxuICAgPC9kaXY+YDtcblxuICBuZXdDaGVja2xpc3RJdGVtQnV0dG9uLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlYmVnaW4nLCBjaGVja2xpc3RJdGVtRmllbGRIVE1MKTtcbiAgUHViU3ViLnB1Ymxpc2goYmVsb25nSWQgPyBORVdfQ09MTEVDVElPTl9JVEVNX1JFTkRFUkVEKGJlbG9uZ1R5cGUpIDogTkVXX1JFTkRFUkVEKCdjaGVja2xpc3RJdGVtJykpO1xufVxuXG5QdWJTdWIuc3Vic2NyaWJlKEhJREUoJ25ldy1jaGVja2xpc3RJdGVtJyksIGhpZGVOZXdDaGVja2xpc3RJdGVtVmlldyk7XG5mdW5jdGlvbiBoaWRlTmV3Q2hlY2tsaXN0SXRlbVZpZXcoXywgeyBiZWxvbmdUeXBlLCBiZWxvbmdJZCwgaW5kZXggfSkge1xuICBjb25zdCBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnRTZWxlY3RvciA9IFxuICAgIGJlbG9uZ0lkID8gYC4ke3NuYWtlQ2FzZShiZWxvbmdUeXBlKX1bZGF0YS1pZD1cIiR7YmVsb25nSWR9XCJdIGZvcm1bZGF0YS1jb2xsZWN0aW9uLXR5cGU9XCJjaGVja2xpc3RJdGVtXCJdYCBcbiAgICAgICAgICAgICA6IGBmb3JtW2RhdGEtdHlwZT1cIiR7YmVsb25nVHlwZX1cIl1gO1xuICBjb25zdCBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNoZWNrbGlzdEl0ZW1Gb3JtRWxlbWVudFNlbGVjdG9yKTtcbiAgY2hlY2tsaXN0SXRlbUZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC5jaGVja2xpc3QtaXRlbS5maWVsZFtkYXRhLWluZGV4PVwiJHtpbmRleH1cIl1gKS5yZW1vdmUoKTtcblxuICBjb25zdCByZW1haW5pbmdDaGVja2xpc3RJdGVtRmllbGRFbGVtZW50cyA9IGNoZWNrbGlzdEl0ZW1Gb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2hlY2tsaXN0LWl0ZW0uZmllbGQnKTtcbiAgXG4gIGlmKGJlbG9uZ0lkICYmIHJlbWFpbmluZ0NoZWNrbGlzdEl0ZW1GaWVsZEVsZW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgcmVuZGVyRGlzYWJsZWQoZG9jdW1lbnQsIGZhbHNlKTtcblxuICAgIGNvbnN0IGJhY2tCdXR0b24gPSBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmJhY2snKSxcbiAgICAgICAgICBzdWJtaXRCdXR0b24gPSBjaGVja2xpc3RJdGVtRm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnN1Ym1pdCcpO1xuICAgIFtiYWNrQnV0dG9uLCBzdWJtaXRCdXR0b25dLmZvckVhY2goYnV0dG9uID0+IGJ1dHRvbj8uY2xhc3NMaXN0Py5hZGQoJ2hpZGRlbicpKTtcbiAgfVxuXG4gIGNvbnN0IG9mZnNldCA9IDEgKyAoYmVsb25nSWQgPyByZW5kZXJEYXRhW2JlbG9uZ1R5cGUgKyAnc0xpc3QnXS53aXRoSWQoYmVsb25nSWQpLmNoZWNrbGlzdEl0ZW1zLmxlbmd0aCA6IDApO1xuICByZW1haW5pbmdDaGVja2xpc3RJdGVtRmllbGRFbGVtZW50cy5mb3JFYWNoKChjaGVja2xpc3RJdGVtRWxlbWVudCwgaSkgPT4ge1xuICAgIF91cGRhdGVJbmRleChjaGVja2xpc3RJdGVtRWxlbWVudCwgYmVsb25nVHlwZSwgaSArIG9mZnNldCk7XG4gIH0pXG59XG5cbmZ1bmN0aW9uIF91cGRhdGVJbmRleChjaGVja2xpc3RJdGVtRWxlbWVudCwgYmVsb25nVHlwZSwgbmV3SW5kZXgpIHtcbiAgY29uc3QgaW5wdXRFbGVtZW50cyA9IGNoZWNrbGlzdEl0ZW1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JyksXG4gICAgICAgIGJlbG9uZ0luZGV4RWxlbWVudCA9IGNoZWNrbGlzdEl0ZW1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYGlucHV0W25hbWUqPVwiJHtiZWxvbmdUeXBlfUluZGV4XCJdYCksXG4gICAgICAgIGxhYmVsRWxlbWVudCA9IGNoZWNrbGlzdEl0ZW1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsW2Zvcio9XCJ0aXRsZVwiXScpLFxuICAgICAgICBoaWRlQnV0dG9uID0gY2hlY2tsaXN0SXRlbUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmhpZGUnKTtcblxuICBpbnB1dEVsZW1lbnRzLmZvckVhY2goaW5wdXRFbGVtZW50ID0+IHtcbiAgICBbJ25hbWUnLCAnaWQnXS5mb3JFYWNoKGF0dHIgPT4gaW5wdXRFbGVtZW50W2F0dHJdID0gaW5wdXRFbGVtZW50W2F0dHJdLnJlcGxhY2UoL1xcZCsvLCBuZXdJbmRleCkpO1xuICB9KVxuICBjaGVja2xpc3RJdGVtRWxlbWVudC5kYXRhc2V0LmluZGV4ID0gbmV3SW5kZXg7XG4gIGJlbG9uZ0luZGV4RWxlbWVudC52YWx1ZSA9IG5ld0luZGV4O1xuICBsYWJlbEVsZW1lbnQudGV4dENvbnRlbnQgPSBgJHtuZXdJbmRleH0uYDtcbiAgaGlkZUJ1dHRvbi5kYXRhc2V0LmluZGV4ID0gbmV3SW5kZXg7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBJTkRFWCwgU0hPVywgU0hPV19SRU5ERVJFRCwgUEFHRV9SRU5ERVJFRCB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IGVkaXRhYmxlQXR0cmlidXRlIH0gZnJvbSAnLi92aWV3LWhlbHBlcnMnO1xuXG5QdWJTdWIuc3Vic2NyaWJlKFNIT1coJ3Byb2plY3QnKSwgc2hvd1Byb2plY3RWaWV3KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvd1Byb2plY3RWaWV3KF8sIGRhdGEpIHtcbiAgY29uc3QgcHJvamVjdCA9IHJlbmRlckRhdGEucHJvamVjdHNMaXN0LndpdGhJZChkYXRhLmlkKTtcbiAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPVxuICBgPGJ1dHRvbiBjbGFzcz1cImluZGV4XCIgZGF0YS10eXBlPVwiJHtwcm9qZWN0LnR5cGV9XCI+QWxsIFByb2plY3RzPC9idXR0b24+XG4gICA8ZGl2IGNsYXNzPVwiaGVhZGluZ3NcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwcm9qZWN0LWhlYWRpbmdcIj5cbiAgICAgICAgJHtlZGl0YWJsZUF0dHJpYnV0ZShwcm9qZWN0LCAndGl0bGUnLCAndGV4dCcpfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwidG9kby1pdGVtcy1oZWFkaW5nXCI+XG4gICAgICAgIDxoMj5Uby1Eb3M8L2gyPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwibmV3IHN5bWJvbFwiIGRhdGEtdHlwZT1cInRvZG9JdGVtXCIgZGF0YS1wcm9qZWN0LWlkPVwiJHtwcm9qZWN0LmlkfVwiPis8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgPC9kaXY+YDtcbiAgX3JlbmRlclRvZG9JdGVtc0luZGV4KHByb2plY3QsIGRhdGEudG9kb0l0ZW1zRnVsbCk7XG4gIFB1YlN1Yi5wdWJsaXNoKFBBR0VfUkVOREVSRUQsIHNob3dQcm9qZWN0Vmlldy5iaW5kKG51bGwsIF8sIGRhdGEpKTtcbiAgUHViU3ViLnB1Ymxpc2goU0hPV19SRU5ERVJFRCgncHJvamVjdCcpKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlclRvZG9JdGVtc0luZGV4KHByb2plY3QsIHRvZG9JdGVtc0Z1bGwpIHtcbiAgUHViU3ViLnB1Ymxpc2goSU5ERVgoJ3RvZG9JdGVtJyksIFxuICAgICAgICAgICAgICAgIHsgYmVsb25nVHlwZTogcHJvamVjdC50eXBlLCBpZHM6IHByb2plY3QudG9kb0l0ZW1zLCBmdWxsOiB0b2RvSXRlbXNGdWxsIH0pXG59XG4iLCJ2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufSIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgdGltZXMgYXJlIHJlbW92ZWRcbiAqIGZyb20gdGhlIGRhdGVzIGFuZCB0aGVuIHRoZSBkaWZmZXJlbmNlIGluIGRheXMgaXMgY2FsY3VsYXRlZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKFxuICogICBuZXcgRGF0ZSgyMDEyLCA2LCAyLCAwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMiwgMjMsIDApXG4gKiApXG4gKiAvLz0+IDM2NlxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6NTk6MDAgYW5kIDMgSnVseSAyMDExIDAwOjAxOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAzLCAwLCAxKSxcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMiwgMjMsIDU5KVxuICogKVxuICogLy89PiAxXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZkRheUxlZnQuZ2V0VGltZSgpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhzdGFydE9mRGF5TGVmdCk7XG4gIHZhciB0aW1lc3RhbXBSaWdodCA9IHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlSaWdodCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSBkYXkgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSBkYXkgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gWShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIEwoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIGMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIGIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24geihkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcblxudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcblxuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0IGZyb20gXCIuLi9mb3JtYXQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZm9ybWF0UmVsYXRpdmVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUmVwcmVzZW50IHRoZSBkYXRlIGluIHdvcmRzIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBiYXNlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXByZXNlbnQgdGhlIGRhdGUgaW4gd29yZHMgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIGJhc2UgZGF0ZS5cbiAqXG4gKiB8IERpc3RhbmNlIHRvIHRoZSBiYXNlIGRhdGUgfCBSZXN1bHQgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBQcmV2aW91cyA2IGRheXMgICAgICAgICAgIHwgbGFzdCBTdW5kYXkgYXQgMDQ6MzAgQU0gICB8XG4gKiB8IExhc3QgZGF5ICAgICAgICAgICAgICAgICAgfCB5ZXN0ZXJkYXkgYXQgMDQ6MzAgQU0gICAgIHxcbiAqIHwgU2FtZSBkYXkgICAgICAgICAgICAgICAgICB8IHRvZGF5IGF0IDA0OjMwIEFNICAgICAgICAgfFxuICogfCBOZXh0IGRheSAgICAgICAgICAgICAgICAgIHwgdG9tb3Jyb3cgYXQgMDQ6MzAgQU0gICAgICB8XG4gKiB8IE5leHQgNiBkYXlzICAgICAgICAgICAgICAgfCBTdW5kYXkgYXQgMDQ6MzAgQU0gICAgICAgIHxcbiAqIHwgT3RoZXIgICAgICAgICAgICAgICAgICAgICB8IDEyLzMxLzIwMTcgICAgICAgICAgICAgICAgfFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBmb3JtYXRcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGJhc2VEYXRlIC0gdGhlIGRhdGUgdG8gY29tcGFyZSB3aXRoXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBkYXRlIGluIHdvcmRzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgYmFzZURhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0UmVsYXRpdmVgIHByb3BlcnR5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCB0aGUgZGF0ZSBvZiA2IGRheXMgYWdvIGluIHdvcmRzIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBiYXNlIGRhdGUuIEluIHRoaXMgZXhhbXBsZSwgdG9kYXkgaXMgV2VkbmVzZGF5XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRSZWxhdGl2ZShhZGREYXlzKG5ldyBEYXRlKCksIC02KSwgbmV3IERhdGUoKSlcbiAqIC8vPT4gXCJsYXN0IFRodXJzZGF5IGF0IDEyOjQ1IEFNXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZShkaXJ0eURhdGUsIGRpcnR5QmFzZURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcblxuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGJhc2VEYXRlID0gdG9EYXRlKGRpcnR5QmFzZURhdGUpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDApO1xuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRSZWxhdGl2ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdFJlbGF0aXZlIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgZGlmZiA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlLCBiYXNlRGF0ZSk7XG5cbiAgaWYgKGlzTmFOKGRpZmYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgdmFyIHRva2VuO1xuXG4gIGlmIChkaWZmIDwgLTYpIHtcbiAgICB0b2tlbiA9ICdvdGhlcic7XG4gIH0gZWxzZSBpZiAoZGlmZiA8IC0xKSB7XG4gICAgdG9rZW4gPSAnbGFzdFdlZWsnO1xuICB9IGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgdG9rZW4gPSAneWVzdGVyZGF5JztcbiAgfSBlbHNlIGlmIChkaWZmIDwgMSkge1xuICAgIHRva2VuID0gJ3RvZGF5JztcbiAgfSBlbHNlIGlmIChkaWZmIDwgMikge1xuICAgIHRva2VuID0gJ3RvbW9ycm93JztcbiAgfSBlbHNlIGlmIChkaWZmIDwgNykge1xuICAgIHRva2VuID0gJ25leHRXZWVrJztcbiAgfSBlbHNlIHtcbiAgICB0b2tlbiA9ICdvdGhlcic7XG4gIH1cblxuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhkYXRlLCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpKTtcbiAgdmFyIHV0Y0Jhc2VEYXRlID0gc3ViTWlsbGlzZWNvbmRzKGJhc2VEYXRlLCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGJhc2VEYXRlKSk7XG4gIHZhciBmb3JtYXRTdHIgPSBsb2NhbGUuZm9ybWF0UmVsYXRpdmUodG9rZW4sIHV0Y0RhdGUsIHV0Y0Jhc2VEYXRlLCB7XG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT25cbiAgfSk7XG4gIHJldHVybiBmb3JtYXQoZGF0ZSwgZm9ybWF0U3RyLCB7XG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT25cbiAgfSk7XG59IiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgSU5ERVgsIFNIT1csIFNIT1dfUkVOREVSRUQgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuaW1wb3J0IHsgYXBwbGljYXRpb25EYXRhIGFzIHJlbmRlckRhdGEsIGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuLi9hcHBsaWNhdGlvbic7XG5pbXBvcnQgeyBlZGl0YWJsZUF0dHJpYnV0ZSB9IGZyb20gJy4vdmlldy1oZWxwZXJzJztcbmltcG9ydCB7IGZvcm1hdFJlbGF0aXZlIH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IGNoZWNrbWFyayBmcm9tICcuLi8uLi9pbWFnZXMvY2hlY2suc3ZnJztcblxuUHViU3ViLnN1YnNjcmliZShTSE9XKCd0b2RvSXRlbScpLCBzaG93VG9kb0l0ZW1WaWV3KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hvd1RvZG9JdGVtVmlldyhfLCBkYXRhKSB7XG4gIGNvbnN0IHRvZG9JdGVtID0gcmVuZGVyRGF0YS50b2RvSXRlbXNMaXN0LndpdGhJZChkYXRhLmlkKTtcbiAgY29uc3QgcGFyZW50RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGF0YS5wYXJlbnRFbGVtZW50U2VsZWN0b3IgfHwgJ2JvZHknKTtcbiAgX3JlbmRlclRvZG9JdGVtKHRvZG9JdGVtLCB7IHBhcmVudEVsZW1lbnQsIGJlbG9uZ1R5cGU6IGRhdGEuYmVsb25nVHlwZSB9KTtcbiAgaWYoZGF0YS5mdWxsKSBfcmVuZGVyRnVsbCh0b2RvSXRlbSwgeyBwYXJlbnRFbGVtZW50IH0pO1xuICBQdWJTdWIucHVibGlzaChTSE9XX1JFTkRFUkVEKCd0b2RvSXRlbScpKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlclRvZG9JdGVtKHRvZG9JdGVtLCBvcHRpb25zKSB7XG4gIGNvbnN0IHByZXZUb2RvSXRlbUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAudG9kby1pdGVtW2RhdGEtaWQ9XCIke3RvZG9JdGVtLmlkfVwiXWApO1xuICBwcmV2VG9kb0l0ZW1FbGVtZW50Py5yZW1vdmUoKTtcblxuICAob3B0aW9ucy5wYXJlbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkpLmlubmVySFRNTCArPVxuICBgPGRpdiBjbGFzcz1cInByaW9yaXR5LSR7c2V0dGluZ3MucHJpb3JpdGllcy5pbmRleE9mKHRvZG9JdGVtLnByaW9yaXR5KX0gXG4gICAgICAgICAgICAgICBzdGF0dXMtJHtzZXR0aW5ncy5zdGF0dXNlcy5pbmRleE9mKHRvZG9JdGVtLnN0YXR1cyl9IHRvZG8taXRlbVwiIGRhdGEtaWQ9XCIke3RvZG9JdGVtLmlkfVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRvZG8taXRlbS1oZWFkaW5nXCI+XG4gICAgICAgICR7ZWRpdGFibGVBdHRyaWJ1dGUodG9kb0l0ZW0sICd0aXRsZScsICd0ZXh0Jyl9XG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJ1cGRhdGUtc3RhdHVzIHN5bWJvbFwiIGRhdGEtdHlwZT1cIiR7dG9kb0l0ZW0udHlwZX1cIiBkYXRhLWlkPVwiJHt0b2RvSXRlbS5pZH1cIj5cbiAgICAgICAgICAke3NldHRpbmdzLnN0YXR1c2VzLmluZGV4T2YodG9kb0l0ZW0uc3RhdHVzKSA/IFxuICAgICAgICAgICAgYDxpbWcgY2xhc3M9XCJjaGVja1wiIHNyYz1cIiR7Y2hlY2ttYXJrfVwiIGFsdD1cIiR7c2V0dGluZ3Muc3RhdHVzZXNbMV19XCI+YCA6ICcnfVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgJHtlZGl0YWJsZUF0dHJpYnV0ZSh0b2RvSXRlbSwgJ2R1ZURhdGUnLCAnZGF0ZXRpbWUtbG9jYWwnLFxuICAgICAgICB7IGVsZW1lbnRUZXh0OiAnRHVlOiAnLFxuICAgICAgICAgIGF0dHJpYnV0ZVRleHQ6IHRvZG9JdGVtLmR1ZURhdGUgPyBmb3JtYXRSZWxhdGl2ZShuZXcgRGF0ZSh0b2RvSXRlbS5kdWVEYXRlKSwgbmV3IERhdGUoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ05vbmUnIH0pfVxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInNob3dcIiBkYXRhLXR5cGU9XCIke3RvZG9JdGVtLnR5cGV9RnVsbFwiIGRhdGEtaWQ9XCIke3RvZG9JdGVtLmlkfVwiIFxuICAgICAgICAgICAgIGRhdGEtYmVsb25nLXR5cGU9XCIke29wdGlvbnMuYmVsb25nVHlwZSB8fCAnJ31cIj5cbiAgICAgICAgRXhwYW5kXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJoaWRlIGhpZGRlblwiIGRhdGEtdHlwZT1cIiR7dG9kb0l0ZW0udHlwZX1GdWxsXCIgZGF0YS1pZD1cIiR7dG9kb0l0ZW0uaWR9XCJcbiAgICAgICAgICAgICAgZGF0YS1iZWxvbmctdHlwZT1cIiR7b3B0aW9ucy5iZWxvbmdUeXBlIHx8ICcnfVwiPlxuICAgICAgICBTaHJpbmtcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlc3Ryb3lcIiBkYXRhLXR5cGU9XCIke3RvZG9JdGVtLnR5cGV9XCIgZGF0YS1pZD1cIiR7dG9kb0l0ZW0uaWR9XCI+RGVsZXRlPC9idXR0b24+XG4gICA8L2Rpdj5gO1xufVxuXG5mdW5jdGlvbiBfcmVuZGVyRnVsbCh0b2RvSXRlbSwgb3B0aW9ucykge1xuICBjb25zdCB0b2RvSXRlbUVsZW1lbnQgPSAob3B0aW9ucy5wYXJlbnRFbGVtZW50IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yKGAudG9kby1pdGVtW2RhdGEtaWQ9XCIke3RvZG9JdGVtLmlkfVwiXWApLFxuICAgICAgICBzaG93QnV0dG9uID0gdG9kb0l0ZW1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC5zaG93W2RhdGEtdHlwZT1cIiR7dG9kb0l0ZW0udHlwZX1GdWxsXCJdYCksXG4gICAgICAgIGhpZGVCdXR0b24gPSB0b2RvSXRlbUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLmhpZGVbZGF0YS10eXBlPVwiJHt0b2RvSXRlbS50eXBlfUZ1bGxcIl1gKTtcbiAgc2hvd0J1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgaGlkZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcblxuICB0b2RvSXRlbUVsZW1lbnQuaW5uZXJIVE1MICs9XG4gICAgYCR7ZWRpdGFibGVBdHRyaWJ1dGUodG9kb0l0ZW0sICdkZXNjcmlwdGlvbicsICd0ZXh0YXJlYScsIHsgZWxlbWVudFRleHQ6ICdEZXNjcmlwdGlvbjogJyB9KX1cbiAgICAgJHtlZGl0YWJsZUF0dHJpYnV0ZSh0b2RvSXRlbSwgJ25vdGVzJywgJ3RleHRhcmVhJywgeyBlbGVtZW50VGV4dDogJ05vdGVzOiAnIH0pIH1cbiAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LWJlbG9uZ1wiIGRhdGEtdHlwZT1cIiR7dG9kb0l0ZW0udHlwZX1cIiBkYXRhLWlkPVwiJHt0b2RvSXRlbS5pZH1cIlxuICAgICAgICAgICAgIGRhdGEtYmVsb25nLXR5cGU9XCJwcm9qZWN0XCIgZGF0YS1iZWxvbmctaWQ9XCIke3RvZG9JdGVtLmJlbG9uZ3MucHJvamVjdH1cIj5cbiAgICAgIENoYW5nZSBQcm9qZWN0XG4gICAgIDwvYnV0dG9uPlxuICAgICA8ZGl2PlxuICAgICAgUHJpb3JpdHk6ICR7dG9kb0l0ZW0ucHJpb3JpdHkgfHwgJ05vbmUnfVxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInVwZGF0ZS1wcmlvcml0eSBzeW1ib2xcIiBkYXRhLXR5cGU9XCIke3RvZG9JdGVtLnR5cGV9XCIgZGF0YS1pZD1cIiR7dG9kb0l0ZW0uaWR9XCIgXG4gICAgICAgICAgICAgIGRpcmVjdGlvbj1cIi0xXCI+djwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInVwZGF0ZS1wcmlvcml0eSBzeW1ib2xcIiBkYXRhLXR5cGU9XCIke3RvZG9JdGVtLnR5cGV9XCIgZGF0YS1pZD1cIiR7dG9kb0l0ZW0uaWR9XCJcbiAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiMVwiPl48L2J1dHRvbj5cbiAgICAgPC9kaXY+YDtcblxuICBfcmVuZGVyQ2hlY2tsaXN0SXRlbXNJbmRleCh0b2RvSXRlbSk7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJDaGVja2xpc3RJdGVtc0luZGV4KHRvZG9JdGVtKSB7XG4gIFB1YlN1Yi5wdWJsaXNoKElOREVYKCdjaGVja2xpc3RJdGVtJyksXG4gICAgICAgICAgICAgICAgeyBiZWxvbmdUeXBlOiB0b2RvSXRlbS50eXBlLCBiZWxvbmdJZDogdG9kb0l0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICBpZHM6IHRvZG9JdGVtLmNoZWNrbGlzdEl0ZW1zLCBwYXJlbnRFbGVtZW50U2VsZWN0b3I6IGAudG9kby1pdGVtW2RhdGEtaWQ9XCIke3RvZG9JdGVtLmlkfVwiXWAgfSk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBTSE9XLCBTSE9XX1JFTkRFUkVEIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJzsgXG5pbXBvcnQgeyBhcHBsaWNhdGlvbkRhdGEgYXMgcmVuZGVyRGF0YSwgYXBwbGljYXRpb25TZXR0aW5ncyBhcyBzZXR0aW5ncyB9IGZyb20gJy4uL2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IGVkaXRhYmxlQXR0cmlidXRlIH0gZnJvbSAnLi92aWV3LWhlbHBlcnMnO1xuXG5QdWJTdWIuc3Vic2NyaWJlKFNIT1coJ2NoZWNrbGlzdEl0ZW0nKSwgc2hvd0NoZWNrbGlzdEl0ZW1WaWV3KTtcbmZ1bmN0aW9uIHNob3dDaGVja2xpc3RJdGVtVmlldyhfLCBkYXRhKSB7XG4gIGNvbnN0IGNoZWNrbGlzdEl0ZW0gPSByZW5kZXJEYXRhLmNoZWNrbGlzdEl0ZW1zTGlzdC53aXRoSWQoZGF0YS5pZCk7XG4gIGNvbnN0IHBhcmVudEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRhdGEucGFyZW50RWxlbWVudFNlbGVjdG9yIHx8ICdib2R5JyksXG4gICAgICAgIHByZXZDaGVja2xpc3RJdGVtRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5jaGVja2xpc3QtaXRlbVtkYXRhLWlkPVwiJHtjaGVja2xpc3RJdGVtLmlkfVwiXWApO1xuXG4gIHByZXZDaGVja2xpc3RJdGVtRWxlbWVudD8ucmVtb3ZlKCk7XG4gIC8vVE8gRE86IENoYW5nZSBjaGVjayB0byBpY29uIGltYWdlXG4gIHBhcmVudEVsZW1lbnQuaW5uZXJIVE1MICs9IFxuICBgPCR7ZGF0YS5lbGVtZW50VHlwZSB8fCAnZGl2J30gY2xhc3M9XCJzdGF0dXMtJHtzZXR0aW5ncy5zdGF0dXNlcy5pbmRleE9mKGNoZWNrbGlzdEl0ZW0uc3RhdHVzKX0gY2hlY2tsaXN0LWl0ZW1cIiBkYXRhLWlkPVwiJHtjaGVja2xpc3RJdGVtLmlkfVwiPlxuICAgICAgJHtlZGl0YWJsZUF0dHJpYnV0ZShjaGVja2xpc3RJdGVtLCAndGl0bGUnLCAndGV4dCcpfVxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInVwZGF0ZS1zdGF0dXNcIiBkYXRhLXR5cGU9XCIke2NoZWNrbGlzdEl0ZW0udHlwZX1cIiBkYXRhLWlkPVwiJHtjaGVja2xpc3RJdGVtLmlkfVwiPlxuICAgICAgICAke3NldHRpbmdzLnN0YXR1c2VzLmluZGV4T2YoY2hlY2tsaXN0SXRlbS5zdGF0dXMpID8gJ+KckycgOiAnJ31cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlc3Ryb3lcIiBkYXRhLXR5cGU9XCIke2NoZWNrbGlzdEl0ZW0udHlwZX1cIiBkYXRhLWlkPVwiJHtjaGVja2xpc3RJdGVtLmlkfVwiPi08L2J1dHRvbj5cbiAgIDwvJHtkYXRhLmVsZW1lbnRUeXBlIHx8ICdkaXYnfT5gO1xuICAgXG4gIFB1YlN1Yi5wdWJsaXNoKFNIT1dfUkVOREVSRUQoJ2NoZWNrbGlzdEl0ZW0nKSk7XG59XG4iLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBBTllfRURJVF9BVFRSSUJVVEUsIEVESVRfQVRUUklCVVRFX1JFTkRFUkVELCBBTllfRURJVF9CRUxPTkcsIEVESVRfQkVMT05HX1JFTkRFUkVEIH0gZnJvbSAnLi4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCB7IGFwcGxpY2F0aW9uRGF0YSBhcyByZW5kZXJEYXRhLCBhcHBsaWNhdGlvblNldHRpbmdzIGFzIHNldHRpbmdzIH0gZnJvbSAnLi4vYXBwbGljYXRpb24nO1xuaW1wb3J0IHsgcmVuZGVyRGlzYWJsZWQgfSBmcm9tICcuL3ZpZXctaGVscGVycyc7XG5pbXBvcnQgcGVuY2lsIGZyb20gJy4uLy4uL2ltYWdlcy9wZW5jaWwuc3ZnJztcblxuUHViU3ViLnN1YnNjcmliZShBTllfRURJVF9BVFRSSUJVVEUsIGVkaXRBdHRyaWJ1dGVWaWV3KVxuZnVuY3Rpb24gZWRpdEF0dHJpYnV0ZVZpZXcoXywgeyB0eXBlLCBpZCwgYXR0cmlidXRlLCBhdHRyaWJ1dGVUeXBlLCBhdHRyaWJ1dGVWYWx1ZSB9KSB7XG4gIHJlbmRlckRpc2FibGVkKCk7XG5cbiAgY29uc3QgYXR0ckVsZW1lbnRTZWxlY3RvciA9IGAuYXR0cmlidXRlW2RhdGEtdHlwZT1cIiR7dHlwZX1cIl1bZGF0YS1pZD1cIiR7aWR9XCJdW2RhdGEtYXR0cmlidXRlPVwiJHthdHRyaWJ1dGV9XCJdYCxcbiAgICAgICAgYXR0ckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGF0dHJFbGVtZW50U2VsZWN0b3IpLFxuICAgICAgICBsYWJlbFRleHQgPSBhdHRyRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudC10ZXh0JykudGV4dENvbnRlbnQsXG4gICAgICAgIGlzVGV4dGFyZWEgPSBhdHRyaWJ1dGVUeXBlID09ICd0ZXh0YXJlYSc7XG4gIFxuICBjb25zdCBmb3JtSFRNTCA9XG4gICAgYDxmb3JtIGNsYXNzPVwiZWRpdC1hdHRyaWJ1dGUtZm9ybSBlbmFibGVkIFxuICAgICAgICAgICAgICAgICAgJHtzZXR0aW5ncy5jbGlja091dC5pbmNsdWRlcyhhdHRyaWJ1dGVUeXBlKSA/ICdjbGljay1vdXQnIDogJyd9XG4gICAgICAgICAgICAgICAgICAke2xhYmVsVGV4dCA/ICd3aXRoLWxhYmVsJyA6ICcnfVwiIFxuICAgICAgICAgICBkYXRhLXR5cGU9XCIke3R5cGV9XCIgZGF0YS1pZD1cIiR7aWR9XCIgZGF0YS1hdHRyaWJ1dGU9XCIke2F0dHJpYnV0ZX1cIj5cbiAgICAgICR7c2V0dGluZ3MuY2xpY2tPdXQuaW5jbHVkZXMoYXR0cmlidXRlVHlwZSkgPyAnJyA6ICc8YnV0dG9uIGNsYXNzPVwiYmFjayBzeW1ib2xcIj7ihpA8L2J1dHRvbj4nfVxuICAgICAgJHtsYWJlbFRleHQgPyBgPGxhYmVsIGZvcj1cIiR7YXR0cmlidXRlfVwiPiR7bGFiZWxUZXh0fTwvbGFiZWw+YCA6ICcnfVxuICAgICAgPCR7aXNUZXh0YXJlYSA/ICd0ZXh0YXJlYScgOiAnaW5wdXQnfSBcbiAgICAgIHR5cGU9XCIke2F0dHJpYnV0ZVR5cGV9XCIgbmFtZT1cIiR7YXR0cmlidXRlfVwiIGlkPVwiJHthdHRyaWJ1dGV9XCIgXG4gICAgICB2YWx1ZT1cIiR7YXR0cmlidXRlVmFsdWV9XCI+JHtpc1RleHRhcmVhID8gYCR7YXR0cmlidXRlVmFsdWV9PC90ZXh0YXJlYT5gIDogJyd9XG4gICAgICA8YnV0dG9uIGNsYXNzPVwic3VibWl0IHN5bWJvbFwiPjxpbWcgc3JjPVwiJHtwZW5jaWx9XCIgYWx0PVwiU3VibWl0XCI+PC9idXR0b24+XG4gICA8L2Zvcm0+YDtcbiAgXG4gIGF0dHJFbGVtZW50Lmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLCBmb3JtSFRNTCk7XG4gIGF0dHJFbGVtZW50LnJlbW92ZSgpO1xuICBQdWJTdWIucHVibGlzaChFRElUX0FUVFJJQlVURV9SRU5ERVJFRCh0eXBlKSwgeyB0eXBlLCBpZCwgYXR0cmlidXRlIH0pO1xufVxuXG5QdWJTdWIuc3Vic2NyaWJlKEFOWV9FRElUX0JFTE9ORywgZWRpdEJlbG9uZ1ZpZXcpXG5mdW5jdGlvbiBlZGl0QmVsb25nVmlldyhfLCB7IHR5cGUsIGlkLCBiZWxvbmdUeXBlLCBiZWxvbmdJZCB9KSB7XG4gIHJlbmRlckRpc2FibGVkKCk7XG4gIFxuICBjb25zdCBlZGl0QmVsb25nQnV0dG9uU2VsZWN0b3IgPSBgLmVkaXQtYmVsb25nW2RhdGEtYmVsb25nLXR5cGU9XCIke2JlbG9uZ1R5cGV9XCJdW2RhdGEtdHlwZT1cIiR7dHlwZX1cIl1bZGF0YS1pZD1cIiR7aWR9XCJdYCxcbiAgICAgICAgZWRpdEJlbG9uZ0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWRpdEJlbG9uZ0J1dHRvblNlbGVjdG9yKTtcbiAgXG4gIGNvbnN0IGZvcm1IVE1MID1cbiAgYDxmb3JtIGNsYXNzPVwiZWRpdC1mb3JtXCIgZGF0YS10eXBlPVwiJHt0eXBlfVwiIGRhdGEtaWQ9XCIke2lkfVwiIGRhdGEtYmVsb25nLXR5cGU9XCIke2JlbG9uZ1R5cGV9XCI+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYmFja1wiPuKGkDwvYnV0dG9uPlxuICAgICAgPGxhYmVsIGZvcj1cImJlbG9uZ0lkXCI+UHJvamVjdDwvbGFiZWw+XG4gICAgICA8c2VsZWN0IG5hbWU9XCJiZWxvbmdJZFwiIGlkPVwiYmVsb25nSWRcIj5cbiAgICAgICAgJHtyZW5kZXJEYXRhW2JlbG9uZ1R5cGUgKyAnc0xpc3QnXVtiZWxvbmdUeXBlICsgJ3MnXS5tYXAob2JqID0+XG4gICAgICAgICAgYDxvcHRpb24gdmFsdWU9XCIke29iai5pZH1cIiAke29iai5pZCA9PSArYmVsb25nSWQgPyAnc2VsZWN0ZWQnIDogJyd9PlxuICAgICAgICAgICAgJHtvYmoudGl0bGV9XG4gICAgICAgICAgIDwvb3B0aW9uPmApXG4gICAgICAgIC5qb2luKCdcXG4nKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cInN1Ym1pdFwiPkNoYW5nZTwvYnV0dG9uPlxuICAgPC9mb3JtPmA7XG5cbiAgZWRpdEJlbG9uZ0J1dHRvbi5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgZm9ybUhUTUwpO1xuICBlZGl0QmVsb25nQnV0dG9uLnJlbW92ZSgpO1xuICBQdWJTdWIucHVibGlzaChFRElUX0JFTE9OR19SRU5ERVJFRCh0eXBlKSwgeyB0eXBlLCBpZCwgYmVsb25nVHlwZSB9KVxufVxuIiwiZXhwb3J0IGNvbnN0IHByZXZpZXdOdW0gPSAyO1xuZXhwb3J0IGNvbnN0IHByaW9yaXRpZXMgPSBbJ0xvdycsICdNZWRpdW0nLCAnSGlnaCddO1xuZXhwb3J0IGNvbnN0IHN0YXR1c2VzID0gWydJbmNvbXBsZXRlJywgJ0NvbXBsZXRlJ107XG5leHBvcnQgY29uc3QgY2xpY2tPdXQgPSBbJ3RleHQnXTtcbmV4cG9ydCBjb25zdCBzZXBhcmF0ZUVkaXRBdHRyQnV0dG9uID0geyBwcm9qZWN0OiBbXSwgdG9kb0l0ZW06IFsnZGVzY3JpcHRpb24nLCAnbm90ZXMnXSwgY2hlY2tsaXN0SXRlbTogW10gfVxuZXhwb3J0IGNvbnN0IGh1bWFuUmVhZGFibGVOYW1lcyA9IHtcbiAgdGl0bGU6ICduYW1lJyxcbiAgdG9kb0l0ZW06ICd0by1kbyBpdGVtJyxcbiAgY2hlY2tsaXN0SXRlbTogJ2NoZWNrbGlzdCBpdGVtJ1xufVxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tICdwdWJzdWItanMnO1xuaW1wb3J0IHsgVkFMSURBVElPTl9FUlJPUiB9IGZyb20gJy4uL3B1YnN1Yi1ldmVudC10eXBlcyc7XG5pbXBvcnQgeyBodW1hblJlYWRhYmxlTmFtZXMgfSBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi92aWV3LWhlbHBlcnMnO1xuXG5QdWJTdWIuc3Vic2NyaWJlKFZBTElEQVRJT05fRVJST1IsIHZhbGlkYXRpb25FcnJvclZpZXcpO1xuZnVuY3Rpb24gdmFsaWRhdGlvbkVycm9yVmlldyhfLCBkYXRhKSB7XG4gIGNvbnN0IGNvbnRhaW5lckVsZW1lbnRTZWxlY3RvcnMgPSBcbiAgICBgW2RhdGEtdHlwZT1cIiR7ZGF0YS50eXBlfVwiXSR7ZGF0YS5pZCA/IGBbZGF0YS1pZD1cIiR7ZGF0YS5pZH1cIl1gIDogJyd9JHtkYXRhLmluZGV4ID8gYFtkYXRhLWluZGV4PVwiJHtkYXRhLmluZGV4fVwiXWAgOiAnJ31gO1xuICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgZm9ybSR7Y29udGFpbmVyRWxlbWVudFNlbGVjdG9yc30sLmZpZWxkJHtjb250YWluZXJFbGVtZW50U2VsZWN0b3JzfWApO1xuICBpZighY29udGFpbmVyRWxlbWVudCkgcmV0dXJuO1xuXG4gIGNvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVycm9yJykuZm9yRWFjaChlcnJvciA9PiBlcnJvci5yZW1vdmUoKSk7XG4gIFxuICBmb3IoY29uc3QgZXJyb3Igb2YgZGF0YS5lcnJvcnMpIHtcbiAgICBjb25zdCBhdHRyRWxlbWVudCA9IFxuICAgICAgY29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFtuYW1lKj1cIiR7ZXJyb3IuYXR0cmlidXRlfVwiXSx0ZXh0YXJlYVtuYW1lKj1cIiR7ZXJyb3IuYXR0cmlidXRlfVwiXWApO1xuICAgIGlmKCFhdHRyRWxlbWVudCkgY29udGludWU7XG5cbiAgICBjb25zdCB0eXBlVGV4dCA9IGNhcGl0YWxpemUoaHVtYW5SZWFkYWJsZU5hbWVzW2Vycm9yLm9ialR5cGVdIHx8IGVycm9yLm9ialR5cGUpLFxuICAgICAgICAgIGVycm9yQXR0cmlidXRlVGV4dCA9IGh1bWFuUmVhZGFibGVOYW1lc1tlcnJvci5vYmpBdHRyaWJ1dGVdIHx8IGVycm9yLm9iakF0dHJpYnV0ZSxcbiAgICAgICAgICBlcnJvckhUTUwgPSBgPHAgY2xhc3M9XCJlcnJvclwiPiR7dHlwZVRleHR9ICR7ZXJyb3JBdHRyaWJ1dGVUZXh0fSAke2Vycm9yLm1lc3NhZ2V9PC9wPmA7XG4gICAgYXR0ckVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIGVycm9ySFRNTCk7XG4gIH1cbn1cbiIsImltcG9ydCAnLi9pbmRleC1wcm9qZWN0cy12aWV3JztcbmltcG9ydCAnLi9pbmRleC10b2RvSXRlbXMtdmlldyc7XG5pbXBvcnQgJy4vaW5kZXgtY2hlY2tsaXN0SXRlbXMtdmlldyc7XG5pbXBvcnQgJy4vbmV3LXByb2plY3Qtdmlldyc7XG5pbXBvcnQgJy4vbmV3LXRvZG9JdGVtLXZpZXcnO1xuaW1wb3J0ICcuL25ldy1jaGVja2xpc3RJdGVtLXZpZXcnO1xuaW1wb3J0ICcuL3Nob3ctcHJvamVjdC12aWV3JztcbmltcG9ydCAnLi9zaG93LXRvZG9JdGVtLXZpZXcnO1xuaW1wb3J0ICcuL3Nob3ctY2hlY2tsaXN0SXRlbS12aWV3JztcbmltcG9ydCAnLi9lZGl0LXZpZXcnO1xuaW1wb3J0ICcuL2Vycm9yLXZpZXcnO1xuXG5pbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yi1qcyc7XG5pbXBvcnQgeyBQQUdFX1JFTkRFUkVELCBEQVRBX1VQREFURUQsIEJBQ0sgfSBmcm9tICcuLi9wdWJzdWItZXZlbnQtdHlwZXMnO1xuaW1wb3J0IHsgY2xlYXJCb2R5IH0gZnJvbSAnLi92aWV3LWhlbHBlcnMnO1xuaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gJy4vaW5kZXgtcHJvamVjdHMtdmlldyc7XG5cbmxldCBjdXJyUGFnZVZpZXcgPSBkZWZhdWx0VmlldztcblxuUHViU3ViLnN1YnNjcmliZShQQUdFX1JFTkRFUkVELCBzZXRDdXJyUGFnZVZpZXcpO1xuZnVuY3Rpb24gc2V0Q3VyclBhZ2VWaWV3KF8sIHZpZXcpIHtcbiAgY3VyclBhZ2VWaWV3ID0gdmlldztcbn1cblxuUHViU3ViLnN1YnNjcmliZShEQVRBX1VQREFURUQsIHVwZGF0ZVZpZXcpO1xuUHViU3ViLnN1YnNjcmliZShCQUNLLCB1cGRhdGVWaWV3KTtcbmZ1bmN0aW9uIHVwZGF0ZVZpZXcoKSB7XG4gIGNsZWFyQm9keSgpO1xuICBjdXJyUGFnZVZpZXcoKTtcbn1cbiIsImltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IEJBQ0ssIFZJRVdfUkVOREVSRUQsIElOREVYLCBORVcsIEFOWV9ORVdfUkVOREVSRUQsIE5FV19SRU5ERVJFRCwgQU5ZX05FV19DT0xMRUNUSU9OX0lURU1fUkVOREVSRUQsIFxuICAgICAgICAgQ1JFQVRFLCBTSE9XLCBISURFLCBFRElUX0FUVFJJQlVURSwgQU5ZX0VESVRfQVRUUklCVVRFX1JFTkRFUkVELCBFRElUX0JFTE9ORywgQU5ZX0VESVRfQkVMT05HX1JFTkRFUkVELCBcbiAgICAgICAgIFVQREFURSwgVVBEQVRFX0JFTE9ORywgVVBEQVRFX1NUQVRVUywgVVBEQVRFX1BSSU9SSVRZLCBERVNUUk9ZLCBDUkVBVEVfQ09MTEVDVElPTl9JVEVNUyB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCB7IGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcblxuY29uc3QgaW5kZXhCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmluZGV4JyksXG4gICAgICBuZXdCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5ldycpLFxuICAgICAgc2hvd0J1dHRvbnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2hvdycpLFxuICAgICAgaGlkZUJ1dHRvbnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGlkZScpLFxuICAgICAgZWRpdEF0dHJpYnV0ZUJ1dHRvbnMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZWRpdC1hdHRyaWJ1dGUnKSxcbiAgICAgIGVkaXRCZWxvbmdCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVkaXQtYmVsb25nJyksXG4gICAgICB1cGRhdGVTdGF0dXNCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnVwZGF0ZS1zdGF0dXMnKSxcbiAgICAgIHVwZGF0ZVByaW9yaXR5QnV0dG9ucyA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy51cGRhdGUtcHJpb3JpdHknKSxcbiAgICAgIGRlc3Ryb3lCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlc3Ryb3knKSxcbiAgICAgIGJhY2tCdXR0b25zID0gKCkgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJhY2snKSxcbiAgICAgIGlucHV0RWxlbWVudHMgPSAoKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dDpub3QoW3R5cGU9XCJjaGVja2JveFwiXSxbdHlwZT1cInJhZGlvXCJdKSx0ZXh0YXJlYScpLFxuICAgICAgc3VibWl0QnV0dG9ucyA9ICgpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdWJtaXQnKTtcblxuZnVuY3Rpb24gX2JpbmRCdXR0b25zKGJ1dHRvbnMsIHB1YlN1YkV2ZW50LCBvcHRpb25zID0ge30pIHtcbiAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgYnV0dG9uID0gX2NsZWFyRXZlbnRMaXN0ZW5lcnMoYnV0dG9uKTtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldC5jbG9zZXN0KCdidXR0b24nKTtcbiAgICAgIGNvbnN0IGFyZ3MgPSBbdGFyZ2V0LmRhdGFzZXQudHlwZV1cbiAgICAgICAgICAgICAgICAgICAuY29uY2F0KChvcHRpb25zLmV4dHJhQXJncyB8fCBbXSkubWFwKGFyZyA9PiB0YXJnZXQuZGF0YXNldFthcmddKSk7XG4gICAgICBQdWJTdWIucHVibGlzaCh0eXBlb2YgcHViU3ViRXZlbnQgPT0gJ2Z1bmN0aW9uJyA/IFxuICAgICAgICAgICAgICAgICAgICAgIHB1YlN1YkV2ZW50KC4uLmFyZ3MpIDogcHViU3ViRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZGF0YXNldCk7XG4gICAgfSlcbiAgfSlcbn1cblxuUHViU3ViLnN1YnNjcmliZShWSUVXX1JFTkRFUkVELCBiaW5kQWN0aW9uQnV0dG9ucyk7XG5mdW5jdGlvbiBiaW5kQWN0aW9uQnV0dG9ucygpIHtcbiAgX2JpbmRCdXR0b25zKGluZGV4QnV0dG9ucygpLCBJTkRFWCk7XG4gIF9iaW5kQnV0dG9ucyhuZXdCdXR0b25zKCksIE5FVyk7XG4gIF9iaW5kQnV0dG9ucyhzaG93QnV0dG9ucygpLCBTSE9XKTtcbiAgX2JpbmRCdXR0b25zKGhpZGVCdXR0b25zKCksIEhJREUpO1xuICBfYmluZEJ1dHRvbnMoZWRpdEF0dHJpYnV0ZUJ1dHRvbnMoKSwgRURJVF9BVFRSSUJVVEUpO1xuICBfYmluZEJ1dHRvbnMoZWRpdEJlbG9uZ0J1dHRvbnMoKSwgRURJVF9CRUxPTkcpO1xuICBfYmluZEJ1dHRvbnModXBkYXRlU3RhdHVzQnV0dG9ucygpLCBVUERBVEVfU1RBVFVTLCB7IGV4dHJhQXJnczogWydpZCddIH0pO1xuICBfYmluZEJ1dHRvbnModXBkYXRlUHJpb3JpdHlCdXR0b25zKCksIFVQREFURV9QUklPUklUWSwgeyBleHRyYUFyZ3M6IFsnaWQnXSB9KTtcbiAgX2JpbmRCdXR0b25zKGRlc3Ryb3lCdXR0b25zKCksIERFU1RST1kpO1xuICBfYmluZEJ1dHRvbnMoYmFja0J1dHRvbnMoKSwgQkFDSyk7XG59XG5cbmZ1bmN0aW9uIF9iaW5kRm9ybVN1Ym1pdEJ1dHRvbnMocHViU3ViRXZlbnQsIGRhdGFBdHRycykge1xuICBzdWJtaXRCdXR0b25zKCkuZm9yRWFjaChidXR0b24gPT4geyBcbiAgICBidXR0b24gPSBfY2xlYXJFdmVudExpc3RlbmVycyhidXR0b24pO1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZm9ybSA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKSxcbiAgICAgICAgICAgIGFyZ3MgPSBkYXRhQXR0cnMubWFwKGF0dHIgPT4gZm9ybS5kYXRhc2V0W2F0dHJdKTtcbiAgICAgIFB1YlN1Yi5wdWJsaXNoKHB1YlN1YkV2ZW50KC4uLmFyZ3MpLCBPYmplY3QuZnJvbUVudHJpZXMobmV3IEZvcm1EYXRhKGZvcm0pKSk7XG4gICAgfSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gX2JpbmRGb3JtU3VibWl0RW50ZXJLZXkocHViU3ViRXZlbnQsIGRhdGFBdHRycykge1xuICBpbnB1dEVsZW1lbnRzKCkuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgaW5wdXQgPSBfY2xlYXJFdmVudExpc3RlbmVycyhpbnB1dCk7XG4gICAgY29uc3QgZm9ybSA9IGlucHV0LmNsb3Nlc3QoJ2Zvcm0nKSxcbiAgICAgICAgICBhcmdzID0gZGF0YUF0dHJzLm1hcChhdHRyID0+IGZvcm0uZGF0YXNldFthdHRyXSk7XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgaWYgKCEoZS5rZXkgPT0gJ0VudGVyJyAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IGlucHV0KSkgcmV0dXJuO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgUHViU3ViLnB1Ymxpc2gocHViU3ViRXZlbnQoLi4uYXJncyksIE9iamVjdC5mcm9tRW50cmllcyhuZXcgRm9ybURhdGEoZm9ybSkpKTtcbiAgICB9KVxuICB9KVxufVxuXG5mdW5jdGlvbiBfY2xlYXJFdmVudExpc3RlbmVycyhlbGVtZW50KSB7XG4gIGNvbnN0IGNsZWFyZWRFbGVtZW50ID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG4gIGVsZW1lbnQucmVwbGFjZVdpdGgoY2xlYXJlZEVsZW1lbnQpO1xuICByZXR1cm4gY2xlYXJlZEVsZW1lbnQ7XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoQU5ZX05FV19SRU5ERVJFRCwgYmluZENyZWF0ZUJ1dHRvbnMpO1xuZnVuY3Rpb24gYmluZENyZWF0ZUJ1dHRvbnMoKSB7XG4gIF9iaW5kRm9ybVN1Ym1pdEJ1dHRvbnMoQ1JFQVRFLCBbJ3R5cGUnXSk7XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoTkVXX1JFTkRFUkVEKCdwcm9qZWN0JyksIGJpbmROZXdQcm9qZWN0RXZlbnRzKTtcbmZ1bmN0aW9uIGJpbmROZXdQcm9qZWN0RXZlbnRzKCkge1xuICBfYmluZEZvcm1TdWJtaXRFbnRlcktleShDUkVBVEUsIFsndHlwZSddKTtcbn1cblxuUHViU3ViLnN1YnNjcmliZShBTllfTkVXX0NPTExFQ1RJT05fSVRFTV9SRU5ERVJFRCwgYmluZENyZWF0ZUNvbGxlY3Rpb25JdGVtc0J1dHRvbnMpO1xuZnVuY3Rpb24gYmluZENyZWF0ZUNvbGxlY3Rpb25JdGVtc0J1dHRvbnMoKSB7XG4gIF9iaW5kRm9ybVN1Ym1pdEJ1dHRvbnMoQ1JFQVRFX0NPTExFQ1RJT05fSVRFTVMsIFsndHlwZScsICdpZCcsICdjb2xsZWN0aW9uVHlwZSddKTtcbiAgX2JpbmRGb3JtU3VibWl0RW50ZXJLZXkoQ1JFQVRFX0NPTExFQ1RJT05fSVRFTVMsIFsndHlwZScsICdpZCcsICdjb2xsZWN0aW9uVHlwZSddKTtcbn1cblxuUHViU3ViLnN1YnNjcmliZShBTllfRURJVF9BVFRSSUJVVEVfUkVOREVSRUQsIGJpbmRFZGl0QXR0cmlidXRlRXZlbnRzKTtcbmZ1bmN0aW9uIGJpbmRFZGl0QXR0cmlidXRlRXZlbnRzKF8sIGRhdGEpIHtcbiAgX2JpbmRGb3JtU3VibWl0QnV0dG9ucyhVUERBVEUsIFsndHlwZScsICdpZCddKTtcbiAgX2JpbmRGb3JtU3VibWl0RW50ZXJLZXkoVVBEQVRFLCBbJ3R5cGUnLCAnaWQnXSk7XG4gIGlucHV0RWxlbWVudHMoKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICBjb25zdCBmb3JtID0gaW5wdXQuY2xvc2VzdCgnZm9ybScpO1xuICAgIGlmKE9iamVjdC5lbnRyaWVzKGRhdGEpLmV2ZXJ5KChba2V5LCB2YWxdKSA9PiBmb3JtLmRhdGFzZXRba2V5XSA9PSB2YWwpKSBcbiAgICAgIF9mb2N1c0lucHV0KGlucHV0KTtcbiAgICBpZihzZXR0aW5ncy5jbGlja091dC5pbmNsdWRlcyhpbnB1dC50eXBlKSkgXG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsICgpID0+IFxuICAgICAgICBQdWJTdWIucHVibGlzaChVUERBVEUoZm9ybS5kYXRhc2V0LnR5cGUsIGZvcm0uZGF0YXNldC5pZCksIFxuICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMobmV3IEZvcm1EYXRhKGZvcm0pKSkpO1xuICB9KVxufVxuXG5mdW5jdGlvbiBfZm9jdXNJbnB1dChpbnB1dCkge1xuICBpbnB1dC5mb2N1cygpO1xuICBpZih0eXBlb2YgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPT0gJ251bWJlcicpXG4gICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25FbmQgPSBpbnB1dC52YWx1ZS5sZW5ndGg7XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoQU5ZX0VESVRfQkVMT05HX1JFTkRFUkVELCBiaW5kRWRpdEJlbG9uZ0V2ZW50cyk7XG5mdW5jdGlvbiBiaW5kRWRpdEJlbG9uZ0V2ZW50cygpIHtcbiAgX2JpbmRGb3JtU3VibWl0QnV0dG9ucyhVUERBVEVfQkVMT05HLCBbJ3R5cGUnLCAnaWQnLCAnYmVsb25nVHlwZSddKTtcbn1cbiIsImltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IENSRUFURSwgREVTVFJPWSwgVVBEQVRFLCBJVEVNX1VQREFURUQsIFVQREFURV9TVEFUVVMsIFVQREFURV9QUklPUklUWSwgXG4gICAgICAgICBVUERBVEVfQkVMT05HLCBCRUxPTkdfVVBEQVRFRCwgQ1JFQVRFX0NPTExFQ1RJT05fSVRFTVMsIENPTExFQ1RJT05fSVRFTVNfQ1JFQVRFRCwgXG4gICAgICAgICBDT0xMRUNUSU9OX1VQREFURUQsIExJU1RfVVBEQVRFRCwgVkFMSURBVElPTl9FUlJPUiB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcbmltcG9ydCB7IGFwcGxpY2F0aW9uU2V0dGluZ3MgYXMgc2V0dGluZ3MgfSBmcm9tICcuL2FwcGxpY2F0aW9uJztcbmltcG9ydCBzYW5pdGl6ZUh0bWwgZnJvbSAnc2FuaXRpemUtaHRtbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBTdG9yYWdlYWJsZShvYmopIHtcbiAgb2JqLnRlbXBLZXlzID0gWy4uLihvYmoudGVtcEtleXMgfHwgW10pLCAndGVtcEtleXMnXTtcbiAgb2JqLnRvU3RvcmFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHN0b3JhZ2VPYmogPSB7fTtcbiAgICBmb3IoY29uc3Qga2V5IGluIHRoaXMpIHtcbiAgICAgIGlmKHR5cGVvZiB0aGlzW2tleV0gPT0gJ2Z1bmN0aW9uJyB8fCB0aGlzLnRlbXBLZXlzLmluY2x1ZGVzKGtleSkpIGNvbnRpbnVlO1xuICAgICAgc3RvcmFnZU9ialtrZXldID0gdGhpc1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gc3RvcmFnZU9iajtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gVmFsaWRhdGFibGUob2JqKSB7XG4gIG9iai52YWxpZGF0aW9ucyB8fD0ge307XG4gIG9iai5hc3NvY2lhdGVkVmFsaWRhdGlvbnMgfHw9IFtdO1xuICBvYmouZXJyb3JzIHx8PSBbXTtcblxuICBvYmoudGVtcEtleXMgPSBbLi4uKG9iai50ZW1wS2V5cyB8fCBbXSksICd2YWxpZGF0aW9ucycsICdhc3NvY2lhdGVkVmFsaWRhdGlvbnMnLCAnZXJyb3JzJ107XG5cbiAgb2JqLnZhbGlkYXRlID0gZnVuY3Rpb24oZGF0YSA9IG9iaikge1xuICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgZm9yKGNvbnN0IGF0dHJpYnV0ZSBpbiBkYXRhKVxuICAgICAgdGhpcy5lcnJvcnMucHVzaCguLi5fYXR0ckVycm9ycy5jYWxsKHRoaXMsIGF0dHJpYnV0ZSwgZGF0YVthdHRyaWJ1dGVdKSk7XG4gICAgaWYoZGF0YS5hc3NvY2lhdGVkVmFsaWRhdGlvbnMpIFxuICAgICAgdGhpcy5lcnJvcnMucHVzaCguLi5fYXNzb2NpYXRlZEVycm9ycyhkYXRhLmFzc29jaWF0ZWRWYWxpZGF0aW9ucykpO1xuICB9XG5cbiAgb2JqLnZhbGlkYXRlQXNzb2NpYXRlZCA9IGZ1bmN0aW9uKGFzc29jaWF0ZWRWYWxpZGF0aW9ucykge1xuICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgdGhpcy5lcnJvcnMucHVzaCguLi5fYXNzb2NpYXRlZEVycm9ycyhhc3NvY2lhdGVkVmFsaWRhdGlvbnMpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9hdHRyRXJyb3JzKGF0dHJpYnV0ZSwgdmFsdWUsIGVycm9ycyA9IFtdKSB7XG4gICAgdGhpcy52YWxpZGF0aW9ucz8uW2F0dHJpYnV0ZV0/LmZvckVhY2godmFsaWRhdGlvbiA9PiB7XG4gICAgICBpZighdmFsaWRhdGlvbi5mbih2YWx1ZSkpIFxuICAgICAgICBlcnJvcnMucHVzaCh7IG9iakF0dHJpYnV0ZTogYXR0cmlidXRlLCBvYmpUeXBlOiBvYmoudHlwZSwgXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLCBtZXNzYWdlOiB2YWxpZGF0aW9uLm1lc3NhZ2UgfSk7XG4gICAgfSlcbiAgICByZXR1cm4gZXJyb3JzO1xuICB9XG5cbiAgZnVuY3Rpb24gX2Fzc29jaWF0ZWRFcnJvcnMoYXNzb2NpYXRlZFZhbGlkYXRpb25zLCBlcnJvcnMgPSBbXSkge1xuICAgIGFzc29jaWF0ZWRWYWxpZGF0aW9ucy5mb3JFYWNoKHZhbGlkYXRpb24gPT4ge1xuICAgICAgaWYoIXZhbGlkYXRpb24ub2JqLnZhbGlkKCkpXG4gICAgICAgIGVycm9ycy5wdXNoKC4uLnZhbGlkYXRpb24ub2JqLmVycm9ycy5tYXAoZXJyb3IgPT5cbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBlcnJvcixcbiAgICAgICAgICAgIHsgYXR0cmlidXRlOiB2YWxpZGF0aW9uLmF0dHJXcmFwcGVyID9cbiAgICAgICAgICAgICAgdmFsaWRhdGlvbi5hdHRyV3JhcHBlcihlcnJvci5hdHRyaWJ1dGUpIDogZXJyb3IuYXR0cmlidXRlIH0pKSk7XG4gICAgfSlcbiAgICByZXR1cm4gZXJyb3JzO1xuICB9XG5cbiAgb2JqLnZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIHJldHVybiB0aGlzLmVycm9ycy5sZW5ndGggPT0gMDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJlc2VuY2VWYWxpZGF0YWJsZShvYmosIGF0dHJzKSB7XG4gIGF0dHJzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgb2JqLnZhbGlkYXRpb25zW2F0dHJdIHx8PSBbXTtcbiAgICBvYmoudmFsaWRhdGlvbnNbYXR0cl0ucHVzaCh7IGZuOiB2YWx1ZSA9PiB2YWx1ZSwgbWVzc2FnZTogJ2Nhbm5vdCBiZSBibGFuaycgfSk7XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBVcGRhdGFibGUob2JqKSB7XG4gIFB1YlN1Yi5zdWJzY3JpYmUoVVBEQVRFKG9iai50eXBlLCBvYmouaWQpLCB1cGRhdGUpO1xuICBmdW5jdGlvbiB1cGRhdGUoXywgZGF0YSkge1xuICAgIF9wcmVwYXJlKGRhdGEpO1xuICAgIG9iai52YWxpZGF0ZShkYXRhKTtcbiAgICBpZihvYmouZXJyb3JzLmxlbmd0aCkgXG4gICAgICByZXR1cm4gUHViU3ViLnB1Ymxpc2goVkFMSURBVElPTl9FUlJPUiwgeyB0eXBlOiBvYmoudHlwZSwgaWQ6IG9iai5pZCwgZXJyb3JzOiBvYmouZXJyb3JzIH0pO1xuXG4gICAgZm9yKGNvbnN0IGF0dHJpYnV0ZSBpbiBkYXRhKSB7XG4gICAgICBvYmpbYXR0cmlidXRlXSA9IGRhdGFbYXR0cmlidXRlXTtcbiAgICB9XG4gICAgUHViU3ViLnB1Ymxpc2goSVRFTV9VUERBVEVEKG9iai50eXBlLCBvYmouaWQpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gU3RhdHVzYWJsZShvYmopIHtcbiAgY29uc3Qgc3RhdHVzZXMgPSBzZXR0aW5ncy5zdGF0dXNlcztcbiAgUHViU3ViLnN1YnNjcmliZShVUERBVEVfU1RBVFVTKG9iai50eXBlLCBvYmouaWQpLCBpbmNyZW1lbnRTdGF0dXMpXG4gIGZ1bmN0aW9uIGluY3JlbWVudFN0YXR1cygpIHtcbiAgICBvYmouc3RhdHVzID0gc3RhdHVzZXNbKHN0YXR1c2VzLmluZGV4T2Yob2JqLnN0YXR1cyApKyAxKSAlIHN0YXR1c2VzLmxlbmd0aF07XG4gICAgUHViU3ViLnB1Ymxpc2goSVRFTV9VUERBVEVEKG9iai50eXBlLCBvYmouaWQpKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUHJpb3JpdGl6YWJsZShvYmopIHtcbiAgY29uc3QgcHJpb3JpdGllcyA9IHNldHRpbmdzLnByaW9yaXRpZXM7XG4gIFB1YlN1Yi5zdWJzY3JpYmUoVVBEQVRFX1BSSU9SSVRZKG9iai50eXBlLCBvYmouaWQpLCB1cGRhdGVQcmlvcml0eSlcbiAgZnVuY3Rpb24gdXBkYXRlUHJpb3JpdHkoXywgZGF0YSkge1xuICAgIG9iai5wcmlvcml0eSA9IHByaW9yaXRpZXNbTWF0aC5taW4oTWF0aC5tYXgocHJpb3JpdGllcy5pbmRleE9mKG9iai5wcmlvcml0eSkgKyArZGF0YS5kaXJlY3Rpb24sIDApLCBwcmlvcml0aWVzLmxlbmd0aCAtIDEpXTtcbiAgICBQdWJTdWIucHVibGlzaChJVEVNX1VQREFURUQob2JqLnR5cGUsIG9iai5pZCkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xsZWN0aW9uYWJsZShvYmosIGNvbGxlY3Rpb25UeXBlLCBjb2xsZWN0aW9uVHlwZUZhY3RvcnkpIHtcbiAgY29uc3QgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25UeXBlICsgJ3MnO1xuICBvYmpbY29sbGVjdGlvbl0gfHw9IFtdO1xuXG4gIFB1YlN1Yi5zdWJzY3JpYmUoQ09MTEVDVElPTl9VUERBVEVEKGNvbGxlY3Rpb25UeXBlKSwgdXBkYXRlQ29sbGVjdGlvbkl0ZW1zKTtcbiAgZnVuY3Rpb24gdXBkYXRlQ29sbGVjdGlvbkl0ZW1zKF8sIGRhdGEpIHtcbiAgICBjb25zdCBuZXdDb2xsZWN0aW9uSXRlbXMgPSBkYXRhPy5bb2JqLnR5cGVdPy5bb2JqLmlkXTtcbiAgICBpZihuZXdDb2xsZWN0aW9uSXRlbXMpIHtcbiAgICAgIG9ialtjb2xsZWN0aW9uXSA9IG5ld0NvbGxlY3Rpb25JdGVtcy5tYXAoY29sbGVjdGlvbkl0ZW0gPT4gY29sbGVjdGlvbkl0ZW0uaWQpO1xuICAgICAgY29uc3Qgb2JqSW5kZXggPSBvYmoudHlwZSArICdJbmRleCc7XG4gICAgICBuZXdDb2xsZWN0aW9uSXRlbXMuc29ydCgoYSwgYikgPT4gK2Fbb2JqSW5kZXhdIC0gK2Jbb2JqSW5kZXhdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZvckVhY2goKGNvbGxlY3Rpb25JdGVtLCBpKSA9PiBjb2xsZWN0aW9uSXRlbVtvYmpJbmRleF0gPSBpICsgMSk7XG4gICAgfVxuICAgIFB1YlN1Yi5wdWJsaXNoKElURU1fVVBEQVRFRChvYmoudHlwZSwgb2JqLmlkKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb2xsZWN0aW9uSXRlbXMoZGF0YSwgdmFsaWRhdGVTZWxmID0gZmFsc2UpIHtcbiAgICBjb25zdCBjb2xsZWN0aW9uSXRlbXMgPSBcbiAgICAgIE9iamVjdC52YWx1ZXMoZGF0YVtjb2xsZWN0aW9uVHlwZSArICdzQ29sbGVjdGlvbkRhdGEnXSB8fCB7fSlcbiAgICAgICAgICAgIC5tYXAoaXRlbURhdGEgPT4gY29sbGVjdGlvblR5cGVGYWN0b3J5KE9iamVjdC5hc3NpZ24oaXRlbURhdGEsIHsgYmVsb25nczogeyBbb2JqLnR5cGVdOiBvYmouaWQgfSB9KSkpO1xuICAgIFxuICAgIGNvbnN0IGNvbGxlY3Rpb25JdGVtVmFsaWRhdGlvbnMgPSBjb2xsZWN0aW9uSXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHsgb2JqOiBpdGVtLCBhdHRyV3JhcHBlcjogYXR0ciA9PiBgJHtjb2xsZWN0aW9uVHlwZSArICdzQ29sbGVjdGlvbkRhdGEnfVske2l0ZW1bb2JqLnR5cGUgKyAnSW5kZXgnXX1dWyR7YXR0cn1dYCB9XG4gICAgfSlcbiAgICBcbiAgICBpZih2YWxpZGF0ZVNlbGYpIHtcbiAgICAgIGlmKCFvYmoudmFsaWQoKSkgcmV0dXJuO1xuICAgICAgb2JqLmFzc29jaWF0ZWRWYWxpZGF0aW9ucyA9IGNvbGxlY3Rpb25JdGVtVmFsaWRhdGlvbnM7XG4gICAgfVxuXG4gICAgb2JqLnZhbGlkYXRlQXNzb2NpYXRlZChjb2xsZWN0aW9uSXRlbVZhbGlkYXRpb25zKTtcbiAgICBpZihvYmouZXJyb3JzLmxlbmd0aCkgcmV0dXJuIFB1YlN1Yi5wdWJsaXNoKFZBTElEQVRJT05fRVJST1IsIHsgdHlwZTogb2JqLnR5cGUsIGVycm9yczogb2JqLmVycm9ycyB9KTtcbiAgICBcbiAgICBQdWJTdWIucHVibGlzaChDT0xMRUNUSU9OX0lURU1TX0NSRUFURUQoY29sbGVjdGlvblR5cGUpLCB7IGNvbGxlY3Rpb25JdGVtcyB9KTtcbiAgfVxuICBjcmVhdGVDb2xsZWN0aW9uSXRlbXMob2JqLCB0cnVlKTtcbiAgZGVsZXRlIG9ialtjb2xsZWN0aW9uVHlwZSArICdzQ29sbGVjdGlvbkRhdGEnXTtcblxuICBQdWJTdWIuc3Vic2NyaWJlKENSRUFURV9DT0xMRUNUSU9OX0lURU1TKG9iai50eXBlLCBvYmouaWQsIGNvbGxlY3Rpb25UeXBlKSwgY3JlYXRlQ29sbGVjdGlvbkl0ZW1zRnJvbURhdGEpO1xuICBmdW5jdGlvbiBjcmVhdGVDb2xsZWN0aW9uSXRlbXNGcm9tRGF0YShfLCBkYXRhKSB7XG4gICAgX3ByZXBhcmUoZGF0YSk7XG4gICAgY3JlYXRlQ29sbGVjdGlvbkl0ZW1zKGRhdGEpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCZWxvbmdhYmxlKG9iaiwgYmVsb25nVHlwZSkge1xuICBvYmouYmVsb25ncyB8fD0geyBbYmVsb25nVHlwZV06IDAgfTtcbiAgT2JqZWN0LmtleXMob2JqLmJlbG9uZ3MpLmZvckVhY2goa2V5ID0+IG9iai5iZWxvbmdzW2tleV0gPSArb2JqLmJlbG9uZ3Nba2V5XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCZWxvbmdVcGRhdGFibGUob2JqLCBiZWxvbmdUeXBlKSB7XG4gIFB1YlN1Yi5zdWJzY3JpYmUoVVBEQVRFX0JFTE9ORyhvYmoudHlwZSwgb2JqLmlkLCBiZWxvbmdUeXBlKSwgdXBkYXRlQmVsb25nKTtcbiAgZnVuY3Rpb24gdXBkYXRlQmVsb25nKF8sIGRhdGEpIHtcbiAgICBjb25zdCBvbGRCZWxvbmdJZCA9IG9iai5iZWxvbmdzW2JlbG9uZ1R5cGVdLCBcbiAgICAgICAgICBuZXdCZWxvbmdJZCA9ICtkYXRhLmJlbG9uZ0lkO1xuICAgIG9iai5iZWxvbmdzW2JlbG9uZ1R5cGVdID0gbmV3QmVsb25nSWQ7XG4gICAgUHViU3ViLnB1Ymxpc2goQkVMT05HX1VQREFURUQob2JqLnR5cGUpLCB7IGlkOiBvYmouaWQsIGJlbG9uZ1R5cGUsIG9sZEJlbG9uZ0lkLCBuZXdCZWxvbmdJZCB9KTtcbiAgICBQdWJTdWIucHVibGlzaChJVEVNX1VQREFURUQob2JqLnR5cGUsIG9iai5pZCkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMaXN0YWJsZShvYmosIGZyb21TdG9yYWdlTGlzdCA9IFtdKSB7XG4gIGxldCBuZXh0SWQgPSAxO1xuICBjb25zdCBsaXN0ID0gb2JqLml0ZW1UeXBlICsgJ3MnO1xuICBvYmpbbGlzdF0gfHw9IGZyb21TdG9yYWdlTGlzdC5tYXAoc3RvcmFnZUl0ZW0gPT4ge1xuICAgIF9wcmVwYXJlKHN0b3JhZ2VJdGVtKTtcbiAgICByZXR1cm4gb2JqLml0ZW1GYWN0b3J5KE9iamVjdC5hc3NpZ24oeyBpZDogbmV4dElkKysgfSwgc3RvcmFnZUl0ZW0pKTtcbiAgfSk7XG5cbiAgb2JqLndpdGhJZCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIHRoaXNbbGlzdF0uZmluZChpdGVtID0+ICtpZCA9PSBpdGVtLmlkKTtcbiAgfVxuXG4gIG9iai53aXRoSWRzID0gZnVuY3Rpb24oaWRzLCBvcHRpb25zID0ge30pIHtcbiAgICBpZHMgPSBpZHMubWFwKE51bWJlcik7XG4gICAgcmV0dXJuIHRoaXNbbGlzdF0uZmlsdGVyKGl0ZW0gPT4gXG4gICAgICBpZHMuaW5jbHVkZXMoaXRlbS5pZCkgJiYgXG4gICAgICAoT2JqZWN0LmVudHJpZXMob3B0aW9ucy5jb25kaXRpb25zIHx8IHt9KSkuZXZlcnkoKFtrZXksIHZhbF0pID0+IGl0ZW1ba2V5XSA9PSB2YWwpKTtcbiAgfVxuXG4gIG9iai50b1N0b3JhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpc1tsaXN0XS5tYXAoaXRlbSA9PiBpdGVtLnRvU3RvcmFnZSgpKTtcbiAgfVxuXG4gIFB1YlN1Yi5zdWJzY3JpYmUoQkVMT05HX1VQREFURUQob2JqLml0ZW1UeXBlKSwgcHVibGlzaENvbGxlY3Rpb25zVXBkYXRlKTtcbiAgZnVuY3Rpb24gcHVibGlzaENvbGxlY3Rpb25zVXBkYXRlKF8sIGRhdGEpIHtcbiAgICBjb25zdCBiZWxvbmdUeXBlID0gZGF0YS5iZWxvbmdUeXBlLCBvbGRCZWxvbmdJZCA9IGRhdGEub2xkQmVsb25nSWQsIG5ld0JlbG9uZ0lkID0gZGF0YS5uZXdCZWxvbmdJZDtcbiAgICBjb25zdCBpdGVtID0gb2JqW2xpc3RdLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09ICtkYXRhLmlkKTtcbiAgICBpdGVtLmJlbG9uZ3NbYmVsb25nVHlwZV0gPSBuZXdCZWxvbmdJZDtcbiAgICBQdWJTdWIucHVibGlzaChDT0xMRUNUSU9OX1VQREFURUQob2JqLml0ZW1UeXBlKSwgXG4gICAgICAgICAgICAgICAgICB7IFtiZWxvbmdUeXBlXTogeyBcbiAgICAgICAgICAgICAgICAgICAgICBbb2xkQmVsb25nSWRdOiBvYmpbbGlzdF0uZmlsdGVyKGl0ZW0gPT4gaXRlbS5iZWxvbmdzW2JlbG9uZ1R5cGVdID09IG9sZEJlbG9uZ0lkKSxcbiAgICAgICAgICAgICAgICAgICAgICBbbmV3QmVsb25nSWRdOiBvYmpbbGlzdF0uZmlsdGVyKGl0ZW0gPT4gaXRlbS5iZWxvbmdzW2JlbG9uZ1R5cGVdID09IG5ld0JlbG9uZ0lkKVxuICAgICAgICAgICAgICAgICAgfSB9KVxuICB9XG5cbiAgUHViU3ViLnN1YnNjcmliZShDUkVBVEUob2JqLml0ZW1UeXBlKSwgY3JlYXRlTGlzdEl0ZW0pO1xuICBmdW5jdGlvbiBjcmVhdGVMaXN0SXRlbShfLCBkYXRhKSB7XG4gICAgX3ByZXBhcmUoZGF0YSk7XG4gICAgY29uc3QgbmV3TGlzdEl0ZW0gPSBvYmouaXRlbUZhY3RvcnkoT2JqZWN0LmFzc2lnbih7IGlkOiBuZXh0SWQrKyB9LCBkYXRhKSk7XG4gICAgaWYoIW5ld0xpc3RJdGVtLnZhbGlkKCkpXG4gICAgICByZXR1cm4gUHViU3ViLnB1Ymxpc2goVkFMSURBVElPTl9FUlJPUiwgeyB0eXBlOiBvYmouaXRlbVR5cGUsIGVycm9yczogbmV3TGlzdEl0ZW0uZXJyb3JzIH0pO1xuXG4gICAgb2JqW2xpc3RdLnVuc2hpZnQobmV3TGlzdEl0ZW0pO1xuICAgIF9wdWJsaXNoQ29sbGVjdGlvblVwZGF0ZShbbmV3TGlzdEl0ZW1dKTtcbiAgICBQdWJTdWIucHVibGlzaChMSVNUX1VQREFURUQob2JqLml0ZW1UeXBlKSk7XG4gIH1cblxuICBQdWJTdWIuc3Vic2NyaWJlKENPTExFQ1RJT05fSVRFTVNfQ1JFQVRFRChvYmouaXRlbVR5cGUpLCBjcmVhdGVMaXN0SXRlbXNGcm9tQ29sbGVjdGlvbkl0ZW1zKVxuICBmdW5jdGlvbiBjcmVhdGVMaXN0SXRlbXNGcm9tQ29sbGVjdGlvbkl0ZW1zKF8sIGRhdGEpIHtcbiAgICBjb25zdCBuZXdMaXN0SXRlbXMgPSBkYXRhLmNvbGxlY3Rpb25JdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICBjb25zdCBsaXN0SXRlbSA9IG9iai5pdGVtRmFjdG9yeShPYmplY3QuYXNzaWduKHsgaWQ6IG5leHRJZCsrIH0sIChpdGVtLnRvU3RvcmFnZSA/IGl0ZW0udG9TdG9yYWdlKCkgOiBpdGVtKSkpO1xuICAgICAgb2JqW2xpc3RdLnVuc2hpZnQobGlzdEl0ZW0pO1xuICAgICAgcmV0dXJuIGxpc3RJdGVtO1xuICAgIH0pXG5cbiAgICBfcHVibGlzaENvbGxlY3Rpb25VcGRhdGUobmV3TGlzdEl0ZW1zKTtcbiAgICBQdWJTdWIucHVibGlzaChMSVNUX1VQREFURUQob2JqLml0ZW1UeXBlKSk7XG4gIH1cblxuICBQdWJTdWIuc3Vic2NyaWJlKERFU1RST1kob2JqLml0ZW1UeXBlKSwgZGVzdHJveUxpc3RJdGVtKTtcbiAgZnVuY3Rpb24gZGVzdHJveUxpc3RJdGVtKF8sIGRhdGEpIHtcbiAgICBpZigrZGF0YS5pZCA9PSAwKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgaXRlbSA9IG9ialtsaXN0XS5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PSArZGF0YS5pZCk7XG4gICAgb2JqW2xpc3RdLnNwbGljZShvYmpbbGlzdF0uaW5kZXhPZihpdGVtKSwgMSk7XG4gICAgX3B1Ymxpc2hDb2xsZWN0aW9uVXBkYXRlKFtpdGVtXSk7XG4gICAgUHViU3ViLnB1Ymxpc2goTElTVF9VUERBVEVEKG9iai5pdGVtVHlwZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3B1Ymxpc2hDb2xsZWN0aW9uVXBkYXRlKGl0ZW1zKSB7XG4gICAgY29uc3QgYmVsb25nRGF0YSA9IHt9O1xuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhpdGVtLmJlbG9uZ3MgfHwge30pLmZvckVhY2goKFtiZWxvbmdUeXBlLCBiZWxvbmdJZF0pID0+IHtcbiAgICAgICAgYmVsb25nRGF0YVtiZWxvbmdUeXBlXSB8fD0ge307XG4gICAgICAgIGJlbG9uZ0RhdGFbYmVsb25nVHlwZV1bYmVsb25nSWRdIHx8PSBvYmpbbGlzdF0uZmlsdGVyKGxpc3RJdGVtID0+IGxpc3RJdGVtLmJlbG9uZ3NbYmVsb25nVHlwZV0gPT0gYmVsb25nSWQpO1xuICAgICAgfSlcbiAgICB9KVxuICAgIFB1YlN1Yi5wdWJsaXNoKENPTExFQ1RJT05fVVBEQVRFRChvYmouaXRlbVR5cGUpLCBiZWxvbmdEYXRhKTtcbiAgfVxuICBfcHVibGlzaENvbGxlY3Rpb25VcGRhdGUob2JqW2xpc3RdKTtcbn1cblxuZnVuY3Rpb24gX3ByZXBhcmUoZGF0YSkge1xuICBfc2FuaXRpemUoZGF0YSk7XG4gIF9hc3NpZ25OZXN0ZWQoZGF0YSk7XG59XG5cbmZ1bmN0aW9uIF9zYW5pdGl6ZShkYXRhKSB7XG4gIGlmKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSBcbiAgICByZXR1cm4gc2FuaXRpemVIdG1sKGRhdGEsIHsgYWxsb3dlZFRhZ3M6IFtdLCBhbGxvd2VkQXR0cmlidXRlczoge30gfSk7XG4gIGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgcmV0dXJuIGRhdGEubWFwKGVsZW0gPT4gX3Nhbml0aXplKGVsZW0pKTtcbiAgaWYodHlwZW9mIGRhdGEgPT0gJ29iamVjdCcpIHtcbiAgICBmb3IoY29uc3Qga2V5IGluIGRhdGEpIGRhdGFba2V5XSA9IF9zYW5pdGl6ZShkYXRhW2tleV0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfYXNzaWduTmVzdGVkKGRhdGEpIHtcbiAgY29uc3QgcmVnID0gLyguKylcXFsoLispXFxdLztcbiAgbGV0IGtleXMsIHRhcmdldEtleXMgPSAoKSA9PiBPYmplY3Qua2V5cyhkYXRhKS5maWx0ZXIoa2V5ID0+IHJlZy50ZXN0KGtleSkpO1xuICB3aGlsZSAoKGtleXMgPSB0YXJnZXRLZXlzKCkpLmxlbmd0aCA+IDApIHtcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IFtvdXRlciwgaW5uZXJdID0ga2V5Lm1hdGNoKHJlZykuc2xpY2UoMSk7XG4gICAgICBkYXRhW291dGVyXSB8fD0ge307XG4gICAgICBkYXRhW291dGVyXVtpbm5lcl0gPSBkYXRhW2tleV07XG4gICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IFN0b3JhZ2VhYmxlLCBWYWxpZGF0YWJsZSwgUHJlc2VuY2VWYWxpZGF0YWJsZSwgVXBkYXRhYmxlLCBDb2xsZWN0aW9uYWJsZSwgTGlzdGFibGUgfSBmcm9tICcuL2NvbXBvc2l0aW9uLXVuaXRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3QoYXR0cmlidXRlcykge1xuICBjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgdHlwZTogJ3Byb2plY3QnIH0sIGF0dHJpYnV0ZXMpO1xuICBbU3RvcmFnZWFibGUsIFZhbGlkYXRhYmxlLCBVcGRhdGFibGVdLmZvckVhY2goY29tcEZuID0+IGNvbXBGbihvYmopKTtcbiAgUHJlc2VuY2VWYWxpZGF0YWJsZShvYmosIFsndGl0bGUnXSk7XG4gIENvbGxlY3Rpb25hYmxlKG9iaiwgJ3RvZG9JdGVtJyk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFByb2plY3RzTGlzdChmcm9tU3RvcmFnZUxpc3QpIHtcbiAgY29uc3Qgb2JqID0geyBpdGVtRmFjdG9yeTogUHJvamVjdCwgaXRlbVR5cGU6ICdwcm9qZWN0JyB9XG4gIExpc3RhYmxlKG9iaiwgZnJvbVN0b3JhZ2VMaXN0KTtcbiAgcmV0dXJuIG9iajtcbn1cbiIsImltcG9ydCB7IFN0b3JhZ2VhYmxlLCBWYWxpZGF0YWJsZSwgUHJlc2VuY2VWYWxpZGF0YWJsZSwgVXBkYXRhYmxlLCBTdGF0dXNhYmxlLCBCZWxvbmdhYmxlLCBMaXN0YWJsZSB9IGZyb20gJy4vY29tcG9zaXRpb24tdW5pdHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2hlY2tsaXN0SXRlbShhdHRyaWJ1dGVzKSB7XG4gIGNvbnN0IG9iaiA9IE9iamVjdC5hc3NpZ24oeyB0eXBlOiAnY2hlY2tsaXN0SXRlbScgfSwgYXR0cmlidXRlcyk7XG4gIFtTdG9yYWdlYWJsZSwgVmFsaWRhdGFibGUsIFVwZGF0YWJsZSwgU3RhdHVzYWJsZV0uZm9yRWFjaChjb21wRm4gPT4gY29tcEZuKG9iaikpO1xuICBQcmVzZW5jZVZhbGlkYXRhYmxlKG9iaiwgWyd0aXRsZSddKTtcbiAgQmVsb25nYWJsZShvYmosICd0b2RvSXRlbScpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDaGVja2xpc3RJdGVtc0xpc3QoZnJvbVN0b3JhZ2VMaXN0KSB7XG4gIGNvbnN0IG9iaiA9IHsgaXRlbUZhY3Rvcnk6IENoZWNrbGlzdEl0ZW0sIGl0ZW1UeXBlOiAnY2hlY2tsaXN0SXRlbScgfTtcbiAgTGlzdGFibGUob2JqLCBmcm9tU3RvcmFnZUxpc3QpO1xuICByZXR1cm4gb2JqO1xufVxuIiwiaW1wb3J0IHsgU3RvcmFnZWFibGUsIFZhbGlkYXRhYmxlLCBQcmVzZW5jZVZhbGlkYXRhYmxlLCBVcGRhdGFibGUsIFN0YXR1c2FibGUsIFByaW9yaXRpemFibGUsIFxuICAgICAgICAgQ29sbGVjdGlvbmFibGUsIEJlbG9uZ2FibGUsIExpc3RhYmxlLCBCZWxvbmdVcGRhdGFibGUgfSBmcm9tICcuL2NvbXBvc2l0aW9uLXVuaXRzJztcbmltcG9ydCB7IENoZWNrbGlzdEl0ZW0gfSBmcm9tICcuL2NoZWNrbGlzdC1pdGVtcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBUb2RvSXRlbShhdHRyaWJ1dGVzKSB7XG4gIGNvbnN0IG9iaiA9IE9iamVjdC5hc3NpZ24oeyB0eXBlOiAndG9kb0l0ZW0nIH0sIGF0dHJpYnV0ZXMpO1xuICBbU3RvcmFnZWFibGUsIFZhbGlkYXRhYmxlLCBVcGRhdGFibGUsIFN0YXR1c2FibGUsIFByaW9yaXRpemFibGVdLmZvckVhY2goY29tcEZuID0+IGNvbXBGbihvYmopKTtcbiAgW0JlbG9uZ2FibGUsIEJlbG9uZ1VwZGF0YWJsZV0uZm9yRWFjaChjb21wRm4gPT4gY29tcEZuKG9iaiwgJ3Byb2plY3QnKSk7XG4gIFByZXNlbmNlVmFsaWRhdGFibGUob2JqLCBbJ3RpdGxlJ10pO1xuICBDb2xsZWN0aW9uYWJsZShvYmosICdjaGVja2xpc3RJdGVtJywgQ2hlY2tsaXN0SXRlbSk7XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRvZG9JdGVtc0xpc3QoZnJvbVN0b3JhZ2VMaXN0KSB7XG4gIGNvbnN0IG9iaiA9IHsgaXRlbUZhY3Rvcnk6IFRvZG9JdGVtLCBpdGVtVHlwZTogJ3RvZG9JdGVtJyB9O1xuICBMaXN0YWJsZShvYmosIGZyb21TdG9yYWdlTGlzdCk7XG4gIHJldHVybiBvYmo7XG59XG4iLCJpbXBvcnQgJy4uL3N0eWxlcy9hbGwuY3NzJztcbmltcG9ydCAnLi4vc3R5bGVzL2Zvcm0uY3NzJztcbmltcG9ydCAnLi4vc3R5bGVzL2luZGV4LXByb2plY3RzLmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9uZXctcHJvamVjdC5jc3MnO1xuaW1wb3J0ICcuLi9zdHlsZXMvbmV3LXRvZG9JdGVtLmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9uZXctY2hlY2tsaXN0SXRlbS5jc3MnO1xuaW1wb3J0ICcuLi9zdHlsZXMvc2hvdy1wcm9qZWN0LmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9zaG93LXRvZG9JdGVtLmNzcyc7XG5pbXBvcnQgJy4uL3N0eWxlcy9lZGl0LmNzcyc7XG5cbmltcG9ydCAnLi9zdG9yYWdlJztcbmltcG9ydCAnLi92aWV3cy92aWV3cyc7XG5pbXBvcnQgJy4vZG9tLWV2ZW50cyc7XG5pbXBvcnQgJy4vcHJvamVjdHMnO1xuaW1wb3J0ICcuL3RvZG8taXRlbXMnO1xuaW1wb3J0ICcuL2NoZWNrbGlzdC1pdGVtcyc7XG5cbmltcG9ydCBQdWJTdWIgZnJvbSAncHVic3ViLWpzJztcbmltcG9ydCB7IElOSVRJQUxJWkUsIERBVEFfSU5JVElBTElaRUQsIERBVEFfVVBEQVRFRCB9IGZyb20gJy4vcHVic3ViLWV2ZW50LXR5cGVzJztcblxuaW1wb3J0IHsgUHJvamVjdHNMaXN0IH0gZnJvbSAnLi9wcm9qZWN0cyc7XG5pbXBvcnQgeyBUb2RvSXRlbXNMaXN0IH0gZnJvbSAnLi90b2RvLWl0ZW1zJztcbmltcG9ydCB7IENoZWNrbGlzdEl0ZW1zTGlzdCB9IGZyb20gJy4vY2hlY2tsaXN0LWl0ZW1zJztcbmNvbnN0IGFwcGxpY2F0aW9uRGF0YUxpc3RzID0geyBQcm9qZWN0c0xpc3QsIFRvZG9JdGVtc0xpc3QsIENoZWNrbGlzdEl0ZW1zTGlzdCB9O1xuXG5leHBvcnQgbGV0IGFwcGxpY2F0aW9uRGF0YSA9IHt9O1xuZXhwb3J0ICogYXMgYXBwbGljYXRpb25TZXR0aW5ncyBmcm9tICcuL3NldHRpbmdzJztcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgUHViU3ViLnB1Ymxpc2goSU5JVElBTElaRSk7XG59XG5cblB1YlN1Yi5zdWJzY3JpYmUoREFUQV9JTklUSUFMSVpFRCwgcG9wdWxhdGVEYXRhKTtcbmZ1bmN0aW9uIHBvcHVsYXRlRGF0YShfLCBkYXRhKSB7XG4gIGZvcihjb25zdCBrZXkgaW4gZGF0YSlcbiAgICBhcHBsaWNhdGlvbkRhdGFba2V5XSA9IGFwcGxpY2F0aW9uRGF0YUxpc3RzW2tleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpXShkYXRhW2tleV0pO1xuICBQdWJTdWIucHVibGlzaChEQVRBX1VQREFURUQpO1xufVxuXG5pbml0aWFsaXplKCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiaXNNZXJnZWFibGVPYmplY3QiLCJ2YWx1ZSIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJTeW1ib2wiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsIm9wdGlvbnMiLCJjbG9uZSIsImRlZXBtZXJnZSIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImRlZmF1bHRBcnJheU1lcmdlIiwidGFyZ2V0IiwiZWxlbWVudCIsImdldEtleXMiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwic3ltYm9sIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzIiwicHJvcGVydHlJc09uT2JqZWN0Iiwib2JqZWN0IiwicHJvcGVydHkiLCJfIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJkZXN0aW5hdGlvbiIsImZvckVhY2giLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BlcnR5SXNVbnNhZmUiLCJjdXN0b21NZXJnZSIsImdldE1lcmdlRnVuY3Rpb24iLCJtZXJnZU9iamVjdCIsImFsbCIsImFycmF5IiwiRXJyb3IiLCJyZWR1Y2UiLCJwcmV2IiwibmV4dCIsImRlZXBtZXJnZV8xIiwiZGVmaW5lUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lcyIsImVsZW1lbnROYW1lcyIsIk1hcCIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJuIiwiYXJndW1lbnRzIiwicCIsImFwcGx5IiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrMiIsImVudW1lcmFibGUiLCJnZXQiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwiX19pbXBvcnRTdGFyIiwibW9kIiwiX19lc01vZHVsZSIsInJlc3VsdCIsIkVsZW1lbnRUeXBlIiwiZW50aXRpZXNfMSIsImZvcmVpZ25OYW1lc18xIiwidW5lbmNvZGVkRWxlbWVudHMiLCJTZXQiLCJzaW5nbGVUYWciLCJyZW5kZXIiLCJub2RlIiwibm9kZXMiLCJvdXRwdXQiLCJyZW5kZXJOb2RlIiwidHlwZSIsIlJvb3QiLCJjaGlsZHJlbiIsIkRpcmVjdGl2ZSIsIkRvY3R5cGUiLCJDb21tZW50IiwiQ0RBVEEiLCJlbGVtIiwicmVuZGVyQ2RhdGEiLCJTY3JpcHQiLCJTdHlsZSIsIlRhZyIsIm9wdHMiLCJfYSIsInhtbE1vZGUiLCJuYW1lIiwicGFyZW50IiwiZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cyIsImhhcyIsImZvcmVpZ25FbGVtZW50cyIsInRhZyIsImF0dHJpYnMiLCJhdHRyaWJ1dGVzIiwiX2IiLCJlbXB0eUF0dHJzIiwiZGVjb2RlRW50aXRpZXMiLCJlbmNvZGVYTUwiLCJyZXBsYWNlIiwiZm9ybWF0QXR0cmlidXRlcyIsInNlbGZDbG9zaW5nVGFncyIsInJlbmRlclRhZyIsIlRleHQiLCJyZW5kZXJUZXh0IiwiX19pbXBvcnREZWZhdWx0IiwiZGVjb2RlSFRNTCIsImRlY29kZUhUTUxTdHJpY3QiLCJkZWNvZGVYTUwiLCJlbnRpdGllc19qc29uXzEiLCJsZWdhY3lfanNvbl8xIiwieG1sX2pzb25fMSIsImRlY29kZV9jb2RlcG9pbnRfMSIsInN0cmljdEVudGl0eVJlIiwiZ2V0U3RyaWN0RGVjb2RlciIsImdldFJlcGxhY2VyIiwic3RyIiwiU3RyaW5nIiwiZGVmYXVsdCIsInNvcnRlciIsImEiLCJiIiwiY2hhckF0Iiwic2Vjb25kQ2hhciIsInBhcnNlSW50Iiwic3Vic3RyIiwic2xpY2UiLCJsZWdhY3kiLCJzb3J0IiwiaiIsInJlIiwiUmVnRXhwIiwicmVwbGFjZXIiLCJkZWNvZGVfanNvbl8xIiwiZnJvbUNvZGVQb2ludCIsImNvZGVQb2ludCIsImZyb21DaGFyQ29kZSIsImVzY2FwZVVURjgiLCJlc2NhcGUiLCJlbmNvZGVOb25Bc2NpaUhUTUwiLCJlbmNvZGVIVE1MIiwiaW52ZXJzZVhNTCIsImdldEludmVyc2VPYmoiLCJ4bWxSZXBsYWNlciIsImdldEludmVyc2VSZXBsYWNlciIsImdldEFTQ0lJRW5jb2RlciIsImludmVyc2UiLCJpbnZlcnNlSFRNTCIsImh0bWxSZXBsYWNlciIsIm9iaiIsInNpbmdsZSIsIm11bHRpcGxlIiwiX2kiLCJzdGFydCIsImVuZCIsImNoYXJDb2RlQXQiLCJjb3VudCIsInNwbGljZSIsInVuc2hpZnQiLCJyZU5vbkFTQ0lJIiwic2luZ2xlQ2hhclJlcGxhY2VyIiwiZ2V0Q29kZVBvaW50IiwiY29kZVBvaW50QXQiLCJjIiwidG9VcHBlckNhc2UiLCJyZUVzY2FwZUNoYXJzIiwiZGVjb2RlWE1MU3RyaWN0IiwiZGVjb2RlSFRNTDVTdHJpY3QiLCJkZWNvZGVIVE1MNFN0cmljdCIsImRlY29kZUhUTUw1IiwiZGVjb2RlSFRNTDQiLCJlbmNvZGVIVE1MNSIsImVuY29kZUhUTUw0IiwiZW5jb2RlIiwiZGVjb2RlU3RyaWN0IiwiZGVjb2RlIiwiZGVjb2RlXzEiLCJlbmNvZGVfMSIsImxldmVsIiwiZW5jb2RlXzIiLCJkZWNvZGVfMiIsImlzVGFnIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiX19leHBvcnRTdGFyIiwiRG9tSGFuZGxlciIsImRvbWVsZW1lbnR0eXBlXzEiLCJub2RlXzEiLCJyZVdoaXRlc3BhY2UiLCJkZWZhdWx0T3B0cyIsIm5vcm1hbGl6ZVdoaXRlc3BhY2UiLCJ3aXRoU3RhcnRJbmRpY2VzIiwid2l0aEVuZEluZGljZXMiLCJjYWxsYmFjayIsImVsZW1lbnRDQiIsImRvbSIsInJvb3QiLCJEb2N1bWVudCIsImRvbmUiLCJ0YWdTdGFjayIsImxhc3ROb2RlIiwicGFyc2VyIiwib25wYXJzZXJpbml0Iiwib25yZXNldCIsIm9uZW5kIiwiaGFuZGxlQ2FsbGJhY2siLCJvbmVycm9yIiwiZXJyb3IiLCJvbmNsb3NldGFnIiwicG9wIiwiZW5kSW5kZXgiLCJvbm9wZW50YWciLCJFbGVtZW50IiwiYWRkTm9kZSIsIm9udGV4dCIsIm9uY29tbWVudCIsIm9uY29tbWVudGVuZCIsIm9uY2RhdGFzdGFydCIsInRleHQiLCJOb2RlV2l0aENoaWxkcmVuIiwib25jZGF0YWVuZCIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwicHJldmlvdXNTaWJsaW5nIiwic3RhcnRJbmRleCIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJkIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJUeXBlRXJyb3IiLCJfXyIsImNvbnN0cnVjdG9yIiwiY2xvbmVOb2RlIiwiaGFzQ2hpbGRyZW4iLCJpc0RvY3VtZW50IiwiaXNEaXJlY3RpdmUiLCJpc0NvbW1lbnQiLCJpc1RleHQiLCJpc0NEQVRBIiwiRGF0YU5vZGUiLCJOb2RlIiwibm9kZVR5cGVzIiwic2V0IiwicmVjdXJzaXZlIiwiX3N1cGVyIiwiX3RoaXMiLCJuYW1lc3BhY2UiLCJwcmVmaXgiLCJjbG9uZUNoaWxkcmVuIiwiY2xvbmVfMSIsImNoaWxkIiwiY2xvbmVfMiIsImNsb25lXzMiLCJpbnN0cnVjdGlvbiIsInNvdXJjZUNvZGVMb2NhdGlvbiIsImNoaWxkcyIsImdldEZlZWQiLCJzdHJpbmdpZnlfMSIsImxlZ2FjeV8xIiwiZG9jIiwiZmVlZFJvb3QiLCJnZXRPbmVFbGVtZW50IiwiaXNWYWxpZEZlZWQiLCJmZWVkIiwiaXRlbXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImVudHJ5IiwiZ2V0TWVkaWFFbGVtZW50cyIsImFkZENvbmRpdGlvbmFsbHkiLCJocmVmIiwibGluayIsImRlc2NyaXB0aW9uIiwiZmV0Y2giLCJwdWJEYXRlIiwiRGF0ZSIsInVwZGF0ZWQiLCJnZXRBdG9tRmVlZCIsImdldFJzc0ZlZWQiLCJNRURJQV9LRVlTX1NUUklORyIsIk1FRElBX0tFWVNfSU5UIiwid2hlcmUiLCJtZWRpdW0iLCJpc0RlZmF1bHQiLCJNRURJQV9LRVlTX1NUUklOR18xIiwiYXR0cmliIiwiTUVESUFfS0VZU19JTlRfMSIsImV4cHJlc3Npb24iLCJ0YWdOYW1lIiwicmVjdXJzZSIsInRleHRDb250ZW50IiwidHJpbSIsInByb3AiLCJ1bmlxdWVTb3J0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJyZW1vdmVTdWJzZXRzIiwiZG9taGFuZGxlcl8xIiwibm9kZUEiLCJub2RlQiIsImFQYXJlbnRzIiwiYlBhcmVudHMiLCJjdXJyZW50IiwibWF4SWR4IiwiTWF0aCIsIm1pbiIsImlkeCIsInNoYXJlZFBhcmVudCIsInNpYmxpbmdzIiwiYVNpYmxpbmciLCJiU2libGluZyIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFuY2VzdG9yIiwiaW5jbHVkZXMiLCJhcnIiLCJyZWxhdGl2ZSIsImdldEVsZW1lbnRzQnlUYWdUeXBlIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50cyIsInRlc3RFbGVtZW50IiwicXVlcnlpbmdfMSIsIkNoZWNrcyIsInRhZ19uYW1lIiwidGFnX3R5cGUiLCJ0YWdfY29udGFpbnMiLCJnZXRBdHRyaWJDaGVjayIsImNvbWJpbmVGdW5jcyIsImNvbXBpbGVUZXN0IiwiZnVuY3MiLCJ0ZXN0IiwibGltaXQiLCJJbmZpbml0eSIsImZpbmRPbmUiLCJyZW1vdmVFbGVtZW50IiwicHJlcGVuZCIsInByZXBlbmRDaGlsZCIsImFwcGVuZCIsImFwcGVuZENoaWxkIiwicmVwbGFjZUVsZW1lbnQiLCJyZXBsYWNlbWVudCIsInNpYmxpbmciLCJjdXJyTmV4dCIsImZpbmRBbGwiLCJleGlzdHNPbmUiLCJmaW5kT25lQ2hpbGQiLCJmaW5kIiwibm9kZXNfMSIsImNoZWNrZWQiLCJzb21lIiwic3RhY2siLCJzaGlmdCIsImlubmVyVGV4dCIsImdldFRleHQiLCJnZXRJbm5lckhUTUwiLCJnZXRPdXRlckhUTUwiLCJkb21fc2VyaWFsaXplcl8xIiwicHJldkVsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0TmFtZSIsImhhc0F0dHJpYiIsImdldEF0dHJpYnV0ZVZhbHVlIiwiZ2V0U2libGluZ3MiLCJnZXRQYXJlbnQiLCJnZXRDaGlsZHJlbiIsImVtcHR5QXJyYXkiLCJzdHJpbmciLCJwYXJzZUZlZWQiLCJGZWVkSGFuZGxlciIsIkZlZWRJdGVtTWVkaWFNZWRpdW0iLCJGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbiIsIkRvbVV0aWxzIiwiUGFyc2VyXzEiLCJnZXRBdHRyaWJ1dGUiLCJ1cmwiLCJmaWxlU2l6ZSIsImJpdHJhdGUiLCJmcmFtZXJhdGUiLCJzYW1wbGluZ3JhdGUiLCJjaGFubmVscyIsImR1cmF0aW9uIiwiaGVpZ2h0Iiwid2lkdGgiLCJsYW5nIiwid2hhdCIsInRtcCIsImhhbmRsZXIiLCJQYXJzZXIiLCJUb2tlbml6ZXJfMSIsImZvcm1UYWdzIiwicFRhZyIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJ0ciIsInRoIiwidGQiLCJib2R5IiwibGkiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzZWxlY3QiLCJpbnB1dCIsImJ1dHRvbiIsImRhdGFsaXN0IiwidGV4dGFyZWEiLCJvcHRpb24iLCJvcHRncm91cCIsImRkIiwiZHQiLCJhZGRyZXNzIiwiYXJ0aWNsZSIsImFzaWRlIiwiYmxvY2txdW90ZSIsImRldGFpbHMiLCJkaXYiLCJkbCIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImZvcm0iLCJoZWFkZXIiLCJociIsIm1haW4iLCJuYXYiLCJvbCIsInByZSIsInNlY3Rpb24iLCJ0YWJsZSIsInVsIiwicnQiLCJycCIsInRib2R5IiwidGZvb3QiLCJ2b2lkRWxlbWVudHMiLCJmb3JlaWduQ29udGV4dEVsZW1lbnRzIiwiaHRtbEludGVncmF0aW9uRWxlbWVudHMiLCJyZU5hbWVFbmQiLCJjYnMiLCJfYyIsIl9kIiwiX2UiLCJ0YWduYW1lIiwiYXR0cmlibmFtZSIsImF0dHJpYnZhbHVlIiwiZm9yZWlnbkNvbnRleHQiLCJsb3dlckNhc2VUYWdOYW1lcyIsImxvd2VyQ2FzZVRhZ3MiLCJsb3dlckNhc2VBdHRyaWJ1dGVOYW1lcyIsInRva2VuaXplciIsIlRva2VuaXplciIsInVwZGF0ZVBvc2l0aW9uIiwiaW5pdGlhbE9mZnNldCIsInNlY3Rpb25TdGFydCIsImdldEFic29sdXRlSW5kZXgiLCJvbm9wZW50YWduYW1lIiwidG9Mb3dlckNhc2UiLCJlbCIsIm9ub3BlbnRhZ2VuZCIsImNsb3NlQ3VycmVudFRhZyIsInBvcyIsIm9uc2VsZmNsb3Npbmd0YWciLCJyZWNvZ25pemVTZWxmQ2xvc2luZyIsIm9uYXR0cmlibmFtZSIsIm9uYXR0cmliZGF0YSIsIm9uYXR0cmliZW5kIiwicXVvdGUiLCJvbmF0dHJpYnV0ZSIsImdldEluc3RydWN0aW9uTmFtZSIsInNlYXJjaCIsIm9uZGVjbGFyYXRpb24iLCJuYW1lXzEiLCJuYW1lXzIiLCJvbmNkYXRhIiwiX2YiLCJyZWNvZ25pemVDREFUQSIsImVyciIsInJlc2V0IiwicGFyc2VDb21wbGV0ZSIsIndyaXRlIiwiY2h1bmsiLCJwYXVzZSIsInJlc3VtZSIsInBhcnNlQ2h1bmsiLCJ3aGl0ZXNwYWNlIiwiaXNBU0NJSUFscGhhIiwiaWZFbHNlU3RhdGUiLCJ1cHBlciIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwibG93ZXIiLCJfc3RhdGUiLCJfaW5kZXgiLCJjb25zdW1lU3BlY2lhbE5hbWVDaGFyIiwiTkVYVF9TVEFURSIsInN0YXRlQmVmb3JlQ2RhdGExIiwic3RhdGVCZWZvcmVDZGF0YTIiLCJzdGF0ZUJlZm9yZUNkYXRhMyIsInN0YXRlQmVmb3JlQ2RhdGE0Iiwic3RhdGVCZWZvcmVDZGF0YTUiLCJzdGF0ZUJlZm9yZVNjcmlwdDEiLCJzdGF0ZUJlZm9yZVNjcmlwdDIiLCJzdGF0ZUJlZm9yZVNjcmlwdDMiLCJzdGF0ZUJlZm9yZVNjcmlwdDQiLCJzdGF0ZUFmdGVyU2NyaXB0MSIsInN0YXRlQWZ0ZXJTY3JpcHQyIiwic3RhdGVBZnRlclNjcmlwdDMiLCJzdGF0ZUFmdGVyU2NyaXB0NCIsInN0YXRlQmVmb3JlU3R5bGUxIiwic3RhdGVCZWZvcmVTdHlsZTIiLCJzdGF0ZUJlZm9yZVN0eWxlMyIsInN0YXRlQWZ0ZXJTdHlsZTEiLCJzdGF0ZUFmdGVyU3R5bGUyIiwic3RhdGVBZnRlclN0eWxlMyIsInN0YXRlQmVmb3JlU3BlY2lhbFQiLCJzdGF0ZUJlZm9yZVRpdGxlMSIsInN0YXRlQmVmb3JlVGl0bGUyIiwic3RhdGVCZWZvcmVUaXRsZTMiLCJzdGF0ZUFmdGVyU3BlY2lhbFRFbmQiLCJzdGF0ZUFmdGVyVGl0bGUxIiwic3RhdGVBZnRlclRpdGxlMiIsInN0YXRlQWZ0ZXJUaXRsZTMiLCJzdGF0ZUJlZm9yZUVudGl0eSIsInN0YXRlQmVmb3JlTnVtZXJpY0VudGl0eSIsImJ1ZmZlciIsImJ1ZmZlck9mZnNldCIsImJhc2VTdGF0ZSIsInNwZWNpYWwiLCJydW5uaW5nIiwiZW5kZWQiLCJwYXJzZSIsImZpbmlzaCIsInN0YXRlVGV4dCIsImdldFNlY3Rpb24iLCJpc1RhZ1N0YXJ0Q2hhciIsInN0YXRlQmVmb3JlVGFnTmFtZSIsInN0YXRlSW5UYWdOYW1lIiwiZW1pdFRva2VuIiwic3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZSIsInN0YXRlSW5DbG9zaW5nVGFnTmFtZSIsInN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZSIsInN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZSIsInN0YXRlSW5TZWxmQ2xvc2luZ1RhZyIsInN0YXRlSW5BdHRyaWJ1dGVOYW1lIiwic3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUiLCJzdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlIiwiaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZSIsInN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyIsInN0YXRlSW5BdHRyaWJ1dGVWYWx1ZVNpbmdsZVF1b3RlcyIsInN0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzIiwic3RhdGVCZWZvcmVEZWNsYXJhdGlvbiIsInN0YXRlSW5EZWNsYXJhdGlvbiIsInN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJzdGF0ZUJlZm9yZUNvbW1lbnQiLCJzdGF0ZUluQ29tbWVudCIsInN0YXRlSW5TcGVjaWFsQ29tbWVudCIsInN1YnN0cmluZyIsInN0YXRlQWZ0ZXJDb21tZW50MSIsInN0YXRlQWZ0ZXJDb21tZW50MiIsInN0YXRlQmVmb3JlQ2RhdGE2Iiwic3RhdGVJbkNkYXRhIiwic3RhdGVBZnRlckNkYXRhMSIsInN0YXRlQWZ0ZXJDZGF0YTIiLCJzdGF0ZUJlZm9yZVNwZWNpYWxTIiwic3RhdGVCZWZvcmVTcGVjaWFsU0VuZCIsInN0YXRlQmVmb3JlU3BlY2lhbExhc3QiLCJzdGF0ZUFmdGVyU3BlY2lhbExhc3QiLCJzZWN0aW9uU3RhcnRPZmZzZXQiLCJwYXJzZUZpeGVkRW50aXR5IiwiZW50aXR5IiwiZW1pdFBhcnRpYWwiLCJwYXJzZUxlZ2FjeUVudGl0eSIsInN0YXRlSW5OYW1lZEVudGl0eSIsImRlY29kZU51bWVyaWNFbnRpdHkiLCJvZmZzZXQiLCJiYXNlIiwic3RyaWN0IiwicGFyc2VkIiwic3RhdGVJbk51bWVyaWNFbnRpdHkiLCJzdGF0ZUluSGV4RW50aXR5IiwiY2xlYW51cCIsImhhbmRsZVRyYWlsaW5nRGF0YSIsIlJzc0hhbmRsZXIiLCJEZWZhdWx0SGFuZGxlciIsImNyZWF0ZURvbVN0cmVhbSIsInBhcnNlRE9NIiwicGFyc2VEb2N1bWVudCIsImNiIiwiZWxlbWVudENiIiwiRmVlZEhhbmRsZXJfMSIsImlzU3BhY2UiLCJjb2xsZWN0Q2hhcmFjdGVycyIsInJlZ0V4IiwiY2hhcnMiLCJtYXRjaCIsImV4ZWMiLCJkZXNjcmlwdG9ycyIsImN1cnJlbnREZXNjcmlwdG9yIiwic3RhdGUiLCJpbnB1dExlbmd0aCIsInJlZ2V4TGVhZGluZ1NwYWNlcyIsInJlZ2V4TGVhZGluZ0NvbW1hc09yU3BhY2VzIiwicmVnZXhMZWFkaW5nTm90U3BhY2VzIiwicmVnZXhUcmFpbGluZ0NvbW1hcyIsInJlZ2V4Tm9uTmVnYXRpdmVJbnRlZ2VyIiwicmVnZXhGbG9hdGluZ1BvaW50IiwiY2FuZGlkYXRlcyIsInBhcnNlRGVzY3JpcHRvcnMiLCJ0b2tlbml6ZSIsInciLCJoIiwibGFzdENoYXIiLCJpbnRWYWwiLCJmbG9hdFZhbCIsInBFcnJvciIsImNhbmRpZGF0ZSIsInBhcnNlRmxvYXQiLCJjb25zb2xlIiwibG9nIiwieCIsImlzQ29sb3JTdXBwb3J0ZWQiLCJib2xkIiwiZGltIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlkZGVuIiwic3RyaWtldGhyb3VnaCIsImJsYWNrIiwicmVkIiwiZ3JlZW4iLCJ5ZWxsb3ciLCJibHVlIiwibWFnZW50YSIsImN5YW4iLCJ3aGl0ZSIsImdyYXkiLCJiZ0JsYWNrIiwiYmdSZWQiLCJiZ0dyZWVuIiwiYmdZZWxsb3ciLCJiZ0JsdWUiLCJiZ01hZ2VudGEiLCJiZ0N5YW4iLCJiZ1doaXRlIiwiY3JlYXRlQ29sb3JzIiwiQ29udGFpbmVyIiwiQXRSdWxlIiwiZGVmYXVsdHMiLCJzdXBlciIsInByb3h5T2YiLCJyZWdpc3RlckF0UnVsZSIsIlJ1bGUiLCJpc0NsZWFuIiwibXkiLCJEZWNsYXJhdGlvbiIsImNsZWFuU291cmNlIiwibWFya0RpcnR5VXAiLCJlYWNoIiwiaW5kZXgiLCJpdGVyYXRvciIsImdldEl0ZXJhdG9yIiwiaW5kZXhlcyIsIndhbGsiLCJlIiwiYWRkVG9FcnJvciIsIndhbGtEZWNscyIsIndhbGtSdWxlcyIsInNlbGVjdG9yIiwid2Fsa0F0UnVsZXMiLCJ3YWxrQ29tbWVudHMiLCJub3JtYWxpemUiLCJsYXN0IiwibWFya0RpcnR5IiwicmV2ZXJzZSIsImZpcnN0IiwiY2xlYW5SYXdzIiwia2VlcEJldHdlZW4iLCJpbnNlcnRCZWZvcmUiLCJleGlzdCIsImFkZCIsImV4aXN0SW5kZXgiLCJpbnNlcnRBZnRlciIsInJlbW92ZUNoaWxkIiwicmVtb3ZlQWxsIiwicmVwbGFjZVZhbHVlcyIsInBhdHRlcm4iLCJkZWNsIiwicHJvcHMiLCJmYXN0IiwiZXZlcnkiLCJjb25kaXRpb24iLCJzYW1wbGUiLCJyZWJ1aWxkIiwicmF3cyIsImJlZm9yZSIsImdldFByb3h5UHJvY2Vzc29yIiwic3RhcnRzV2l0aCIsImFyZ3MiLCJ0b1Byb3h5Iiwib3RoZXIiLCJsYXN0RWFjaCIsInJlZ2lzdGVyUGFyc2UiLCJkZXBlbmRhbnQiLCJyZWdpc3RlclJ1bGUiLCJyZWdpc3RlclJvb3QiLCJwaWNvIiwidGVybWluYWxIaWdobGlnaHQiLCJDc3NTeW50YXhFcnJvciIsIm1lc3NhZ2UiLCJsaW5lIiwiY29sdW1uIiwiZmlsZSIsInBsdWdpbiIsInJlYXNvbiIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJzZXRNZXNzYWdlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzaG93U291cmNlQ29kZSIsImNvbG9yIiwiY3NzIiwibWFyayIsImxpbmVzIiwic3BsaXQiLCJtYXgiLCJtYXhXaWR0aCIsIm51bWJlciIsImd1dHRlciIsInNwYWNpbmciLCJjb2RlIiwidmFyaWFibGUiLCJMYXp5UmVzdWx0IiwiUHJvY2Vzc29yIiwidG9SZXN1bHQiLCJyZWdpc3RlckxhenlSZXN1bHQiLCJyZWdpc3RlclByb2Nlc3NvciIsIlByZXZpb3VzTWFwIiwiSW5wdXQiLCJmcm9tSlNPTiIsImpzb24iLCJpbnB1dHMiLCJvd25JbnB1dHMiLCJpbnB1dEh5ZHJhdGVkIiwiaW5wdXRJZCIsIlNvdXJjZU1hcENvbnN1bWVyIiwiU291cmNlTWFwR2VuZXJhdG9yIiwiZmlsZVVSTFRvUGF0aCIsInBhdGhUb0ZpbGVVUkwiLCJyZXNvbHZlIiwiaXNBYnNvbHV0ZSIsIm5hbm9pZCIsImZyb21PZmZzZXRDYWNoZSIsInNvdXJjZU1hcEF2YWlsYWJsZSIsIkJvb2xlYW4iLCJwYXRoQXZhaWxhYmxlIiwiaGFzQk9NIiwiZnJvbSIsImNvbnN1bWVyIiwibWFwUmVzb2x2ZSIsImZyb21PZmZzZXQiLCJsYXN0TGluZSIsImxpbmVUb0luZGV4IiwicHJldkluZGV4IiwibCIsIm1pZCIsImNvbCIsIm9yaWdpbiIsInRvIiwiZnJvbVVybCIsIm9yaWdpbmFsUG9zaXRpb25Gb3IiLCJVUkwiLCJtYXBGaWxlIiwicHJvdG9jb2wiLCJzb3VyY2VDb250ZW50Rm9yIiwidG9KU09OIiwiY29uc3VtZXJDYWNoZSIsInJlZ2lzdGVySW5wdXQiLCJNYXBHZW5lcmF0b3IiLCJSZXN1bHQiLCJUWVBFX1RPX0NMQVNTX05BTUUiLCJkb2N1bWVudCIsImF0cnVsZSIsInJ1bGUiLCJjb21tZW50IiwiUExVR0lOX1BST1BTIiwicG9zdGNzc1BsdWdpbiIsInByZXBhcmUiLCJPbmNlIiwiRGVjbGFyYXRpb25FeGl0IiwiUnVsZUV4aXQiLCJBdFJ1bGVFeGl0IiwiQ29tbWVudEV4aXQiLCJSb290RXhpdCIsIkRvY3VtZW50RXhpdCIsIk9uY2VFeGl0IiwiTk9UX1ZJU0lUT1JTIiwiaXNQcm9taXNlIiwidGhlbiIsImdldEV2ZW50cyIsInRvU3RhY2siLCJldmVudHMiLCJldmVudEluZGV4IiwidmlzaXRvcnMiLCJ2aXNpdG9ySW5kZXgiLCJjbGVhbk1hcmtzIiwicG9zdGNzcyIsInByb2Nlc3NvciIsInN0cmluZ2lmaWVkIiwicHJvY2Vzc2VkIiwiaW5saW5lIiwic3ludGF4IiwiaGVscGVycyIsInBsdWdpbnMiLCJ0b1N0cmluZ1RhZyIsInN5bmMiLCJtZXNzYWdlcyIsIndhcm5pbmdzIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiYXN5bmMiLCJjYXRjaCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJQcm9taXNlIiwicmVqZWN0IiwicHJvY2Vzc2luZyIsInJ1bkFzeW5jIiwiZ2V0QXN5bmNFcnJvciIsInJ1bk9uUm9vdCIsInByZXBhcmVWaXNpdG9ycyIsImhhc0xpc3RlbmVyIiwid2Fsa1N5bmMiLCJsaXN0ZW5lcnMiLCJzdWJSb290IiwidmlzaXRTeW5jIiwic3RyaW5naWZpZXIiLCJnZW5lcmF0ZSIsImV2ZW50IiwidmlzaXRvciIsInByb21pc2UiLCJsYXN0UGx1Z2luIiwiaGFuZGxlRXJyb3IiLCJyb290cyIsInBvc3Rjc3NWZXJzaW9uIiwidmlzaXRUaWNrIiwidmVyc2lvbiIsInZpc2l0IiwicmVnaXN0ZXJQb3N0Y3NzIiwic2VwYXJhdG9ycyIsImZ1bmMiLCJpblF1b3RlIiwicHJldlF1b3RlIiwibGV0dGVyIiwic3BhY2UiLCJjb21tYSIsImRpcm5hbWUiLCJzZXAiLCJjc3NTdHJpbmciLCJtYXBPcHRzIiwidXNlc0ZpbGVVcmxzIiwiYWJzb2x1dGUiLCJpc01hcCIsInByZXZpb3VzIiwicHJldmlvdXNNYXBzIiwiaXNJbmxpbmUiLCJhbm5vdGF0aW9uIiwiaXNTb3VyY2VzQ29udGVudCIsInNvdXJjZXNDb250ZW50Iiwid2l0aENvbnRlbnQiLCJjbGVhckFubm90YXRpb24iLCJzZXRTb3VyY2VzQ29udGVudCIsImFscmVhZHkiLCJ0b0ZpbGVVcmwiLCJ0b1VybCIsInBhdGgiLCJzZXRTb3VyY2VDb250ZW50IiwiYXBwbHlQcmV2TWFwcyIsImFwcGx5U291cmNlTWFwIiwiaXNBbm5vdGF0aW9uIiwidG9CYXNlNjQiLCJCdWZmZXIiLCJ3aW5kb3ciLCJhZGRBbm5vdGF0aW9uIiwib3V0cHV0RmlsZSIsImVvbCIsImdlbmVyYXRlTWFwIiwiZ2VuZXJhdGVTdHJpbmciLCJmcm9tU291cmNlTWFwIiwiYWRkTWFwcGluZyIsImdlbmVyYXRlZCIsIm9yaWdpbmFsIiwiZW5jb2RlVVJJIiwic291cmNlUGF0aCIsIm5vU291cmNlIiwibWFwcGluZyIsInNlbWljb2xvbiIsIk5vV29ya1Jlc3VsdCIsIl9wcm9jZXNzb3IiLCJfY3NzIiwiX29wdHMiLCJfbWFwIiwic2VsZiIsImdlbmVyYXRlZENTUyIsImdlbmVyYXRlZE1hcCIsIl9yb290IiwiU3RyaW5naWZpZXIiLCJjbG9uZWQiLCJyYW5nZUJ5Iiwid2FybiIsInJlbW92ZSIsIm92ZXJyaWRlcyIsImNsb25lQmVmb3JlIiwiY2xvbmVBZnRlciIsInJlcGxhY2VXaXRoIiwiYm9va21hcmsiLCJmb3VuZFNlbGYiLCJhZnRlciIsInJhdyIsImRlZmF1bHRUeXBlIiwiYmV0d2VlbiIsImZpeGVkIiwiZW1pdElucHV0cyIsImlucHV0c05leHRJbmRleCIsInBvc2l0aW9uSW5zaWRlIiwicG9zaXRpb25CeSIsIndvcmQiLCJwcm94eUNhY2hlIiwiUHJveHkiLCJwb3N0Y3NzTm9kZSIsIlNBRkVfQ09NTUVOVF9ORUlHSEJPUiIsImVtcHR5Iiwic3BhY2VzIiwiY3VzdG9tUHJvcGVydHkiLCJjcmVhdGVUb2tlbml6ZXIiLCJ0b2tlbiIsImVuZE9mRmlsZSIsIm5leHRUb2tlbiIsImZyZWVTZW1pY29sb24iLCJlbXB0eVJ1bGUiLCJlbmRGaWxlIiwiaW5pdCIsImdldFBvc2l0aW9uIiwibGVmdCIsInJpZ2h0IiwiY29sb24iLCJicmFja2V0IiwiYnJhY2tldHMiLCJ0b2tlbnMiLCJiYWNrIiwidW5jbG9zZWRCcmFja2V0IiwidW5rbm93bldvcmQiLCJzcGFjZXNBbmRDb21tZW50c0Zyb21FbmQiLCJmaW5kTGFzdFdpdGhQb3NpdGlvbiIsImZpcnN0U3BhY2VzIiwicHJlY2hlY2tNaXNzZWRTZW1pY29sb24iLCJpbXBvcnRhbnQiLCJzdHJpbmdGcm9tIiwic3BhY2VzRnJvbUVuZCIsImNhY2hlIiwiY2hlY2tNaXNzZWRTZW1pY29sb24iLCJ1bm5hbWVkQXRydWxlIiwib3BlbiIsInBhcmFtcyIsImFmdGVyTmFtZSIsInNwYWNlc0FuZENvbW1lbnRzRnJvbVN0YXJ0IiwidW5leHBlY3RlZENsb3NlIiwidW5jbG9zZWRCbG9jayIsIm93blNlbWljb2xvbiIsImNsZWFuIiwibGFzdFRva2VuVHlwZSIsImVudHJpZXMiLCJkb3VibGVDb2xvbiIsImZvdW5kZWQiLCJXYXJuaW5nIiwiaW5pdGlhbGl6ZXIiLCJ3YXJuaW5nUHJpbnRlZCIsImNyZWF0b3IiLCJwcm9jZXNzIiwiZW52IiwiTEFORyIsInRyYW5zZm9ybWVyIiwicHJvY2Vzc09wdHMiLCJwbHVnaW5PcHRzIiwiYXRSdWxlIiwiZXhpc3RzU3luYyIsInJlYWRGaWxlU3luYyIsImxvYWRBbm5vdGF0aW9uIiwic3RhcnRXaXRoIiwibG9hZE1hcCIsImdldEFubm90YXRpb25VUkwiLCJzb3VyY2VNYXBTdHJpbmciLCJjb21tZW50cyIsImRlY29kZUlubGluZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImxhc3RNYXRjaCIsImF0b2IiLCJlbmNvZGluZyIsImxvYWRGaWxlIiwicHJldlBhdGgiLCJtYXBwaW5ncyIsIl9tYXBwaW5ncyIsInNlY3Rpb25zIiwidXNlIiwibm9ybWFsaXplZCIsIndhcm5pbmciLCJpZ25vcmUiLCJzZWxlY3RvcnMiLCJ2YWx1ZXMiLCJERUZBVUxUX1JBVyIsImluZGVudCIsImJlZm9yZURlY2wiLCJiZWZvcmVSdWxlIiwiYmVmb3JlT3BlbiIsImJlZm9yZUNsb3NlIiwiYmVmb3JlQ29tbWVudCIsImVtcHR5Qm9keSIsImNvbW1lbnRMZWZ0IiwiY29tbWVudFJpZ2h0IiwiYnVpbGRlciIsInJhd1ZhbHVlIiwiYmxvY2siLCJvd24iLCJkZXRlY3QiLCJyYXdDYWNoZSIsImJlZm9yZUFmdGVyIiwibWV0aG9kIiwicmF3U2VtaWNvbG9uIiwicmF3RW1wdHlCb2R5IiwicmF3SW5kZW50IiwicGFydHMiLCJyYXdCZWZvcmVDb21tZW50IiwicmF3QmVmb3JlRGVjbCIsInJhd0JlZm9yZVJ1bGUiLCJyYXdCZWZvcmVDbG9zZSIsInJhd0JlZm9yZU9wZW4iLCJyYXdDb2xvbiIsImJ1ZiIsImRlcHRoIiwic3RlcCIsIlNJTkdMRV9RVU9URSIsIkRPVUJMRV9RVU9URSIsIkJBQ0tTTEFTSCIsIlNMQVNIIiwiTkVXTElORSIsIlNQQUNFIiwiRkVFRCIsIlRBQiIsIkNSIiwiT1BFTl9TUVVBUkUiLCJDTE9TRV9TUVVBUkUiLCJPUEVOX1BBUkVOVEhFU0VTIiwiQ0xPU0VfUEFSRU5USEVTRVMiLCJPUEVOX0NVUkxZIiwiQ0xPU0VfQ1VSTFkiLCJTRU1JQ09MT04iLCJBU1RFUklTSyIsIkNPTE9OIiwiQVQiLCJSRV9BVF9FTkQiLCJSRV9XT1JEX0VORCIsIlJFX0JBRF9CUkFDS0VUIiwiUkVfSEVYX0VTQ0FQRSIsImVzY2FwZWQiLCJlc2NhcGVQb3MiLCJjdXJyZW50VG9rZW4iLCJ2YWx1ZU9mIiwiaWdub3JlRXJyb3JzIiwicmV0dXJuZWQiLCJ1bmNsb3NlZCIsImlnbm9yZVVuY2xvc2VkIiwiY29udHJvbENoYXIiLCJsYXN0SW5kZXgiLCJwb3NpdGlvbiIsInByaW50ZWQiLCJyYW5nZSIsIm9wdCIsImZhY3RvcnkiLCJQdWJTdWIiLCJsYXN0VWlkIiwiY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVyIiwiZXgiLCJzZXRUaW1lb3V0IiwidGhyb3dFeGNlcHRpb24iLCJjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIiwiZGVsaXZlck1lc3NhZ2UiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtYXRjaGVkTWVzc2FnZSIsImltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVycyIsImNhbGxTdWJzY3JpYmVyIiwiaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IiLCJ0b3BpYyIsImhhc0tleXMiLCJwdWJsaXNoIiwiZGVsaXZlciIsImNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24iLCJmb3VuZCIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwic3Vic2NyaWJlQWxsIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiY2xlYXJBbGxTdWJzY3JpcHRpb25zIiwiY2xlYXJTdWJzY3JpcHRpb25zIiwiY291bnRTdWJzY3JpcHRpb25zIiwiZ2V0U3Vic2NyaXB0aW9ucyIsImlzVG9waWMiLCJkZXNjZW5kYW50VG9waWNFeGlzdHMiLCJpc1Rva2VuIiwiaXNGdW5jdGlvbiIsImh0bWxwYXJzZXIiLCJlc2NhcGVTdHJpbmdSZWdleHAiLCJpc1BsYWluT2JqZWN0IiwicGFyc2VTcmNzZXQiLCJwb3N0Y3NzUGFyc2UiLCJtZWRpYVRhZ3MiLCJ2dWxuZXJhYmxlVGFncyIsInNhbml0aXplSHRtbCIsIlZBTElEX0hUTUxfQVRUUklCVVRFX05BTUUiLCJodG1sIiwiX3JlY3Vyc2luZyIsInRlbXBSZXN1bHQiLCJGcmFtZSIsInRoYXQiLCJ0YWdQb3NpdGlvbiIsIm1lZGlhQ2hpbGRyZW4iLCJ1cGRhdGVQYXJlbnROb2RlVGV4dCIsInVwZGF0ZVBhcmVudE5vZGVNZWRpYUNoaWxkcmVuIiwiaHRtbFBhcnNlckRlZmF1bHRzIiwiYWxsb3dlZFRhZ3MiLCJhbGxvd1Z1bG5lcmFibGVUYWdzIiwibm9uVGV4dFRhZ3NBcnJheSIsIm5vblRleHRUYWdzIiwiYWxsb3dlZEF0dHJpYnV0ZXNNYXAiLCJhbGxvd2VkQXR0cmlidXRlc0dsb2JNYXAiLCJhbGxvd2VkQXR0cmlidXRlcyIsImdsb2JSZWdleCIsImFsbG93ZWRDbGFzc2VzTWFwIiwiYWxsb3dlZENsYXNzZXNHbG9iTWFwIiwiYWxsb3dlZENsYXNzZXNSZWdleE1hcCIsImFsbG93ZWRDbGFzc2VzIiwiY2xhc3NlcyIsInRyYW5zZm9ybVRhZ3NNYXAiLCJ0cmFuc2Zvcm1UYWdzQWxsIiwic2tpcE1hcCIsInRyYW5zZm9ybU1hcCIsInNraXBUZXh0Iiwic2tpcFRleHREZXB0aCIsInRyYW5zZm9ybVRhZ3MiLCJ0cmFuc2Zvcm0iLCJ0cmFuc0Z1biIsInNpbXBsZVRyYW5zZm9ybSIsImFkZGVkVGV4dCIsImluaXRpYWxpemVTdGF0ZSIsImVuZm9yY2VIdG1sQm91bmRhcnkiLCJmcmFtZSIsInNraXAiLCJoYXNUZXh0IiwidHJhbnNmb3JtZWRUYWciLCJkaXNhbGxvd2VkVGFnc01vZGUiLCJpc0VtcHR5T2JqZWN0IiwibmVzdGluZ0xpbWl0IiwiYWxsb3dlZFNjcmlwdEhvc3RuYW1lcyIsImFsbG93ZWRTY3JpcHREb21haW5zIiwicGFzc2VkQWxsb3dlZEF0dHJpYnV0ZXNNYXBDaGVjayIsIm5ld1ZhbHVlIiwic3BsaXRTdHJBcnJheSIsImFsbG93ZWRTY2hlbWVzQXBwbGllZFRvQXR0cmlidXRlcyIsIm5hdWdodHlIcmVmIiwiYWxsb3dlZCIsInBhcnNlVXJsIiwiYWxsb3dlZEhvc3RuYW1lIiwiaG9zdG5hbWUiLCJhbGxvd2VkRG9tYWluIiwiZG9tYWluIiwiZW5kc1dpdGgiLCJpc1JlbGF0aXZlVXJsIiwiYWxsb3dJZnJhbWVSZWxhdGl2ZVVybHMiLCJhbGxvd2VkSWZyYW1lSG9zdG5hbWVzIiwiYWxsb3dlZElmcmFtZURvbWFpbnMiLCJldmlsIiwicGFydCIsImFsbG93ZWRTcGVjaWZpY0NsYXNzZXMiLCJhbGxvd2VkV2lsZGNhcmRDbGFzc2VzIiwiYWxsb3dlZFNwZWNpZmljQ2xhc3Nlc0dsb2IiLCJhbGxvd2VkU3BlY2lmaWNDbGFzc2VzUmVnZXgiLCJhbGxvd2VkQ2xhc3Nlc0dsb2JzIiwiYWxsb3dlZEdsb2JzIiwiY2xzcyIsImdsb2IiLCJmaWx0ZXJlZEFTVCIsImV4dHJhY3RlZEF0dHJpYnV0ZXMiLCJhdHRyT2JqZWN0Iiwic3RyaW5naWZ5U3R5bGVBdHRyaWJ1dGVzIiwiYWJzdHJhY3RTeW50YXhUcmVlIiwiYWxsb3dlZFN0eWxlcyIsImFzdFJ1bGVzIiwic2VsZWN0ZWRSdWxlIiwiYWxsb3dlZERlY2xhcmF0aW9uc0xpc3QiLCJhdHRyaWJ1dGVPYmplY3QiLCJyZWd1bGFyRXhwcmVzc2lvbiIsImZpbHRlckRlY2xhcmF0aW9ucyIsImZpbHRlckNzcyIsImVzY2FwZUh0bWwiLCJzZWxmQ2xvc2luZyIsInRleHRGaWx0ZXIiLCJsYXN0RnJhbWUiLCJleGNsdXNpdmVGaWx0ZXIiLCJmaXJzdEluZGV4IiwibWF0Y2hlcyIsImFsbG93UHJvdG9jb2xSZWxhdGl2ZSIsInNjaGVtZSIsImFsbG93ZWRTY2hlbWVzQnlUYWciLCJhbGxvd2VkU2NoZW1lcyIsImltZyIsIm5ld1RhZ05hbWUiLCJuZXdBdHRyaWJzIiwibWVyZ2UiLCJpc09iamVjdCIsImN0b3IiLCJwcm90Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJzaXplIiwicmFuZG9tIiwiY3VzdG9tQWxwaGFiZXQiLCJhbHBoYWJldCIsImRlZmF1bHRTaXplIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsImRlZmluaXRpb24iLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiciIsIm5tZCIsInBhdGhzIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJuYyIsIklOSVRJQUxJWkUiLCJEQVRBX0lOSVRJQUxJWkVEIiwiQkFDSyIsIklOREVYIiwiTkVXIiwiQ1JFQVRFIiwiQ1JFQVRFX0NPTExFQ1RJT05fSVRFTVMiLCJjb2xsZWN0aW9uVHlwZSIsIlNIT1ciLCJISURFIiwiRURJVF9BVFRSSUJVVEUiLCJFRElUX0JFTE9ORyIsIkRFU1RST1kiLCJDT0xMRUNUSU9OX0lURU1TX0NSRUFURUQiLCJWQUxJREFUSU9OX0VSUk9SIiwiVVBEQVRFIiwiVVBEQVRFX1NUQVRVUyIsIlVQREFURV9QUklPUklUWSIsIlVQREFURV9CRUxPTkciLCJiZWxvbmdUeXBlIiwiREFUQV9VUERBVEVEIiwiSVRFTV9VUERBVEVEIiwiTElTVF9VUERBVEVEIiwiQkVMT05HX1VQREFURUQiLCJDT0xMRUNUSU9OX1VQREFURUQiLCJQQUdFX1JFTkRFUkVEIiwiSU5ERVhfUkVOREVSRUQiLCJORVdfUkVOREVSRUQiLCJTSE9XX1JFTkRFUkVEIiwiZ2V0RGF0YSIsImxvY2FsU3RvcmFnZSIsIkpTT05EYXRhIiwic2F2ZURhdGEiLCJpbmRleFByb2plY3RzVmlldyIsImlubmVySFRNTCIsInByb2plY3QiLCJwcm9qZWN0RWxlbWVudCIsImNsYXNzTGlzdCIsImRhdGFzZXQiLCJ0b2RvSXRlbXNGdWxsIiwidGl0bGUiLCJwcmV2aWV3SXRlbXMiLCJ0b2RvSXRlbXMiLCJjb25kaXRpb25zIiwic3RhdHVzIiwiZWxlbWVudFR5cGUiLCJ0b2RvSXRlbSIsImdldERhdGFGbiIsInN0b3JhZ2VEYXRhIiwicHJvamVjdHNMaXN0IiwidG9kb0l0ZW1zTGlzdCIsInByaW9yaXR5IiwiY2hlY2tsaXN0SXRlbXNMaXN0IiwiaW5pdGlhbGl6ZURhdGFGbiIsInNhdmVEYXRhRm4iLCJhcHBsaWNhdGlvbkRhdGEiLCJ0b1N0b3JhZ2UiLCJlZGl0YWJsZUF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImF0dHJpYnV0ZVR5cGUiLCJzZXBhcmF0ZUVkaXQiLCJhdHRyVGV4dCIsImF0dHJpYnV0ZVRleHQiLCJlbGVtZW50VGV4dCIsInJlbmRlckRpc2FibGVkIiwiZGlzYWJsZWQiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2VsZWN0YWJsZSIsImNoZWNrIiwicGFyc2VOdW1iZXJMaXN0IiwiTnVtYmVyIiwic25ha2VDYXNlIiwidXBkYXRlVG9kb0l0ZW1zRnVsbCIsIm1zZyIsImJlbG9uZ3MiLCJvbGRUb2RvSXRlbXNGdWxsIiwiZnVsbCIsInRvZG9JdGVtc0Z1bGxBcnIiLCJpZHMiLCJwYXJlbnRFbGVtZW50U2VsZWN0b3IiLCJwYXJlbnRFbGVtZW50IiwiYmVsb25nSWQiLCJjaGVja2xpc3RJdGVtIiwibmV3UHJvamVjdEJ1dHRvbiIsImZvcm1IVE1MIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibmV3VG9kb0l0ZW1CdXR0b24iLCJwcm9qZWN0SWQiLCJuZXdDaGVja2xpc3RJdGVtQnV0dG9uU2VsZWN0b3IiLCJuZXdDaGVja2xpc3RJdGVtQnV0dG9uIiwiY2hlY2tsaXN0SXRlbUZvcm1FbGVtZW50IiwiY2xvc2VzdCIsImJhY2tCdXR0b24iLCJzdWJtaXRCdXR0b24iLCJ3aXRoSWQiLCJjaGVja2xpc3RJdGVtcyIsImF0dHJXcmFwcGVyIiwiY2hlY2tsaXN0SXRlbUZpZWxkSFRNTCIsImNoZWNrbGlzdEl0ZW1Gb3JtRWxlbWVudFNlbGVjdG9yIiwicmVtYWluaW5nQ2hlY2tsaXN0SXRlbUZpZWxkRWxlbWVudHMiLCJjaGVja2xpc3RJdGVtRWxlbWVudCIsIm5ld0luZGV4IiwiaW5wdXRFbGVtZW50cyIsImJlbG9uZ0luZGV4RWxlbWVudCIsImxhYmVsRWxlbWVudCIsImhpZGVCdXR0b24iLCJpbnB1dEVsZW1lbnQiLCJhdHRyIiwiX3VwZGF0ZUluZGV4Iiwic2hvd1Byb2plY3RWaWV3IiwiX3JlbmRlclRvZG9JdGVtc0luZGV4IiwiYmluZCIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGF0ZSIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsImdldFRpbWUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsIl90eXBlb2YiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ1N0ciIsIk5hTiIsInN0YXJ0T2ZEYXkiLCJkaXJ0eURhdGUiLCJzZXRIb3VycyIsIk1JTExJU0VDT05EU19JTl9EQVkiLCJkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJzdGFydE9mRGF5TGVmdCIsInN0YXJ0T2ZEYXlSaWdodCIsInRpbWVzdGFtcExlZnQiLCJ0aW1lc3RhbXBSaWdodCIsInJvdW5kIiwiaXNEYXRlIiwiaXNWYWxpZCIsImlzTmFOIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJjZWlsIiwiZmxvb3IiLCJhZGRNaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsInRpbWVzdGFtcCIsImFtb3VudCIsInN1Yk1pbGxpc2Vjb25kcyIsInN0YXJ0T2ZVVENJU09XZWVrIiwid2Vla1N0YXJ0c09uIiwiZGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5IiwiTUlMTElTRUNPTkRTX0lOX1dFRUsiLCJzdGFydE9mVVRDV2VlayIsIl9yZWYiLCJfcmVmMiIsIl9yZWYzIiwiX29wdGlvbnMkd2Vla1N0YXJ0c09uIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbG9jYWxlJG9wdGlvIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMiIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsIl9vcHRpb25zJGZpcnN0V2Vla0NvbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZmlyc3RXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsImFicyIsInNpZ25lZFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiRyIsImxvY2FsaXplIiwiZXJhIiwieSIsIm9yZGluYWxOdW1iZXIiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxdWFydGVyIiwiY29udGV4dCIsInEiLCJNIiwiTCIsIndlZWsiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwiaG91cnMiLCJCIiwiSCIsIksiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJvcmlnaW5hbERhdGUiLCJUIiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJmb3JtYXRMb25nIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWUiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4iLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJsb25nIiwic2hvcnQiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwiYXJndW1lbnRDYWxsYmFjayIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiZmluZEluZGV4IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0IiwicHJlZGljYXRlIiwicGFyc2VQYXR0ZXJuIiwicGFyc2VSZXN1bHQiLCJhbnkiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiZm9ybWF0dGVyT3B0aW9ucyIsImZpcnN0Q2hhcmFjdGVyIiwibG9uZ0Zvcm1hdHRlciIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJtYXRjaGVkIiwiZGlydHlCYXNlRGF0ZSIsImJhc2VEYXRlIiwidXRjQmFzZURhdGUiLCJkdWVEYXRlIiwiX3JlbmRlclRvZG9JdGVtIiwidG9kb0l0ZW1FbGVtZW50Iiwic2hvd0J1dHRvbiIsIl9yZW5kZXJDaGVja2xpc3RJdGVtc0luZGV4IiwiX3JlbmRlckZ1bGwiLCJhdHRyaWJ1dGVWYWx1ZSIsImF0dHJFbGVtZW50U2VsZWN0b3IiLCJhdHRyRWxlbWVudCIsImxhYmVsVGV4dCIsImlzVGV4dGFyZWEiLCJFRElUX0FUVFJJQlVURV9SRU5ERVJFRCIsImVkaXRCZWxvbmdCdXR0b25TZWxlY3RvciIsImVkaXRCZWxvbmdCdXR0b24iLCJFRElUX0JFTE9OR19SRU5ERVJFRCIsInByZXZpZXdOdW0iLCJjbGlja091dCIsInNlcGFyYXRlRWRpdEF0dHJCdXR0b24iLCJodW1hblJlYWRhYmxlTmFtZXMiLCJjb250YWluZXJFbGVtZW50U2VsZWN0b3JzIiwiY29udGFpbmVyRWxlbWVudCIsImVycm9ycyIsImVycm9ySFRNTCIsIm9ialR5cGUiLCJvYmpBdHRyaWJ1dGUiLCJjdXJyUGFnZVZpZXciLCJ1cGRhdGVWaWV3Iiwic2Nyb2xsWSIsImlubmVySGVpZ2h0IiwidmlldyIsIl9iaW5kQnV0dG9ucyIsImJ1dHRvbnMiLCJwdWJTdWJFdmVudCIsIl9jbGVhckV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZXh0cmFBcmdzIiwiYXJnIiwiX2JpbmRGb3JtU3VibWl0QnV0dG9ucyIsImRhdGFBdHRycyIsImZyb21FbnRyaWVzIiwiRm9ybURhdGEiLCJfYmluZEZvcm1TdWJtaXRFbnRlcktleSIsImFjdGl2ZUVsZW1lbnQiLCJjbGVhcmVkRWxlbWVudCIsImZvY3VzIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJfZm9jdXNJbnB1dCIsIlN0b3JhZ2VhYmxlIiwidGVtcEtleXMiLCJzdG9yYWdlT2JqIiwiVmFsaWRhdGFibGUiLCJfYXR0ckVycm9ycyIsInZhbGlkYXRpb25zIiwidmFsaWRhdGlvbiIsImZuIiwiX2Fzc29jaWF0ZWRFcnJvcnMiLCJhc3NvY2lhdGVkVmFsaWRhdGlvbnMiLCJ2YWxpZCIsInZhbGlkYXRlIiwidmFsaWRhdGVBc3NvY2lhdGVkIiwiUHJlc2VuY2VWYWxpZGF0YWJsZSIsImF0dHJzIiwiVXBkYXRhYmxlIiwiX3ByZXBhcmUiLCJTdGF0dXNhYmxlIiwic3RhdHVzZXMiLCJQcmlvcml0aXphYmxlIiwicHJpb3JpdGllcyIsImRpcmVjdGlvbiIsIkNvbGxlY3Rpb25hYmxlIiwiY29sbGVjdGlvblR5cGVGYWN0b3J5IiwiY29sbGVjdGlvbiIsImNyZWF0ZUNvbGxlY3Rpb25JdGVtcyIsInZhbGlkYXRlU2VsZiIsImNvbGxlY3Rpb25JdGVtcyIsIml0ZW1EYXRhIiwiY29sbGVjdGlvbkl0ZW1WYWxpZGF0aW9ucyIsIm5ld0NvbGxlY3Rpb25JdGVtcyIsImNvbGxlY3Rpb25JdGVtIiwib2JqSW5kZXgiLCJCZWxvbmdhYmxlIiwiQmVsb25nVXBkYXRhYmxlIiwib2xkQmVsb25nSWQiLCJuZXdCZWxvbmdJZCIsIkxpc3RhYmxlIiwiZnJvbVN0b3JhZ2VMaXN0IiwibmV4dElkIiwiaXRlbVR5cGUiLCJfcHVibGlzaENvbGxlY3Rpb25VcGRhdGUiLCJiZWxvbmdEYXRhIiwibGlzdEl0ZW0iLCJzdG9yYWdlSXRlbSIsIml0ZW1GYWN0b3J5Iiwid2l0aElkcyIsIm5ld0xpc3RJdGVtIiwiX3Nhbml0aXplIiwicmVnIiwib3V0ZXIiLCJpbm5lciIsIl9hc3NpZ25OZXN0ZWQiLCJQcm9qZWN0IiwiY29tcEZuIiwiQ2hlY2tsaXN0SXRlbSIsIlRvZG9JdGVtIiwiYXBwbGljYXRpb25EYXRhTGlzdHMiLCJQcm9qZWN0c0xpc3QiXSwic291cmNlUm9vdCI6IiJ9