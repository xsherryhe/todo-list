(()=>{var t={316:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([t.id,".hidden {\n  display: none;\n}\n\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n","",{version:3,sources:["webpack://./src/styles/application.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:[".hidden {\n  display: none;\n}\n\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n"],sourceRoot:""}]);const s=i},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(i[u]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},798:function(t,e,n){t=n.nmd(t),function(n,o){"use strict";var r={};n.PubSub?(r=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=r,function(t){var e={},n=-1;function o(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function r(t,e,n){t(e,n)}function a(t,n,a,i){var s,u=e[n],c=i?r:o;if(Object.prototype.hasOwnProperty.call(e,n))for(s in u)Object.prototype.hasOwnProperty.call(u,s)&&c(u[s],t,a)}function i(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,o){var r=function(t,e,n){return function(){var o=String(t),r=o.lastIndexOf(".");for(a(t,t,e,n);-1!==r;)r=(o=o.substr(0,r)).lastIndexOf("."),a(t,o,e,n);a(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,o);return!!function(t){for(var e=String(t),n=i(e)||i("*"),o=e.lastIndexOf(".");!n&&-1!==o;)o=(e=e.substr(0,o)).lastIndexOf("."),n=i(e);return n}(t)&&(!0===n?r():setTimeout(r,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,o){if("function"!=typeof o)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var r="uid_"+String(++n);return e[t][r]=o,r},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var o=t.subscribe(e,(function(){t.unsubscribe(o),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,o,r=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(o in e[n])r++;break}return r},t.getSubscriptions=function(t){var n,o=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&o.push(n);return o},t.unsubscribe=function(n){var o,r,a,i="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!i&&"string"==typeof n,u="function"==typeof n,c=!1;if(!i){for(o in e)if(Object.prototype.hasOwnProperty.call(e,o)){if(r=e[o],s&&r[n]){delete r[n],c=n;break}if(u)for(a in r)Object.prototype.hasOwnProperty.call(r,a)&&r[a]===n&&(delete r[a],c=!0)}return c}t.clearSubscriptions(n)}}(r)),void 0!==t&&t.exports&&(e=t.exports=r),e.PubSub=r,t.exports=e=r}("object"==typeof window&&window||this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],s=0;s<t.length;s++){var u=t[s],c=o.base?u[0]+o.base:u[0],d=a[c]||0,l="".concat(c," ").concat(d);a[c]=d+1;var m=n(l),f={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==m)e[m].references++,e[m].updater(f);else{var p=r(f,o);o.byIndex=s,e.splice(s,0,{identifier:l,updater:p,references:1})}i.push(l)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var u=o(t,r),c=0;c<a.length;c++){var d=n(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=u}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,loaded:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.nc=void 0;var o={};(()=>{"use strict";n.d(o,{O:()=>qe,w:()=>t});var t={};n.r(t),n.d(t,{fn:()=>pe,oF:()=>be,yo:()=>le,tA:()=>me,Sn:()=>he,Do:()=>fe});var e={};n.r(e),n.d(e,{O:()=>qe,w:()=>t});var r=n(379),a=n.n(r),i=n(795),s=n.n(i),u=n(569),c=n.n(u),d=n(565),l=n.n(d),m=n(216),f=n.n(m),p=n(589),h=n.n(p),b=n(316),y={};y.styleTagTransform=h(),y.setAttributes=l(),y.insert=c().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=f(),a()(b.Z,y),b.Z&&b.Z.locals&&b.Z.locals;var g=n(798),v=n.n(g);const w="initialize",x="dataInitialized",T="back",C=t=>`index.${t}`,E=t=>`new.${t}`,S=t=>`create.${t}`,I=(t,e,n)=>`create.collection.${n}.${t}.${e}`,k=t=>`show.${t}`,j=t=>`hide.${t}`,M=t=>`edit.attribute.${t}`,O=t=>`edit.belong.${t}`,D=t=>`destroy.${t}`,$=t=>`created.collection.${t}`,L="error.validation",P=(t,e)=>`update.${t}.${e}`,A=(t,e)=>`update.${t}.status.${e}`,q=(t,e)=>`update.${t}.priority.${e}`,U=(t,e,n)=>`update.${t}.belong.${n}.${e}`,W="updated.data",N=(t,e)=>`updated.data.item.${t}.${e}`,F=t=>`updated.data.list.${t}`,Y=t=>`updated.${t}.belong`,H=t=>`updated.${t}.collection`,R="rendered.page",B=t=>`rendered.view.new.${t}`,z=t=>`rendered.view.show.${t}`;function Q(){}function G(t){}function X(){document.body.innerHTML="",function(){const t=document.createElement("h1"),e=document.createElement("h2"),n=document.createElement("button");t.textContent="Actionality",e.textContent="Your one-stop to-do app",n.classList.add("new"),n.dataset.type="todoItem",n.dataset.projectId=0,n.textContent="Add a New To-Do",document.body.append(t,e,n)}(),function(){const t=document.createElement("div"),e=document.createElement("h2"),n=document.createElement("button");e.textContent="My Projects",n.classList.add("new"),n.dataset.type="project",n.textContent="+",t.append(e,n),document.body.append(t)}(),qe.projectsList.projects.forEach((t=>{const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("button"),r=document.createElement("ul");[n,o].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("show"),n.dataset.todoItemsFull="",n.textContent=t.title,o.classList.add("destroy"),o.textContent="-",qe.todoItemsList.withIds(t.todoItems).slice(0,le).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,r.appendChild(e)})),e.appendChild(n),t.id&&e.appendChild(o),e.append(r),document.body.appendChild(e)})),v().publish(R,X),v().publish("rendered.view.index.project")}function _(t,e,n,o={}){const r=document.createElement("div"),a=document.createElement("div"),i=document.createElement("button"),s=he[t.type].includes(e),u=o.attributeText||t[e]||"None";r.classList.add("attribute"),a.textContent=o.elementText||"",s&&(a.textContent+=u),[r,i].forEach((n=>{n.dataset.type=t.type,n.dataset.id=t.id,n.dataset.attribute=e})),i.classList.add("edit-attribute"),i.dataset.attributeType=n,i.dataset.attributeValue=t[e]||"",i.textContent=s?"Edit":u,r.append(a,i),(o.parentElement||document.body).append(r)}function J(t=document,e=!0){t.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=e))}function V(t){return t.split(" ").filter((t=>t)).map(Number)}function Z(t,e){const n=qe.todoItemsList.withId(e.id).belongs.project,o=document.querySelector(".todo-items").dataset.todoItemsFull,r=t.includes("show")?o+` ${e.id}`:V(o).filter((t=>t!==+e.id)).join(" ");v().publish(k("project"),{id:n,todoItemsFull:r})}v().subscribe(w,function(t=Q){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete",dueDate:new Date("November 10, 2022")}],checklistItemsList:[]};v().publish(x,e)}}(Q)),v().subscribe("updated",function(t=G){return function(){t(e.default)}}(G)),v().subscribe(C("project"),X),v().subscribe(E("project"),(function(){const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("button"),n=document.createElement("form");e.classList.add("back"),e.textContent="Back",n.dataset.type="project",n.innerHTML='<label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit">Submit</button>',t.replaceWith(e,n),v().publish(B("project"))})),v().subscribe(E("todoItem"),(function(t,e){J();const n=document.querySelector('.new[data-type="todoItem"]'),o=document.createElement("button"),r=document.createElement("form");o.classList.add("back"),o.textContent="Back",r.dataset.type="todoItem",r.innerHTML=`<div class="field">\n      <label for="title">New To-Do</label>\n      <input type="text" name="title" id="title">\n     </div>\n     <div class="field">\n      <label for="dueDate">Due Date</label>\n      <input type="datetime-local" name="dueDate" id="dueDate">\n     </div>\n     <div class="field">\n      <label for="description">Description</label>\n      <textarea name="description" id="description"></textarea>\n     </div>\n     <div class="field">\n      <label for="notes">Notes</label>\n      <textarea name="notes" id="notes"></textarea>\n     </div>\n     <div class="field">\n      <label for="belongs[project]">Project</label>\n      <select name="belongs[project]" id="belongs[project]">\n        ${qe.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==e.projectId?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n      </select>\n     </div>\n     <div class="field">\n      <label for="priority">Priority</label>\n      <select name="priority" id="priority">\n        ${me.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n      </select>\n     </div>\n     <input type="hidden" name="status" id="status" value="${fe[0]}">\n     <button class="new" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n     <button class="submit">Submit</button>`,n.replaceWith(o,r),v().publish(B("todoItem"))})),v().subscribe(E("checklistItem"),(function(t,e){e.todoItem&&J();const n=(e.todoItem?`.todo-item[data-id="${e.todoItem}"] `:"")+'.new[data-type="checklistItem"]',o=document.querySelector(n),r=o.closest("form"),a=r.querySelector(".submit"),i=document.createElement("div"),s=1+document.querySelectorAll(".checklist-item.field").length+(e.todoItem?qe.todoItemsList.withId(e.todoItem).checklistItems.length:0),u=t=>`checklistItemsCollectionData[${s}][${t}]`;i.classList.add("field","checklist-item"),i.dataset.type="checklistItem",i.dataset.index=`${s}`,i.innerHTML=`<input type="hidden" name="${u("todoItemIndex")}" id="${u("todoItemIndex")}" value="${s}">\n     <label for="${u("title")}">${s}.</label>\n     <input type="text" name="${u("title")}" id="${u("title")}">\n     <input type="hidden" name="${u("status")}" id="${u("status")}" value="${fe[0]}">\n     <button class="hide" data-type="new-checklistItem" data-index="${s}" ${e.todoItem?`data-todo-item=${e.todoItem}`:""}>-</button>`,a.classList.remove("hidden"),o.insertAdjacentElement("beforebegin",i),J(r,!1),v().publish(e.todoItem?("todoItem","rendered.view.collection.new.todoItem"):B("checklistItem"))})),v().subscribe(j("new-checklistItem"),(function(t,e){const n=e.todoItem?`.todo-item[data-id="${e.todoItem}"] form[data-collection-type="checklistItem"]`:'form[data-type="todoItem"]',o=document.querySelector(n);o.querySelector(`.checklist-item.field[data-index="${e.index}"]`).remove();const r=1+(e.todoItem?qe.todoItemsList.withId(e.todoItem).checklistItems.length:0),a=o.querySelectorAll(".checklist-item.field");e.todoItem&&0==a.length&&(J(document,!1),o.querySelector(".submit").classList.add("hidden")),a.forEach(((t,e)=>{const n=e+r,o=t.querySelector('input[name*="todoItemIndex"]'),a=t.querySelector('label[for*="title"]'),i=t.querySelector(".hide");t.dataset.index=n,o.value=n,a.textContent=`${n}.`,i.dataset.index=n}))})),v().subscribe(k("project"),(function t(e,n){document.body.innerHTML="";const o=qe.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),o=document.createElement("button");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",_(t,"title","text",{parentElement:n}),o.classList.add("new"),o.dataset.type="todoItem",o.dataset.projectId=t.id,o.textContent="+",n.append(o),document.body.append(e,n)})(o),function(t,e){const n=V(e),o=document.createElement("div");o.classList.add("todo-items"),o.dataset.todoItemsFull=e,qe.todoItemsList.withIds(t.todoItems).forEach((t=>v().publish(k("todoItem"),{id:t.id,full:n.includes(t.id),parentElement:o}))),document.body.append(o)}(o,n.todoItemsFull),v().publish(R,t.bind(null,e,n)),v().publish(z("project"))})),v().subscribe(k("todoItemFull"),Z),v().subscribe(j("todoItemFull"),Z);var K={};function tt(){return K}function et(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function nt(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function ot(t){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ot(t)}function rt(t){nt(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===ot(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function at(t){nt(1,arguments);var e=rt(t);return e.setHours(0,0,0,0),e}var it=864e5;function st(t,e){nt(2,arguments);var n=at(t),o=at(e),r=n.getTime()-et(n),a=o.getTime()-et(o);return Math.round((r-a)/it)}function ut(t){return ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ut(t)}function ct(t){return nt(1,arguments),t instanceof Date||"object"===ut(t)&&"[object Date]"===Object.prototype.toString.call(t)}function dt(t){if(nt(1,arguments),!ct(t)&&"number"!=typeof t)return!1;var e=rt(t);return!isNaN(Number(e))}function lt(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function mt(t,e){nt(2,arguments);var n=rt(t).getTime(),o=lt(e);return new Date(n+o)}function ft(t,e){nt(2,arguments);var n=lt(e);return mt(t,-n)}var pt=864e5;function ht(t){nt(1,arguments);var e=1,n=rt(t),o=n.getUTCDay(),r=(o<e?7:0)+o-e;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function bt(t){nt(1,arguments);var e=rt(t),n=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=ht(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=ht(a);return e.getTime()>=r.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function yt(t){nt(1,arguments);var e=bt(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var o=ht(n);return o}var gt=6048e5;function vt(t,e){var n,o,r,a,i,s,u,c;nt(1,arguments);var d=tt(),l=lt(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(u=d.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=rt(t),f=m.getUTCDay(),p=(f<l?7:0)+f-l;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function wt(t,e){var n,o,r,a,i,s,u,c;nt(1,arguments);var d=rt(t),l=d.getUTCFullYear(),m=tt(),f=lt(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==o?o:null===(u=m.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(l+1,0,f),p.setUTCHours(0,0,0,0);var h=vt(p,e),b=new Date(0);b.setUTCFullYear(l,0,f),b.setUTCHours(0,0,0,0);var y=vt(b,e);return d.getTime()>=h.getTime()?l+1:d.getTime()>=y.getTime()?l:l-1}function xt(t,e){var n,o,r,a,i,s,u,c;nt(1,arguments);var d=tt(),l=lt(null!==(n=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:d.firstWeekContainsDate)&&void 0!==o?o:null===(u=d.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),m=wt(t,e),f=new Date(0);f.setUTCFullYear(m,0,l),f.setUTCHours(0,0,0,0);var p=vt(f,e);return p}var Tt=6048e5;function Ct(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const Et=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return Ct("yy"===e?o%100:o,e.length)},St=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):Ct(n+1,2)},It=function(t,e){return Ct(t.getUTCDate(),e.length)},kt=function(t,e){return Ct(t.getUTCHours()%12||12,e.length)},jt=function(t,e){return Ct(t.getUTCHours(),e.length)},Mt=function(t,e){return Ct(t.getUTCMinutes(),e.length)},Ot=function(t,e){return Ct(t.getUTCSeconds(),e.length)},Dt=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return Ct(Math.floor(o*Math.pow(10,n-3)),e.length)};var $t={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return Et(t,e)},Y:function(t,e,n,o){var r=wt(t,o),a=r>0?r:1-r;return"YY"===e?Ct(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):Ct(a,e.length)},R:function(t,e){return Ct(bt(t),e.length)},u:function(t,e){return Ct(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return Ct(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return Ct(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return St(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return Ct(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){var r=function(t,e){nt(1,arguments);var n=rt(t),o=vt(n,e).getTime()-xt(n,e).getTime();return Math.round(o/Tt)+1}(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):Ct(r,e.length)},I:function(t,e,n){var o=function(t){nt(1,arguments);var e=rt(t),n=ht(e).getTime()-yt(e).getTime();return Math.round(n/gt)+1}(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):Ct(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):It(t,e)},D:function(t,e,n){var o=function(t){nt(1,arguments);var e=rt(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=e.getTime(),r=n-o;return Math.floor(r/pt)+1}(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):Ct(o,e.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return Ct(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return Ct(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return Ct(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return kt(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):jt(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):Ct(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):Ct(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Mt(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Ot(t,e)},S:function(t,e){return Dt(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return Pt(r);case"XXXX":case"XX":return At(r);default:return At(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return Pt(r);case"xxxx":case"xx":return At(r);default:return At(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Lt(r,":");default:return"GMT"+At(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Lt(r,":");default:return"GMT"+At(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return Ct(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return Ct((o._originalDate||t).getTime(),e.length)}};function Lt(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=e||"";return n+String(r)+i+Ct(a,2)}function Pt(t,e){return t%60==0?(t>0?"-":"+")+Ct(Math.abs(t)/60,2):At(t,e)}function At(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+Ct(Math.floor(r/60),2)+n+Ct(r%60,2)}const qt=$t;var Ut=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Wt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const Nt={p:Wt,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return Ut(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",Ut(r,e)).replace("{{time}}",Wt(a,e))}};var Ft=["D","DD"],Yt=["YY","YYYY"];function Ht(t){return-1!==Ft.indexOf(t)}function Rt(t){return-1!==Yt.indexOf(t)}function Bt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var zt={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Qt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,o=t.formats[n]||t.formats[t.defaultWidth];return o}}const Gt={date:Qt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Qt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Qt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Xt={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function _t(t){return function(e,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=t.formattingValues[a]||t.formattingValues[r]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;o=t.values[s]||t.values[i]}return o[t.argumentCallback?t.argumentCallback(e):e]}}const Jt={ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:_t({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:_t({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:_t({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:_t({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:_t({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Vt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,s=a[0],u=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(u)?Kt(u,(function(t){return t.test(s)})):Zt(u,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=e.slice(s.length);return{value:i,rest:d}}}function Zt(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function Kt(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var te,ee={ordinalNumber:(te={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(te.matchPattern);if(!n)return null;var o=n[0],r=t.match(te.parsePattern);if(!r)return null;var a=te.valueCallback?te.valueCallback(r[0]):r[0];a=e.valueCallback?e.valueCallback(a):a;var i=t.slice(o.length);return{value:a,rest:i}}),era:Vt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Vt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:Vt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Vt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Vt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ne={code:"en-US",formatDistance:function(t,e,n){var o,r=zt[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:Gt,formatRelative:function(t,e,n,o){return Xt[t]},localize:Jt,match:ee,options:{weekStartsOn:0,firstWeekContainsDate:1}};var oe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,ie=/''/g,se=/[a-zA-Z]/;function ue(t,e,n){var o,r,a,i,s,u,c,d,l,m,f,p,h,b,y,g,v,w;nt(2,arguments);var x=String(e),T=tt(),C=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:T.locale)&&void 0!==o?o:ne,E=lt(null!==(a=null!==(i=null!==(s=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==s?s:T.firstWeekContainsDate)&&void 0!==i?i:null===(l=T.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=lt(null!==(f=null!==(p=null!==(h=null!==(b=null==n?void 0:n.weekStartsOn)&&void 0!==b?b:null==n||null===(y=n.locale)||void 0===y||null===(g=y.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==h?h:T.weekStartsOn)&&void 0!==p?p:null===(v=T.locale)||void 0===v||null===(w=v.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==f?f:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!C.localize)throw new RangeError("locale must contain localize property");if(!C.formatLong)throw new RangeError("locale must contain formatLong property");var I=rt(t);if(!dt(I))throw new RangeError("Invalid time value");var k=et(I),j=ft(I,k),M={firstWeekContainsDate:E,weekStartsOn:S,locale:C,_originalDate:I},O=x.match(re).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,Nt[e])(t,C.formatLong):t})).join("").match(oe).map((function(o){if("''"===o)return"'";var r=o[0];if("'"===r)return ce(o);var a=qt[r];if(a)return null!=n&&n.useAdditionalWeekYearTokens||!Rt(o)||Bt(o,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!Ht(o)||Bt(o,e,String(t)),a(j,o,C.localize,M);if(r.match(se))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return o})).join("");return O}function ce(t){var e=t.match(ae);return e?e[1].replace(ie,"'"):t}function de(t,e,n){var o,r,a,i,s,u,c,d,l,m;nt(2,arguments);var f=rt(t),p=rt(e),h=tt(),b=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:h.locale)&&void 0!==o?o:ne,y=lt(null!==(a=null!==(i=null!==(s=null!==(u=null==n?void 0:n.weekStartsOn)&&void 0!==u?u:null==n||null===(c=n.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==s?s:h.weekStartsOn)&&void 0!==i?i:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!b.localize)throw new RangeError("locale must contain localize property");if(!b.formatLong)throw new RangeError("locale must contain formatLong property");if(!b.formatRelative)throw new RangeError("locale must contain formatRelative property");var g,v=st(f,p);if(isNaN(v))throw new RangeError("Invalid time value");g=v<-6?"other":v<-1?"lastWeek":v<0?"yesterday":v<1?"today":v<2?"tomorrow":v<7?"nextWeek":"other";var w=ft(f,et(f)),x=ft(p,et(p)),T=b.formatRelative(g,w,x,{locale:b,weekStartsOn:y});return ue(f,T,{locale:b,weekStartsOn:y})}v().subscribe(k("todoItem"),(function(t,e){const n=qe.todoItemsList.withId(e.id);(function(t,e){const n=document.querySelector(`.todo-item[data-id="${t.id}"`),o=document.createElement("div"),r=document.createElement("button"),a=document.createElement("button"),i=document.createElement("button"),s=document.createElement("button");n?.remove(),o.classList.add(t.priority,t.status,"todo-item"),o.dataset.id=t.id,_(t,"title","text",{parentElement:o}),r.classList.add("update-status"),r.dataset.type=t.type,r.dataset.id=t.id,r.textContent=fe.indexOf(t.status)?"✓":"",o.append(r),_(t,"dueDate","datetime-local",{parentElement:o,elementText:"Due: ",attributeText:t.dueDate?de(new Date(t.dueDate),new Date):"None"}),[a,i].forEach((e=>{e.dataset.type=t.type+"Full",e.dataset.id=t.id})),a.classList.add("show"),a.textContent="Expand",i.classList.add("hide","hidden"),i.textContent="Shrink",s.dataset.type=t.type,s.dataset.id=t.id,s.classList.add("destroy"),s.textContent="-",o.append(a,i,s),(e||document.body).append(o)})(n,e.parentElement),e.full&&function(t,e){const n=e.querySelector(`.todo-item[data-id="${t.id}"]`),o=n.querySelector(`.show[data-type="${t.type+"Full"}"]`),r=n.querySelector(`.hide[data-type="${t.type+"Full"}"]`),a=document.createElement("button"),i=document.createElement("div"),s=document.createElement("button"),u=document.createElement("button");_(t,"description","textarea",{parentElement:n,elementText:"Description: "}),_(t,"notes","textarea",{parentElement:n,elementText:"Notes: "}),[a,s,u].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),a.classList.add("edit-belong"),a.dataset.belongType="project",a.dataset.belongId=t.belongs.project,a.textContent="Change Project",i.textContent=`Priority: ${t.priority||"None"}`,[s,u].forEach((t=>t.classList.add("update-priority"))),s.dataset.direction=-1,s.textContent="v",u.dataset.direction=1,u.textContent="^",i.append(s,u),o.classList.add("hidden"),r.classList.remove("hidden"),n.append(a,i),function(t,e){const n=document.createElement("form");n.dataset.type=t.type,n.dataset.id=t.id,n.dataset.collectionType="checklistItem",n.innerHTML=`<button class="new" data-type="checklistItem" data-todo-item="${t.id}">\n      Add a Checklist Item\n     </button>\n     <button class="submit hidden">✓</button>`;const o=qe.checklistItemsList.withIds(t.checklistItems).sort(((t,e)=>+t.todoItemIndex-+e.todoItemIndex));if(!o.length)return e.append(n);const r=document.createElement("h3"),a=document.createElement("ol");r.textContent="Checklist",o.forEach((t=>{const e=document.createElement("li"),n=document.createElement("button"),o=document.createElement("button");e.classList.add(t.status,"checklist-item"),e.dataset.id=t.id,_(t,"title","text",{parentElement:e}),[n,o].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),n.classList.add("update-status"),n.textContent=fe.indexOf(t.status)?"✓":"",o.classList.add("destroy"),o.textContent="-",e.append(n,o),a.append(e)})),e.append(r,a,n)}(t,n)}(n,e.parentElement),v().publish(z("todoItem"))})),v().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:o,attributeType:r,attributeValue:a}){J();const i=`.attribute[data-type="${e}"][data-id="${n}"][data-attribute="${o}"]`,s=document.querySelector(i),u=document.createElement("button"),c=document.createElement("form");u.classList.add("back"),u.textContent="←",c.classList.add("edit-form"),c.dataset.type=e,c.dataset.id=n,c.dataset.attribute=o;const d="textarea"==r;c.innerHTML=`<${d?"textarea":"input"} \n      type="${r}" name="${o}" id="${o}" \n      value="${a}">${d?`${a}</textarea>`:""}\n     <button class="submit">✓</button>`,s.replaceWith(u,c),v().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:o})})),v().subscribe("edit.belong",(function(t,{type:e,id:n,belongType:o,belongId:r}){J();const a=`.edit-belong[data-belong-type="${o}"][data-type="${e}"][data-id="${n}"]`,i=document.querySelector(a),s=document.createElement("button"),u=document.createElement("form");s.classList.add("back"),s.textContent="←",u.classList.add("edit-form"),u.dataset.type=e,u.dataset.id=n,u.dataset.belongType=o,u.innerHTML=`<label for="belongId">Project</label>\n     <select name="belongId" id="belongId">\n      ${qe[o+"sList"][o+"s"].map((t=>`<option value="${t.id}" ${t.id==r?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n     </select>\n     <button class="submit">Change</button>`,i.replaceWith(s,u),v().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:n,belongType:o})}));const le=2,me=["Low","Medium","High"],fe=["Incomplete","Complete"],pe=["text"],he={project:[],todoItem:["description","notes"],checklistItem:[]},be={title:"name",todoItem:"to-do item",checklistItem:"checklist item"};v().subscribe(L,(function(t,e){const n=`[data-type="${e.type}"]${e.id?`[data-id="${e.id}"]`:""}${e.index?`[data-index="${e.index}"]`:""}`,o=document.querySelector(`form${n},.field${n}`);if(o){o.querySelectorAll(".error").forEach((t=>t.remove()));for(const t of e.errors){const e=o.querySelector(`input[name*="${t.attribute}"],textarea[name*="${t.attribute}"]`);if(!e)continue;const n=document.createElement("p"),a=(r=be[t.objType]||t.objType)[0].toUpperCase()+r.slice(1).toLowerCase(),i=be[t.objAttribute]||t.objAttribute;n.classList.add("error"),n.textContent=`${a} ${i} ${t.message}`,e.insertAdjacentElement("afterend",n)}var r}}));let ye=X;function ge(){document.body.innerHTML="",ye()}function ve(t,e,n={}){t.forEach((t=>{(t=xe(t)).addEventListener("click",(t=>{t.preventDefault();const o=[t.target.dataset.type].concat((n.extraArgs||[]).map((e=>t.target.dataset[e])));v().publish("function"==typeof e?e(...o):e,t.target.dataset)}))}))}function we(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=xe(n)).addEventListener("click",(n=>{n.preventDefault();const o=n.target.closest("form"),r=e.map((t=>o.dataset[t]));v().publish(t(...r),Object.fromEntries(new FormData(o)))}))}))}function xe(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function Te(t){function e(e,n,o=[]){return t.validations?.[e]?.forEach((r=>{r.fn(n)||o.push({objAttribute:e,objType:t.type,attribute:e,message:r.message})})),o}function n(t,e=[]){return t.forEach((t=>{t.obj.valid()||e.push(...t.obj.errors.map((e=>Object.assign({},e,{attribute:t.attrWrapper?t.attrWrapper(e.attribute):e.attribute}))))})),e}t.validations||={},t.errors||=[],t.validate=function(o=t){t.errors=[];for(const n in o)t.errors.push(...e(n,t[n]));o.associatedValidations&&t.errors.push(...n(o.associatedValidations))},t.validateAssociated=function(e){t.errors=[],t.errors.push(...n(e))},t.valid=function(){return t.validate(),0==t.errors.length}}function Ce(t,e){e.forEach((e=>{t.validations[e]||=[],t.validations[e].push({fn:t=>t,message:"cannot be blank"})}))}function Ee(t){v().subscribe(P(t.type,t.id),(function(e,n){if(t.validate(n),t.errors.length)return v().publish(L,{type:t.type,id:t.id,errors:t.errors});for(const e in n)t[e]=n[e];v().publish(N(t.type,t.id))}))}function Se(t){const e=fe;v().subscribe(A(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],v().publish(N(t.type,t.id))}))}function Ie(t){const e=me;v().subscribe(q(t.type,t.id),(function(n,o){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +o.direction,0),e.length-1)],v().publish(N(t.type,t.id))}))}function ke(t,e,n){const o=e+"s";function r(o,r=!1){const a=Object.values(o[e+"sCollectionData"]||{}).map((e=>n(Object.assign(e,{belongs:{[t.type]:t.id}})))),i=a.map((n=>({obj:n,attrWrapper:o=>`${e+"sCollectionData"}[${n[t.type+"Index"]}][${o}]`})));if(r){if(!t.valid())return;t.associatedValidations=i}if(t.validateAssociated(i),t.errors.length)return v().publish(L,{type:t.type,errors:t.errors});v().publish($(e),{collectionItems:a})}t[o]||=[],v().subscribe(H(e),(function(e,n){const r=n?.[t.type]?.[t.id];if(r){t[o]=r.map((t=>t.id));const e=t.type+"Index";r.sort(((t,n)=>+t[e]-+n[e])).forEach(((t,n)=>t[e]=n+1))}v().publish(N(t.type,t.id))})),r(t,!0),delete t[e+"sCollectionData"],v().subscribe(I(t.type,t.id,e),(function(t,e){De(e),r(e)}))}function je(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function Me(t,e){v().subscribe(U(t.type,t.id,e),(function(n,o){const r=t.belongs[e],a=o.belongId;t.belongs[e]=a,v().publish(Y(t.type),{id:t.id,belongType:e,oldBelongId:r,newBelongId:a}),v().publish(N(t.type,t.id))}))}function Oe(t,e=[]){let n=1;const o=t.itemType+"s";function r(e){const n={};e.forEach((e=>{Object.entries(e.belongs||{}).forEach((([e,r])=>{n[e]||={},n[e][r]||=t[o].filter((t=>t.belongs[e]==r))}))})),v().publish(H(t.itemType),n)}t[o]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(e){return t[o].find((t=>e==t.id))},t.withIds=function(e){return t[o].filter((t=>e.includes(t.id)))},v().subscribe(Y(t.itemType),(function(e,n){const r=n.belongType,a=n.oldBelongId,i=n.newBelongId;t[o].find((t=>t.id==n.id)).belongs[r]=i,v().publish(H(t.itemType),{[r]:{[a]:t[o].filter((t=>t.belongs[r]==a)),[i]:t[o].filter((t=>t.belongs[r]==i))}})})),v().subscribe(S(t.itemType),(function(e,a){console.log(a),De(a);const i=t.itemFactory(Object.assign({id:n++},a));if(!i.valid())return v().publish(L,{type:t.itemType,errors:i.errors});t[o].unshift(i),r([i]),v().publish(F(t.itemType))})),v().subscribe($(t.itemType),(function(e,a){r(a.collectionItems.map((e=>{const r=Object.assign({id:n++},e);return t[o].unshift(r),r}))),v().publish(F(t.itemType))})),v().subscribe(D(t.itemType),(function(e,n){if(0==n.id)return;const a=t[o].find((t=>t.id==n.id));t[o].splice(t[o].indexOf(a),1),r([a]),v().publish(F(t.itemType))}))}function De(t){const e=/(.+)\[(.+)\]/;let n;for(;(n=Object.keys(t).filter((t=>e.test(t)))).length>0;)n.forEach((n=>{const[o,r]=n.match(e).slice(1);t[o]||={},t[o][r]=t[n],delete t[n]}))}function $e(t){const e=Object.assign({type:"project"},t);return Ee(e),Te(e),Ce(e,["title"]),ke(e,"todoItem"),e}function Le(t){const e=Object.assign({type:"checklistItem"},t);return[Te,Ee,Se].forEach((t=>t(e))),Ce(e,["title"]),je(e,"todoItem"),e}function Pe(t){const e=Object.assign({type:"todoItem"},t);return[Te,Ee,Se,Ie].forEach((t=>t(e))),[je,Me].forEach((t=>t(e,"project"))),Ce(e,["title"]),ke(e,"checklistItem",Le),e}v().subscribe(R,(function(t,e){ye=e})),v().subscribe(W,ge),v().subscribe(T,ge),v().subscribe("rendered.view",(function(){ve(document.querySelectorAll(".index"),C),ve(document.querySelectorAll(".new"),E),ve(document.querySelectorAll(".show"),k),ve(document.querySelectorAll(".hide"),j),ve(document.querySelectorAll(".edit-attribute"),M),ve(document.querySelectorAll(".edit-belong"),O),ve(document.querySelectorAll(".update-status"),A,{extraArgs:["id"]}),ve(document.querySelectorAll(".update-priority"),q,{extraArgs:["id"]}),ve(document.querySelectorAll(".destroy"),D),ve(document.querySelectorAll(".back"),T)})),v().subscribe("rendered.view.new",(function(){we(S,["type"])})),v().subscribe("rendered.view.collection.new",(function(){we(I,["type","id","collectionType"])})),v().subscribe("rendered.view.edit.attribute",(function(t,e){document.querySelectorAll('input:not([type="checkbox"]):not([type="radio"]),textarea').forEach((t=>{const n=(t=xe(t)).closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),t.selectionStart&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),t.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==t&&v().publish(P(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))})),pe.includes(t.type)&&t.addEventListener("focusout",(()=>v().publish(P(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))))})),we(P,["type","id"])})),v().subscribe("rendered.view.edit.belong",(function(){we(U,["type","id","belongType"])}));const Ae={ProjectsList:function(t){const e={itemFactory:$e,itemType:"project"};return Oe(e,t),e},TodoItemsList:function(t){const e={itemFactory:Pe,itemType:"todoItem"};return Oe(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:Le,itemType:"checklistItem"};return Oe(e,t),e}};let qe={};v().subscribe(x,(function(t,e){for(const t in e)qe[t]=Ae[t[0].toUpperCase()+t.slice(1)](e[t]);v().publish(W)})),v().publish(w)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,