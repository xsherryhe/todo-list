(()=>{var t={689:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.destroy, button.back {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n/* Move to more appropriate location*/\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,6BAA6B;EAC7B,YAAY;EACZ,UAAU;AACZ;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;;AAEA;EACE,aAAa;AACf;;AAEA,qCAAqC;AACrC;EACE,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:["html {\n  font-size: 18px;\n}\n\nbody {\n  padding: 1rem 3rem;\n}\n\nh1, h2, h3, ol {\n  margin: 0.25rem 0;\n}\n\nul {\n  list-style-type: '⦾  ';\n}\n\nli {\n  text-align: start;\n}\n\nbutton {\n  font-size: 1rem;\n  cursor: pointer;\n  padding: 0.5rem 1rem;\n}\n\nbutton.link {\n  background-color: transparent;\n  border: none;\n  padding: 0;\n}\n\nbutton.link:hover {\n  text-decoration: underline;\n}\n\nbutton.symbol {\n  padding: 0;\n  min-width: 1.5rem;\n  min-height: 1.5rem;\n}\n\nbutton.destroy, button.back {\n  font-size: 0.8rem;\n  padding: 0.25rem 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n/* Move to more appropriate location*/\n.update-status {\n  min-height: 28px;\n  min-width: 28px;\n}\n"],sourceRoot:""}]);const s=a},542:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".edit-attribute-form input {\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0 0 0.1rem;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n","",{version:3,sources:["webpack://./src/styles/edit.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,+BAA+B;EAC/B,mBAAmB;AACrB;;AAEA;EACE,8BAA8B;AAChC",sourcesContent:[".edit-attribute-form input {\n  min-width: 0;\n  border: none;\n  outline: none;\n  border-bottom: 1px black dashed;\n  padding: 0 0 0.1rem;\n}\n\n.edit-attribute-form input:focus {\n  border-bottom: 1px black solid;\n}\n"],sourceRoot:""}]);const s=a},713:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n',"",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,SAAS;AACX",sourcesContent:['input:not([type="checkbox"],[type="radio"]),textarea,select {\n  font-size: 1rem;\n  padding: 0.25rem;\n  min-width: 15rem;\n}\n\n.error {\n  margin: 0;\n}\n'],sourceRoot:""}]);const s=a},240:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n',"",{version:3,sources:["webpack://./src/styles/index-projects.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,aAAa;EACb,+CAA+C;EAC/C,oBAAoB;EACpB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,WAAW;AACb",sourcesContent:['.intro-heading h2 {\n  font-size: 1.25rem;\n}\n\n.intro .new[data-type="todoItem"] {\n  display: block;\n  margin: 2rem auto;\n  padding: 1rem 1.5rem; \n  font-size: 1.25rem;\n  min-width: 35vw;\n}\n\n.projects-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.project {\n  margin: 1rem auto;\n  min-width: 65vw;\n  display: grid;\n  grid-template: repeat(2, 1fr) / 1fr max-content;\n  justify-items: start;\n  align-items: center;\n  column-gap: 1rem;\n}\n\n.project h3 {\n  font-size: 1.25rem;\n}\n\n.project-preview {\n  grid-row: 2;\n}\n'],sourceRoot:""}]);const s=a},415:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-checklistItem.css"],names:[],mappings:"AAAA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:['.new[data-type="checklistItem"] {\n  color: blue;\n}\n\n.checklist-item.field[data-type="checklistItem"] {\n  max-width: 50vw;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.checklist-item.field[data-type="checklistItem"] input {\n  flex: 1 1 0;\n}\n\n.checklist-item.field[data-type="checklistItem"] button {\n  align-self: center;\n}\n'],sourceRoot:""}]);const s=a},156:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n',"",{version:3,sources:["webpack://./src/styles/new-project.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;EACpB,8DAA8D;EAC9D,aAAa;EACb,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB",sourcesContent:['.new-form[data-type="project"] {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n  grid-template: repeat(2, max-content) / repeat(4, max-content);\n  display: grid;\n  column-gap: 0.5rem;\n  align-items: center;\n}\n\n.new-form[data-type="project"] .error {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n'],sourceRoot:""}]);const s=a},599:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,'.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n',"",{version:3,sources:["webpack://./src/styles/new-todoItem.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;AACrB",sourcesContent:['.new-form[data-type="todoItem"] {\n  margin: 1rem auto;\n  width: 50vw;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.new-form[data-type="todoItem"] button {\n  align-self: flex-start;\n}\n\n.new-form[data-type="todoItem"] .field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\n.new-form[data-type="todoItem"] .submit {\n  align-self: center;\n  padding: 0.5rem 4rem;\n  margin-top: 0.25rem;\n}\n'],sourceRoot:""}]);const s=a},416:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit {\n  font-size: 1.25rem;\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n","",{version:3,sources:["webpack://./src/styles/show-project.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,+BAA+B;AACjC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uDAAuD;EACvD,oBAAoB;EACpB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,uBAAuB;EACvB,oBAAoB;AACtB",sourcesContent:[".project-heading {\n  margin: 1rem 0;\n  display: flex;\n  justify-content: center;\n}\n\n.project-heading * {\n  font-size: 1.75rem;\n}\n\n.project-heading.project-heading input {\n  font-size: 1.5rem;\n  border-bottom: 2px black dashed;\n}\n\n.project-heading.project-heading input:focus {\n  border-bottom: 2px black solid;\n}\n\n.project-heading .submit {\n  font-size: 1.25rem;\n  min-width: 2rem;\n  min-height: 2rem;\n}\n\n.todo-items-heading {\n  display: grid;\n  grid-template: repeat(2, max-content) / max-content 1fr;\n  justify-items: start;\n  align-items: center;\n  column-gap: 0.5rem;\n}\n\n.todo-items-heading .new-form {\n  grid-row: 2;\n  grid-column: 1 / span 2;\n  justify-self: center;\n}\n"],sourceRoot:""}]);const s=a},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<t.length;d++){var u=[].concat(t[d]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},798:function(t,e,n){t=n.nmd(t),function(n,r){"use strict";var o={};n.PubSub?(o=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=o,function(t){var e={},n=-1;function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function i(t,n,i,a){var s,c=e[n],d=a?o:r;if(Object.prototype.hasOwnProperty.call(e,n))for(s in c)Object.prototype.hasOwnProperty.call(c,s)&&d(c[s],t,i)}function a(t){var n=String(t);return Boolean(Object.prototype.hasOwnProperty.call(e,n)&&function(t){var e;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!0;return!1}(e[n]))}function s(t,e,n,r){var o=function(t,e,n){return function(){var r=String(t),o=r.lastIndexOf(".");for(i(t,t,e,n);-1!==o;)o=(r=r.substr(0,o)).lastIndexOf("."),i(t,r,e,n);i(t,"*",e,n)}}(t="symbol"==typeof t?t.toString():t,e,r);return!!function(t){for(var e=String(t),n=a(e)||a("*"),r=e.lastIndexOf(".");!n&&-1!==r;)r=(e=e.substr(0,r)).lastIndexOf("."),n=a(e);return n}(t)&&(!0===n?o():setTimeout(o,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,Object.prototype.hasOwnProperty.call(e,t)||(e[t]={});var o="uid_"+String(++n);return e[t][o]=r,o},t.subscribeAll=function(e){return t.subscribe("*",e)},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&delete e[n]},t.countSubscriptions=function(t){var n,r,o=0;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)){for(r in e[n])o++;break}return o},t.getSubscriptions=function(t){var n,r=[];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t)&&r.push(n);return r},t.unsubscribe=function(n){var r,o,i,a="string"==typeof n&&(Object.prototype.hasOwnProperty.call(e,n)||function(t){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!a&&"string"==typeof n,c="function"==typeof n,d=!1;if(!a){for(r in e)if(Object.prototype.hasOwnProperty.call(e,r)){if(o=e[r],s&&o[n]){delete o[n],d=n;break}if(c)for(i in o)Object.prototype.hasOwnProperty.call(o,i)&&o[i]===n&&(delete o[i],d=!0)}return d}t.clearSubscriptions(n)}}(o)),void 0!==t&&t.exports&&(e=t.exports=o),e.PubSub=o,t.exports=e=o}("object"==typeof window&&window||this)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],u=i[d]||0,l="".concat(d," ").concat(u);i[d]=u+1;var m=n(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var f=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),d=0;d<i.length;d++){var u=n(i[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.nc=void 0;var r={};(()=>{"use strict";n.d(r,{O:()=>Ke,w:()=>t});var t={};n.r(t),n.d(t,{fn:()=>je,oF:()=>Ie,yo:()=>Te,tA:()=>ke,Sn:()=>Se,Do:()=>Be});var e=n(379),o=n.n(e),i=n(795),a=n.n(i),s=n(569),c=n.n(s),d=n(565),u=n.n(d),l=n(216),m=n.n(l),p=n(589),f=n.n(p),h=n(689),b={};b.styleTagTransform=f(),b.setAttributes=u(),b.insert=c().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=m(),o()(h.Z,b),h.Z&&h.Z.locals&&h.Z.locals;var g=n(713),y={};y.styleTagTransform=f(),y.setAttributes=u(),y.insert=c().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=m(),o()(g.Z,y),g.Z&&g.Z.locals&&g.Z.locals;var A=n(240),v={};v.styleTagTransform=f(),v.setAttributes=u(),v.insert=c().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=m(),o()(A.Z,v),A.Z&&A.Z.locals&&A.Z.locals;var w=n(156),E={};E.styleTagTransform=f(),E.setAttributes=u(),E.insert=c().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=m(),o()(w.Z,E),w.Z&&w.Z.locals&&w.Z.locals;var C=n(599),x={};x.styleTagTransform=f(),x.setAttributes=u(),x.insert=c().bind(null,"head"),x.domAPI=a(),x.insertStyleElement=m(),o()(C.Z,x),C.Z&&C.Z.locals&&C.Z.locals;var T=n(415),k={};k.styleTagTransform=f(),k.setAttributes=u(),k.insert=c().bind(null,"head"),k.domAPI=a(),k.insertStyleElement=m(),o()(T.Z,k),T.Z&&T.Z.locals&&T.Z.locals;var B=n(416),j={};j.styleTagTransform=f(),j.setAttributes=u(),j.insert=c().bind(null,"head"),j.domAPI=a(),j.insertStyleElement=m(),o()(B.Z,j),B.Z&&B.Z.locals&&B.Z.locals;var S=n(542),I={};I.styleTagTransform=f(),I.setAttributes=u(),I.insert=c().bind(null,"head"),I.domAPI=a(),I.insertStyleElement=m(),o()(S.Z,I),S.Z&&S.Z.locals&&S.Z.locals;var $=n(798),M=n.n($);const D="initialize",O="dataInitialized",P="back",L=t=>`index.${t}`,W=t=>`new.${t}`,q=t=>`create.${t}`,U=(t,e,n)=>`create.collection.${n}.${t}.${e}`,N=t=>`show.${t}`,Y=t=>`hide.${t}`,z=t=>`edit.attribute.${t}`,Z=t=>`edit.belong.${t}`,F=t=>`destroy.${t}`,H=t=>`created.collection.${t}`,R="error.validation",X=(t,e)=>`update.${t}.${e}`,Q=(t,e)=>`update.${t}.status.${e}`,G=(t,e)=>`update.${t}.priority.${e}`,J=(t,e,n)=>`update.${t}.belong.${n}.${e}`,_="updated.data",V=(t,e)=>`updated.data.item.${t}.${e}`,K=t=>`updated.data.list.${t}`,tt=t=>`updated.${t}.belong`,et=t=>`updated.${t}.collection`,nt="rendered.page",rt=t=>`rendered.view.new.${t}`,ot=t=>`rendered.view.show.${t}`;function it(){const t=JSON.parse(localStorage.data),e={};for(const n in t)e[n]=JSON.parse(t[n]);return e}function at(t){const e={};for(const n in t)e[n]=JSON.stringify(t[n]);localStorage.data=JSON.stringify(e)}function st(){document.body.innerHTML="",function(){const t=document.createElement("div");t.classList.add("intro"),t.innerHTML='<div class="intro-heading">\n      <h1>Actionality</h1>\n      <h2>Your one-stop to-do app</h2>\n     </div>\n     <button class="new" data-type="todoItem" data-project-id="0">\n      Add a New To-Do\n     </button>',document.body.append(t)}(),function(){const t=document.createElement("div");t.classList.add("projects-heading"),t.innerHTML='<h2>My Projects</h2>\n     <button class="new symbol" data-type="project">+</button>',document.body.append(t)}(),Ke.projectsList.projects.forEach((t=>{const e=document.createElement("button"),n=document.createElement("ul");e.classList.add("project","show"),e.dataset.type=t.type,e.dataset.id=t.id,e.dataset.todoItemsFull="",e.innerHTML=`<h3>${t.title}</h3>`,t.id&&(e.innerHTML+=`<button class="destroy" \n               data-type="${t.type}" data-id="${t.id}">\n        Remove\n       </button>`),n.classList.add("project-preview"),Ke.todoItemsList.withIds(t.todoItems).slice(0,Te).forEach((t=>{const e=document.createElement("li");e.textContent=t.title,n.append(e)})),e.append(n),document.body.append(e)})),M().publish(nt,st),M().publish("rendered.view.index.project")}function ct(t,e,n,r={}){const o=document.createElement("div"),i=Se[t.type].includes(e),a=r.attributeText||t[e]||"None";o.classList.add("attribute"),o.dataset.type=t.type,o.dataset.id=t.id,o.dataset.attribute=e,o.innerHTML=`<div>${r.elementText||""}${i?a:""}</div>\n     <button class="edit-attribute link" data-type="${t.type}" data-id="${t.id}"\n             data-attribute="${e}" data-attribute-type="${n}"\n             data-attribute-value="${t[e]||""}">\n        ${i?"Edit":a}\n     </button>`,(r.parentElement||document.body).append(o)}function dt(t=document,e=!0){t.querySelectorAll('button,input[type="checkbox"],input[type="radio"]').forEach((t=>t.disabled=e))}function ut(t){return t.split(" ").filter((t=>t)).map(Number)}function lt(t){return t.split(/(?=[A-Z])/).map((t=>t.toLowerCase())).join("-")}function mt(t,e){const n=Ke.todoItemsList.withId(e.id).belongs[e.belongType],r=document.querySelector(".todo-items").dataset.full,o=t.includes("show")?r+` ${e.id}`:ut(r).filter((t=>t!==+e.id)).join(" ");M().publish(N(e.belongType),{id:n,todoItemsFull:o})}M().subscribe(D,function(t=it){return function(){const e=t()||{projectsList:[{id:0,title:"My To-Dos",todoItems:[1]}],todoItemsList:[{id:1,title:"Sample To-Do",priority:"Low",status:"Incomplete"}],checklistItemsList:[]};M().publish(O,e)}}(it)),M().subscribe("updated",function(t=at){return function(){const e={};for(const t in Ke)e[t]=Ke[t].toStorage();t(e)}}(at)),M().subscribe(L("project"),st),M().subscribe(L("todoItem"),(function(t,e){const n=ut(e.full),r=document.createElement("div");r.classList.add("todo-items"),r.dataset.full=e.full,Ke.todoItemsList.withIds(e.ids).forEach((t=>M().publish(N("todoItem"),{id:t.id,full:n.includes(t.id),belongType:e.belongType,parentElement:r}))),document.body.append(r)})),M().subscribe(N("todoItemFull"),mt),M().subscribe(Y("todoItemFull"),mt),M().subscribe(L("checklistItem"),(function(t,e){(function(t){const e=document.createElement("h3");e.textContent="Checklist",(t||document.body).append(e)})(e.parentElement),function(t,e,n){const r=document.createElement("ol");Ke.checklistItemsList.withIds(t).sort(((t,n)=>+t[e+"Index"]-+n[e+"Index"])).forEach((t=>{M().publish(N("checklistItem"),{id:t.id,elementType:"li",parentElement:r})})),(n||document.body).append(r)}(e.ids,e.belongType,e.parentElement),function(t,e,n){const r=document.createElement("form");r.dataset.type=t,r.dataset.id=e,r.dataset.collectionType="checklistItem",r.innerHTML=`<button class="back hidden">←</button>\n     <button class="new link" data-type="checklistItem" \n             data-belong-type="${t}" data-belong-id="${e}">\n      Add a Checklist Item\n     </button>\n     <button class="submit hidden">Submit</button>`,(n||document.body).append(r)}(e.belongType,e.belongId,e.parentElement)})),M().subscribe(W("project"),(function(){dt();const t=document.querySelector('.new[data-type="project"]'),e=document.createElement("form");e.classList.add("new-form"),e.dataset.type="project",e.innerHTML='<button class="back symbol">←</button>\n     <label for="title">New Project</label>\n     <input type="text" name="title" id="title">\n     <button class="submit symbol">✓</button>',t.replaceWith(e),M().publish(rt("project"))})),M().subscribe(W("todoItem"),(function(t,e){dt();const n=document.querySelector('.new[data-type="todoItem"]'),r=document.createElement("form");r.classList.add("new-form"),r.dataset.type="todoItem",r.innerHTML=`<button class="back">Back</button>\n     <div class="field">\n      <label for="title">New To-Do</label>\n      <input type="text" name="title" id="title">\n     </div>\n     <div class="field">\n      <label for="dueDate">Due Date</label>\n      <input type="datetime-local" name="dueDate" id="dueDate">\n     </div>\n     <div class="field">\n      <label for="description" class="textarea-label">Description</label>\n      <textarea name="description" id="description"></textarea>\n     </div>\n     <div class="field">\n      <label for="notes" class="textarea-label">Notes</label>\n      <textarea name="notes" id="notes"></textarea>\n     </div>\n     <div class="field">\n      <label for="belongs[project]">Project</label>\n      <select name="belongs[project]" id="belongs[project]">\n        ${Ke.projectsList.projects.map((t=>`<option value="${t.id}" ${t.id==+e.projectId?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n      </select>\n     </div>\n     <div class="field">\n      <label for="priority">Priority</label>\n      <select name="priority" id="priority">\n        ${ke.map((t=>`<option value="${t}">${t}</option>`)).join("\n")}\n      </select>\n     </div>\n     <input type="hidden" name="status" id="status" value="${Be[0]}">\n     <h3>Checklist</h3>\n     <button class="new link" data-belong-type="todoItem" data-type="checklistItem" data-index="1">Add a Checklist Item</button>\n     <button class="submit">Submit</button>`,n.replaceWith(r),M().publish(rt("todoItem"))})),M().subscribe(W("checklistItem"),(function(t,{belongType:e,belongId:n}){n&&dt();const r=(n?`.${lt(e)}[data-id="${n}"] `:"")+'.new[data-type="checklistItem"]',o=document.querySelector(r),i=o.closest("form"),a=i.querySelector(".back"),s=i.querySelector(".submit"),c=document.createElement("div"),d=1+document.querySelectorAll(".checklist-item.field").length+(n?Ke[e+"sList"].withId(n).checklistItems.length:0),u=t=>`checklistItemsCollectionData[${d}][${t}]`;c.classList.add("field","checklist-item"),c.dataset.type="checklistItem",c.dataset.index=`${d}`,c.innerHTML=`<input type="hidden" name="${u(e+"Index")}" id="${u(e+"Index")}" value="${d}">\n     <label for="${u("title")}">${d}.</label>\n     <input type="text" name="${u("title")}" id="${u("title")}">\n     <input type="hidden" name="${u("status")}" id="${u("status")}" value="${Be[0]}">\n     <button class="hide symbol" data-type="new-checklistItem" data-index="${d}" \n             data-belong-type="${e}" ${n?`data-belong-id=${n}`:""}>X</button>`,[a,s].forEach((t=>t?.classList?.remove("hidden"))),o.insertAdjacentElement("beforebegin",c),dt(i,!1),M().publish(n?`rendered.view.collection.new.${e}`:rt("checklistItem"))})),M().subscribe(Y("new-checklistItem"),(function(t,{belongType:e,belongId:n,index:r}){const o=n?`.${lt(e)}[data-id="${n}"] form[data-collection-type="checklistItem"]`:`form[data-type="${e}"]`,i=document.querySelector(o);i.querySelector(`.checklist-item.field[data-index="${r}"]`).remove();const a=i.querySelectorAll(".checklist-item.field");if(n&&0==a.length){dt(document,!1);[i.querySelector(".back"),i.querySelector(".submit")].forEach((t=>t?.classList?.add("hidden")))}const s=1+(n?Ke[e+"sList"].withId(n).checklistItems.length:0);a.forEach(((t,n)=>{const r=n+s,o=t.querySelectorAll("input"),i=t.querySelector(`input[name*="${e}Index"]`),a=t.querySelector('label[for*="title"]'),c=t.querySelector(".hide");o.forEach((t=>{["name","id"].forEach((e=>t[e]=t[e].replace(/\d+/,r)))})),t.dataset.index=r,i.value=r,a.textContent=`${r}.`,c.dataset.index=r}))})),M().subscribe(N("project"),(function t(e,n){document.body.innerHTML="";const r=Ke.projectsList.withId(n.id);(function(t){const e=document.createElement("button"),n=document.createElement("div"),r=document.createElement("div");e.classList.add("index"),e.dataset.type=t.type,e.textContent="All Projects",n.classList.add("project-heading"),ct(t,"title","text",{parentElement:n}),r.append(n),r.innerHTML+=`<div class="todo-items-heading">\n      <h2>To-Dos</h2>\n      <button class="new symbol" data-type="todoItem" data-project-id="${t.id}">+</button>\n    </div>`,document.body.append(e,r)})(r),function(t,e){M().publish(L("todoItem"),{belongType:t.type,ids:t.todoItems,full:e})}(r,n.todoItemsFull),M().publish(nt,t.bind(null,e,n)),M().publish(ot("project"))}));var pt={};function ft(){return pt}function ht(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function bt(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function gt(t){return gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gt(t)}function yt(t){bt(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===gt(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function At(t){bt(1,arguments);var e=yt(t);return e.setHours(0,0,0,0),e}var vt=864e5;function wt(t,e){bt(2,arguments);var n=At(t),r=At(e),o=n.getTime()-ht(n),i=r.getTime()-ht(r);return Math.round((o-i)/vt)}function Et(t){return Et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Et(t)}function Ct(t){return bt(1,arguments),t instanceof Date||"object"===Et(t)&&"[object Date]"===Object.prototype.toString.call(t)}function xt(t){if(bt(1,arguments),!Ct(t)&&"number"!=typeof t)return!1;var e=yt(t);return!isNaN(Number(e))}function Tt(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function kt(t,e){bt(2,arguments);var n=yt(t).getTime(),r=Tt(e);return new Date(n+r)}function Bt(t,e){bt(2,arguments);var n=Tt(e);return kt(t,-n)}var jt=864e5;function St(t){bt(1,arguments);var e=1,n=yt(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function It(t){bt(1,arguments);var e=yt(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=St(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=St(i);return e.getTime()>=o.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}function $t(t){bt(1,arguments);var e=It(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=St(n);return r}var Mt=6048e5;function Dt(t,e){var n,r,o,i,a,s,c,d;bt(1,arguments);var u=ft(),l=Tt(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=yt(t),p=m.getUTCDay(),f=(p<l?7:0)+p-l;return m.setUTCDate(m.getUTCDate()-f),m.setUTCHours(0,0,0,0),m}function Ot(t,e){var n,r,o,i,a,s,c,d;bt(1,arguments);var u=yt(t),l=u.getUTCFullYear(),m=ft(),p=Tt(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==r?r:null===(c=m.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(l+1,0,p),f.setUTCHours(0,0,0,0);var h=Dt(f,e),b=new Date(0);b.setUTCFullYear(l,0,p),b.setUTCHours(0,0,0,0);var g=Dt(b,e);return u.getTime()>=h.getTime()?l+1:u.getTime()>=g.getTime()?l:l-1}function Pt(t,e){var n,r,o,i,a,s,c,d;bt(1,arguments);var u=ft(),l=Tt(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),m=Ot(t,e),p=new Date(0);p.setUTCFullYear(m,0,l),p.setUTCHours(0,0,0,0);var f=Dt(p,e);return f}var Lt=6048e5;function Wt(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const qt=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return Wt("yy"===e?r%100:r,e.length)},Ut=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):Wt(n+1,2)},Nt=function(t,e){return Wt(t.getUTCDate(),e.length)},Yt=function(t,e){return Wt(t.getUTCHours()%12||12,e.length)},zt=function(t,e){return Wt(t.getUTCHours(),e.length)},Zt=function(t,e){return Wt(t.getUTCMinutes(),e.length)},Ft=function(t,e){return Wt(t.getUTCSeconds(),e.length)},Ht=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return Wt(Math.floor(r*Math.pow(10,n-3)),e.length)};var Rt={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return qt(t,e)},Y:function(t,e,n,r){var o=Ot(t,r),i=o>0?o:1-o;return"YY"===e?Wt(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):Wt(i,e.length)},R:function(t,e){return Wt(It(t),e.length)},u:function(t,e){return Wt(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return Wt(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return Wt(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Ut(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return Wt(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){bt(1,arguments);var n=yt(t),r=Dt(n,e).getTime()-Pt(n,e).getTime();return Math.round(r/Lt)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):Wt(o,e.length)},I:function(t,e,n){var r=function(t){bt(1,arguments);var e=yt(t),n=St(e).getTime()-$t(e).getTime();return Math.round(n/Mt)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):Wt(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Nt(t,e)},D:function(t,e,n){var r=function(t){bt(1,arguments);var e=yt(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/jt)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):Wt(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Wt(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Wt(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return Wt(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Yt(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):zt(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):Wt(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):Wt(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Zt(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Ft(t,e)},S:function(t,e){return Ht(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Qt(o);case"XXXX":case"XX":return Gt(o);default:return Gt(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Qt(o);case"xxxx":case"xx":return Gt(o);default:return Gt(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Xt(o,":");default:return"GMT"+Gt(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Xt(o,":");default:return"GMT"+Gt(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return Wt(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return Wt((r._originalDate||t).getTime(),e.length)}};function Xt(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=e||"";return n+String(o)+a+Wt(i,2)}function Qt(t,e){return t%60==0?(t>0?"-":"+")+Wt(Math.abs(t)/60,2):Gt(t,e)}function Gt(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+Wt(Math.floor(o/60),2)+n+Wt(o%60,2)}const Jt=Rt;var _t=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Vt=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const Kt={p:Vt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return _t(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",_t(o,e)).replace("{{time}}",Vt(i,e))}};var te=["D","DD"],ee=["YY","YYYY"];function ne(t){return-1!==te.indexOf(t)}function re(t){return-1!==ee.indexOf(t)}function oe(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var ie={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function ae(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const se={date:ae({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:ae({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:ae({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ce={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function de(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var a=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const ue={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:de({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:de({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:de({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:de({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:de({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function le(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,s=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(c)?pe(c,(function(t){return t.test(s)})):me(c,(function(t){return t.test(s)}));a=t.valueCallback?t.valueCallback(d):d,a=n.valueCallback?n.valueCallback(a):a;var u=e.slice(s.length);return{value:a,rest:u}}}function me(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function pe(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var fe,he={ordinalNumber:(fe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(fe.matchPattern);if(!n)return null;var r=n[0],o=t.match(fe.parsePattern);if(!o)return null;var i=fe.valueCallback?fe.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var a=t.slice(r.length);return{value:i,rest:a}}),era:le({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:le({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:le({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:le({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:le({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const be={code:"en-US",formatDistance:function(t,e,n){var r,o=ie[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:se,formatRelative:function(t,e,n,r){return ce[t]},localize:ue,match:he,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ge=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ye=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Ae=/^'([^]*?)'?$/,ve=/''/g,we=/[a-zA-Z]/;function Ee(t,e,n){var r,o,i,a,s,c,d,u,l,m,p,f,h,b,g,y,A,v;bt(2,arguments);var w=String(e),E=ft(),C=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:E.locale)&&void 0!==r?r:be,x=Tt(null!==(i=null!==(a=null!==(s=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(d=n.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==a?a:null===(l=E.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==i?i:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=Tt(null!==(p=null!==(f=null!==(h=null!==(b=null==n?void 0:n.weekStartsOn)&&void 0!==b?b:null==n||null===(g=n.locale)||void 0===g||null===(y=g.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==h?h:E.weekStartsOn)&&void 0!==f?f:null===(A=E.locale)||void 0===A||null===(v=A.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==p?p:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!C.localize)throw new RangeError("locale must contain localize property");if(!C.formatLong)throw new RangeError("locale must contain formatLong property");var k=yt(t);if(!xt(k))throw new RangeError("Invalid time value");var B=ht(k),j=Bt(k,B),S={firstWeekContainsDate:x,weekStartsOn:T,locale:C,_originalDate:k},I=w.match(ye).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,Kt[e])(t,C.formatLong):t})).join("").match(ge).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Ce(r);var i=Jt[o];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!re(r)||oe(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!ne(r)||oe(r,e,String(t)),i(j,r,C.localize,S);if(o.match(we))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("");return I}function Ce(t){var e=t.match(Ae);return e?e[1].replace(ve,"'"):t}function xe(t,e,n){var r,o,i,a,s,c,d,u,l,m;bt(2,arguments);var p=yt(t),f=yt(e),h=ft(),b=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:h.locale)&&void 0!==r?r:be,g=Tt(null!==(i=null!==(a=null!==(s=null!==(c=null==n?void 0:n.weekStartsOn)&&void 0!==c?c:null==n||null===(d=n.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:h.weekStartsOn)&&void 0!==a?a:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==i?i:0);if(!b.localize)throw new RangeError("locale must contain localize property");if(!b.formatLong)throw new RangeError("locale must contain formatLong property");if(!b.formatRelative)throw new RangeError("locale must contain formatRelative property");var y,A=wt(p,f);if(isNaN(A))throw new RangeError("Invalid time value");y=A<-6?"other":A<-1?"lastWeek":A<0?"yesterday":A<1?"today":A<2?"tomorrow":A<7?"nextWeek":"other";var v=Bt(p,ht(p)),w=Bt(f,ht(f)),E=b.formatRelative(y,v,w,{locale:b,weekStartsOn:g});return Ee(p,E,{locale:b,weekStartsOn:g})}M().subscribe(N("todoItem"),(function(t,e){const n=Ke.todoItemsList.withId(e.id);(function(t,e){const n=document.querySelector(`.todo-item[data-id="${t.id}"`),r=document.createElement("div"),o=document.createElement("button"),i=document.createElement("button"),a=document.createElement("button"),s=document.createElement("button");n?.remove(),r.classList.add(t.priority,t.status,"todo-item"),r.dataset.id=t.id,ct(t,"title","text",{parentElement:r}),o.classList.add("update-status"),o.dataset.type=t.type,o.dataset.id=t.id,o.textContent=Be.indexOf(t.status)?"✓":"",r.append(o),ct(t,"dueDate","datetime-local",{parentElement:r,elementText:"Due: ",attributeText:t.dueDate?xe(new Date(t.dueDate),new Date):"None"}),[i,a].forEach((n=>{n.dataset.type=t.type+"Full",n.dataset.id=t.id,n.dataset.belongType=e.belongType||""})),i.classList.add("show"),i.textContent="Expand",a.classList.add("hide","hidden"),a.textContent="Shrink",s.dataset.type=t.type,s.dataset.id=t.id,s.classList.add("destroy"),s.textContent="-",r.append(i,a,s),(e.parentElement||document.body).append(r)})(n,{parentElement:e.parentElement,belongType:e.belongType}),e.full&&function(t,e){const n=e.querySelector(`.todo-item[data-id="${t.id}"]`),r=n.querySelector(`.show[data-type="${t.type+"Full"}"]`),o=n.querySelector(`.hide[data-type="${t.type+"Full"}"]`),i=document.createElement("button"),a=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button");ct(t,"description","textarea",{parentElement:n,elementText:"Description: "}),ct(t,"notes","textarea",{parentElement:n,elementText:"Notes: "}),[i,s,c].forEach((e=>{e.dataset.type=t.type,e.dataset.id=t.id})),i.classList.add("edit-belong"),i.dataset.belongType="project",i.dataset.belongId=t.belongs.project,i.textContent="Change Project",a.textContent=`Priority: ${t.priority||"None"}`,[s,c].forEach((t=>t.classList.add("update-priority"))),s.dataset.direction=-1,s.textContent="v",c.dataset.direction=1,c.textContent="^",a.append(s,c),r.classList.add("hidden"),o.classList.remove("hidden"),n.append(i,a),function(t,e){M().publish(L("checklistItem"),{belongType:t.type,belongId:t.id,ids:t.checklistItems,parentElement:e})}(t,n)}(n,e.parentElement),M().publish(ot("todoItem"))})),M().subscribe(N("checklistItem"),(function(t,e){const n=Ke.checklistItemsList.withId(e.id),r=document.createElement(e.elementType||"div"),o=document.createElement("button"),i=document.createElement("button");r.classList.add(n.status,"checklist-item"),r.dataset.id=n.id,ct(n,"title","text",{parentElement:r}),[o,i].forEach((t=>{t.dataset.type=n.type,t.dataset.id=n.id})),o.classList.add("update-status"),o.textContent=Be.indexOf(n.status)?"✓":"",i.classList.add("destroy"),i.textContent="-",r.append(o,i),(e.parentElement||document.body).append(r),M().publish(ot("checklistItem"))})),M().subscribe("edit.attribute",(function(t,{type:e,id:n,attribute:r,attributeType:o,attributeValue:i}){dt();const a=`.attribute[data-type="${e}"][data-id="${n}"][data-attribute="${r}"]`,s=document.querySelector(a),c=document.createElement("form");c.classList.add("edit-attribute-form"),c.dataset.type=e,c.dataset.id=n,c.dataset.attribute=r;const d="textarea"==o;c.innerHTML=`${je.includes(o)?"":'<button class="back">←</button>'}\n     <${d?"textarea":"input"} \n      type="${o}" name="${r}" id="${r}" \n      value="${i}">${d?`${i}</textarea>`:""}\n     <button class="submit symbol">✓</button>`,s.replaceWith(c),M().publish((t=>`rendered.view.edit.attribute.${t}`)(e),{type:e,id:n,attribute:r})})),M().subscribe("edit.belong",(function(t,{type:e,id:n,belongType:r,belongId:o}){dt();const i=`.edit-belong[data-belong-type="${r}"][data-type="${e}"][data-id="${n}"]`,a=document.querySelector(i),s=document.createElement("form");s.classList.add("edit-form"),s.dataset.type=e,s.dataset.id=n,s.dataset.belongType=r,s.innerHTML=`<button class="back">←</button>\n     <label for="belongId">Project</label>\n     <select name="belongId" id="belongId">\n      ${Ke[r+"sList"][r+"s"].map((t=>`<option value="${t.id}" ${t.id==o?"selected":""}>\n            ${t.title}\n          </option>`)).join("\n")}\n     </select>\n     <button class="submit">Change</button>`,a.replaceWith(s),M().publish((t=>`rendered.view.edit.belong.${t}`)(e),{type:e,id:n,belongType:r})}));const Te=2,ke=["Low","Medium","High"],Be=["Incomplete","Complete"],je=["text"],Se={project:[],todoItem:["description","notes"],checklistItem:[]},Ie={title:"name",todoItem:"to-do item",checklistItem:"checklist item"};M().subscribe(R,(function(t,e){const n=`[data-type="${e.type}"]${e.id?`[data-id="${e.id}"]`:""}${e.index?`[data-index="${e.index}"]`:""}`,r=document.querySelector(`form${n},.field${n}`);if(r){r.querySelectorAll(".error").forEach((t=>t.remove()));for(const t of e.errors){const e=r.querySelector(`input[name*="${t.attribute}"],textarea[name*="${t.attribute}"]`);if(!e)continue;const n=document.createElement("p"),i=(o=Ie[t.objType]||t.objType)[0].toUpperCase()+o.slice(1).toLowerCase(),a=Ie[t.objAttribute]||t.objAttribute;n.classList.add("error"),n.textContent=`${i} ${a} ${t.message}`,e.insertAdjacentElement("afterend",n)}var o}}));let $e=st;function Me(){document.body.innerHTML="",$e()}M().subscribe(nt,(function(t,e){$e=e})),M().subscribe(_,Me),M().subscribe(P,Me);const De=()=>document.querySelectorAll('input:not([type="checkbox"],[type="radio"]),textarea');function Oe(t,e,n={}){t.forEach((t=>{(t=We(t)).addEventListener("click",(t=>{t.preventDefault(),t.stopPropagation();const r=t.target.closest("button"),o=[r.dataset.type].concat((n.extraArgs||[]).map((t=>r.dataset[t])));M().publish("function"==typeof e?e(...o):e,r.dataset)}))}))}function Pe(t,e){document.querySelectorAll(".submit").forEach((n=>{(n=We(n)).addEventListener("click",(n=>{n.preventDefault();const r=n.target.closest("form"),o=e.map((t=>r.dataset[t]));M().publish(t(...o),Object.fromEntries(new FormData(r)))}))}))}function Le(t,e){De().forEach((n=>{const r=(n=We(n)).closest("form"),o=e.map((t=>r.dataset[t]));n.addEventListener("keydown",(e=>{"Enter"==e.key&&document.activeElement==n&&(e.preventDefault(),M().publish(t(...o),Object.fromEntries(new FormData(r))))}))}))}function We(t){const e=t.cloneNode(!0);return t.replaceWith(e),e}function qe(t){t.tempKeys=[...t.tempKeys||[],"tempKeys"],t.toStorage=function(){const t={};for(const e in this)"function"==typeof this[e]||this.tempKeys.includes(e)||(t[e]=this[e]);return t}}function Ue(t){function e(e,n,r=[]){return this.validations?.[e]?.forEach((o=>{o.fn(n)||r.push({objAttribute:e,objType:t.type,attribute:e,message:o.message})})),r}function n(t,e=[]){return t.forEach((t=>{t.obj.valid()||e.push(...t.obj.errors.map((e=>Object.assign({},e,{attribute:t.attrWrapper?t.attrWrapper(e.attribute):e.attribute}))))})),e}t.validations||={},t.associatedValidations||=[],t.errors||=[],t.tempKeys=[...t.tempKeys||[],"validations","associatedValidations","errors"],t.validate=function(r=t){this.errors=[];for(const n in r)this.errors.push(...e.call(this,n,t[n]));r.associatedValidations&&this.errors.push(...n(r.associatedValidations))},t.validateAssociated=function(t){this.errors=[],this.errors.push(...n(t))},t.valid=function(){return this.validate(),0==this.errors.length}}function Ne(t,e){e.forEach((e=>{t.validations[e]||=[],t.validations[e].push({fn:t=>t,message:"cannot be blank"})}))}function Ye(t){M().subscribe(X(t.type,t.id),(function(e,n){if(t.validate(n),t.errors.length)return M().publish(R,{type:t.type,id:t.id,errors:t.errors});for(const e in n)t[e]=n[e];M().publish(V(t.type,t.id))}))}function ze(t){const e=Be;M().subscribe(Q(t.type,t.id),(function(){t.status=e[(e.indexOf(t.status)+1)%e.length],M().publish(V(t.type,t.id))}))}function Ze(t){const e=ke;M().subscribe(G(t.type,t.id),(function(n,r){t.priority=e[Math.min(Math.max(e.indexOf(t.priority)+ +r.direction,0),e.length-1)],M().publish(V(t.type,t.id))}))}function Fe(t,e,n){const r=e+"s";function o(r,o=!1){const i=Object.values(r[e+"sCollectionData"]||{}).map((e=>n(Object.assign(e,{belongs:{[t.type]:t.id}})))),a=i.map((n=>({obj:n,attrWrapper:r=>`${e+"sCollectionData"}[${n[t.type+"Index"]}][${r}]`})));if(o){if(!t.valid())return;t.associatedValidations=a}if(t.validateAssociated(a),t.errors.length)return M().publish(R,{type:t.type,errors:t.errors});M().publish(H(e),{collectionItems:i})}t[r]||=[],M().subscribe(et(e),(function(e,n){const o=n?.[t.type]?.[t.id];if(o){t[r]=o.map((t=>t.id));const e=t.type+"Index";o.sort(((t,n)=>+t[e]-+n[e])).forEach(((t,n)=>t[e]=n+1))}M().publish(V(t.type,t.id))})),o(t,!0),delete t[e+"sCollectionData"],M().subscribe(U(t.type,t.id,e),(function(t,e){Qe(e),o(e)}))}function He(t,e){t.belongs||={[e]:0},Object.keys(t.belongs).forEach((e=>t.belongs[e]=+t.belongs[e]))}function Re(t,e){M().subscribe(J(t.type,t.id,e),(function(n,r){const o=t.belongs[e],i=+r.belongId;t.belongs[e]=i,M().publish(tt(t.type),{id:t.id,belongType:e,oldBelongId:o,newBelongId:i}),M().publish(V(t.type,t.id))}))}function Xe(t,e=[]){let n=1;const r=t.itemType+"s";function o(e){const n={};e.forEach((e=>{Object.entries(e.belongs||{}).forEach((([e,o])=>{n[e]||={},n[e][o]||=t[r].filter((t=>t.belongs[e]==o))}))})),M().publish(et(t.itemType),n)}t[r]||=e.map((e=>t.itemFactory(Object.assign({id:n++},e)))),t.withId=function(t){return this[r].find((e=>t==e.id))},t.withIds=function(t){return this[r].filter((e=>t.includes(e.id)))},t.toStorage=function(){return this[r].map((t=>t.toStorage()))},M().subscribe(tt(t.itemType),(function(e,n){const o=n.belongType,i=n.oldBelongId,a=n.newBelongId;t[r].find((t=>t.id==n.id)).belongs[o]=a,M().publish(et(t.itemType),{[o]:{[i]:t[r].filter((t=>t.belongs[o]==i)),[a]:t[r].filter((t=>t.belongs[o]==a))}})})),M().subscribe(q(t.itemType),(function(e,i){Qe(i);const a=t.itemFactory(Object.assign({id:n++},i));if(!a.valid())return M().publish(R,{type:t.itemType,errors:a.errors});t[r].unshift(a),o([a]),M().publish(K(t.itemType))})),M().subscribe(H(t.itemType),(function(e,i){o(i.collectionItems.map((e=>{const o=Object.assign({id:n++},e);return t[r].unshift(o),o}))),M().publish(K(t.itemType))})),M().subscribe(F(t.itemType),(function(e,n){if(0==n.id)return;const i=t[r].find((t=>t.id==n.id));t[r].splice(t[r].indexOf(i),1),o([i]),M().publish(K(t.itemType))})),o(t[r])}function Qe(t){const e=/(.+)\[(.+)\]/;let n;for(;(n=Object.keys(t).filter((t=>e.test(t)))).length>0;)n.forEach((n=>{const[r,o]=n.match(e).slice(1);t[r]||={},t[r][o]=t[n],delete t[n]}))}function Ge(t){const e=Object.assign({type:"project"},t);return[qe,Ue,Ye].forEach((t=>t(e))),Ne(e,["title"]),Fe(e,"todoItem"),e}function Je(t){const e=Object.assign({type:"checklistItem"},t);return[qe,Ue,Ye,ze].forEach((t=>t(e))),Ne(e,["title"]),He(e,"todoItem"),e}function _e(t){const e=Object.assign({type:"todoItem"},t);return[qe,Ue,Ye,ze,Ze].forEach((t=>t(e))),[He,Re].forEach((t=>t(e,"project"))),Ne(e,["title"]),Fe(e,"checklistItem",Je),e}M().subscribe("rendered.view",(function(){Oe(document.querySelectorAll(".index"),L),Oe(document.querySelectorAll(".new"),W),Oe(document.querySelectorAll(".show"),N),Oe(document.querySelectorAll(".hide"),Y),Oe(document.querySelectorAll(".edit-attribute"),z),Oe(document.querySelectorAll(".edit-belong"),Z),Oe(document.querySelectorAll(".update-status"),Q,{extraArgs:["id"]}),Oe(document.querySelectorAll(".update-priority"),G,{extraArgs:["id"]}),Oe(document.querySelectorAll(".destroy"),F),Oe(document.querySelectorAll(".back"),P)})),M().subscribe("rendered.view.new",(function(){Pe(q,["type"])})),M().subscribe(rt("project"),(function(){Le(q,["type"])})),M().subscribe("rendered.view.collection.new",(function(){Pe(U,["type","id","collectionType"]),Le(U,["type","id","collectionType"])})),M().subscribe("rendered.view.edit.attribute",(function(t,e){Pe(X,["type","id"]),Le(X,["type","id"]),De().forEach((t=>{const n=t.closest("form");Object.entries(e).every((([t,e])=>n.dataset[t]==e))&&function(t){t.focus(),"selectionStart"in t&&(t.selectionStart=t.selectionEnd=t.value.length)}(t),je.includes(t.type)&&t.addEventListener("focusout",(()=>M().publish(X(n.dataset.type,n.dataset.id),Object.fromEntries(new FormData(n)))))}))})),M().subscribe("rendered.view.edit.belong",(function(){Pe(J,["type","id","belongType"])}));const Ve={ProjectsList:function(t){const e={itemFactory:Ge,itemType:"project"};return Xe(e,t),e},TodoItemsList:function(t){const e={itemFactory:_e,itemType:"todoItem"};return Xe(e,t),e},ChecklistItemsList:function(t){const e={itemFactory:Je,itemType:"checklistItem"};return Xe(e,t),e}};let Ke={};M().subscribe(O,(function(t,e){for(const t in e)Ke[t]=Ve[t[0].toUpperCase()+t.slice(1)](e[t]);M().publish(_)})),M().publish(D)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,